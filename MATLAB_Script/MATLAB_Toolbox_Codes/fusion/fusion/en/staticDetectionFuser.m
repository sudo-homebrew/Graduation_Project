classdef staticDetectionFuser< matlab.System
%staticDetectionFuser Static fusion of synchronous sensor detections
%   fuser = staticDetectionFuser creates a default 3-sensor static detection
%   fuser with the ability to fuse angle-only detections sensors.
%
%   fuser = staticDetectionFuser('Name','Value') returns a staticDetectionFuser
%   object with its properties specified as name-value pair arguments.
%   Unspecified properties have default values. See the list of
%   properties below.
%
%   step method syntax:
%   compositeDets = step(fuser, detections)
%
%   [compositeDets, analysisInfo] = step(..) also provides a struct of
%   analysis information
%
%   detections is cell array of objectDetection objects from all the
%   sensors.
%
%   compositeDets is a cell array of objectDetection objects which are
%   generated by fusion of most likely detections from each sensor.
%
%   analysisInfo is a struct with the following fields:
%
%   CostMatrix  - An N-Dimensional cost matrix providing the cost of
%                 association of detections, where N is the number of
%                 sensors. The cost is the negative log-likelihood of
%                 the association and can be interpreted as the
%                 negative score of the track that will be generated by
%                 the fused measurement.
%
%   Assignments - A P-by-N list of assignments found, where P is the
%                 number of composite detections
%
%   FalseAlarms - A Q-by-1 list of indices of detections declared as
%                 false alarms by association
%
%   The step method does the following:
%   1. Calculates the cost of fusing or matching detections from each
%      sensor to one another.
%   2. Solves a 2-D or S-D assignment problem, where S is the number of
%      sensors, to associate or match detections from one
%      sensor to others.
%   3. Fuses the measurement and measurement covariance of the
%      associated detection tuples to generate a list of composite or
%      fused detections.
%   4. Unassigned detections from each sensor are declared as false
%      alarms.
%
%   Notes:
%   1. staticDetectionFuser assumes that all sensors are synchronous 
%      and generate detections at the same time.
%   2. staticDetectionFuser assumes that the sensors share a common
%      surveillance region and association of n detections out of m
%      sensors indicates m - n miss detections or false alarms.
%
%   System objects may be called directly like a function instead of
%   using the step method. For example, y = step(obj) and y = obj() are
%   equivalent.
%
%   staticDetectionFuser properties:
%
%   FusedSensorIndex        - SensorIndex of composite detections
%   MeasurementFusionFcn    - Function to fuse sensor detections
%   MeasurementFormat       - Format of the fused measurement
%   MeasurementFcn          - Measurement function for 'Custom'
%                             MeasurementFormat
%   MaxNumSensors           - Maximum number of sensors in the
%                             surveillance region
%   Volume                  - Volumes of the sensors' detection bins
%   DetectionProbability    - Probabilities of a target detection
%   FalseAlarmRate          - Rate of false positives generated by
%                             sensors
%   UseParallel             - Option to use parallel computing
%                             resources
%   TimeTolerance           - Absolute tolerance between time stamps of
%                             detections
%
%   staticDetectionFuser methods:
%   step      - Fuse detections from multiple sensors
%   release   - Allow property value and input characteristics changes
%   clone     - Create staticDetectionFuser object with same property values
%   isLocked  - Locked status (logical)
%   <a href="matlab:help matlab.System/reset   ">reset</a>     - reset the properties of staticDetectionFuser object
%
%   Example: Fuse angle-only detections from 3 ESM sensors.
%
%   % Load detections from the sensors stored in a MAT file
%   load('angleOnlyDetectionFusion.mat','detections');
%
%   % Visualize angle-only detections
%   % range for plotting the direction vector
%   rPlot = 5000;
%   plotData = zeros(3,numel(detections)*3);
%   for i = 1:numel(detections)
%       az = detections{i}.Measurement(1);
%       el = detections{i}.Measurement(2);
%       [xt,yt,zt] = sph2cart(deg2rad(az),deg2rad(el),rPlot);
%       % The sensor is co-located at platform center, therefore use
%       % the position from the second measurement parameter
%       originPos = detections{i}.MeasurementParameters(2).OriginPosition;
%       positionData(:,i) = originPos(:);
%       plotData(:,3*i-2) = [xt;yt;zt] + originPos(:);
%       plotData(:,3*i-1) = originPos(:);
%       plotData(:,3*i) = [NaN;NaN;NaN];
%   end
%   plot3(plotData(1,:),plotData(2,:),plotData(3,:),'r-');
%   hold on
%   plot3(positionData(1,:),positionData(2,:),positionData(3,:),'o','MarkerSize',12,'MarkerFaceColor','g');
%
%   % Create a staticDetectionFuser to fuse angle-only detections using the
%   % MeasurementFusionFcn 'triangulateLOS'
%   fuser = staticDetectionFuser('MeasurementFusionFcn','triangulateLOS','MaxNumSensors',3)
%
%   [fusedDetections, analysisInfo] = fuser(detections);
%   fusedPositions = zeros(3,numel(fusedDetections));
%   for i = 1:numel(fusedDetections)
%       fusedPositions(:,i) = fusedDetections{i}.Measurement;
%   end
%   plot3(fusedPositions(1,:),fusedPositions(2,:),fusedPositions(3,:),'ko','MarkerSize',12, 'MarkerFaceColor','k');
%   legend('Angle-only Detections','Sensor Positions', 'Fused Target Measurements');
%   title('Angle-only Detection Fusion'); xlabel('x [m]'); ylabel('y [m]')
%   view(2);
%
%   % Use the analysisInfo output to check the Assignments
%   analysisInfo.Assignments
%
%   See also: objectDetection, triangulateLOS

     
    %   Copyright 2018-2021 The MathWorks, Inc.

    methods
        function out=staticDetectionFuser
        end

        function out=assembleCompositeDetections(~) %#ok<STOUT>
        end

        function out=calcAssignments(~) %#ok<STOUT>
        end

        function out=calcCost(~) %#ok<STOUT>
            % Fuse minimum 2 sensors for a valid state estimation.
        end

        function out=fuseAssignedDetections(~) %#ok<STOUT>
        end

        function out=getBufferFromInput(~) %#ok<STOUT>
        end

        function out=getDetectionsInCell(~) %#ok<STOUT>
            % Returns a list of detections in a cell array.
        end

        function out=getPropertyGroups(~) %#ok<STOUT>
        end

        function out=isInactivePropertyImpl(~) %#ok<STOUT>
        end

        function out=isInputSizeMutableImpl(~) %#ok<STOUT>
        end

        function out=loadObjectImpl(~) %#ok<STOUT>
            % Set properties in object obj to values in structure s
        end

        function out=saveObjectImpl(~) %#ok<STOUT>
            % Set properties in structure s to values in object obj
        end

        function out=setupImpl(~) %#ok<STOUT>
            % setupImpl - Initialize properties based on the inputs.
        end

        function out=sortDetectionsBySource(~) %#ok<STOUT>
            % pDetections is a cell array of length n, where n is the
            % number of originating sensors and each element is a cell
            % array of objectDetections from that sensor.
        end

        function out=stepImpl(~) %#ok<STOUT>
            % step - fuser(detections)
        end

        function out=validatePropertiesImpl(~) %#ok<STOUT>
        end

        function out=validateTimeStamps(~) %#ok<STOUT>
            % Validate time stamps and set the fuser's current detection time.
        end

    end
    properties
        %DetectionProbability Probabilities of a target detection
        %   Specify the probability of detection of a target by each sensor
        %   as a scalar in the range (0,1). The DetectionProbability
        %   can be specified as a scalar or a vector of n-elements, where n
        %   is the number of sensors. If specified as a scalar, each sensor
        %   is assigned the same detection probability. The probability of
        %   detection is used in calculating the cost of fusing a one
        %   (target was detected) or zero (target was not detected)
        %   detections from each sensor.
        %
        %   Default - 0.9;
        DetectionProbability;

        %FalseAlarmRate - Rate of false positives generated by sensors
        %   Specify the rate at which false positives are reported by
        %   sensor in each bin. The FalseAlarmRate is used to calculate the
        %   likelihood of clutter in the detections reported by each
        %   sensor. FalseAlarmRate can be specified as a positive scalar or
        %   a vector of n-elements, where n is the number of sensors. If
        %   specified as a scalar, each sensor is assumed to report false
        %   alarms at the same rate.
        %
        %   Default - 1e-6
        FalseAlarmRate;

        %FusedSensorIndex SensorIndex of the composite detections
        %   Specify the SensorIndex of the composite detections reported by
        %   the staticDetectionFuser. This is used as the SensorIndex of
        %   the objectDetection objects returned in the output
        %
        %   Default - 1
        FusedSensorIndex;

        % MaxNumSensors Maximum number of sensors in the surveillance region
        %   Specify the maximum number of sensors in the surveillance
        %   region using a scalar value greater than 1.
        %
        %   Default - 3
        MaxNumSensors;

        % MeasurementFcn Measurement function for 'custom' MeasurementFormat.
        %   Specify the function name for the measurement function to
        %   transform fused measurements to sensor measurements. This
        %   function is only used if MeasurementFormat is set to 'Custom'.
        %   The function must have the following signature:
        %   sensorMeas = MeasurementFcn(fusedMeas,measParameters)
        MeasurementFcn;

        % MeasurementFormat Format of the fused measurement
        %   Specify the format of the fused measurement as one of the
        %   [{'Position'},|'Velocity'|'PositionAndVelocity'|'Custom'].
        %
        %   'Position' format refers that the fused measurement is the
        %   position of the target in global coordinate frame.
        %
        %   'Velocity' format refers that the fused measurement is the
        %   velocity of the target in global coordinate frame.
        %
        %   'PositionAndVelocity' format refers that the fused measurement is
        %   the position and velocity of the target in global coordinate
        %   frame defined according to constant velocity state format
        %   defined as: [x;vx;y;vy;z;vz]
        %
        %   'Custom' allows you to define a custom type of measurement.
        %   You must specify the MeasurementFcn to use this format.
        %
        %   Default - 'Position'
        MeasurementFormat;

        %MeasurementFusionFcn Function to fuse sensor detections
        %   Specify the function for fusing multiple detections as a
        %   function_handle, char array or string. The function fuses
        %   combinations of at most one detection from each sensor and
        %   returns the fused measurement and measurement noise.
        %
        %   [fusedMeasurement,fusedMeasurementNoise] = MEASUREMENTFUSIONFCN(detections)
        %
        %   fusedMeas       - a Nx1 vector of fused measurement
        %   fusedMeasNoise  - a NxN matrix of fused measurement noise
        %   detections      - a cell array of objectDetection objects
        %
        %   N can have the following values based on MeasurementFormat.
        %
        %   MeasurementFormat       | Allowed values 
        %   ------------------------+----------------
        %   Position                | 1, 2 and 3
        %   Velocity                | 1, 2 and 3
        %   PositionAndVelocity     | 2, 4 and 6
        %   Custom                  | any
        %
        %   When the input detections to the FusionFcn has a length less
        %   than NumSensors, it refers to a fused measurement from a target 
        %   which is not detected by the sensor missing from the input. 
        %   
        %   See also: objectDetection, triangulateLOS
        %
        %   Default: 'triangulateLOS'
        %   <a href = "matlab:edit('triangulateLOS')">Open triangulateLOS for more details.</a>
        MeasurementFusionFcn;

        %TimeTolerance Absolute tolerance between time stamps of detections
        %   The staticDetectionFuser assumes that sensors are synchronous.
        %   This property defines the allowed tolerance value between
        %   detection time-stamps.
        %   
        %   Default - 1e-6
        TimeTolerance;

        % UseParallel Option to use parallel computing resources
        %   The staticDetectionFuser calculates the cost of fusing
        %   detections from each sensor as an n-D assignment problem. The
        %   fuser spends most of the time in computing the cost matrix for
        %   the assignment problem. If Parallel Computing Toolbox is
        %   installed, this flag controls if the fuser can utilize the
        %   parallel pool of workers to compute the cost matrix.
        %
        %   Default - false
        UseParallel;

        %Volume Volume of the sensors' detection bin
        %   Specify the volume of each sensor's detection bin as positive
        %   scalar. The Volume can be specified as a scalar or a vector of
        %   n-elements, where n is the number of sensors. If specified as
        %   a scalar, each sensor is assigned the same volume. For example,
        %   if a sensor produces an angle-only measurement, which includes
        %   azimuth and elevation, the volume is defined as the solid angle
        %   subtended by one bin (single detector).
        %
        %   Default - 1e-2;
        Volume;

    end
end
