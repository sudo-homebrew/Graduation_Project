classdef trackingScenario < radarfusion.internal.scenario.Scenario
%trackingScenario Tracking scenario
%   trackingScenario is used to generate a tracking scenario consisting of 
%   platforms placed in a 3D environment. 
%
%   scene = trackingScenario creates an empty tracking scenario. Platforms
%   are located using Cartesian coordinates with kinematicTrajectory or
%   waypointTrajectory objects.
%
%   scene = trackingScenario('IsEarthCentered', true) creates an empty
%   Earth-centered tracking scenario. Platforms are located with respect to
%   the Earth using geodetic coordinates with geoTrajectory objects.
%
%   scene = trackingScenario('Name', Value) creates a trackingScenario
%   object by specifying its properties as name-value pair arguments.
%   Unspecified properties have default values. See the list of properties
%   below.
%
%   To use a trackingScenario, populate it with platforms by calling the
%   platform method. Once all desired platforms are created, you may
%   simulate by calling the advance method in a loop, or by calling the
%   record method to run the simulation all at once.
%
%   trackingScenario properties:
%
%   IsEarthCentered      - scenario earth frame assumption
%   StopTime             - time at which to stop simulation
%   UpdateRate           - simulation rate
%   InitialAdvance       - specify time behavior on first call to advance
%   SimulationTime       - current time of the simulation (Read Only)
%   SimulationStatus     - provides progress status of the simulation (Read Only)
%   Platforms            - a cell array of platforms in the simulation (Read Only)
%   SurfaceManager       - the manager for the scenario surface (Read Only)
%
%   trackingScenario methods:
%
%   platform          - create a new generic platform
%   groundSurface     - create a new surface object
%   advance           - move simulation forward by one update interval
%   restart           - restart simulation at beginning
%   record            - runs entire simulation, recording into a struct
%   emit              - obtain emissions generated by all the emitters
%   propagate         - propagate signals in the scenario
%   detect            - obtain detections generated by all the sensors
%   lidarDetect       - obtain point clouds from all lidar sensors
%   platformProfiles  - retrieve physical attributes of each platform
%   platformPoses     - retrieve positional information for each platform
%   <a href="matlab:help('coverageConfig')">coverageConfig</a>    - returns coverage configurations of sensors and emitters
%   perturb           - perturb the tracking scenario
%   clone             - create a copy of the tracking scenario
%
%   Example 1: Create a simple scenario
%   -------
%   % Create a new scenario
%   scene = trackingScenario;
%
%   % Create a platform
%   plat = platform(scene);
% 
%   % Follow a circular trajectory 1 m in radius completing in one second.
%   plat.Trajectory = waypointTrajectory('Waypoints', [0 1 0; 1 0 0; 0 -1 0; -1 0 0; 0 1 0], ...
%                       'TimeOfArrival', [0; 0.25; .5; .75; 1.0]);
% 
%   % Perform the simulation
%   while advance(scene)
%       p = pose(plat);
%       fprintf('Time = %f ', scene.SimulationTime);
%       fprintf('Position = [');
%       fprintf('%f ', p.Position);
%       fprintf('] Velocity = [');
%       fprintf('%f ', p.Velocity);
%       fprintf(']\n');
%   end
%
%   Example 2: Create an Earth centered scenario
%   -------
%   % Create a scenario
%   scene = trackingScenario('IsEarthCentered',true,'UpdateRate',0.01)
%
%   % Add a ground station located at Natick, Massachusetts: latitude 42.283, longitude -71.349
%   station = platform(scene, 'Position', [42.283, -71.349, 0]);
%
%   % Add an airplane flying towards Boston
%   plane = platform(scene, 'Trajectory',geoTrajectory([42.338, -80.1875, 10600 ;  42.390,-70.993,0],[0 3600]));
%
%   % Perform the simulation
%   while advance(scene)
%       p = pose(plane,'CoordinateSystem','Geodetic');
%       fprintf('Time = %f ', scene.SimulationTime);
%       fprintf('Position = [');
%       fprintf('%f ', p.Position);
%       fprintf('] Velocity = [');
%       fprintf('%f ', p.Velocity);
%       fprintf(']\n');
%   end
%   See also: theaterPlot, monteCarloRun, trackingScenarioRecording, fusion

%   Copyright 2018-2021 The MathWorks, Inc.

    methods
        function obj = trackingScenario(varargin)
            obj@radarfusion.internal.scenario.Scenario(varargin{:});
            obj.SurfaceManager = fusion.scenario.SurfaceManager(obj);
        end
        
        function s = groundSurface( obj,varargin )
            %groundSurface  Create a new surface object for a tracking scenario.
            %   srf = groundSurface(scenario) adds a new surface to the trackingScenario,
            %   scenario.
            %
            %   Ground surface objects define static height data in a
            %   scenario.
            %
            %   srf = groundSurface(scenario, Name, Value, ...) specifies additional
            %   name-value pair arguments described below:
            %
            %     Terrain           This is either a numeric matrix of
            %                       height data, or a string or character
            %                       vector containing the name of a DTED
            %                       file in the workspace. To specify a
            %                       DTED file, the scenario IsEarthCentered
            %                       property must be true. Missing data in
            %                       loaded DTED will automatically be
            %                       filled using linear interpolation. If a
            %                       matrix is used, the Boundary property
            %                       must be specified as well. Default=[].
            %
            %     Boundary          This is a 2-by-2 matrix of the form
            %                           [ MinX, MaxX; MinY, MaxY ]
            %                       which gives the rectangular boundary of
            %                       the surface. If a DTED file was
            %                       specified for the Terrain property,
            %                       only the section of the DTED data
            %                       within this bounding box will be used.
            %                       If IsEarthCentered is true, MinX/MaxX
            %                       are the latitude bounds of the surface
            %                       and MinY/MaxY are the longitude bounds
            %                       of the surface, otherwise they are the
            %                       X/Y bounds in the global cartesian
            %                       frame. By default, the surface is
            %                       unbounded.
            %
            %     ReferenceHeight   This is a scalar origin for surface
            %                       height data, such as specified through
            %                       the Terrain property. Default=0.
            %
            %   After creation, the following methods may be called on a ground surface:
            %
            %      <a href="matlab:help fusion.scenario.GroundSurface/height">height</a> Returns the height of the surface at a point
            %      <a href="matlab:help fusion.scenario.GroundSurface/occlusion">occlusion</a> Determine if two points are occluded by the surface
            %
            %   Example
            %   -------
            %   % Create a new scenario
            %   scene = trackingScenario;
            %
            %   % Create a 2 km^2 ground surface with a cosine-shaped hill
            %   [x,y] = meshgrid(linspace(-pi/2,pi/2,500));
            %   z = 200*cos(x).*cos(y);
            %   srf = groundSurface(scene,'Terrain',z,'Boundary',[-1e3 1e3; -1e3 1e3]);
            
            s = obj.SurfaceManager.groundSurface(varargin{:});
        end
    end

    methods (Access = protected)
        platform = generatePlatform(obj, varargin)
        rNext = oneRecordingStep(scene, fmt, coord, wEmitters, wSensors, wOcclusion)
        recording = generateRecording(obj, varargin)
    end
    
    methods (Static)
        newObj = loadobj(s)
    end
end
