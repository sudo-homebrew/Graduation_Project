function [rpts,numRpts,config] = stepImpl(obj,varargin)
%step  Generate statistical radar target reports
%   Target reports can be generated for three different types of detection
%   modes: 'Monostatic', 'Bistatic', and 'ESM'. To select a detection mode,
%   set the DetectionMode property to one of these three values.
%
%   RPTS = step(RDR,TPOSES,TIME) returns monostatic target reports RPTS
%   generated from the target pose struct array TPOSES for the current
%   simulation time TIME when the DetectionMode property is set to
%   'Monostatic' and the EmissionsInputPort and the InterferenceInputPort
%   properties are set to false. TPOSES is an L-element struct array of
%   target poses generated from the radar's platform in radarScenario. The
%   format of the target poses struct array is described in the help for
%   <a href="matlab:help('fusion.scenario.Platform/targetPoses')">targetPoses</a>.
%
%   RPTS = step(RDR,TPOSES,INT,TIME) returns monostatic target reports when
%   the InterferenceInputPort property is set to true. In this mode, INT is
%   an array or cell-array of radarEmission objects or an array of
%   equivalent structs whose interference is included in the generated
%   target report statistics.
%
%   RPTS = step(RDR,EMISS,TXCFG,TIME) returns monostatic target reports
%   when the EmissionsInputPort property is set to true. In this mode,
%   EMISS is an array or cell-array of radarEmission objects or an array of
%   equivalent structs and TXCFG is the configuration struct returned from
%   the radarEmitter associated with this monostatic sensor, see the
%   EmitterIndex property for information on how to associate an emitter
%   with a fusionRadarSensor.
%
%   RPTS = step(RDR,EMISS,TIME) returns ESM or bistatic target reports. The
%   type of target report returned is determined by the DetectionMode
%   property. In either of these modes, EMISS is an array or cell-array of
%   radarEmission objects or an array of equivalent structs which are
%   received by the sensor to generate the statistical target reports.
% 
%   TIME is the scenario's current simulation time in seconds. Reports are
%   only generated at simulation times corresponding to integer multiples
%   of the interval given by the reciprocal of the UpdateRate property.
%   When called at these intervals, ISVALIDTIME is true and the targets are
%   reported in RPTS, and the number of reports is returned in NUMRPTS. At
%   all other simulation times, ISVALIDTIME is false and NUMRPTS is zero
%   indicating that no valid reports were returned because the radar was
%   called at a simulation time that is inconsistent with the update rate
%   of the radar.
%
%   When you set the TargetReportFormat property to 'Detections' or
%   'Clustered detections', RPTS is returned as an M-by-1 cell array of
%   objectDetection objects, corresponding to the statistical detections
%   generated from the target poses TPOSES as well as false alarms
%   generated within the radar's observation limits in range, angle, and
%   range rate.
%
%   When you set the TargetReportFormat property to 'Tracks', RPTS is
%   returned as an N-by-1 array of objectTrack objects. The objectTrack
%   objects correspond to confirmed tracks which have been established over
%   multiple updates of the radar.
% 
%   [..., NUMRPTS, CONFIG] = step(...) optionally returns the number of
%   valid detections in the cell array DETS and the configuration of the
%   sensor at the current simulation time, CONFIG. The fields of the sensor
%   configuration structure are listed in the <a href="matlab:help fusion.internal.interfaces.DataStructures/coverageConfigStruct">coverageConfigStruct</a> help.
% 
%   When the fusionRadarSensor's MaxNumReportsSource property is set to
%   'Auto', NUMRPTS is always set to the length of RPTS. When
%   MaxNumReportsSource is set to 'Property', RPTS is an array with length
%   determined by the value of the MaxNumReports property. In this case,
%   the first NUMRPTS elements of RPTS hold valid target reports and the
%   remaining elements of RPTS are set to a default value.
%     
%   Reports can only be reported by fusionRadarSensor at time intervals
%   given by the reciprocal of the UpdateRate property. The IsValidTime
%   flag on the CONFIG structure is set to false when report updates are
%   requested at times that are not aligned with the configured update
%   rate.
%
%   fusionRadarSensor can be used to generate detections using poses and
%   profiles generated by <a href="matlab:help('trackingScenario')">trackingScenario</a>.
%
%   % EXAMPLE 1: Model an air traffic control tower
%
%   % Create targets.
%   tgt1 = struct( ...
%       'PlatformID', 1, ...
%       'Position', [0 -50e3 -1e3], ...
%       'Velocity', [0 900*1e3/3600 0]);
% 
%   tgt2 = struct( ...
%       'PlatformID', 2, ...
%       'Position', [20e3 0 -500], ...
%       'Velocity', [700*1e3/3600 0 0]);
% 
%   tgt3 = struct( ...
%       'PlatformID', 3, ...
%       'Position', [-20e3 0 -500], ...
%       'Velocity', [300*1e3/3600 0 0]);
% 
%   % Create an airport surveillance radar 15 meters above the ground
%   rpm = 12.5;
%   fov = [1.4;5]; % [azimuth; elevation]
% 
%   scanrate = rpm*360/60;  % deg/s
%   updaterate = scanrate/fov(1); % Hz
% 
%   sensor = fusionRadarSensor(1, 'Rotator', ...
%       'UpdateRate', updaterate, ...
%       'MountingLocation', [0 0 -15], ...
%       'MaxAzimuthScanRate', scanrate, ...
%       'FieldOfView', fov, ...
%       'AzimuthResolution', fov(1));
% 
%   % Generate detections from a full scan of the radar
%   simTime = 0;
%   detBuffer = {};
%   while true
%       [dets, numDets, config] = sensor([tgt1 tgt2 tgt3], simTime);
%       detBuffer = [detBuffer;dets]; %#ok<AGROW>
%   
%       % Is full scan complete?
%       if config.IsScanDone
%           break % yes
%       end
%       simTime = simTime+1/sensor.UpdateRate;
%   end
%   
%   radarPosition = [0, 0, 0];
%   tgtPositions = [tgt1.Position;tgt2.Position;tgt3.Position];
%
%   clrs = lines(3);
%
%   figure; hold on;
%   plot3(radarPosition(1),radarPosition(2),radarPosition(3),'Marker','s',...
%       'DisplayName','Radar','MarkerFaceColor',clrs(1,:),'LineStyle', 'none');
%
%   % Plot truth
%   plot3(tgtPositions(:,1),tgtPositions(:,2),tgtPositions(:,3),'Marker', '^',...
%       'DisplayName','Truth','MarkerFaceColor',clrs(2,:),'LineStyle', 'none');
%
%   % Plot detections
%   if ~isempty(detBuffer)
%       detPos = cellfun(@(d)d.Measurement(1:3),detBuffer,...
%           'UniformOutput',false);
%       detPos = cell2mat(detPos')';
%       plot3(detPos(:,1),detPos(:,2),detPos(:,3),'Marker', 'o',...
%           'DisplayName','Detections','MarkerFaceColor',clrs(3,:),'LineStyle', 'none');
%   end
%
%   xlabel('X(m)');
%   ylabel('Y(m)');
%   axis('equal');
%   legend();
%
%   % EXAMPLE 2: Model an array that scans in azimuth and elevation
%
%   % Create targets.
%   tgt1 = struct( ...
%       'PlatformID', 1, ...
%       'Position', [0 -50e3 -1e3], ...
%       'Speed', 900*1e3/3600);
%   
%   tgt2 = struct( ...
%       'PlatformID', 2, ...
%       'Position', [20e3 0 -500], ...
%       'Speed', 700*1e3/3600);
%   
%   tgt3 = struct( ...
%       'PlatformID', 3, ...
%       'Position', [-20e3 0 -500], ...
%       'Speed', 300*1e3/3600);
% 
%   % Create a radar which uses an electronic raster scan within a volume
%   % of interest south of the radar's location
%   sensor = fusionRadarSensor(1, 'Raster', 'ScanMode', 'Electronic',...
%               'MountingAngles', [180 0 0]);
% 
%   % Generate detections from a full scan of the radar
%   simTime = 0;
%   detBuffer = {};
%   while true
%       [dets, numDets, config] = sensor([tgt1 tgt2 tgt3], simTime);
%       detBuffer = [detBuffer;dets]; %#ok<AGROW>
%   
%       % Is full scan complete?
%       if config.IsScanDone
%           break % yes
%       end
%       simTime = simTime+1/sensor.UpdateRate;
%   end
% 
%   radarPosition = [0, 0, 0];
%   tgtPositions = [tgt1.Position;tgt2.Position;tgt3.Position];
%
%   clrs = lines(3);
%
%   figure; hold on;
%   plot3(radarPosition(1),radarPosition(2),radarPosition(3),'Marker','s',...
%       'DisplayName','Radar','MarkerFaceColor',clrs(1,:),'LineStyle', 'none');
%
%   % Plot truth
%   plot3(tgtPositions(:,1),tgtPositions(:,2),tgtPositions(:,3),'Marker', '^',...
%       'DisplayName','Truth','MarkerFaceColor',clrs(2,:),'LineStyle', 'none');
%
%   % Plot detections
%   if ~isempty(detBuffer)
%       detPos = cellfun(@(d)d.Measurement(1:3),detBuffer,...
%           'UniformOutput',false);
%       detPos = cell2mat(detPos')';
%       plot3(detPos(:,1),detPos(:,2),detPos(:,3),'Marker', 'o',...
%           'DisplayName','Detections','MarkerFaceColor',clrs(3,:),'LineStyle', 'none');
%   end
%
%   xlabel('X(m)');
%   ylabel('Y(m)');
%   axis('equal');
%   legend();
% 
%   See also: radarEmitter, radarChannel, objectDetection, objectTrack,
%   trackerGNN, trackingScenario

% Copyright 2020 The MathWorks, Inc.

%#codegen

[rpts,numRpts,config] = stepImpl@matlabshared.tracking.internal.fusion.EmissionsRadarDataGenerator(obj,varargin{:});
end

% LocalWords:  rpts numrpts isvalidtime rdr tposes zyx fov scanrate dets tp updaterate clrs
