function [data, info] = turtlebotSensorState
%TurtlebotSensorState gives an empty data for create_node/TurtlebotSensorState

% Copyright 2019-2020 The MathWorks, Inc.
data = struct();
data.MessageType = 'create_node/TurtlebotSensorState';
[data.OIMODEOFF, info.OIMODEOFF] = ros.internal.ros.messages.ros.default_type('uint8',1, 0);
[data.OIMODEPASSIVE, info.OIMODEPASSIVE] = ros.internal.ros.messages.ros.default_type('uint8',1, 1);
[data.OIMODESAFE, info.OIMODESAFE] = ros.internal.ros.messages.ros.default_type('uint8',1, 2);
[data.OIMODEFULL, info.OIMODEFULL] = ros.internal.ros.messages.ros.default_type('uint8',1, 3);
[data.REMOTELEFT, info.REMOTELEFT] = ros.internal.ros.messages.ros.default_type('uint8',1, 129);
[data.REMOTEFORWARD, info.REMOTEFORWARD] = ros.internal.ros.messages.ros.default_type('uint8',1, 130);
[data.REMOTERIGHT, info.REMOTERIGHT] = ros.internal.ros.messages.ros.default_type('uint8',1, 131);
[data.REMOTESPOT, info.REMOTESPOT] = ros.internal.ros.messages.ros.default_type('uint8',1, 132);
[data.REMOTEMAX, info.REMOTEMAX] = ros.internal.ros.messages.ros.default_type('uint8',1, 133);
[data.REMOTESMALL, info.REMOTESMALL] = ros.internal.ros.messages.ros.default_type('uint8',1, 134);
[data.REMOTEMEDIUM, info.REMOTEMEDIUM] = ros.internal.ros.messages.ros.default_type('uint8',1, 135);
[data.REMOTELARGE, info.REMOTELARGE] = ros.internal.ros.messages.ros.default_type('uint8',1, 136);
[data.REMOTECLEAN, info.REMOTECLEAN] = ros.internal.ros.messages.ros.default_type('uint8',1, 136);
[data.REMOTEPAUSE, info.REMOTEPAUSE] = ros.internal.ros.messages.ros.default_type('uint8',1, 137);
[data.REMOTEPOWER, info.REMOTEPOWER] = ros.internal.ros.messages.ros.default_type('uint8',1, 138);
[data.REMOTEARCLEFT, info.REMOTEARCLEFT] = ros.internal.ros.messages.ros.default_type('uint8',1, 139);
[data.REMOTEARCRIGHT, info.REMOTEARCRIGHT] = ros.internal.ros.messages.ros.default_type('uint8',1, 140);
[data.REMOTEDRIVESTOP, info.REMOTEDRIVESTOP] = ros.internal.ros.messages.ros.default_type('uint8',1, 141);
[data.REMOTESENDALL, info.REMOTESENDALL] = ros.internal.ros.messages.ros.default_type('uint8',1, 142);
[data.REMOTESEEKDOCK, info.REMOTESEEKDOCK] = ros.internal.ros.messages.ros.default_type('uint8',1, 143);
[data.REMOTERESERVED, info.REMOTERESERVED] = ros.internal.ros.messages.ros.default_type('uint8',1, 240);
[data.REMOTEFORCEFIELD, info.REMOTEFORCEFIELD] = ros.internal.ros.messages.ros.default_type('uint8',1, 242);
[data.REMOTEGREENBUOY, info.REMOTEGREENBUOY] = ros.internal.ros.messages.ros.default_type('uint8',1, 244);
[data.REMOTEGREENBUOYANDFORCEFIELD, info.REMOTEGREENBUOYANDFORCEFIELD] = ros.internal.ros.messages.ros.default_type('uint8',1, 246);
[data.REMOTEREDBUOY, info.REMOTEREDBUOY] = ros.internal.ros.messages.ros.default_type('uint8',1, 248);
[data.REMOTEREDBUOYANDFORCEFIELD, info.REMOTEREDBUOYANDFORCEFIELD] = ros.internal.ros.messages.ros.default_type('uint8',1, 250);
[data.REMOTEREDBUOYANDGREENBUOY, info.REMOTEREDBUOYANDGREENBUOY] = ros.internal.ros.messages.ros.default_type('uint8',1, 252);
[data.REMOTEREDBUOYANDGREENBUOYANDFORCEFIELD, info.REMOTEREDBUOYANDGREENBUOYANDFORCEFIELD] = ros.internal.ros.messages.ros.default_type('uint8',1, 254);
[data.REMOTENONE, info.REMOTENONE] = ros.internal.ros.messages.ros.default_type('uint8',1, 255);
[data.CHARGINGNOTCHARGING, info.CHARGINGNOTCHARGING] = ros.internal.ros.messages.ros.default_type('uint8',1, 0);
[data.CHARGINGCHARGINGRECOVERY, info.CHARGINGCHARGINGRECOVERY] = ros.internal.ros.messages.ros.default_type('uint8',1, 1);
[data.CHARGINGCHARGING, info.CHARGINGCHARGING] = ros.internal.ros.messages.ros.default_type('uint8',1, 2);
[data.CHARGINGTRICKLECHARGING, info.CHARGINGTRICKLECHARGING] = ros.internal.ros.messages.ros.default_type('uint8',1, 3);
[data.CHARGINGWAITING, info.CHARGINGWAITING] = ros.internal.ros.messages.ros.default_type('uint8',1, 4);
[data.CHARGINGCHARGINGERROR, info.CHARGINGCHARGINGERROR] = ros.internal.ros.messages.ros.default_type('uint8',1, 5);
[data.Header, info.Header] = ros.internal.ros.messages.std_msgs.header;
info.Header.MLdataType = 'struct';
[data.BumpsWheeldrops, info.BumpsWheeldrops] = ros.internal.ros.messages.ros.default_type('uint8',1);
[data.Wall, info.Wall] = ros.internal.ros.messages.ros.default_type('logical',1);
[data.CliffLeft, info.CliffLeft] = ros.internal.ros.messages.ros.default_type('logical',1);
[data.CliffFrontLeft, info.CliffFrontLeft] = ros.internal.ros.messages.ros.default_type('logical',1);
[data.CliffFrontRight, info.CliffFrontRight] = ros.internal.ros.messages.ros.default_type('logical',1);
[data.CliffRight, info.CliffRight] = ros.internal.ros.messages.ros.default_type('logical',1);
[data.VirtualWall, info.VirtualWall] = ros.internal.ros.messages.ros.default_type('logical',1);
[data.MotorOvercurrents, info.MotorOvercurrents] = ros.internal.ros.messages.ros.default_type('uint8',1);
[data.DirtDetectorLeft, info.DirtDetectorLeft] = ros.internal.ros.messages.ros.default_type('uint8',1);
[data.DirtDetectorRight, info.DirtDetectorRight] = ros.internal.ros.messages.ros.default_type('uint8',1);
[data.RemoteOpcode, info.RemoteOpcode] = ros.internal.ros.messages.ros.default_type('uint8',1);
[data.Buttons, info.Buttons] = ros.internal.ros.messages.ros.default_type('uint8',1);
[data.Distance, info.Distance] = ros.internal.ros.messages.ros.default_type('double',1);
[data.Angle, info.Angle] = ros.internal.ros.messages.ros.default_type('double',1);
[data.ChargingState, info.ChargingState] = ros.internal.ros.messages.ros.default_type('uint8',1);
[data.Voltage, info.Voltage] = ros.internal.ros.messages.ros.default_type('uint16',1);
[data.Current, info.Current] = ros.internal.ros.messages.ros.default_type('int16',1);
[data.Temperature, info.Temperature] = ros.internal.ros.messages.ros.default_type('int8',1);
[data.Charge, info.Charge] = ros.internal.ros.messages.ros.default_type('uint16',1);
[data.Capacity, info.Capacity] = ros.internal.ros.messages.ros.default_type('uint16',1);
[data.WallSignal, info.WallSignal] = ros.internal.ros.messages.ros.default_type('uint16',1);
[data.CliffLeftSignal, info.CliffLeftSignal] = ros.internal.ros.messages.ros.default_type('uint16',1);
[data.CliffFrontLeftSignal, info.CliffFrontLeftSignal] = ros.internal.ros.messages.ros.default_type('uint16',1);
[data.CliffFrontRightSignal, info.CliffFrontRightSignal] = ros.internal.ros.messages.ros.default_type('uint16',1);
[data.CliffRightSignal, info.CliffRightSignal] = ros.internal.ros.messages.ros.default_type('uint16',1);
[data.UserDigitalOutputs, info.UserDigitalOutputs] = ros.internal.ros.messages.ros.default_type('uint8',1);
[data.UserDigitalInputs, info.UserDigitalInputs] = ros.internal.ros.messages.ros.default_type('uint8',1);
[data.UserAnalogInput, info.UserAnalogInput] = ros.internal.ros.messages.ros.default_type('uint16',1);
[data.ChargingSourcesAvailable, info.ChargingSourcesAvailable] = ros.internal.ros.messages.ros.default_type('uint8',1);
[data.OiMode, info.OiMode] = ros.internal.ros.messages.ros.default_type('uint8',1);
[data.SongNumber, info.SongNumber] = ros.internal.ros.messages.ros.default_type('uint8',1);
[data.SongPlaying, info.SongPlaying] = ros.internal.ros.messages.ros.default_type('logical',1);
[data.NumberOfStreamPackets, info.NumberOfStreamPackets] = ros.internal.ros.messages.ros.default_type('uint8',1);
[data.RequestedVelocity, info.RequestedVelocity] = ros.internal.ros.messages.ros.default_type('int32',1);
[data.RequestedRadius, info.RequestedRadius] = ros.internal.ros.messages.ros.default_type('int32',1);
[data.RequestedRightVelocity, info.RequestedRightVelocity] = ros.internal.ros.messages.ros.default_type('int32',1);
[data.RequestedLeftVelocity, info.RequestedLeftVelocity] = ros.internal.ros.messages.ros.default_type('int32',1);
info.MessageType = 'create_node/TurtlebotSensorState';
info.constant = 0;
info.default = 0;
info.maxstrlen = NaN;
info.MaxLen = 1;
info.MinLen = 1;
info.MatPath = cell(1,78);
info.MatPath{1} = 'OI_MODE_OFF';
info.MatPath{2} = 'OI_MODE_PASSIVE';
info.MatPath{3} = 'OI_MODE_SAFE';
info.MatPath{4} = 'OI_MODE_FULL';
info.MatPath{5} = 'REMOTE_LEFT';
info.MatPath{6} = 'REMOTE_FORWARD';
info.MatPath{7} = 'REMOTE_RIGHT';
info.MatPath{8} = 'REMOTE_SPOT';
info.MatPath{9} = 'REMOTE_MAX';
info.MatPath{10} = 'REMOTE_SMALL';
info.MatPath{11} = 'REMOTE_MEDIUM';
info.MatPath{12} = 'REMOTE_LARGE';
info.MatPath{13} = 'REMOTE_CLEAN';
info.MatPath{14} = 'REMOTE_PAUSE';
info.MatPath{15} = 'REMOTE_POWER';
info.MatPath{16} = 'REMOTE_ARC_LEFT';
info.MatPath{17} = 'REMOTE_ARC_RIGHT';
info.MatPath{18} = 'REMOTE_DRIVE_STOP';
info.MatPath{19} = 'REMOTE_SEND_ALL';
info.MatPath{20} = 'REMOTE_SEEK_DOCK';
info.MatPath{21} = 'REMOTE_RESERVED';
info.MatPath{22} = 'REMOTE_FORCE_FIELD';
info.MatPath{23} = 'REMOTE_GREEN_BUOY';
info.MatPath{24} = 'REMOTE_GREEN_BUOY_AND_FORCE_FIELD';
info.MatPath{25} = 'REMOTE_RED_BUOY';
info.MatPath{26} = 'REMOTE_RED_BUOY_AND_FORCE_FIELD';
info.MatPath{27} = 'REMOTE_RED_BUOY_AND_GREEN_BUOY';
info.MatPath{28} = 'REMOTE_RED_BUOY_AND_GREEN_BUOY_AND_FORCE_FIELD';
info.MatPath{29} = 'REMOTE_NONE';
info.MatPath{30} = 'CHARGING_NOT_CHARGING';
info.MatPath{31} = 'CHARGING_CHARGING_RECOVERY';
info.MatPath{32} = 'CHARGING_CHARGING';
info.MatPath{33} = 'CHARGING_TRICKLE_CHARGING';
info.MatPath{34} = 'CHARGING_WAITING';
info.MatPath{35} = 'CHARGING_CHARGING_ERROR';
info.MatPath{36} = 'header';
info.MatPath{37} = 'header.seq';
info.MatPath{38} = 'header.stamp';
info.MatPath{39} = 'header.stamp.sec';
info.MatPath{40} = 'header.stamp.nsec';
info.MatPath{41} = 'header.frame_id';
info.MatPath{42} = 'bumps_wheeldrops';
info.MatPath{43} = 'wall';
info.MatPath{44} = 'cliff_left';
info.MatPath{45} = 'cliff_front_left';
info.MatPath{46} = 'cliff_front_right';
info.MatPath{47} = 'cliff_right';
info.MatPath{48} = 'virtual_wall';
info.MatPath{49} = 'motor_overcurrents';
info.MatPath{50} = 'dirt_detector_left';
info.MatPath{51} = 'dirt_detector_right';
info.MatPath{52} = 'remote_opcode';
info.MatPath{53} = 'buttons';
info.MatPath{54} = 'distance';
info.MatPath{55} = 'angle';
info.MatPath{56} = 'charging_state';
info.MatPath{57} = 'voltage';
info.MatPath{58} = 'current';
info.MatPath{59} = 'temperature';
info.MatPath{60} = 'charge';
info.MatPath{61} = 'capacity';
info.MatPath{62} = 'wall_signal';
info.MatPath{63} = 'cliff_left_signal';
info.MatPath{64} = 'cliff_front_left_signal';
info.MatPath{65} = 'cliff_front_right_signal';
info.MatPath{66} = 'cliff_right_signal';
info.MatPath{67} = 'user_digital_outputs';
info.MatPath{68} = 'user_digital_inputs';
info.MatPath{69} = 'user_analog_input';
info.MatPath{70} = 'charging_sources_available';
info.MatPath{71} = 'oi_mode';
info.MatPath{72} = 'song_number';
info.MatPath{73} = 'song_playing';
info.MatPath{74} = 'number_of_stream_packets';
info.MatPath{75} = 'requested_velocity';
info.MatPath{76} = 'requested_radius';
info.MatPath{77} = 'requested_right_velocity';
info.MatPath{78} = 'requested_left_velocity';
