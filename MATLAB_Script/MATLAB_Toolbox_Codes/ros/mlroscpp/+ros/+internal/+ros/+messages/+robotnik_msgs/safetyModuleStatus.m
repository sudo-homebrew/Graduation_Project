function [data, info] = safetyModuleStatus
%SafetyModuleStatus gives an empty data for robotnik_msgs/SafetyModuleStatus

% Copyright 2019-2020 The MathWorks, Inc.
data = struct();
data.MessageType = 'robotnik_msgs/SafetyModuleStatus';
[data.SAFE, info.SAFE] = ros.internal.ros.messages.ros.char('string',0);
[data.SAFE, info.SAFE] = ros.internal.ros.messages.ros.char('string',1,'safe');
[data.OVERRIDABLE, info.OVERRIDABLE] = ros.internal.ros.messages.ros.char('string',0);
[data.OVERRIDABLE, info.OVERRIDABLE] = ros.internal.ros.messages.ros.char('string',1,'overridable');
[data.EMERGENCY, info.EMERGENCY] = ros.internal.ros.messages.ros.char('string',0);
[data.EMERGENCY, info.EMERGENCY] = ros.internal.ros.messages.ros.char('string',1,'emergency');
[data.LASERMUTE, info.LASERMUTE] = ros.internal.ros.messages.ros.char('string',0);
[data.LASERMUTE, info.LASERMUTE] = ros.internal.ros.messages.ros.char('string',1,'laser_mute');
[data.SafetyMode, info.SafetyMode] = ros.internal.ros.messages.ros.char('string',0);
[data.Charging, info.Charging] = ros.internal.ros.messages.ros.default_type('logical',1);
[data.EmergencyStop, info.EmergencyStop] = ros.internal.ros.messages.ros.default_type('logical',1);
[data.SafetyStop, info.SafetyStop] = ros.internal.ros.messages.ros.default_type('logical',1);
[data.SafetyOverrided, info.SafetyOverrided] = ros.internal.ros.messages.ros.default_type('logical',1);
[data.LasersOnStandby, info.LasersOnStandby] = ros.internal.ros.messages.ros.default_type('logical',1);
[data.CurrentSpeed, info.CurrentSpeed] = ros.internal.ros.messages.ros.default_type('double',1);
[data.SpeedAtSafetyStop, info.SpeedAtSafetyStop] = ros.internal.ros.messages.ros.default_type('double',1);
[data.LasersMode, info.LasersMode] = ros.internal.ros.messages.robotnik_msgs.laserMode;
info.LasersMode.MLdataType = 'struct';
[data.LasersStatus, info.LasersStatus] = ros.internal.ros.messages.robotnik_msgs.laserStatus;
info.LasersStatus.MLdataType = 'struct';
info.LasersStatus.MaxLen = NaN;
info.LasersStatus.MinLen = 0;
data.LasersStatus = data.LasersStatus([],1);
info.MessageType = 'robotnik_msgs/SafetyModuleStatus';
info.constant = 0;
info.default = 0;
info.maxstrlen = NaN;
info.MaxLen = 1;
info.MinLen = 1;
info.MatPath = cell(1,26);
info.MatPath{1} = 'SAFE';
info.MatPath{2} = 'OVERRIDABLE';
info.MatPath{3} = 'EMERGENCY';
info.MatPath{4} = 'LASER_MUTE';
info.MatPath{5} = 'safety_mode';
info.MatPath{6} = 'charging';
info.MatPath{7} = 'emergency_stop';
info.MatPath{8} = 'safety_stop';
info.MatPath{9} = 'safety_overrided';
info.MatPath{10} = 'lasers_on_standby';
info.MatPath{11} = 'current_speed';
info.MatPath{12} = 'speed_at_safety_stop';
info.MatPath{13} = 'lasers_mode';
info.MatPath{14} = 'lasers_mode.STANDARD';
info.MatPath{15} = 'lasers_mode.DOCKING_STATION';
info.MatPath{16} = 'lasers_mode.CART';
info.MatPath{17} = 'lasers_mode.CART_DOCKING_CART';
info.MatPath{18} = 'lasers_mode.DOCKING_CART';
info.MatPath{19} = 'lasers_mode.INVALID';
info.MatPath{20} = 'lasers_mode.name';
info.MatPath{21} = 'lasers_status';
info.MatPath{22} = 'lasers_status.name';
info.MatPath{23} = 'lasers_status.detecting_obstacles';
info.MatPath{24} = 'lasers_status.contaminated';
info.MatPath{25} = 'lasers_status.free_warning';
info.MatPath{26} = 'lasers_status.warning_zones';
