function [data, info] = navdata_kalman_pressure
%navdata_kalman_pressure gives an empty data for ardrone_autonomy/navdata_kalman_pressure

% Copyright 2019-2020 The MathWorks, Inc.
data = struct();
data.MessageType = 'ardrone_autonomy/navdata_kalman_pressure';
[data.Header, info.Header] = ros.internal.ros.messages.std_msgs.header;
info.Header.MLdataType = 'struct';
[data.DroneTime, info.DroneTime] = ros.internal.ros.messages.ros.default_type('double',1);
[data.Tag, info.Tag] = ros.internal.ros.messages.ros.default_type('uint16',1);
[data.Size, info.Size] = ros.internal.ros.messages.ros.default_type('uint16',1);
[data.OffsetPressure, info.OffsetPressure] = ros.internal.ros.messages.ros.default_type('single',1);
[data.EstZ, info.EstZ] = ros.internal.ros.messages.ros.default_type('single',1);
[data.EstZdot, info.EstZdot] = ros.internal.ros.messages.ros.default_type('single',1);
[data.EstBiasPWM, info.EstBiasPWM] = ros.internal.ros.messages.ros.default_type('single',1);
[data.EstBiaisPression, info.EstBiaisPression] = ros.internal.ros.messages.ros.default_type('single',1);
[data.OffsetUS, info.OffsetUS] = ros.internal.ros.messages.ros.default_type('single',1);
[data.PredictionUS, info.PredictionUS] = ros.internal.ros.messages.ros.default_type('single',1);
[data.CovAlt, info.CovAlt] = ros.internal.ros.messages.ros.default_type('single',1);
[data.CovPWM, info.CovPWM] = ros.internal.ros.messages.ros.default_type('single',1);
[data.CovVitesse, info.CovVitesse] = ros.internal.ros.messages.ros.default_type('single',1);
[data.BoolEffetSol, info.BoolEffetSol] = ros.internal.ros.messages.ros.default_type('int32',1);
[data.SommeInno, info.SommeInno] = ros.internal.ros.messages.ros.default_type('single',1);
[data.FlagRejetUS, info.FlagRejetUS] = ros.internal.ros.messages.ros.default_type('int32',1);
[data.UMultisinus, info.UMultisinus] = ros.internal.ros.messages.ros.default_type('single',1);
[data.GazAltitude, info.GazAltitude] = ros.internal.ros.messages.ros.default_type('single',1);
[data.FlagMultisinus, info.FlagMultisinus] = ros.internal.ros.messages.ros.default_type('int32',1);
[data.FlagMultisinusDebut, info.FlagMultisinusDebut] = ros.internal.ros.messages.ros.default_type('int32',1);
info.MessageType = 'ardrone_autonomy/navdata_kalman_pressure';
info.constant = 0;
info.default = 0;
info.maxstrlen = NaN;
info.MaxLen = 1;
info.MinLen = 1;
info.MatPath = cell(1,26);
info.MatPath{1} = 'header';
info.MatPath{2} = 'header.seq';
info.MatPath{3} = 'header.stamp';
info.MatPath{4} = 'header.stamp.sec';
info.MatPath{5} = 'header.stamp.nsec';
info.MatPath{6} = 'header.frame_id';
info.MatPath{7} = 'drone_time';
info.MatPath{8} = 'tag';
info.MatPath{9} = 'size';
info.MatPath{10} = 'offset_pressure';
info.MatPath{11} = 'est_z';
info.MatPath{12} = 'est_zdot';
info.MatPath{13} = 'est_bias_PWM';
info.MatPath{14} = 'est_biais_pression';
info.MatPath{15} = 'offset_US';
info.MatPath{16} = 'prediction_US';
info.MatPath{17} = 'cov_alt';
info.MatPath{18} = 'cov_PWM';
info.MatPath{19} = 'cov_vitesse';
info.MatPath{20} = 'bool_effet_sol';
info.MatPath{21} = 'somme_inno';
info.MatPath{22} = 'flag_rejet_US';
info.MatPath{23} = 'u_multisinus';
info.MatPath{24} = 'gaz_altitude';
info.MatPath{25} = 'Flag_multisinus';
info.MatPath{26} = 'Flag_multisinus_debut';
