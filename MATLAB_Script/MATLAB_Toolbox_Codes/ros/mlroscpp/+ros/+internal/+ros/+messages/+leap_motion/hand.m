function [data, info] = hand
%Hand gives an empty data for leap_motion/Hand

% Copyright 2019-2020 The MathWorks, Inc.
data = struct();
data.MessageType = 'leap_motion/Hand';
[data.Header, info.Header] = ros.internal.ros.messages.std_msgs.header;
info.Header.MLdataType = 'struct';
[data.LmcHandId, info.LmcHandId] = ros.internal.ros.messages.ros.default_type('int32',1);
[data.IsPresent, info.IsPresent] = ros.internal.ros.messages.ros.default_type('logical',1);
[data.ValidGestures, info.ValidGestures] = ros.internal.ros.messages.ros.default_type('logical',1);
[data.TimeVisible, info.TimeVisible] = ros.internal.ros.messages.ros.default_type('single',1);
[data.Confidence, info.Confidence] = ros.internal.ros.messages.ros.default_type('single',1);
[data.Roll, info.Roll] = ros.internal.ros.messages.ros.default_type('single',1);
[data.Pitch, info.Pitch] = ros.internal.ros.messages.ros.default_type('single',1);
[data.Yaw, info.Yaw] = ros.internal.ros.messages.ros.default_type('single',1);
[data.GrabStrength, info.GrabStrength] = ros.internal.ros.messages.ros.default_type('single',1);
[data.PinchStrength, info.PinchStrength] = ros.internal.ros.messages.ros.default_type('single',1);
[data.PalmVelocity, info.PalmVelocity] = ros.internal.ros.messages.ros.default_type('single',NaN);
[data.PalmCenter, info.PalmCenter] = ros.internal.ros.messages.geometry_msgs.point;
info.PalmCenter.MLdataType = 'struct';
[data.PalmWidth, info.PalmWidth] = ros.internal.ros.messages.ros.default_type('single',1);
[data.SphereRadius, info.SphereRadius] = ros.internal.ros.messages.ros.default_type('single',1);
[data.SphereCenter, info.SphereCenter] = ros.internal.ros.messages.ros.default_type('single',NaN);
[data.WristPosition, info.WristPosition] = ros.internal.ros.messages.ros.default_type('single',NaN);
[data.ToString, info.ToString] = ros.internal.ros.messages.ros.char('string',0);
[data.FingerList, info.FingerList] = ros.internal.ros.messages.leap_motion.finger;
info.FingerList.MLdataType = 'struct';
info.FingerList.MaxLen = NaN;
info.FingerList.MinLen = 0;
data.FingerList = data.FingerList([],1);
[data.GestureList, info.GestureList] = ros.internal.ros.messages.leap_motion.gesture;
info.GestureList.MLdataType = 'struct';
info.GestureList.MaxLen = NaN;
info.GestureList.MinLen = 0;
data.GestureList = data.GestureList([],1);
info.MessageType = 'leap_motion/Hand';
info.constant = 0;
info.default = 0;
info.maxstrlen = NaN;
info.MaxLen = 1;
info.MinLen = 1;
info.MatPath = cell(1,79);
info.MatPath{1} = 'header';
info.MatPath{2} = 'header.seq';
info.MatPath{3} = 'header.stamp';
info.MatPath{4} = 'header.stamp.sec';
info.MatPath{5} = 'header.stamp.nsec';
info.MatPath{6} = 'header.frame_id';
info.MatPath{7} = 'lmc_hand_id';
info.MatPath{8} = 'is_present';
info.MatPath{9} = 'valid_gestures';
info.MatPath{10} = 'time_visible';
info.MatPath{11} = 'confidence';
info.MatPath{12} = 'roll';
info.MatPath{13} = 'pitch';
info.MatPath{14} = 'yaw';
info.MatPath{15} = 'grab_strength';
info.MatPath{16} = 'pinch_strength';
info.MatPath{17} = 'palm_velocity';
info.MatPath{18} = 'palm_center';
info.MatPath{19} = 'palm_center.x';
info.MatPath{20} = 'palm_center.y';
info.MatPath{21} = 'palm_center.z';
info.MatPath{22} = 'palm_width';
info.MatPath{23} = 'sphere_radius';
info.MatPath{24} = 'sphere_center';
info.MatPath{25} = 'wrist_position';
info.MatPath{26} = 'to_string';
info.MatPath{27} = 'finger_list';
info.MatPath{28} = 'finger_list.header';
info.MatPath{29} = 'finger_list.header.seq';
info.MatPath{30} = 'finger_list.header.stamp';
info.MatPath{31} = 'finger_list.header.stamp.sec';
info.MatPath{32} = 'finger_list.header.stamp.nsec';
info.MatPath{33} = 'finger_list.header.frame_id';
info.MatPath{34} = 'finger_list.lmc_finger_id';
info.MatPath{35} = 'finger_list.type';
info.MatPath{36} = 'finger_list.length';
info.MatPath{37} = 'finger_list.width';
info.MatPath{38} = 'finger_list.to_string';
info.MatPath{39} = 'finger_list.bone_list';
info.MatPath{40} = 'finger_list.bone_list.header';
info.MatPath{41} = 'finger_list.bone_list.header.seq';
info.MatPath{42} = 'finger_list.bone_list.header.stamp';
info.MatPath{43} = 'finger_list.bone_list.header.stamp.sec';
info.MatPath{44} = 'finger_list.bone_list.header.stamp.nsec';
info.MatPath{45} = 'finger_list.bone_list.header.frame_id';
info.MatPath{46} = 'finger_list.bone_list.type';
info.MatPath{47} = 'finger_list.bone_list.length';
info.MatPath{48} = 'finger_list.bone_list.width';
info.MatPath{49} = 'finger_list.bone_list.to_string';
info.MatPath{50} = 'finger_list.bone_list.bone_start';
info.MatPath{51} = 'finger_list.bone_list.bone_start.position';
info.MatPath{52} = 'finger_list.bone_list.bone_start.position.x';
info.MatPath{53} = 'finger_list.bone_list.bone_start.position.y';
info.MatPath{54} = 'finger_list.bone_list.bone_start.position.z';
info.MatPath{55} = 'finger_list.bone_list.bone_start.orientation';
info.MatPath{56} = 'finger_list.bone_list.bone_start.orientation.x';
info.MatPath{57} = 'finger_list.bone_list.bone_start.orientation.y';
info.MatPath{58} = 'finger_list.bone_list.bone_start.orientation.z';
info.MatPath{59} = 'finger_list.bone_list.bone_start.orientation.w';
info.MatPath{60} = 'finger_list.bone_list.bone_end';
info.MatPath{61} = 'finger_list.bone_list.bone_end.position';
info.MatPath{62} = 'finger_list.bone_list.bone_end.position.x';
info.MatPath{63} = 'finger_list.bone_list.bone_end.position.y';
info.MatPath{64} = 'finger_list.bone_list.bone_end.position.z';
info.MatPath{65} = 'finger_list.bone_list.bone_end.orientation';
info.MatPath{66} = 'finger_list.bone_list.bone_end.orientation.x';
info.MatPath{67} = 'finger_list.bone_list.bone_end.orientation.y';
info.MatPath{68} = 'finger_list.bone_list.bone_end.orientation.z';
info.MatPath{69} = 'finger_list.bone_list.bone_end.orientation.w';
info.MatPath{70} = 'finger_list.bone_list.center';
info.MatPath{71} = 'gesture_list';
info.MatPath{72} = 'gesture_list.lmc_gesture_id';
info.MatPath{73} = 'gesture_list.is_valid';
info.MatPath{74} = 'gesture_list.duration_us';
info.MatPath{75} = 'gesture_list.duration_s';
info.MatPath{76} = 'gesture_list.gesture_state';
info.MatPath{77} = 'gesture_list.gesture_type';
info.MatPath{78} = 'gesture_list.to_string';
info.MatPath{79} = 'gesture_list.pointable_ids';
