{% var unpackagedType = strsplit(MessageType,'/') %}
{% var unpackagedType = unpackagedType{end} %}
classdef {% unpackagedType %} < ros.Message
    %{% unpackagedType %} MATLAB implementation of {% MessageType %}
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.

{% var PRECISION = 100 %}
    properties (Constant)
        MessageType = '{% MessageType %}' % The ROS message type
    end

{% var whichFieldsMsgs = cellfun(@(f) isfield(msgFields.(f),'MessageType'),fieldNames) %}
{% var whichNonMsgFieldsConst = cellfun(@(f) ~( isscalar(msgFields.(f).constantValue) && isnumeric(msgFields.(f).constantValue) && isnan(msgFields.(f).constantValue) ), fieldNames(~whichFieldsMsgs))%}
{% var fieldNamesMsgs = fieldNames(whichFieldsMsgs) %}
{% var fieldClassGenMsgs = cellfun(@(f) msgFields.(f).msgInfo.msgClassGen,fieldNamesMsgs,'UniformOutput',false) %}
{% var fieldNamesNonMsgs = fieldNames(~whichFieldsMsgs) %}
{% var fieldNamesConst = fieldNamesNonMsgs(whichNonMsgFieldsConst) %}
{% var fieldNamesNonConstNonMsgs = fieldNamesNonMsgs(~whichNonMsgFieldsConst) %}
{% var classFieldsMsgs = cellfun(@(f) ros.internal.utilities.convertROSFieldsToClassFields(f,unpackagedType),fieldNamesMsgs,'UniformOutput',false) %}
{% var classFieldsConst = cellfun(@(f) ros.internal.utilities.convertROSFieldsToClassFields(f,unpackagedType),fieldNamesConst,'UniformOutput',false) %}
{% var classFieldsNonConstNonMsgs = cellfun(@(f) ros.internal.utilities.convertROSFieldsToClassFields(f,unpackagedType),fieldNamesNonConstNonMsgs,'UniformOutput',false) %}
    properties (Constant, Hidden)
        MD5Checksum = '{% MD5Checksum %}' % The MD5 Checksum of the message definition
{% if isempty(classFieldsMsgs) && isempty(classFieldsNonConstNonMsgs) %}
        PropertyList = {} % List of non-constant message properties
        ROSPropertyList = {} % List of non-constant ROS message properties
        PropertyMessageTypes = {} % Types of contained nested messages
{% endif %}
{% if ~isempty(classFieldsMsgs) || ~isempty(classFieldsNonConstNonMsgs) %}
        PropertyList = { {% sprintf('''%s'' ',classFieldsMsgs{:},classFieldsNonConstNonMsgs{:}) %}} % List of non-constant message properties
        ROSPropertyList = { {% sprintf('''%s'' ',fieldNamesMsgs{:},fieldNamesNonConstNonMsgs{:}) %}} % List of non-constant ROS message properties
{% var fieldNonMsgsPlaceholders = repmat({''},1,numel(fieldNamesNonConstNonMsgs)) %}
        PropertyMessageTypes = { {% sprintf('''%s'' ...\n            ',fieldClassGenMsgs{:},fieldNonMsgsPlaceholders{:}) %}} % Types of contained nested messages
{% endif %}
    end

    properties (Constant)
{% for i = numel(fieldNamesConst) %}
{% var field = msgFields.(fieldNamesConst{i}) %}
{% if isnumeric(field.constantValue) %}
        {% classFieldsConst{i} %} = {%field.MLdataType%}({% num2str(field.constantValue, PRECISION) %})
{% endif %}
{% if islogical(field.constantValue) %}
        {% classFieldsConst{i} %} = {%field.MLdataType%}({% num2str(field.constantValue) %});
{% endif %}
{% if ischar(field.constantValue) %}
        {% classFieldsConst{i} %} = '{% field.constantValue %}';
{% endif %}
{% if isequal(field.MLdataType,'string') && ~isnumeric(field.constantValue) && ~isempty(field.constantValue) %}
        {% classFieldsConst{i} %} = '{%feval('char',field.constantValue)%}';
{% endif %}
{% endfor %}
    end

    properties
{% for i = numel(fieldNamesMsgs) %}
{% var field = msgFields.(fieldNamesMsgs{i}) %}
        {% classFieldsMsgs{i} %}
{% endfor %}
{% for i = numel(fieldNamesNonConstNonMsgs) %}
        {% classFieldsNonConstNonMsgs{i} %}
{% endfor %}
    end

    methods
{% for i = numel(fieldNamesMsgs) %}
{% var field = msgFields.(fieldNamesMsgs{i}) %}
        function set.{% classFieldsMsgs{i} %}(obj, val)
{% if isnan(field.count) %}
            if isempty(val)
                % Allow empty [] input
                val = {% field.msgInfo.msgClassGen %}.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
{% endif %}
{% if field.count > 0 %}
            val = val(:);
            validAttributes = {'vector', 'numel', {% num2str(field.count) %}};
{% endif %}
{% if field.count <= 0 %}
            validAttributes = {'nonempty', 'scalar'};
{% endif %}
            validClasses = {'{% field.msgInfo.msgClassGen %}'};
            validateattributes(val, validClasses, validAttributes, '{% unpackagedType %}', '{% classFieldsMsgs{i} %}')
            obj.{% classFieldsMsgs{i} %} = val;
        end
{% endfor %}
{% for i = numel(fieldNamesNonConstNonMsgs) %}
{% var field = msgFields.(fieldNamesNonConstNonMsgs{i}) %}
        function set.{% classFieldsNonConstNonMsgs{i} %}(obj, val)

{% var actualMLdataType = field.MLdataType %}
{% if isequal(field.MLdataType,'string') %}
            val = convertStringsToChars(val);
{% if field.count <= 0 %}
{% var actualMLdataType = 'char' %}
            validClasses = {'char', 'string'};
{% endif %}
{% if isnan(field.count) || field.count > 0 %}
{% var actualMLdataType = 'cell' %}
            validClasses = {'cell', 'string'};
{% endif %}
{% endif %}
{% if isequal(field.MLdataType,'char') %}
            validClasses = {'char'};
{% endif %}
{% if isequal(field.MLdataType,'logical') %}
            validClasses = {'logical', 'numeric'};
{% endif %}
{% if ~any(strcmp(field.MLdataType,{'string', 'logical', 'char'})) %}
            validClasses = {'numeric'};
{% endif %}

{% if isnan(field.count) %}
            if isempty(val)
                % Allow empty [] input
                val = {% actualMLdataType %}.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
{% endif %}
{% if field.count > 0 %}
            val = val(:);
            validAttributes = {'vector', 'numel', {% num2str(field.count) %}};
{% endif %}
{% if field.count <= 0 %}
{% if isequal(field.MLdataType,'string') %}
            validAttributes = {};
{% endif %}
{% if ~isequal(field.MLdataType,'string') %}
            validAttributes = {'nonempty', 'scalar'};
{% endif %}
{% endif %}
            validateattributes(val, validClasses, validAttributes, '{% unpackagedType %}', '{% classFieldsNonConstNonMsgs{i} %}');
            obj.{% classFieldsNonConstNonMsgs{i} %} = {% actualMLdataType %}(val);
        end
{% endfor %}
    end

    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file

{% var thisClassName = strrep(msgInfo.msgClassGen, '.msg.', '.msggen.') %}
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = {% thisClassName %}.empty(0,1);
                return
            end

            % Create an empty message object
            obj = {% thisClassName %}(strObj);
        end
    end
end
