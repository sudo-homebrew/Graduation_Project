
class {%upper(msgInfo.pkgName)%}_EXPORT {%msgInfo.pkgName%}_msg_{%msgInfo.actionName%}{%msgInfo.defType%}_common : public MATLABROSMsgInterface<{%msgInfo.msgCppClassName%}> {
  public:
    virtual ~{%msgInfo.pkgName%}_msg_{%msgInfo.actionName%}{%msgInfo.defType%}_common(){}
    virtual void copy_from_struct({%msgInfo.msgCppClassName%}* msg, const matlab::data::Struct& arr, MultiLibLoader loader); 
    //----------------------------------------------------------------------------
    virtual MDArray_T get_arr(MDFactory_T& factory, const {%msgInfo.msgCppClassName%}* msg, MultiLibLoader loader, size_t size = 1);
};

  //----------------------------------------------------------------------------
  void {%msgInfo.pkgName%}_msg_{%msgInfo.actionName%}{%msgInfo.defType%}_common::copy_from_struct({%msgInfo.msgCppClassName%}* msg, const matlab::data::Struct& arr, MultiLibLoader loader) {
    {% for i = numel(fieldNames) %}
    {% var field = eval(['msgFields.', fieldNames{i}]) %}
    {% if isfield(field,'MLdataType') && ~field.inCopy && ((isnumeric(field.constantValue) && isnan(field.constantValue)) || (~isnumeric(field.constantValue) && isempty(field.constantValue))) %}
    try {
        //{%fieldNames{i}%}
        {% var pubLine = field.pubLine %}
        {% for ii = numel(pubLine) %}
        {% pubLine{ii} %}
        {% endfor %}
    } catch (matlab::data::InvalidFieldNameException&) {
        throw std::invalid_argument("Field '{%ros.internal.utilities.convertROSFieldsToClassFields(fieldNames{i},MessageType)%}' is missing.");
    } catch (matlab::Exception&) {
        throw std::invalid_argument("Field '{%ros.internal.utilities.convertROSFieldsToClassFields(fieldNames{i},MessageType)%}' is wrong type; expected a {%field.MLdataType%}.");
    }
    {% endif %}
    {% endfor %}
  }

  //----------------------------------------------------------------------------
  MDArray_T {%msgInfo.pkgName%}_msg_{%msgInfo.actionName%}{%msgInfo.defType%}_common::get_arr(MDFactory_T& factory, const {%msgInfo.msgCppClassName%}* msg,
       MultiLibLoader loader, size_t size) {
    {% subConstructor %}
    for(size_t ctr = 0; ctr < size; ctr++){
    outArray[ctr]["MessageType"] = factory.createCharArray("{%MessageType%}");
    {% for i = numel(fieldNames) %}
    {% var field = eval(['msgFields.', fieldNames{i}]) %}
    {% if ~isfield(field,'copyData') && isfield(field,'subConstructor') %}
    {% field.subConstructor %}
    {% endif %}
    {% if (~isfield(field,'inCopy') || ~field.inCopy) && isfield(field,'subLine') && ~isempty(field.subLine) %}
    // {% fieldNames{i} %}
    {% var subLine = field.subLine %}
    {% for ii = numel(subLine) %}
    {% subLine{ii} %}
    {% endfor %}
    {% endif %}
    {% endfor %}
    {% for i = numel(fieldNames) %}
    {% var field = eval(['msgFields.', fieldNames{end-i+1}]) %}
    {% if (~isfield(field,'inCopy') || ~field.inCopy) && isfield(field,'endSubLine') && ~isempty(field.endSubLine) %}
    {% var subLine = field.endSubLine %}
    {% for ii = numel(subLine) %}
    {% subLine{ii} %}
    {% endfor %}
    {% endif %}
    {% endfor %}
    }
    return std::move(outArray);
  }
