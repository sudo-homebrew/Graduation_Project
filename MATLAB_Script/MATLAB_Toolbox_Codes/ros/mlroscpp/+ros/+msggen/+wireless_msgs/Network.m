
classdef Network < ros.Message
    %Network MATLAB implementation of wireless_msgs/Network
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'wireless_msgs/Network' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '24b3a97e0e3dc13fb92e036725f91d11' % The MD5 Checksum of the message definition
        PropertyList = { 'Type' 'Essid' 'Mac' 'Mode' 'Frequency' 'Encryption' } % List of non-constant message properties
        ROSPropertyList = { 'type' 'essid' 'mac' 'mode' 'frequency' 'encryption' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Type
        Essid
        Mac
        Mode
        Frequency
        Encryption
    end
    methods
        function set.Type(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'Network', 'Type');
            obj.Type = char(val);
        end
        function set.Essid(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'Network', 'Essid');
            obj.Essid = char(val);
        end
        function set.Mac(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'Network', 'Mac');
            obj.Mac = char(val);
        end
        function set.Mode(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'Network', 'Mode');
            obj.Mode = char(val);
        end
        function set.Frequency(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'Network', 'Frequency');
            obj.Frequency = char(val);
        end
        function set.Encryption(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Network', 'Encryption');
            obj.Encryption = logical(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.wireless_msgs.Network.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.wireless_msgs.Network(strObj);
        end
    end
end
