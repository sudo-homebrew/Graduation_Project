
classdef ModelJointsState < ros.Message
    %ModelJointsState MATLAB implementation of pr2_gazebo_plugins/ModelJointsState
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'pr2_gazebo_plugins/ModelJointsState' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'f700a74958b6566fae4cd77fbb80ffd4' % The MD5 Checksum of the message definition
        PropertyList = { 'ModelPose' 'JointNames' 'JointPositions' } % List of non-constant message properties
        ROSPropertyList = { 'model_pose' 'joint_names' 'joint_positions' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.geometry_msgs.Pose' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        ModelPose
        JointNames
        JointPositions
    end
    methods
        function set.ModelPose(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.geometry_msgs.Pose.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.geometry_msgs.Pose'};
            validateattributes(val, validClasses, validAttributes, 'ModelJointsState', 'ModelPose')
            obj.ModelPose = val;
        end
        function set.JointNames(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'ModelJointsState', 'JointNames');
            obj.JointNames = cell(val);
        end
        function set.JointPositions(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'ModelJointsState', 'JointPositions');
            obj.JointPositions = double(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.pr2_gazebo_plugins.ModelJointsState.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.pr2_gazebo_plugins.ModelJointsState(strObj);
        end
    end
end
