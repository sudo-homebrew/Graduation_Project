
classdef ControllerStatistics < ros.Message
    %ControllerStatistics MATLAB implementation of controller_manager_msgs/ControllerStatistics
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'controller_manager_msgs/ControllerStatistics' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '697780c372c8d8597a1436d0e2ad3ba8' % The MD5 Checksum of the message definition
        PropertyList = { 'Timestamp' 'MaxTime' 'MeanTime' 'VarianceTime' 'TimeLastControlLoopOverrun' 'Name' 'Type' 'Running' 'NumControlLoopOverruns' } % List of non-constant message properties
        ROSPropertyList = { 'timestamp' 'max_time' 'mean_time' 'variance_time' 'time_last_control_loop_overrun' 'name' 'type' 'running' 'num_control_loop_overruns' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msg.Time' ...
            'ros.msg.Duration' ...
            'ros.msg.Duration' ...
            'ros.msg.Duration' ...
            'ros.msg.Time' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Timestamp
        MaxTime
        MeanTime
        VarianceTime
        TimeLastControlLoopOverrun
        Name
        Type
        Running
        NumControlLoopOverruns
    end
    methods
        function set.Timestamp(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msg.Time'};
            validateattributes(val, validClasses, validAttributes, 'ControllerStatistics', 'Timestamp')
            obj.Timestamp = val;
        end
        function set.MaxTime(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msg.Duration'};
            validateattributes(val, validClasses, validAttributes, 'ControllerStatistics', 'MaxTime')
            obj.MaxTime = val;
        end
        function set.MeanTime(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msg.Duration'};
            validateattributes(val, validClasses, validAttributes, 'ControllerStatistics', 'MeanTime')
            obj.MeanTime = val;
        end
        function set.VarianceTime(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msg.Duration'};
            validateattributes(val, validClasses, validAttributes, 'ControllerStatistics', 'VarianceTime')
            obj.VarianceTime = val;
        end
        function set.TimeLastControlLoopOverrun(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msg.Time'};
            validateattributes(val, validClasses, validAttributes, 'ControllerStatistics', 'TimeLastControlLoopOverrun')
            obj.TimeLastControlLoopOverrun = val;
        end
        function set.Name(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'ControllerStatistics', 'Name');
            obj.Name = char(val);
        end
        function set.Type(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'ControllerStatistics', 'Type');
            obj.Type = char(val);
        end
        function set.Running(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ControllerStatistics', 'Running');
            obj.Running = logical(val);
        end
        function set.NumControlLoopOverruns(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ControllerStatistics', 'NumControlLoopOverruns');
            obj.NumControlLoopOverruns = int32(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.controller_manager_msgs.ControllerStatistics.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.controller_manager_msgs.ControllerStatistics(strObj);
        end
    end
end
