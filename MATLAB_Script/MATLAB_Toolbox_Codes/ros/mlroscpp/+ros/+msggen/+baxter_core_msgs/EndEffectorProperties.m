
classdef EndEffectorProperties < ros.Message
    %EndEffectorProperties MATLAB implementation of baxter_core_msgs/EndEffectorProperties
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'baxter_core_msgs/EndEffectorProperties' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '21b83773ab9a35216d11e427573c76cc' % The MD5 Checksum of the message definition
        PropertyList = { 'Id' 'UiType' 'Manufacturer' 'Product' 'SerialNumber' 'HardwareRev' 'FirmwareRev' 'FirmwareDate' 'HasCalibration' 'ControlsGrip' 'SensesGrip' 'ReversesGrip' 'ControlsForce' 'SensesForce' 'ControlsPosition' 'SensesPosition' 'Properties' } % List of non-constant message properties
        ROSPropertyList = { 'id' 'ui_type' 'manufacturer' 'product' 'serial_number' 'hardware_rev' 'firmware_rev' 'firmware_date' 'has_calibration' 'controls_grip' 'senses_grip' 'reverses_grip' 'controls_force' 'senses_force' 'controls_position' 'senses_position' 'properties' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
        NOGRIPPER = uint8(0)
        SUCTIONCUPGRIPPER = uint8(1)
        ELECTRICGRIPPER = uint8(2)
        PASSIVEGRIPPER = uint8(3)
    end
    properties
        Id
        UiType
        Manufacturer
        Product
        SerialNumber
        HardwareRev
        FirmwareRev
        FirmwareDate
        HasCalibration
        ControlsGrip
        SensesGrip
        ReversesGrip
        ControlsForce
        SensesForce
        ControlsPosition
        SensesPosition
        Properties
    end
    methods
        function set.Id(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'EndEffectorProperties', 'Id');
            obj.Id = uint32(val);
        end
        function set.UiType(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'EndEffectorProperties', 'UiType');
            obj.UiType = uint8(val);
        end
        function set.Manufacturer(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'EndEffectorProperties', 'Manufacturer');
            obj.Manufacturer = char(val);
        end
        function set.Product(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'EndEffectorProperties', 'Product');
            obj.Product = char(val);
        end
        function set.SerialNumber(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'EndEffectorProperties', 'SerialNumber');
            obj.SerialNumber = char(val);
        end
        function set.HardwareRev(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'EndEffectorProperties', 'HardwareRev');
            obj.HardwareRev = char(val);
        end
        function set.FirmwareRev(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'EndEffectorProperties', 'FirmwareRev');
            obj.FirmwareRev = char(val);
        end
        function set.FirmwareDate(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'EndEffectorProperties', 'FirmwareDate');
            obj.FirmwareDate = char(val);
        end
        function set.HasCalibration(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'EndEffectorProperties', 'HasCalibration');
            obj.HasCalibration = logical(val);
        end
        function set.ControlsGrip(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'EndEffectorProperties', 'ControlsGrip');
            obj.ControlsGrip = logical(val);
        end
        function set.SensesGrip(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'EndEffectorProperties', 'SensesGrip');
            obj.SensesGrip = logical(val);
        end
        function set.ReversesGrip(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'EndEffectorProperties', 'ReversesGrip');
            obj.ReversesGrip = logical(val);
        end
        function set.ControlsForce(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'EndEffectorProperties', 'ControlsForce');
            obj.ControlsForce = logical(val);
        end
        function set.SensesForce(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'EndEffectorProperties', 'SensesForce');
            obj.SensesForce = logical(val);
        end
        function set.ControlsPosition(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'EndEffectorProperties', 'ControlsPosition');
            obj.ControlsPosition = logical(val);
        end
        function set.SensesPosition(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'EndEffectorProperties', 'SensesPosition');
            obj.SensesPosition = logical(val);
        end
        function set.Properties(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'EndEffectorProperties', 'Properties');
            obj.Properties = char(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.baxter_core_msgs.EndEffectorProperties.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.baxter_core_msgs.EndEffectorProperties(strObj);
        end
    end
end
