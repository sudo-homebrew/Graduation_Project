
classdef SolvePositionIKResponse < ros.Message
    %SolvePositionIKResponse MATLAB implementation of baxter_core_msgs/SolvePositionIKResponse
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'baxter_core_msgs/SolvePositionIKResponse' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'd9b0c2b3932e08421f5094cf62743b9f' % The MD5 Checksum of the message definition
        PropertyList = { 'Joints' 'IsValid' 'ResultType' } % List of non-constant message properties
        ROSPropertyList = { 'joints' 'isValid' 'result_type' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.sensor_msgs.JointState' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
        RESULTINVALID = uint8(0)
    end
    properties
        Joints
        IsValid
        ResultType
    end
    methods
        function set.Joints(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.sensor_msgs.JointState.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.sensor_msgs.JointState'};
            validateattributes(val, validClasses, validAttributes, 'SolvePositionIKResponse', 'Joints')
            obj.Joints = val;
        end
        function set.IsValid(obj, val)
            validClasses = {'logical', 'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = logical.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'SolvePositionIKResponse', 'IsValid');
            obj.IsValid = logical(val);
        end
        function set.ResultType(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = uint8.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'SolvePositionIKResponse', 'ResultType');
            obj.ResultType = uint8(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.baxter_core_msgs.SolvePositionIKResponse.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.baxter_core_msgs.SolvePositionIKResponse(strObj);
        end
    end
end
