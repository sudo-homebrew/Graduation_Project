
classdef NavigatorState < ros.Message
    %NavigatorState MATLAB implementation of baxter_core_msgs/NavigatorState
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'baxter_core_msgs/NavigatorState' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '680d121a1f16a32647298b292492fffd' % The MD5 Checksum of the message definition
        PropertyList = { 'ButtonNames' 'Buttons' 'Wheel' 'LightNames' 'Lights' } % List of non-constant message properties
        ROSPropertyList = { 'button_names' 'buttons' 'wheel' 'light_names' 'lights' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        ButtonNames
        Buttons
        Wheel
        LightNames
        Lights
    end
    methods
        function set.ButtonNames(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'NavigatorState', 'ButtonNames');
            obj.ButtonNames = cell(val);
        end
        function set.Buttons(obj, val)
            validClasses = {'logical', 'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = logical.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'NavigatorState', 'Buttons');
            obj.Buttons = logical(val);
        end
        function set.Wheel(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'NavigatorState', 'Wheel');
            obj.Wheel = uint8(val);
        end
        function set.LightNames(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'NavigatorState', 'LightNames');
            obj.LightNames = cell(val);
        end
        function set.Lights(obj, val)
            validClasses = {'logical', 'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = logical.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'NavigatorState', 'Lights');
            obj.Lights = logical(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.baxter_core_msgs.NavigatorState.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.baxter_core_msgs.NavigatorState(strObj);
        end
    end
end
