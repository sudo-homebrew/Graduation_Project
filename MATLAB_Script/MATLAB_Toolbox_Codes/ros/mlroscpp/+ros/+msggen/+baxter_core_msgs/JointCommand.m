
classdef JointCommand < ros.Message
    %JointCommand MATLAB implementation of baxter_core_msgs/JointCommand
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'baxter_core_msgs/JointCommand' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '19bfec8434dd568ab3c633d187c36f2e' % The MD5 Checksum of the message definition
        PropertyList = { 'Mode' 'Command' 'Names' } % List of non-constant message properties
        ROSPropertyList = { 'mode' 'command' 'names' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
        POSITIONMODE = int32(1)
        VELOCITYMODE = int32(2)
        TORQUEMODE = int32(3)
        RAWPOSITIONMODE = int32(4)
    end
    properties
        Mode
        Command
        Names
    end
    methods
        function set.Mode(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointCommand', 'Mode');
            obj.Mode = int32(val);
        end
        function set.Command(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'JointCommand', 'Command');
            obj.Command = double(val);
        end
        function set.Names(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'JointCommand', 'Names');
            obj.Names = cell(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.baxter_core_msgs.JointCommand.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.baxter_core_msgs.JointCommand(strObj);
        end
    end
end
