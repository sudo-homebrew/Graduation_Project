
classdef EndEffectorCommand < ros.Message
    %EndEffectorCommand MATLAB implementation of baxter_core_msgs/EndEffectorCommand
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'baxter_core_msgs/EndEffectorCommand' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'c003234e90416f2ca02ac7837c42cbb7' % The MD5 Checksum of the message definition
        PropertyList = { 'Id' 'Command' 'Args' 'Sender' 'Sequence' } % List of non-constant message properties
        ROSPropertyList = { 'id' 'command' 'args' 'sender' 'sequence' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
        CMDNOOP = 'no_op';
        CMDSET = 'set';
        CMDCONFIGURE = 'configure';
        CMDREBOOT = 'reboot';
        CMDRESET = 'reset';
        CMDCALIBRATE = 'calibrate';
        CMDCLEARCALIBRATION = 'clear_calibration';
        CMDPREPARETOGRIP = 'prepare_to_grip';
        CMDGRIP = 'grip';
        CMDRELEASE = 'release';
        CMDGO = 'go';
        CMDSTOP = 'stop';
    end
    properties
        Id
        Command
        Args
        Sender
        Sequence
    end
    methods
        function set.Id(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'EndEffectorCommand', 'Id');
            obj.Id = uint32(val);
        end
        function set.Command(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'EndEffectorCommand', 'Command');
            obj.Command = char(val);
        end
        function set.Args(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'EndEffectorCommand', 'Args');
            obj.Args = char(val);
        end
        function set.Sender(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'EndEffectorCommand', 'Sender');
            obj.Sender = char(val);
        end
        function set.Sequence(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'EndEffectorCommand', 'Sequence');
            obj.Sequence = uint32(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.baxter_core_msgs.EndEffectorCommand.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.baxter_core_msgs.EndEffectorCommand(strObj);
        end
    end
end
