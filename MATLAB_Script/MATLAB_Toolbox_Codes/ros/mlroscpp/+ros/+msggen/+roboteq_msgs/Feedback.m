
classdef Feedback < ros.Message
    %Feedback MATLAB implementation of roboteq_msgs/Feedback
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'roboteq_msgs/Feedback' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '2b31653367731d6254182bb2f9dbb81a' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'MotorCurrent' 'MotorPower' 'CommandedVelocity' 'MeasuredVelocity' 'MeasuredPosition' 'SupplyVoltage' 'SupplyCurrent' 'MotorTemperature' 'ChannelTemperature' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'motor_current' 'motor_power' 'commanded_velocity' 'measured_velocity' 'measured_position' 'supply_voltage' 'supply_current' 'motor_temperature' 'channel_temperature' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        MotorCurrent
        MotorPower
        CommandedVelocity
        MeasuredVelocity
        MeasuredPosition
        SupplyVoltage
        SupplyCurrent
        MotorTemperature
        ChannelTemperature
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'Feedback', 'Header')
            obj.Header = val;
        end
        function set.MotorCurrent(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Feedback', 'MotorCurrent');
            obj.MotorCurrent = single(val);
        end
        function set.MotorPower(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Feedback', 'MotorPower');
            obj.MotorPower = single(val);
        end
        function set.CommandedVelocity(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Feedback', 'CommandedVelocity');
            obj.CommandedVelocity = single(val);
        end
        function set.MeasuredVelocity(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Feedback', 'MeasuredVelocity');
            obj.MeasuredVelocity = single(val);
        end
        function set.MeasuredPosition(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Feedback', 'MeasuredPosition');
            obj.MeasuredPosition = single(val);
        end
        function set.SupplyVoltage(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Feedback', 'SupplyVoltage');
            obj.SupplyVoltage = single(val);
        end
        function set.SupplyCurrent(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Feedback', 'SupplyCurrent');
            obj.SupplyCurrent = single(val);
        end
        function set.MotorTemperature(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Feedback', 'MotorTemperature');
            obj.MotorTemperature = single(val);
        end
        function set.ChannelTemperature(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Feedback', 'ChannelTemperature');
            obj.ChannelTemperature = single(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.roboteq_msgs.Feedback.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.roboteq_msgs.Feedback(strObj);
        end
    end
end
