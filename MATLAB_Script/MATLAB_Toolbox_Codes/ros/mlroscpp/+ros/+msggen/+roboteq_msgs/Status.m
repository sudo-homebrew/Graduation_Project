
classdef Status < ros.Message
    %Status MATLAB implementation of roboteq_msgs/Status
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'roboteq_msgs/Status' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'd3a9b223fdfb0968255e25e5a859ac29' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'Fault' 'Status_' 'IcTemperature' 'InternalVoltage' 'AdcVoltage' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'fault' 'status' 'ic_temperature' 'internal_voltage' 'adc_voltage' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
        FAULTOVERHEAT = uint8(1)
        FAULTOVERVOLTAGE = uint8(2)
        FAULTUNDERVOLTAGE = uint8(4)
        FAULTSHORTCIRCUIT = uint8(8)
        FAULTEMERGENCYSTOP = uint8(16)
        FAULTSEPEXEXCITATIONFAULT = uint8(32)
        FAULTMOSFETFAILURE = uint8(64)
        FAULTSTARTUPCONFIGFAULT = uint8(128)
        STATUSSERIALMODE = uint8(1)
        STATUSPULSEMODE = uint8(2)
        STATUSANALOGMODE = uint8(4)
        STATUSPOWERSTAGEOFF = uint8(8)
        STATUSSTALLDETECTED = uint8(16)
        STATUSATLIMIT = uint8(32)
        STATUSMICROBASICSCRIPTRUNNING = uint8(128)
    end
    properties
        Header
        Fault
        Status_
        IcTemperature
        InternalVoltage
        AdcVoltage
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'Status', 'Header')
            obj.Header = val;
        end
        function set.Fault(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Status', 'Fault');
            obj.Fault = uint8(val);
        end
        function set.Status_(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Status', 'Status_');
            obj.Status_ = uint8(val);
        end
        function set.IcTemperature(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Status', 'IcTemperature');
            obj.IcTemperature = single(val);
        end
        function set.InternalVoltage(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Status', 'InternalVoltage');
            obj.InternalVoltage = single(val);
        end
        function set.AdcVoltage(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Status', 'AdcVoltage');
            obj.AdcVoltage = single(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.roboteq_msgs.Status.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.roboteq_msgs.Status(strObj);
        end
    end
end
