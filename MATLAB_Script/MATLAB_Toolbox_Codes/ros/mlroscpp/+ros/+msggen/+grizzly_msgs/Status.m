
classdef Status < ros.Message
    %Status MATLAB implementation of grizzly_msgs/Status
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'grizzly_msgs/Status' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'b7c26be1e34a0256ce732022c187908d' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'McuUptime' 'ConnectionUptime' 'HardwareId' 'McuTemperature' 'StopEngaged' 'ExternalStopEngaged' 'MeasuredBattery' 'Measured48v' 'Measured24v' 'Measured12v' 'CurrentBattery' 'Current48v' 'Current24v' 'Current12v' 'CurrentComputer' 'CurrentBatteryPeak' 'TotalPowerConsumed' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'mcu_uptime' 'connection_uptime' 'hardware_id' 'mcu_temperature' 'stop_engaged' 'external_stop_engaged' 'measured_battery' 'measured_48v' 'measured_24v' 'measured_12v' 'current_battery' 'current_48v' 'current_24v' 'current_12v' 'current_computer' 'current_battery_peak' 'total_power_consumed' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            'ros.msg.Duration' ...
            'ros.msg.Duration' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        McuUptime
        ConnectionUptime
        HardwareId
        McuTemperature
        StopEngaged
        ExternalStopEngaged
        MeasuredBattery
        Measured48v
        Measured24v
        Measured12v
        CurrentBattery
        Current48v
        Current24v
        Current12v
        CurrentComputer
        CurrentBatteryPeak
        TotalPowerConsumed
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'Status', 'Header')
            obj.Header = val;
        end
        function set.McuUptime(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msg.Duration'};
            validateattributes(val, validClasses, validAttributes, 'Status', 'McuUptime')
            obj.McuUptime = val;
        end
        function set.ConnectionUptime(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msg.Duration'};
            validateattributes(val, validClasses, validAttributes, 'Status', 'ConnectionUptime')
            obj.ConnectionUptime = val;
        end
        function set.HardwareId(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'Status', 'HardwareId');
            obj.HardwareId = char(val);
        end
        function set.McuTemperature(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Status', 'McuTemperature');
            obj.McuTemperature = single(val);
        end
        function set.StopEngaged(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Status', 'StopEngaged');
            obj.StopEngaged = logical(val);
        end
        function set.ExternalStopEngaged(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Status', 'ExternalStopEngaged');
            obj.ExternalStopEngaged = logical(val);
        end
        function set.MeasuredBattery(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Status', 'MeasuredBattery');
            obj.MeasuredBattery = single(val);
        end
        function set.Measured48v(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Status', 'Measured48v');
            obj.Measured48v = single(val);
        end
        function set.Measured24v(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Status', 'Measured24v');
            obj.Measured24v = single(val);
        end
        function set.Measured12v(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Status', 'Measured12v');
            obj.Measured12v = single(val);
        end
        function set.CurrentBattery(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Status', 'CurrentBattery');
            obj.CurrentBattery = single(val);
        end
        function set.Current48v(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Status', 'Current48v');
            obj.Current48v = single(val);
        end
        function set.Current24v(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Status', 'Current24v');
            obj.Current24v = single(val);
        end
        function set.Current12v(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Status', 'Current12v');
            obj.Current12v = single(val);
        end
        function set.CurrentComputer(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Status', 'CurrentComputer');
            obj.CurrentComputer = single(val);
        end
        function set.CurrentBatteryPeak(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Status', 'CurrentBatteryPeak');
            obj.CurrentBatteryPeak = single(val);
        end
        function set.TotalPowerConsumed(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Status', 'TotalPowerConsumed');
            obj.TotalPowerConsumed = double(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.grizzly_msgs.Status.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.grizzly_msgs.Status(strObj);
        end
    end
end
