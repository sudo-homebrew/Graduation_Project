
classdef Object < ros.Message
    %Object MATLAB implementation of grasping_msgs/Object
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'grasping_msgs/Object' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '0770e300363d18954f6fd25963e4d536' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'Properties' 'PointCluster' 'Primitives' 'PrimitivePoses' 'Meshes' 'MeshPoses' 'Surface' 'Name' 'SupportSurface' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'properties' 'point_cluster' 'primitives' 'primitive_poses' 'meshes' 'mesh_poses' 'surface' 'name' 'support_surface' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            'ros.msggen.grasping_msgs.ObjectProperty' ...
            'ros.msg.sensor_msgs.PointCloud2' ...
            'ros.msggen.shape_msgs.SolidPrimitive' ...
            'ros.msggen.geometry_msgs.Pose' ...
            'ros.msggen.shape_msgs.Mesh' ...
            'ros.msggen.geometry_msgs.Pose' ...
            'ros.msggen.shape_msgs.Plane' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        Properties
        PointCluster
        Primitives
        PrimitivePoses
        Meshes
        MeshPoses
        Surface
        Name
        SupportSurface
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'Object', 'Header')
            obj.Header = val;
        end
        function set.Properties(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.grasping_msgs.ObjectProperty.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.grasping_msgs.ObjectProperty'};
            validateattributes(val, validClasses, validAttributes, 'Object', 'Properties')
            obj.Properties = val;
        end
        function set.PointCluster(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msg.sensor_msgs.PointCloud2'};
            validateattributes(val, validClasses, validAttributes, 'Object', 'PointCluster')
            obj.PointCluster = val;
        end
        function set.Primitives(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.shape_msgs.SolidPrimitive.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.shape_msgs.SolidPrimitive'};
            validateattributes(val, validClasses, validAttributes, 'Object', 'Primitives')
            obj.Primitives = val;
        end
        function set.PrimitivePoses(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.geometry_msgs.Pose.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.geometry_msgs.Pose'};
            validateattributes(val, validClasses, validAttributes, 'Object', 'PrimitivePoses')
            obj.PrimitivePoses = val;
        end
        function set.Meshes(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.shape_msgs.Mesh.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.shape_msgs.Mesh'};
            validateattributes(val, validClasses, validAttributes, 'Object', 'Meshes')
            obj.Meshes = val;
        end
        function set.MeshPoses(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.geometry_msgs.Pose.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.geometry_msgs.Pose'};
            validateattributes(val, validClasses, validAttributes, 'Object', 'MeshPoses')
            obj.MeshPoses = val;
        end
        function set.Surface(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.shape_msgs.Plane'};
            validateattributes(val, validClasses, validAttributes, 'Object', 'Surface')
            obj.Surface = val;
        end
        function set.Name(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'Object', 'Name');
            obj.Name = char(val);
        end
        function set.SupportSurface(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'Object', 'SupportSurface');
            obj.SupportSurface = char(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.grasping_msgs.Object.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.grasping_msgs.Object(strObj);
        end
    end
end
