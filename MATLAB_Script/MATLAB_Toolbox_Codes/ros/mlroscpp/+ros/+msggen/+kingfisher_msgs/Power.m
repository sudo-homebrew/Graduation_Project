
classdef Power < ros.Message
    %Power MATLAB implementation of kingfisher_msgs/Power
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'kingfisher_msgs/Power' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '389bd7517ed1c204bfed6bdd7ae0dd1d' % The MD5 Checksum of the message definition
        PropertyList = { 'Uptime' 'UserPower' 'UserPowerTotal' 'MotorPowerTotal' } % List of non-constant message properties
        ROSPropertyList = { 'uptime' 'user_power' 'user_power_total' 'motor_power_total' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msg.Duration' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Uptime
        UserPower
        UserPowerTotal
        MotorPowerTotal
    end
    methods
        function set.Uptime(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msg.Duration'};
            validateattributes(val, validClasses, validAttributes, 'Power', 'Uptime')
            obj.Uptime = val;
        end
        function set.UserPower(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Power', 'UserPower');
            obj.UserPower = single(val);
        end
        function set.UserPowerTotal(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Power', 'UserPowerTotal');
            obj.UserPowerTotal = single(val);
        end
        function set.MotorPowerTotal(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Power', 'MotorPowerTotal');
            obj.MotorPowerTotal = single(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.kingfisher_msgs.Power.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.kingfisher_msgs.Power(strObj);
        end
    end
end
