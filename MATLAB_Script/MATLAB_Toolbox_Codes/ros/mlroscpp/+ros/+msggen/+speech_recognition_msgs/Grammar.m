
classdef Grammar < ros.Message
    %Grammar MATLAB implementation of speech_recognition_msgs/Grammar
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'speech_recognition_msgs/Grammar' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'a8653cae3429492cb944a813429e7151' % The MD5 Checksum of the message definition
        PropertyList = { 'Rules' 'Vocabularies' 'Name' 'Categories' } % List of non-constant message properties
        ROSPropertyList = { 'rules' 'vocabularies' 'name' 'categories' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.speech_recognition_msgs.PhraseRule' ...
            'ros.msggen.speech_recognition_msgs.Vocabulary' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Rules
        Vocabularies
        Name
        Categories
    end
    methods
        function set.Rules(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.speech_recognition_msgs.PhraseRule.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.speech_recognition_msgs.PhraseRule'};
            validateattributes(val, validClasses, validAttributes, 'Grammar', 'Rules')
            obj.Rules = val;
        end
        function set.Vocabularies(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.speech_recognition_msgs.Vocabulary.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.speech_recognition_msgs.Vocabulary'};
            validateattributes(val, validClasses, validAttributes, 'Grammar', 'Vocabularies')
            obj.Vocabularies = val;
        end
        function set.Name(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'Grammar', 'Name');
            obj.Name = char(val);
        end
        function set.Categories(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'Grammar', 'Categories');
            obj.Categories = cell(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.speech_recognition_msgs.Grammar.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.speech_recognition_msgs.Grammar(strObj);
        end
    end
end
