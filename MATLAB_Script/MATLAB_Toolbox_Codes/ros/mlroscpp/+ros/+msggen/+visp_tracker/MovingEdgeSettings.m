
classdef MovingEdgeSettings < ros.Message
    %MovingEdgeSettings MATLAB implementation of visp_tracker/MovingEdgeSettings
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'visp_tracker/MovingEdgeSettings' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '4e8f98b7dec6ffa099529044b3472486' % The MD5 Checksum of the message definition
        PropertyList = { 'MaskSize' 'Range' 'Threshold' 'Mu1' 'Mu2' 'SampleStep' 'Strip' 'FirstThreshold' } % List of non-constant message properties
        ROSPropertyList = { 'mask_size' 'range' 'threshold' 'mu1' 'mu2' 'sample_step' 'strip' 'first_threshold' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        MaskSize
        Range
        Threshold
        Mu1
        Mu2
        SampleStep
        Strip
        FirstThreshold
    end
    methods
        function set.MaskSize(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MovingEdgeSettings', 'MaskSize');
            obj.MaskSize = int64(val);
        end
        function set.Range(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MovingEdgeSettings', 'Range');
            obj.Range = int64(val);
        end
        function set.Threshold(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MovingEdgeSettings', 'Threshold');
            obj.Threshold = double(val);
        end
        function set.Mu1(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MovingEdgeSettings', 'Mu1');
            obj.Mu1 = double(val);
        end
        function set.Mu2(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MovingEdgeSettings', 'Mu2');
            obj.Mu2 = double(val);
        end
        function set.SampleStep(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MovingEdgeSettings', 'SampleStep');
            obj.SampleStep = int64(val);
        end
        function set.Strip(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MovingEdgeSettings', 'Strip');
            obj.Strip = int64(val);
        end
        function set.FirstThreshold(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MovingEdgeSettings', 'FirstThreshold');
            obj.FirstThreshold = double(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.visp_tracker.MovingEdgeSettings.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.visp_tracker.MovingEdgeSettings(strObj);
        end
    end
end
