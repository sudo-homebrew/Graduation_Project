
classdef ConcertClient < ros.Message
    %ConcertClient MATLAB implementation of concert_msgs/ConcertClient
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'concert_msgs/ConcertClient' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'b3a232588ecbbea02126d208e1faa1a9' % The MD5 Checksum of the message definition
        PropertyList = { 'LastConnectionTimestamp' 'Apps' 'Name' 'GatewayName' 'Platform' 'System' 'Robot' 'ClientStatus' 'AppStatus' 'Status' } % List of non-constant message properties
        ROSPropertyList = { 'last_connection_timestamp' 'apps' 'name' 'gateway_name' 'platform' 'system' 'robot' 'client_status' 'app_status' 'status' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msg.Time' ...
            'ros.msggen.rocon_app_manager_msgs.App' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        LastConnectionTimestamp
        Apps
        Name
        GatewayName
        Platform
        System
        Robot
        ClientStatus
        AppStatus
        Status
    end
    methods
        function set.LastConnectionTimestamp(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msg.Time'};
            validateattributes(val, validClasses, validAttributes, 'ConcertClient', 'LastConnectionTimestamp')
            obj.LastConnectionTimestamp = val;
        end
        function set.Apps(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.rocon_app_manager_msgs.App.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.rocon_app_manager_msgs.App'};
            validateattributes(val, validClasses, validAttributes, 'ConcertClient', 'Apps')
            obj.Apps = val;
        end
        function set.Name(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'ConcertClient', 'Name');
            obj.Name = char(val);
        end
        function set.GatewayName(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'ConcertClient', 'GatewayName');
            obj.GatewayName = char(val);
        end
        function set.Platform(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'ConcertClient', 'Platform');
            obj.Platform = char(val);
        end
        function set.System(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'ConcertClient', 'System');
            obj.System = char(val);
        end
        function set.Robot(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'ConcertClient', 'Robot');
            obj.Robot = char(val);
        end
        function set.ClientStatus(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'ConcertClient', 'ClientStatus');
            obj.ClientStatus = char(val);
        end
        function set.AppStatus(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'ConcertClient', 'AppStatus');
            obj.AppStatus = char(val);
        end
        function set.Status(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'ConcertClient', 'Status');
            obj.Status = char(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.concert_msgs.ConcertClient.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.concert_msgs.ConcertClient(strObj);
        end
    end
end
