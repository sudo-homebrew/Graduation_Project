
classdef Connection < ros.Message
    %Connection MATLAB implementation of rocon_std_msgs/Connection
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'rocon_std_msgs/Connection' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '0dee991006513320090e2ee648136101' % The MD5 Checksum of the message definition
        PropertyList = { 'Type' 'Name' 'Node' 'TypeMsg' 'TypeInfo' 'XmlrpcUri' } % List of non-constant message properties
        ROSPropertyList = { 'type' 'name' 'node' 'type_msg' 'type_info' 'xmlrpc_uri' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
        PUBLISHER = 'publisher';
        SUBSCRIBER = 'subscriber';
        SERVICE = 'service';
        ACTIONCLIENT = 'action_client';
        ACTIONSERVER = 'action_server';
        INVALID = 'invalid';
    end
    properties
        Type
        Name
        Node
        TypeMsg
        TypeInfo
        XmlrpcUri
    end
    methods
        function set.Type(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'Connection', 'Type');
            obj.Type = char(val);
        end
        function set.Name(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'Connection', 'Name');
            obj.Name = char(val);
        end
        function set.Node(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'Connection', 'Node');
            obj.Node = char(val);
        end
        function set.TypeMsg(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'Connection', 'TypeMsg');
            obj.TypeMsg = char(val);
        end
        function set.TypeInfo(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'Connection', 'TypeInfo');
            obj.TypeInfo = char(val);
        end
        function set.XmlrpcUri(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'Connection', 'XmlrpcUri');
            obj.XmlrpcUri = char(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.rocon_std_msgs.Connection.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.rocon_std_msgs.Connection(strObj);
        end
    end
end
