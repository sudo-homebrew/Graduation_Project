
classdef MotorSystemControls < ros.Message
    %MotorSystemControls MATLAB implementation of sr_robot_msgs/MotorSystemControls
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'sr_robot_msgs/MotorSystemControls' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '0686822f46acfde0133711bd613a20f1' % The MD5 Checksum of the message definition
        PropertyList = { 'MotorId' 'EnableBacklashCompensation' 'IncreaseSglTracking' 'DecreaseSglTracking' 'IncreaseSgrTracking' 'DecreaseSgrTracking' 'InitiateJiggling' 'WriteConfigToEeprom' } % List of non-constant message properties
        ROSPropertyList = { 'motor_id' 'enable_backlash_compensation' 'increase_sgl_tracking' 'decrease_sgl_tracking' 'increase_sgr_tracking' 'decrease_sgr_tracking' 'initiate_jiggling' 'write_config_to_eeprom' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        MotorId
        EnableBacklashCompensation
        IncreaseSglTracking
        DecreaseSglTracking
        IncreaseSgrTracking
        DecreaseSgrTracking
        InitiateJiggling
        WriteConfigToEeprom
    end
    methods
        function set.MotorId(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MotorSystemControls', 'MotorId');
            obj.MotorId = int8(val);
        end
        function set.EnableBacklashCompensation(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MotorSystemControls', 'EnableBacklashCompensation');
            obj.EnableBacklashCompensation = logical(val);
        end
        function set.IncreaseSglTracking(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MotorSystemControls', 'IncreaseSglTracking');
            obj.IncreaseSglTracking = logical(val);
        end
        function set.DecreaseSglTracking(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MotorSystemControls', 'DecreaseSglTracking');
            obj.DecreaseSglTracking = logical(val);
        end
        function set.IncreaseSgrTracking(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MotorSystemControls', 'IncreaseSgrTracking');
            obj.IncreaseSgrTracking = logical(val);
        end
        function set.DecreaseSgrTracking(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MotorSystemControls', 'DecreaseSgrTracking');
            obj.DecreaseSgrTracking = logical(val);
        end
        function set.InitiateJiggling(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MotorSystemControls', 'InitiateJiggling');
            obj.InitiateJiggling = logical(val);
        end
        function set.WriteConfigToEeprom(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MotorSystemControls', 'WriteConfigToEeprom');
            obj.WriteConfigToEeprom = logical(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.sr_robot_msgs.MotorSystemControls.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.sr_robot_msgs.MotorSystemControls(strObj);
        end
    end
end
