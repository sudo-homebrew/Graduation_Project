
classdef JointMusclePositionControllerState < ros.Message
    %JointMusclePositionControllerState MATLAB implementation of sr_robot_msgs/JointMusclePositionControllerState
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'sr_robot_msgs/JointMusclePositionControllerState' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '5a9f3e4da940842d5d2d35e00e1cd647' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'SetPoint' 'ProcessValue' 'ProcessValueDot' 'Error' 'TimeStep' 'PseudoCommand' 'ValveMuscle0' 'ValveMuscle1' 'PackedValve' 'MusclePressure0' 'MusclePressure1' 'P' 'I' 'D' 'IClamp' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'set_point' 'process_value' 'process_value_dot' 'error' 'time_step' 'pseudo_command' 'valve_muscle_0' 'valve_muscle_1' 'packed_valve' 'muscle_pressure_0' 'muscle_pressure_1' 'p' 'i' 'd' 'i_clamp' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        SetPoint
        ProcessValue
        ProcessValueDot
        Error
        TimeStep
        PseudoCommand
        ValveMuscle0
        ValveMuscle1
        PackedValve
        MusclePressure0
        MusclePressure1
        P
        I
        D
        IClamp
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'JointMusclePositionControllerState', 'Header')
            obj.Header = val;
        end
        function set.SetPoint(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointMusclePositionControllerState', 'SetPoint');
            obj.SetPoint = double(val);
        end
        function set.ProcessValue(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointMusclePositionControllerState', 'ProcessValue');
            obj.ProcessValue = double(val);
        end
        function set.ProcessValueDot(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointMusclePositionControllerState', 'ProcessValueDot');
            obj.ProcessValueDot = double(val);
        end
        function set.Error(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointMusclePositionControllerState', 'Error');
            obj.Error = double(val);
        end
        function set.TimeStep(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointMusclePositionControllerState', 'TimeStep');
            obj.TimeStep = double(val);
        end
        function set.PseudoCommand(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointMusclePositionControllerState', 'PseudoCommand');
            obj.PseudoCommand = double(val);
        end
        function set.ValveMuscle0(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointMusclePositionControllerState', 'ValveMuscle0');
            obj.ValveMuscle0 = int8(val);
        end
        function set.ValveMuscle1(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointMusclePositionControllerState', 'ValveMuscle1');
            obj.ValveMuscle1 = int8(val);
        end
        function set.PackedValve(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointMusclePositionControllerState', 'PackedValve');
            obj.PackedValve = double(val);
        end
        function set.MusclePressure0(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointMusclePositionControllerState', 'MusclePressure0');
            obj.MusclePressure0 = uint16(val);
        end
        function set.MusclePressure1(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointMusclePositionControllerState', 'MusclePressure1');
            obj.MusclePressure1 = uint16(val);
        end
        function set.P(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointMusclePositionControllerState', 'P');
            obj.P = double(val);
        end
        function set.I(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointMusclePositionControllerState', 'I');
            obj.I = double(val);
        end
        function set.D(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointMusclePositionControllerState', 'D');
            obj.D = double(val);
        end
        function set.IClamp(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointMusclePositionControllerState', 'IClamp');
            obj.IClamp = double(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.sr_robot_msgs.JointMusclePositionControllerState.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.sr_robot_msgs.JointMusclePositionControllerState(strObj);
        end
    end
end
