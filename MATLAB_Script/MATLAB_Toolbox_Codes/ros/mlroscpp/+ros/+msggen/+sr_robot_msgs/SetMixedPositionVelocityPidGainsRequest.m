
classdef SetMixedPositionVelocityPidGainsRequest < ros.Message
    %SetMixedPositionVelocityPidGainsRequest MATLAB implementation of sr_robot_msgs/SetMixedPositionVelocityPidGainsRequest
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'sr_robot_msgs/SetMixedPositionVelocityPidGainsRequest' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'ff95ce4d442c9454d3d943f0c999da89' % The MD5 Checksum of the message definition
        PropertyList = { 'PositionP' 'PositionI' 'PositionD' 'PositionIClamp' 'MinVelocity' 'MaxVelocity' 'PositionDeadband' 'VelocityP' 'VelocityI' 'VelocityD' 'VelocityIClamp' 'MaxForce' 'FrictionDeadband' } % List of non-constant message properties
        ROSPropertyList = { 'position_p' 'position_i' 'position_d' 'position_i_clamp' 'min_velocity' 'max_velocity' 'position_deadband' 'velocity_p' 'velocity_i' 'velocity_d' 'velocity_i_clamp' 'max_force' 'friction_deadband' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        PositionP
        PositionI
        PositionD
        PositionIClamp
        MinVelocity
        MaxVelocity
        PositionDeadband
        VelocityP
        VelocityI
        VelocityD
        VelocityIClamp
        MaxForce
        FrictionDeadband
    end
    methods
        function set.PositionP(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SetMixedPositionVelocityPidGainsRequest', 'PositionP');
            obj.PositionP = double(val);
        end
        function set.PositionI(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SetMixedPositionVelocityPidGainsRequest', 'PositionI');
            obj.PositionI = double(val);
        end
        function set.PositionD(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SetMixedPositionVelocityPidGainsRequest', 'PositionD');
            obj.PositionD = double(val);
        end
        function set.PositionIClamp(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SetMixedPositionVelocityPidGainsRequest', 'PositionIClamp');
            obj.PositionIClamp = double(val);
        end
        function set.MinVelocity(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SetMixedPositionVelocityPidGainsRequest', 'MinVelocity');
            obj.MinVelocity = double(val);
        end
        function set.MaxVelocity(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SetMixedPositionVelocityPidGainsRequest', 'MaxVelocity');
            obj.MaxVelocity = double(val);
        end
        function set.PositionDeadband(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SetMixedPositionVelocityPidGainsRequest', 'PositionDeadband');
            obj.PositionDeadband = double(val);
        end
        function set.VelocityP(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SetMixedPositionVelocityPidGainsRequest', 'VelocityP');
            obj.VelocityP = double(val);
        end
        function set.VelocityI(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SetMixedPositionVelocityPidGainsRequest', 'VelocityI');
            obj.VelocityI = double(val);
        end
        function set.VelocityD(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SetMixedPositionVelocityPidGainsRequest', 'VelocityD');
            obj.VelocityD = double(val);
        end
        function set.VelocityIClamp(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SetMixedPositionVelocityPidGainsRequest', 'VelocityIClamp');
            obj.VelocityIClamp = double(val);
        end
        function set.MaxForce(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SetMixedPositionVelocityPidGainsRequest', 'MaxForce');
            obj.MaxForce = double(val);
        end
        function set.FrictionDeadband(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SetMixedPositionVelocityPidGainsRequest', 'FrictionDeadband');
            obj.FrictionDeadband = int32(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.sr_robot_msgs.SetMixedPositionVelocityPidGainsRequest.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.sr_robot_msgs.SetMixedPositionVelocityPidGainsRequest(strObj);
        end
    end
end
