
classdef SetPidGainsRequest < ros.Message
    %SetPidGainsRequest MATLAB implementation of sr_robot_msgs/SetPidGainsRequest
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'sr_robot_msgs/SetPidGainsRequest' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'f9c5176e998bba30344c4892f975be3a' % The MD5 Checksum of the message definition
        PropertyList = { 'P' 'I' 'D' 'IClamp' 'MaxForce' 'Deadband' 'FrictionDeadband' } % List of non-constant message properties
        ROSPropertyList = { 'p' 'i' 'd' 'i_clamp' 'max_force' 'deadband' 'friction_deadband' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        P
        I
        D
        IClamp
        MaxForce
        Deadband
        FrictionDeadband
    end
    methods
        function set.P(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SetPidGainsRequest', 'P');
            obj.P = double(val);
        end
        function set.I(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SetPidGainsRequest', 'I');
            obj.I = double(val);
        end
        function set.D(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SetPidGainsRequest', 'D');
            obj.D = double(val);
        end
        function set.IClamp(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SetPidGainsRequest', 'IClamp');
            obj.IClamp = double(val);
        end
        function set.MaxForce(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SetPidGainsRequest', 'MaxForce');
            obj.MaxForce = double(val);
        end
        function set.Deadband(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SetPidGainsRequest', 'Deadband');
            obj.Deadband = double(val);
        end
        function set.FrictionDeadband(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SetPidGainsRequest', 'FrictionDeadband');
            obj.FrictionDeadband = int32(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.sr_robot_msgs.SetPidGainsRequest.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.sr_robot_msgs.SetPidGainsRequest(strObj);
        end
    end
end
