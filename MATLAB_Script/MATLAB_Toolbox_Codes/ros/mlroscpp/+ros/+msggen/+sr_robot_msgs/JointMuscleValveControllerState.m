
classdef JointMuscleValveControllerState < ros.Message
    %JointMuscleValveControllerState MATLAB implementation of sr_robot_msgs/JointMuscleValveControllerState
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'sr_robot_msgs/JointMuscleValveControllerState' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'fc22942516cdb4d514558e60d7263d35' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'SetValveMuscle0' 'SetValveMuscle1' 'SetDurationMuscle0' 'SetDurationMuscle1' 'CurrentValveMuscle0' 'CurrentValveMuscle1' 'CurrentDurationMuscle0' 'CurrentDurationMuscle1' 'PackedValve' 'MusclePressure0' 'MusclePressure1' 'TimeStep' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'set_valve_muscle_0' 'set_valve_muscle_1' 'set_duration_muscle_0' 'set_duration_muscle_1' 'current_valve_muscle_0' 'current_valve_muscle_1' 'current_duration_muscle_0' 'current_duration_muscle_1' 'packed_valve' 'muscle_pressure_0' 'muscle_pressure_1' 'time_step' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        SetValveMuscle0
        SetValveMuscle1
        SetDurationMuscle0
        SetDurationMuscle1
        CurrentValveMuscle0
        CurrentValveMuscle1
        CurrentDurationMuscle0
        CurrentDurationMuscle1
        PackedValve
        MusclePressure0
        MusclePressure1
        TimeStep
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'JointMuscleValveControllerState', 'Header')
            obj.Header = val;
        end
        function set.SetValveMuscle0(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointMuscleValveControllerState', 'SetValveMuscle0');
            obj.SetValveMuscle0 = int8(val);
        end
        function set.SetValveMuscle1(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointMuscleValveControllerState', 'SetValveMuscle1');
            obj.SetValveMuscle1 = int8(val);
        end
        function set.SetDurationMuscle0(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointMuscleValveControllerState', 'SetDurationMuscle0');
            obj.SetDurationMuscle0 = uint64(val);
        end
        function set.SetDurationMuscle1(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointMuscleValveControllerState', 'SetDurationMuscle1');
            obj.SetDurationMuscle1 = uint64(val);
        end
        function set.CurrentValveMuscle0(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointMuscleValveControllerState', 'CurrentValveMuscle0');
            obj.CurrentValveMuscle0 = int8(val);
        end
        function set.CurrentValveMuscle1(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointMuscleValveControllerState', 'CurrentValveMuscle1');
            obj.CurrentValveMuscle1 = int8(val);
        end
        function set.CurrentDurationMuscle0(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointMuscleValveControllerState', 'CurrentDurationMuscle0');
            obj.CurrentDurationMuscle0 = uint64(val);
        end
        function set.CurrentDurationMuscle1(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointMuscleValveControllerState', 'CurrentDurationMuscle1');
            obj.CurrentDurationMuscle1 = uint64(val);
        end
        function set.PackedValve(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointMuscleValveControllerState', 'PackedValve');
            obj.PackedValve = double(val);
        end
        function set.MusclePressure0(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointMuscleValveControllerState', 'MusclePressure0');
            obj.MusclePressure0 = uint16(val);
        end
        function set.MusclePressure1(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointMuscleValveControllerState', 'MusclePressure1');
            obj.MusclePressure1 = uint16(val);
        end
        function set.TimeStep(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointMuscleValveControllerState', 'TimeStep');
            obj.TimeStep = double(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.sr_robot_msgs.JointMuscleValveControllerState.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.sr_robot_msgs.JointMuscleValveControllerState(strObj);
        end
    end
end
