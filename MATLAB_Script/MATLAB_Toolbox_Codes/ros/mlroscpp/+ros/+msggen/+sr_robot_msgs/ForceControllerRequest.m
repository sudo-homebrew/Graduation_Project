
classdef ForceControllerRequest < ros.Message
    %ForceControllerRequest MATLAB implementation of sr_robot_msgs/ForceControllerRequest
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'sr_robot_msgs/ForceControllerRequest' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '8bb059ffa85c4df492f2694e40ee3541' % The MD5 Checksum of the message definition
        PropertyList = { 'Maxpwm' 'Sgleftref' 'Sgrightref' 'F' 'P' 'I' 'D' 'Imax' 'Deadband' 'Sign' } % List of non-constant message properties
        ROSPropertyList = { 'maxpwm' 'sgleftref' 'sgrightref' 'f' 'p' 'i' 'd' 'imax' 'deadband' 'sign' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Maxpwm
        Sgleftref
        Sgrightref
        F
        P
        I
        D
        Imax
        Deadband
        Sign
    end
    methods
        function set.Maxpwm(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ForceControllerRequest', 'Maxpwm');
            obj.Maxpwm = int16(val);
        end
        function set.Sgleftref(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ForceControllerRequest', 'Sgleftref');
            obj.Sgleftref = int16(val);
        end
        function set.Sgrightref(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ForceControllerRequest', 'Sgrightref');
            obj.Sgrightref = int16(val);
        end
        function set.F(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ForceControllerRequest', 'F');
            obj.F = int16(val);
        end
        function set.P(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ForceControllerRequest', 'P');
            obj.P = int16(val);
        end
        function set.I(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ForceControllerRequest', 'I');
            obj.I = int16(val);
        end
        function set.D(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ForceControllerRequest', 'D');
            obj.D = int16(val);
        end
        function set.Imax(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ForceControllerRequest', 'Imax');
            obj.Imax = int16(val);
        end
        function set.Deadband(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ForceControllerRequest', 'Deadband');
            obj.Deadband = int16(val);
        end
        function set.Sign(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ForceControllerRequest', 'Sign');
            obj.Sign = int16(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.sr_robot_msgs.ForceControllerRequest.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.sr_robot_msgs.ForceControllerRequest(strObj);
        end
    end
end
