
classdef Histogram < ros.Message
    %Histogram MATLAB implementation of multisense_ros/Histogram
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'multisense_ros/Histogram' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'e45112edc9190cff95413a65cb22f694' % The MD5 Checksum of the message definition
        PropertyList = { 'TimeStamp' 'FrameCount' 'Width' 'Height' 'Gain' 'Fps' 'ExposureTime' 'Channels' 'Bins' 'Data' } % List of non-constant message properties
        ROSPropertyList = { 'time_stamp' 'frame_count' 'width' 'height' 'gain' 'fps' 'exposure_time' 'channels' 'bins' 'data' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msg.Time' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        TimeStamp
        FrameCount
        Width
        Height
        Gain
        Fps
        ExposureTime
        Channels
        Bins
        Data
    end
    methods
        function set.TimeStamp(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msg.Time'};
            validateattributes(val, validClasses, validAttributes, 'Histogram', 'TimeStamp')
            obj.TimeStamp = val;
        end
        function set.FrameCount(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Histogram', 'FrameCount');
            obj.FrameCount = int64(val);
        end
        function set.Width(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Histogram', 'Width');
            obj.Width = uint32(val);
        end
        function set.Height(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Histogram', 'Height');
            obj.Height = uint32(val);
        end
        function set.Gain(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Histogram', 'Gain');
            obj.Gain = single(val);
        end
        function set.Fps(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Histogram', 'Fps');
            obj.Fps = single(val);
        end
        function set.ExposureTime(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Histogram', 'ExposureTime');
            obj.ExposureTime = uint32(val);
        end
        function set.Channels(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Histogram', 'Channels');
            obj.Channels = uint32(val);
        end
        function set.Bins(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Histogram', 'Bins');
            obj.Bins = uint32(val);
        end
        function set.Data(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = uint32.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'Histogram', 'Data');
            obj.Data = uint32(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.multisense_ros.Histogram.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.multisense_ros.Histogram(strObj);
        end
    end
end
