
classdef DeviceInfo < ros.Message
    %DeviceInfo MATLAB implementation of multisense_ros/DeviceInfo
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'multisense_ros/DeviceInfo' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'c6474ecff79a7f51e0a82ca43d0cf444' % The MD5 Checksum of the message definition
        PropertyList = { 'DeviceName' 'BuildDate' 'SerialNumber' 'DeviceRevision' 'NumberOfPcbs' 'PcbSerialNumbers' 'PcbNames' 'ImagerName' 'ImagerType' 'ImagerWidth' 'ImagerHeight' 'LensName' 'LensType' 'NominalBaseline' 'NominalFocalLength' 'NominalRelativeAperture' 'LightingType' 'NumberOfLights' 'LaserName' 'LaserType' 'MotorName' 'MotorType' 'MotorGearReduction' 'ApiBuildDate' 'ApiVersion' 'FirmwareBuildDate' 'FirmwareVersion' 'BitstreamVersion' 'BitstreamMagic' 'FpgaDna' } % List of non-constant message properties
        ROSPropertyList = { 'deviceName' 'buildDate' 'serialNumber' 'deviceRevision' 'numberOfPcbs' 'pcbSerialNumbers' 'pcbNames' 'imagerName' 'imagerType' 'imagerWidth' 'imagerHeight' 'lensName' 'lensType' 'nominalBaseline' 'nominalFocalLength' 'nominalRelativeAperture' 'lightingType' 'numberOfLights' 'laserName' 'laserType' 'motorName' 'motorType' 'motorGearReduction' 'apiBuildDate' 'apiVersion' 'firmwareBuildDate' 'firmwareVersion' 'bitstreamVersion' 'bitstreamMagic' 'fpgaDna' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        DeviceName
        BuildDate
        SerialNumber
        DeviceRevision
        NumberOfPcbs
        PcbSerialNumbers
        PcbNames
        ImagerName
        ImagerType
        ImagerWidth
        ImagerHeight
        LensName
        LensType
        NominalBaseline
        NominalFocalLength
        NominalRelativeAperture
        LightingType
        NumberOfLights
        LaserName
        LaserType
        MotorName
        MotorType
        MotorGearReduction
        ApiBuildDate
        ApiVersion
        FirmwareBuildDate
        FirmwareVersion
        BitstreamVersion
        BitstreamMagic
        FpgaDna
    end
    methods
        function set.DeviceName(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'DeviceInfo', 'DeviceName');
            obj.DeviceName = char(val);
        end
        function set.BuildDate(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'DeviceInfo', 'BuildDate');
            obj.BuildDate = char(val);
        end
        function set.SerialNumber(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'DeviceInfo', 'SerialNumber');
            obj.SerialNumber = char(val);
        end
        function set.DeviceRevision(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DeviceInfo', 'DeviceRevision');
            obj.DeviceRevision = uint32(val);
        end
        function set.NumberOfPcbs(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DeviceInfo', 'NumberOfPcbs');
            obj.NumberOfPcbs = uint32(val);
        end
        function set.PcbSerialNumbers(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = uint32.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'DeviceInfo', 'PcbSerialNumbers');
            obj.PcbSerialNumbers = uint32(val);
        end
        function set.PcbNames(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'DeviceInfo', 'PcbNames');
            obj.PcbNames = cell(val);
        end
        function set.ImagerName(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'DeviceInfo', 'ImagerName');
            obj.ImagerName = char(val);
        end
        function set.ImagerType(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DeviceInfo', 'ImagerType');
            obj.ImagerType = uint32(val);
        end
        function set.ImagerWidth(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DeviceInfo', 'ImagerWidth');
            obj.ImagerWidth = uint32(val);
        end
        function set.ImagerHeight(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DeviceInfo', 'ImagerHeight');
            obj.ImagerHeight = uint32(val);
        end
        function set.LensName(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'DeviceInfo', 'LensName');
            obj.LensName = char(val);
        end
        function set.LensType(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DeviceInfo', 'LensType');
            obj.LensType = uint32(val);
        end
        function set.NominalBaseline(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DeviceInfo', 'NominalBaseline');
            obj.NominalBaseline = single(val);
        end
        function set.NominalFocalLength(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DeviceInfo', 'NominalFocalLength');
            obj.NominalFocalLength = single(val);
        end
        function set.NominalRelativeAperture(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DeviceInfo', 'NominalRelativeAperture');
            obj.NominalRelativeAperture = single(val);
        end
        function set.LightingType(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DeviceInfo', 'LightingType');
            obj.LightingType = uint32(val);
        end
        function set.NumberOfLights(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DeviceInfo', 'NumberOfLights');
            obj.NumberOfLights = uint32(val);
        end
        function set.LaserName(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'DeviceInfo', 'LaserName');
            obj.LaserName = char(val);
        end
        function set.LaserType(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DeviceInfo', 'LaserType');
            obj.LaserType = uint32(val);
        end
        function set.MotorName(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'DeviceInfo', 'MotorName');
            obj.MotorName = char(val);
        end
        function set.MotorType(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DeviceInfo', 'MotorType');
            obj.MotorType = uint32(val);
        end
        function set.MotorGearReduction(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DeviceInfo', 'MotorGearReduction');
            obj.MotorGearReduction = single(val);
        end
        function set.ApiBuildDate(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'DeviceInfo', 'ApiBuildDate');
            obj.ApiBuildDate = char(val);
        end
        function set.ApiVersion(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DeviceInfo', 'ApiVersion');
            obj.ApiVersion = uint16(val);
        end
        function set.FirmwareBuildDate(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'DeviceInfo', 'FirmwareBuildDate');
            obj.FirmwareBuildDate = char(val);
        end
        function set.FirmwareVersion(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DeviceInfo', 'FirmwareVersion');
            obj.FirmwareVersion = uint16(val);
        end
        function set.BitstreamVersion(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DeviceInfo', 'BitstreamVersion');
            obj.BitstreamVersion = uint64(val);
        end
        function set.BitstreamMagic(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DeviceInfo', 'BitstreamMagic');
            obj.BitstreamMagic = uint64(val);
        end
        function set.FpgaDna(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DeviceInfo', 'FpgaDna');
            obj.FpgaDna = uint64(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.multisense_ros.DeviceInfo.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.multisense_ros.DeviceInfo(strObj);
        end
    end
end
