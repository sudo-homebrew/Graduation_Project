
classdef RawCamCal < ros.Message
    %RawCamCal MATLAB implementation of multisense_ros/RawCamCal
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'multisense_ros/RawCamCal' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '1b8c86de8eb033489e8e49fb5532702e' % The MD5 Checksum of the message definition
        PropertyList = { 'LeftM' 'LeftD' 'LeftR' 'LeftP' 'RightM' 'RightD' 'RightR' 'RightP' } % List of non-constant message properties
        ROSPropertyList = { 'left_M' 'left_D' 'left_R' 'left_P' 'right_M' 'right_D' 'right_R' 'right_P' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        LeftM
        LeftD
        LeftR
        LeftP
        RightM
        RightD
        RightR
        RightP
    end
    methods
        function set.LeftM(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 9};
            validateattributes(val, validClasses, validAttributes, 'RawCamCal', 'LeftM');
            obj.LeftM = single(val);
        end
        function set.LeftD(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 8};
            validateattributes(val, validClasses, validAttributes, 'RawCamCal', 'LeftD');
            obj.LeftD = single(val);
        end
        function set.LeftR(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 9};
            validateattributes(val, validClasses, validAttributes, 'RawCamCal', 'LeftR');
            obj.LeftR = single(val);
        end
        function set.LeftP(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 12};
            validateattributes(val, validClasses, validAttributes, 'RawCamCal', 'LeftP');
            obj.LeftP = single(val);
        end
        function set.RightM(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 9};
            validateattributes(val, validClasses, validAttributes, 'RawCamCal', 'RightM');
            obj.RightM = single(val);
        end
        function set.RightD(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 8};
            validateattributes(val, validClasses, validAttributes, 'RawCamCal', 'RightD');
            obj.RightD = single(val);
        end
        function set.RightR(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 9};
            validateattributes(val, validClasses, validAttributes, 'RawCamCal', 'RightR');
            obj.RightR = single(val);
        end
        function set.RightP(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 12};
            validateattributes(val, validClasses, validAttributes, 'RawCamCal', 'RightP');
            obj.RightP = single(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.multisense_ros.RawCamCal.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.multisense_ros.RawCamCal(strObj);
        end
    end
end
