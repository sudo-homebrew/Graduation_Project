
classdef DeviceStatus < ros.Message
    %DeviceStatus MATLAB implementation of multisense_ros/DeviceStatus
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'multisense_ros/DeviceStatus' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '2114c900161a6607a8d4a04b3cecd16b' % The MD5 Checksum of the message definition
        PropertyList = { 'Time' 'Uptime' 'SystemOk' 'LaserOk' 'LaserMotorOk' 'CamerasOk' 'ImuOk' 'ExternalLedsOk' 'ProcessingPipelineOk' 'PowerSupplyTemp' 'FpgaTemp' 'LeftImagerTemp' 'RightImagerTemp' 'InputVoltage' 'InputCurrent' 'FpgaPower' 'LogicPower' 'ImagerPower' } % List of non-constant message properties
        ROSPropertyList = { 'time' 'uptime' 'systemOk' 'laserOk' 'laserMotorOk' 'camerasOk' 'imuOk' 'externalLedsOk' 'processingPipelineOk' 'powerSupplyTemp' 'fpgaTemp' 'leftImagerTemp' 'rightImagerTemp' 'inputVoltage' 'inputCurrent' 'fpgaPower' 'logicPower' 'imagerPower' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msg.Time' ...
            'ros.msg.Time' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Time
        Uptime
        SystemOk
        LaserOk
        LaserMotorOk
        CamerasOk
        ImuOk
        ExternalLedsOk
        ProcessingPipelineOk
        PowerSupplyTemp
        FpgaTemp
        LeftImagerTemp
        RightImagerTemp
        InputVoltage
        InputCurrent
        FpgaPower
        LogicPower
        ImagerPower
    end
    methods
        function set.Time(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msg.Time'};
            validateattributes(val, validClasses, validAttributes, 'DeviceStatus', 'Time')
            obj.Time = val;
        end
        function set.Uptime(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msg.Time'};
            validateattributes(val, validClasses, validAttributes, 'DeviceStatus', 'Uptime')
            obj.Uptime = val;
        end
        function set.SystemOk(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DeviceStatus', 'SystemOk');
            obj.SystemOk = logical(val);
        end
        function set.LaserOk(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DeviceStatus', 'LaserOk');
            obj.LaserOk = logical(val);
        end
        function set.LaserMotorOk(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DeviceStatus', 'LaserMotorOk');
            obj.LaserMotorOk = logical(val);
        end
        function set.CamerasOk(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DeviceStatus', 'CamerasOk');
            obj.CamerasOk = logical(val);
        end
        function set.ImuOk(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DeviceStatus', 'ImuOk');
            obj.ImuOk = logical(val);
        end
        function set.ExternalLedsOk(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DeviceStatus', 'ExternalLedsOk');
            obj.ExternalLedsOk = logical(val);
        end
        function set.ProcessingPipelineOk(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DeviceStatus', 'ProcessingPipelineOk');
            obj.ProcessingPipelineOk = logical(val);
        end
        function set.PowerSupplyTemp(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DeviceStatus', 'PowerSupplyTemp');
            obj.PowerSupplyTemp = single(val);
        end
        function set.FpgaTemp(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DeviceStatus', 'FpgaTemp');
            obj.FpgaTemp = single(val);
        end
        function set.LeftImagerTemp(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DeviceStatus', 'LeftImagerTemp');
            obj.LeftImagerTemp = single(val);
        end
        function set.RightImagerTemp(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DeviceStatus', 'RightImagerTemp');
            obj.RightImagerTemp = single(val);
        end
        function set.InputVoltage(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DeviceStatus', 'InputVoltage');
            obj.InputVoltage = single(val);
        end
        function set.InputCurrent(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DeviceStatus', 'InputCurrent');
            obj.InputCurrent = single(val);
        end
        function set.FpgaPower(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DeviceStatus', 'FpgaPower');
            obj.FpgaPower = single(val);
        end
        function set.LogicPower(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DeviceStatus', 'LogicPower');
            obj.LogicPower = single(val);
        end
        function set.ImagerPower(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DeviceStatus', 'ImagerPower');
            obj.ImagerPower = single(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.multisense_ros.DeviceStatus.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.multisense_ros.DeviceStatus(strObj);
        end
    end
end
