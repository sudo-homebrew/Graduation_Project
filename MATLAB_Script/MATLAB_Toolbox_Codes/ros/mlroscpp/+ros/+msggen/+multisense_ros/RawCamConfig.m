
classdef RawCamConfig < ros.Message
    %RawCamConfig MATLAB implementation of multisense_ros/RawCamConfig
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'multisense_ros/RawCamConfig' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'cfc6caf0d17e5d50531b927f32fd6a90' % The MD5 Checksum of the message definition
        PropertyList = { 'Width' 'Height' 'FramesPerSecond' 'Gain' 'ExposureTime' 'Fx' 'Fy' 'Cx' 'Cy' 'Tx' 'Ty' 'Tz' 'Roll' 'Pitch' 'Yaw' } % List of non-constant message properties
        ROSPropertyList = { 'width' 'height' 'frames_per_second' 'gain' 'exposure_time' 'fx' 'fy' 'cx' 'cy' 'tx' 'ty' 'tz' 'roll' 'pitch' 'yaw' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Width
        Height
        FramesPerSecond
        Gain
        ExposureTime
        Fx
        Fy
        Cx
        Cy
        Tx
        Ty
        Tz
        Roll
        Pitch
        Yaw
    end
    methods
        function set.Width(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawCamConfig', 'Width');
            obj.Width = uint16(val);
        end
        function set.Height(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawCamConfig', 'Height');
            obj.Height = uint16(val);
        end
        function set.FramesPerSecond(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawCamConfig', 'FramesPerSecond');
            obj.FramesPerSecond = single(val);
        end
        function set.Gain(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawCamConfig', 'Gain');
            obj.Gain = single(val);
        end
        function set.ExposureTime(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawCamConfig', 'ExposureTime');
            obj.ExposureTime = uint32(val);
        end
        function set.Fx(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawCamConfig', 'Fx');
            obj.Fx = single(val);
        end
        function set.Fy(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawCamConfig', 'Fy');
            obj.Fy = single(val);
        end
        function set.Cx(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawCamConfig', 'Cx');
            obj.Cx = single(val);
        end
        function set.Cy(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawCamConfig', 'Cy');
            obj.Cy = single(val);
        end
        function set.Tx(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawCamConfig', 'Tx');
            obj.Tx = single(val);
        end
        function set.Ty(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawCamConfig', 'Ty');
            obj.Ty = single(val);
        end
        function set.Tz(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawCamConfig', 'Tz');
            obj.Tz = single(val);
        end
        function set.Roll(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawCamConfig', 'Roll');
            obj.Roll = single(val);
        end
        function set.Pitch(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawCamConfig', 'Pitch');
            obj.Pitch = single(val);
        end
        function set.Yaw(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawCamConfig', 'Yaw');
            obj.Yaw = single(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.multisense_ros.RawCamConfig.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.multisense_ros.RawCamConfig(strObj);
        end
    end
end
