
classdef RawLidarData < ros.Message
    %RawLidarData MATLAB implementation of multisense_ros/RawLidarData
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'multisense_ros/RawLidarData' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'c6ed0471015a3cddab804db8e53836c1' % The MD5 Checksum of the message definition
        PropertyList = { 'TimeStart' 'TimeEnd' 'ScanCount' 'AngleStart' 'AngleEnd' 'Distance' 'Intensity' } % List of non-constant message properties
        ROSPropertyList = { 'time_start' 'time_end' 'scan_count' 'angle_start' 'angle_end' 'distance' 'intensity' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msg.Time' ...
            'ros.msg.Time' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        TimeStart
        TimeEnd
        ScanCount
        AngleStart
        AngleEnd
        Distance
        Intensity
    end
    methods
        function set.TimeStart(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msg.Time'};
            validateattributes(val, validClasses, validAttributes, 'RawLidarData', 'TimeStart')
            obj.TimeStart = val;
        end
        function set.TimeEnd(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msg.Time'};
            validateattributes(val, validClasses, validAttributes, 'RawLidarData', 'TimeEnd')
            obj.TimeEnd = val;
        end
        function set.ScanCount(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawLidarData', 'ScanCount');
            obj.ScanCount = uint32(val);
        end
        function set.AngleStart(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawLidarData', 'AngleStart');
            obj.AngleStart = int32(val);
        end
        function set.AngleEnd(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawLidarData', 'AngleEnd');
            obj.AngleEnd = int32(val);
        end
        function set.Distance(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = uint32.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'RawLidarData', 'Distance');
            obj.Distance = uint32(val);
        end
        function set.Intensity(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = uint32.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'RawLidarData', 'Intensity');
            obj.Intensity = uint32(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.multisense_ros.RawLidarData.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.multisense_ros.RawLidarData(strObj);
        end
    end
end
