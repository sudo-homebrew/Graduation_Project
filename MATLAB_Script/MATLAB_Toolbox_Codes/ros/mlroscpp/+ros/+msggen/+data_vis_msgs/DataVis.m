
classdef DataVis < ros.Message
    %DataVis MATLAB implementation of data_vis_msgs/DataVis
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'data_vis_msgs/DataVis' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '54fc13c6e72b87a9c5ab7e772c90e8f2' % The MD5 Checksum of the message definition
        PropertyList = { 'Values' 'Id' 'Type' 'Title' 'Xlabel' 'Ylabel' 'Width' 'Height' 'Fontsize' } % List of non-constant message properties
        ROSPropertyList = { 'values' 'id' 'type' 'title' 'xlabel' 'ylabel' 'width' 'height' 'fontsize' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.data_vis_msgs.ValueList' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
        TYPEPIECHART = int32(0)
        TYPEBARCHART = int32(1)
        TYPETREECHART = int32(2)
        TYPETIMELINE = int32(3)
        TYPELINECHART = int32(4)
    end
    properties
        Values
        Id
        Type
        Title
        Xlabel
        Ylabel
        Width
        Height
        Fontsize
    end
    methods
        function set.Values(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.data_vis_msgs.ValueList.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.data_vis_msgs.ValueList'};
            validateattributes(val, validClasses, validAttributes, 'DataVis', 'Values')
            obj.Values = val;
        end
        function set.Id(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'DataVis', 'Id');
            obj.Id = char(val);
        end
        function set.Type(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DataVis', 'Type');
            obj.Type = int32(val);
        end
        function set.Title(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'DataVis', 'Title');
            obj.Title = char(val);
        end
        function set.Xlabel(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'DataVis', 'Xlabel');
            obj.Xlabel = char(val);
        end
        function set.Ylabel(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'DataVis', 'Ylabel');
            obj.Ylabel = char(val);
        end
        function set.Width(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DataVis', 'Width');
            obj.Width = int32(val);
        end
        function set.Height(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DataVis', 'Height');
            obj.Height = int32(val);
        end
        function set.Fontsize(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'DataVis', 'Fontsize');
            obj.Fontsize = char(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.data_vis_msgs.DataVis.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.data_vis_msgs.DataVis(strObj);
        end
    end
end
