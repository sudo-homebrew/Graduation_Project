
classdef PlaceLocation < ros.Message
    %PlaceLocation MATLAB implementation of manipulation_msgs/PlaceLocation
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'manipulation_msgs/PlaceLocation' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '0139dab9852add0e64233c5fb3b8a25a' % The MD5 Checksum of the message definition
        PropertyList = { 'PostPlacePosture' 'PlacePose' 'Approach' 'Retreat' 'Id' 'AllowedTouchObjects' } % List of non-constant message properties
        ROSPropertyList = { 'post_place_posture' 'place_pose' 'approach' 'retreat' 'id' 'allowed_touch_objects' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.sensor_msgs.JointState' ...
            'ros.msggen.geometry_msgs.PoseStamped' ...
            'ros.msggen.manipulation_msgs.GripperTranslation' ...
            'ros.msggen.manipulation_msgs.GripperTranslation' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        PostPlacePosture
        PlacePose
        Approach
        Retreat
        Id
        AllowedTouchObjects
    end
    methods
        function set.PostPlacePosture(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.sensor_msgs.JointState'};
            validateattributes(val, validClasses, validAttributes, 'PlaceLocation', 'PostPlacePosture')
            obj.PostPlacePosture = val;
        end
        function set.PlacePose(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.PoseStamped'};
            validateattributes(val, validClasses, validAttributes, 'PlaceLocation', 'PlacePose')
            obj.PlacePose = val;
        end
        function set.Approach(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.manipulation_msgs.GripperTranslation'};
            validateattributes(val, validClasses, validAttributes, 'PlaceLocation', 'Approach')
            obj.Approach = val;
        end
        function set.Retreat(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.manipulation_msgs.GripperTranslation'};
            validateattributes(val, validClasses, validAttributes, 'PlaceLocation', 'Retreat')
            obj.Retreat = val;
        end
        function set.Id(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'PlaceLocation', 'Id');
            obj.Id = char(val);
        end
        function set.AllowedTouchObjects(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'PlaceLocation', 'AllowedTouchObjects');
            obj.AllowedTouchObjects = cell(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.manipulation_msgs.PlaceLocation.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.manipulation_msgs.PlaceLocation(strObj);
        end
    end
end
