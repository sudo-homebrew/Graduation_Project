
classdef SceneRegion < ros.Message
    %SceneRegion MATLAB implementation of manipulation_msgs/SceneRegion
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'manipulation_msgs/SceneRegion' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '0a9ab02b19292633619876c9d247690c' % The MD5 Checksum of the message definition
        PropertyList = { 'Cloud' 'Image' 'DisparityImage' 'CamInfo' 'RoiBoxPose' 'RoiBoxDims' 'Mask' } % List of non-constant message properties
        ROSPropertyList = { 'cloud' 'image' 'disparity_image' 'cam_info' 'roi_box_pose' 'roi_box_dims' 'mask' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msg.sensor_msgs.PointCloud2' ...
            'ros.msg.sensor_msgs.Image' ...
            'ros.msg.sensor_msgs.Image' ...
            'ros.msggen.sensor_msgs.CameraInfo' ...
            'ros.msggen.geometry_msgs.PoseStamped' ...
            'ros.msggen.geometry_msgs.Vector3' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Cloud
        Image
        DisparityImage
        CamInfo
        RoiBoxPose
        RoiBoxDims
        Mask
    end
    methods
        function set.Cloud(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msg.sensor_msgs.PointCloud2'};
            validateattributes(val, validClasses, validAttributes, 'SceneRegion', 'Cloud')
            obj.Cloud = val;
        end
        function set.Image(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msg.sensor_msgs.Image'};
            validateattributes(val, validClasses, validAttributes, 'SceneRegion', 'Image')
            obj.Image = val;
        end
        function set.DisparityImage(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msg.sensor_msgs.Image'};
            validateattributes(val, validClasses, validAttributes, 'SceneRegion', 'DisparityImage')
            obj.DisparityImage = val;
        end
        function set.CamInfo(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.sensor_msgs.CameraInfo'};
            validateattributes(val, validClasses, validAttributes, 'SceneRegion', 'CamInfo')
            obj.CamInfo = val;
        end
        function set.RoiBoxPose(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.PoseStamped'};
            validateattributes(val, validClasses, validAttributes, 'SceneRegion', 'RoiBoxPose')
            obj.RoiBoxPose = val;
        end
        function set.RoiBoxDims(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Vector3'};
            validateattributes(val, validClasses, validAttributes, 'SceneRegion', 'RoiBoxDims')
            obj.RoiBoxDims = val;
        end
        function set.Mask(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = int32.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'SceneRegion', 'Mask');
            obj.Mask = int32(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.manipulation_msgs.SceneRegion.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.manipulation_msgs.SceneRegion(strObj);
        end
    end
end
