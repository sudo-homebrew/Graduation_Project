
classdef TactileMatrix < ros.Message
    %TactileMatrix MATLAB implementation of schunk_sdh/TactileMatrix
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'schunk_sdh/TactileMatrix' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'ab718b6c1d4d719110707994d2e325e4' % The MD5 Checksum of the message definition
        PropertyList = { 'MatrixId' 'CellsX' 'CellsY' 'TactileArray' } % List of non-constant message properties
        ROSPropertyList = { 'matrix_id' 'cells_x' 'cells_y' 'tactile_array' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        MatrixId
        CellsX
        CellsY
        TactileArray
    end
    methods
        function set.MatrixId(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'TactileMatrix', 'MatrixId');
            obj.MatrixId = uint32(val);
        end
        function set.CellsX(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'TactileMatrix', 'CellsX');
            obj.CellsX = int16(val);
        end
        function set.CellsY(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'TactileMatrix', 'CellsY');
            obj.CellsY = int16(val);
        end
        function set.TactileArray(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = int16.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'TactileMatrix', 'TactileArray');
            obj.TactileArray = int16(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.schunk_sdh.TactileMatrix.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.schunk_sdh.TactileMatrix(strObj);
        end
    end
end
