
classdef AidingSensorParams < ros.Message
    %AidingSensorParams MATLAB implementation of applanix_msgs/AidingSensorParams
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'applanix_msgs/AidingSensorParams' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'c5f8cdbc1fbfdcb4567e70396891f001' % The MD5 Checksum of the message definition
        PropertyList = { 'DmiLeverArm' 'Transaction' 'DmiScaleFactor' 'Reserved1' 'Reserved2' 'Reserved3' 'Reserved5' 'Reserved6' 'Reserved7' } % List of non-constant message properties
        ROSPropertyList = { 'dmi_lever_arm' 'transaction' 'dmi_scale_factor' 'reserved1' 'reserved2' 'reserved3' 'reserved5' 'reserved6' 'reserved7' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.geometry_msgs.Point32' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        DmiLeverArm
        Transaction
        DmiScaleFactor
        Reserved1
        Reserved2
        Reserved3
        Reserved5
        Reserved6
        Reserved7
    end
    methods
        function set.DmiLeverArm(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Point32'};
            validateattributes(val, validClasses, validAttributes, 'AidingSensorParams', 'DmiLeverArm')
            obj.DmiLeverArm = val;
        end
        function set.Transaction(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AidingSensorParams', 'Transaction');
            obj.Transaction = uint16(val);
        end
        function set.DmiScaleFactor(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AidingSensorParams', 'DmiScaleFactor');
            obj.DmiScaleFactor = single(val);
        end
        function set.Reserved1(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AidingSensorParams', 'Reserved1');
            obj.Reserved1 = single(val);
        end
        function set.Reserved2(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AidingSensorParams', 'Reserved2');
            obj.Reserved2 = single(val);
        end
        function set.Reserved3(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AidingSensorParams', 'Reserved3');
            obj.Reserved3 = single(val);
        end
        function set.Reserved5(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AidingSensorParams', 'Reserved5');
            obj.Reserved5 = single(val);
        end
        function set.Reserved6(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AidingSensorParams', 'Reserved6');
            obj.Reserved6 = single(val);
        end
        function set.Reserved7(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AidingSensorParams', 'Reserved7');
            obj.Reserved7 = single(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.applanix_msgs.AidingSensorParams.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.applanix_msgs.AidingSensorParams(strObj);
        end
    end
end
