
classdef GAMS < ros.Message
    %GAMS MATLAB implementation of applanix_msgs/GAMS
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'applanix_msgs/GAMS' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '018cc2b2b8ae19d409c9e0d80bd8927e' % The MD5 Checksum of the message definition
        PropertyList = { 'Td' 'NumSatellites' 'APrioriPdop' 'AntennaSeparation' 'Status' 'PrnAssignment' 'CycleSlipFlag' 'GamsHeading' 'GamsHeadingRmsErr' } % List of non-constant message properties
        ROSPropertyList = { 'td' 'num_satellites' 'a_priori_pdop' 'antenna_separation' 'status' 'prn_assignment' 'cycle_slip_flag' 'gams_heading' 'gams_heading_rms_err' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.applanix_msgs.TimeDistance' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
        STATUSFIXEDINTEGER = uint8(0)
        STATUSFIXEDINTEGERTESTINSTALLDATA = uint8(1)
        STATUSDEGRADEDFIXEDINTEGER = uint8(2)
        STATUSFLOATEDAMBIGUITY = uint8(3)
        STATUSDEGRADEDFLOATEDAMBIGUITY = uint8(4)
        STATUSSOLUTIONWITHOUTINSTALLDATA = uint8(5)
        STATUSSOLUTIONFROMATTITUDEANDINSTALLDATA = uint8(6)
        STATUSNOSOLUTION = uint8(7)
        PRNUNASSIGNED = uint8(0)
    end
    properties
        Td
        NumSatellites
        APrioriPdop
        AntennaSeparation
        Status
        PrnAssignment
        CycleSlipFlag
        GamsHeading
        GamsHeadingRmsErr
    end
    methods
        function set.Td(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.applanix_msgs.TimeDistance'};
            validateattributes(val, validClasses, validAttributes, 'GAMS', 'Td')
            obj.Td = val;
        end
        function set.NumSatellites(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GAMS', 'NumSatellites');
            obj.NumSatellites = uint8(val);
        end
        function set.APrioriPdop(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GAMS', 'APrioriPdop');
            obj.APrioriPdop = single(val);
        end
        function set.AntennaSeparation(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GAMS', 'AntennaSeparation');
            obj.AntennaSeparation = single(val);
        end
        function set.Status(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GAMS', 'Status');
            obj.Status = uint8(val);
        end
        function set.PrnAssignment(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 12};
            validateattributes(val, validClasses, validAttributes, 'GAMS', 'PrnAssignment');
            obj.PrnAssignment = uint8(val);
        end
        function set.CycleSlipFlag(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GAMS', 'CycleSlipFlag');
            obj.CycleSlipFlag = uint16(val);
        end
        function set.GamsHeading(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GAMS', 'GamsHeading');
            obj.GamsHeading = double(val);
        end
        function set.GamsHeadingRmsErr(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GAMS', 'GamsHeadingRmsErr');
            obj.GamsHeadingRmsErr = double(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.applanix_msgs.GAMS.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.applanix_msgs.GAMS(strObj);
        end
    end
end
