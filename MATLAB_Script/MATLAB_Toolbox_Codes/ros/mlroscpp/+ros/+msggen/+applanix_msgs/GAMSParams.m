
classdef GAMSParams < ros.Message
    %GAMSParams MATLAB implementation of applanix_msgs/GAMSParams
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'applanix_msgs/GAMSParams' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '8dc87272f9e4678c71c9588bfa987256' % The MD5 Checksum of the message definition
        PropertyList = { 'BaselineVector' 'Transaction' 'AntennaSeparation' 'MaxHeadingErrorRms' 'HeadingCorrection' } % List of non-constant message properties
        ROSPropertyList = { 'baseline_vector' 'transaction' 'antenna_separation' 'max_heading_error_rms' 'heading_correction' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.geometry_msgs.Point32' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        BaselineVector
        Transaction
        AntennaSeparation
        MaxHeadingErrorRms
        HeadingCorrection
    end
    methods
        function set.BaselineVector(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Point32'};
            validateattributes(val, validClasses, validAttributes, 'GAMSParams', 'BaselineVector')
            obj.BaselineVector = val;
        end
        function set.Transaction(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GAMSParams', 'Transaction');
            obj.Transaction = uint16(val);
        end
        function set.AntennaSeparation(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GAMSParams', 'AntennaSeparation');
            obj.AntennaSeparation = single(val);
        end
        function set.MaxHeadingErrorRms(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GAMSParams', 'MaxHeadingErrorRms');
            obj.MaxHeadingErrorRms = single(val);
        end
        function set.HeadingCorrection(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GAMSParams', 'HeadingCorrection');
            obj.HeadingCorrection = single(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.applanix_msgs.GAMSParams.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.applanix_msgs.GAMSParams(strObj);
        end
    end
end
