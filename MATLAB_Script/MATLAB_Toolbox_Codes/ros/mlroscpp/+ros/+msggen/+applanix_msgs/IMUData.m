
classdef IMUData < ros.Message
    %IMUData MATLAB implementation of applanix_msgs/IMUData
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'applanix_msgs/IMUData' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '053d6fea1c52bdd03cea4527050e0a11' % The MD5 Checksum of the message definition
        PropertyList = { 'Td' 'DeltaVelocityX' 'DeltaVelocityY' 'DeltaVelocityZ' 'DeltaAccelX' 'DeltaAccelY' 'DeltaAccelZ' 'DataStatus' 'ImuType' 'ImuDataRate' 'ImuStatus' } % List of non-constant message properties
        ROSPropertyList = { 'td' 'delta_velocity_x' 'delta_velocity_y' 'delta_velocity_z' 'delta_accel_x' 'delta_accel_y' 'delta_accel_z' 'data_status' 'imu_type' 'imu_data_rate' 'imu_status' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.applanix_msgs.TimeDistance' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
        STATUS1BADFRAME = uint8(1)
        STATUS2BADFRAMES = uint8(2)
        STATUS3BADFRAMES = uint8(4)
    end
    properties
        Td
        DeltaVelocityX
        DeltaVelocityY
        DeltaVelocityZ
        DeltaAccelX
        DeltaAccelY
        DeltaAccelZ
        DataStatus
        ImuType
        ImuDataRate
        ImuStatus
    end
    methods
        function set.Td(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.applanix_msgs.TimeDistance'};
            validateattributes(val, validClasses, validAttributes, 'IMUData', 'Td')
            obj.Td = val;
        end
        function set.DeltaVelocityX(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'IMUData', 'DeltaVelocityX');
            obj.DeltaVelocityX = int32(val);
        end
        function set.DeltaVelocityY(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'IMUData', 'DeltaVelocityY');
            obj.DeltaVelocityY = int32(val);
        end
        function set.DeltaVelocityZ(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'IMUData', 'DeltaVelocityZ');
            obj.DeltaVelocityZ = int32(val);
        end
        function set.DeltaAccelX(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'IMUData', 'DeltaAccelX');
            obj.DeltaAccelX = int32(val);
        end
        function set.DeltaAccelY(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'IMUData', 'DeltaAccelY');
            obj.DeltaAccelY = int32(val);
        end
        function set.DeltaAccelZ(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'IMUData', 'DeltaAccelZ');
            obj.DeltaAccelZ = int32(val);
        end
        function set.DataStatus(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'IMUData', 'DataStatus');
            obj.DataStatus = uint8(val);
        end
        function set.ImuType(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'IMUData', 'ImuType');
            obj.ImuType = uint8(val);
        end
        function set.ImuDataRate(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'IMUData', 'ImuDataRate');
            obj.ImuDataRate = uint8(val);
        end
        function set.ImuStatus(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'IMUData', 'ImuStatus');
            obj.ImuStatus = uint16(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.applanix_msgs.IMUData.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.applanix_msgs.IMUData(strObj);
        end
    end
end
