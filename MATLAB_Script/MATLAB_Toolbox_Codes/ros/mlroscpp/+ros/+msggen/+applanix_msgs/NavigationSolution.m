
classdef NavigationSolution < ros.Message
    %NavigationSolution MATLAB implementation of applanix_msgs/NavigationSolution
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'applanix_msgs/NavigationSolution' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '5bd9b6a0dde762b9354121b78d050654' % The MD5 Checksum of the message definition
        PropertyList = { 'Td' 'Latitude' 'Longitude' 'Altitude' 'NorthVel' 'EastVel' 'DownVel' 'Roll' 'Pitch' 'Heading' 'WanderAngle' 'TrackAngle' 'Speed' 'AngRateLong' 'AngRateTrans' 'AngRateDown' 'LongAccel' 'TransAccel' 'DownAccel' 'AlignmentStatus' } % List of non-constant message properties
        ROSPropertyList = { 'td' 'latitude' 'longitude' 'altitude' 'north_vel' 'east_vel' 'down_vel' 'roll' 'pitch' 'heading' 'wander_angle' 'track_angle' 'speed' 'ang_rate_long' 'ang_rate_trans' 'ang_rate_down' 'long_accel' 'trans_accel' 'down_accel' 'alignment_status' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.applanix_msgs.TimeDistance' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
        ALIGNMENTFULLNAVIGATION = uint8(0)
        ALIGNMENTFINEALIGNMENTACTIVE = uint8(1)
        ALIGNMENTGCCHI2 = uint8(2)
        ALIGNMENTPCCHI2 = uint8(3)
        ALIGNMENTGCCHI1 = uint8(4)
        ALIGNMENTPCCHI1 = uint8(5)
        ALIGNMENTCOARSELEVELING = uint8(6)
        ALIGNMENTINITIALSOLUTION = uint8(7)
        ALIGNMENTNOVALIDSOLUTION = uint8(8)
    end
    properties
        Td
        Latitude
        Longitude
        Altitude
        NorthVel
        EastVel
        DownVel
        Roll
        Pitch
        Heading
        WanderAngle
        TrackAngle
        Speed
        AngRateLong
        AngRateTrans
        AngRateDown
        LongAccel
        TransAccel
        DownAccel
        AlignmentStatus
    end
    methods
        function set.Td(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.applanix_msgs.TimeDistance'};
            validateattributes(val, validClasses, validAttributes, 'NavigationSolution', 'Td')
            obj.Td = val;
        end
        function set.Latitude(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'NavigationSolution', 'Latitude');
            obj.Latitude = double(val);
        end
        function set.Longitude(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'NavigationSolution', 'Longitude');
            obj.Longitude = double(val);
        end
        function set.Altitude(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'NavigationSolution', 'Altitude');
            obj.Altitude = double(val);
        end
        function set.NorthVel(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'NavigationSolution', 'NorthVel');
            obj.NorthVel = single(val);
        end
        function set.EastVel(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'NavigationSolution', 'EastVel');
            obj.EastVel = single(val);
        end
        function set.DownVel(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'NavigationSolution', 'DownVel');
            obj.DownVel = single(val);
        end
        function set.Roll(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'NavigationSolution', 'Roll');
            obj.Roll = double(val);
        end
        function set.Pitch(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'NavigationSolution', 'Pitch');
            obj.Pitch = double(val);
        end
        function set.Heading(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'NavigationSolution', 'Heading');
            obj.Heading = double(val);
        end
        function set.WanderAngle(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'NavigationSolution', 'WanderAngle');
            obj.WanderAngle = double(val);
        end
        function set.TrackAngle(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'NavigationSolution', 'TrackAngle');
            obj.TrackAngle = single(val);
        end
        function set.Speed(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'NavigationSolution', 'Speed');
            obj.Speed = single(val);
        end
        function set.AngRateLong(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'NavigationSolution', 'AngRateLong');
            obj.AngRateLong = single(val);
        end
        function set.AngRateTrans(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'NavigationSolution', 'AngRateTrans');
            obj.AngRateTrans = single(val);
        end
        function set.AngRateDown(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'NavigationSolution', 'AngRateDown');
            obj.AngRateDown = single(val);
        end
        function set.LongAccel(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'NavigationSolution', 'LongAccel');
            obj.LongAccel = single(val);
        end
        function set.TransAccel(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'NavigationSolution', 'TransAccel');
            obj.TransAccel = single(val);
        end
        function set.DownAccel(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'NavigationSolution', 'DownAccel');
            obj.DownAccel = single(val);
        end
        function set.AlignmentStatus(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'NavigationSolution', 'AlignmentStatus');
            obj.AlignmentStatus = uint8(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.applanix_msgs.NavigationSolution.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.applanix_msgs.NavigationSolution(strObj);
        end
    end
end
