
classdef TypeDef < ros.Message
    %TypeDef MATLAB implementation of rosapi/TypeDef
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'rosapi/TypeDef' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'bd8529b0edb168fde8dd58032743f1f7' % The MD5 Checksum of the message definition
        PropertyList = { 'Type' 'Fieldnames' 'Fieldtypes' 'Fieldarraylen' 'Examples' } % List of non-constant message properties
        ROSPropertyList = { 'type' 'fieldnames' 'fieldtypes' 'fieldarraylen' 'examples' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Type
        Fieldnames
        Fieldtypes
        Fieldarraylen
        Examples
    end
    methods
        function set.Type(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'TypeDef', 'Type');
            obj.Type = char(val);
        end
        function set.Fieldnames(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'TypeDef', 'Fieldnames');
            obj.Fieldnames = cell(val);
        end
        function set.Fieldtypes(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'TypeDef', 'Fieldtypes');
            obj.Fieldtypes = cell(val);
        end
        function set.Fieldarraylen(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = int32.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'TypeDef', 'Fieldarraylen');
            obj.Fieldarraylen = int32(val);
        end
        function set.Examples(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'TypeDef', 'Examples');
            obj.Examples = cell(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.rosapi.TypeDef.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.rosapi.TypeDef(strObj);
        end
    end
end
