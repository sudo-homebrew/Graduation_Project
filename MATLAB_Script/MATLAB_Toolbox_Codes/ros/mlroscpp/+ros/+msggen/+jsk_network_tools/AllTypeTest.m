
classdef AllTypeTest < ros.Message
    %AllTypeTest MATLAB implementation of jsk_network_tools/AllTypeTest
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'jsk_network_tools/AllTypeTest' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'e38fde731d43d6674bf0d48497971fd6' % The MD5 Checksum of the message definition
        PropertyList = { 'BoolAtom' 'BoolArray' 'Uint8Atom' 'Uint8Array' 'Int8Atom' 'Int8Array' 'Uint16Atom' 'Uint16Array' 'Int32Atom' 'Int32Array' 'Uint32Atom' 'Uint32Array' 'Int64Atom' 'Int64Array' 'Uint64Atom' 'Uint64Array' 'Float32Atom' 'Float32Array' 'Float64Atom' 'Float64Array' } % List of non-constant message properties
        ROSPropertyList = { 'bool_atom' 'bool_array' 'uint8_atom' 'uint8_array' 'int8_atom' 'int8_array' 'uint16_atom' 'uint16_array' 'int32_atom' 'int32_array' 'uint32_atom' 'uint32_array' 'int64_atom' 'int64_array' 'uint64_atom' 'uint64_array' 'float32_atom' 'float32_array' 'float64_atom' 'float64_array' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        BoolAtom
        BoolArray
        Uint8Atom
        Uint8Array
        Int8Atom
        Int8Array
        Uint16Atom
        Uint16Array
        Int32Atom
        Int32Array
        Uint32Atom
        Uint32Array
        Int64Atom
        Int64Array
        Uint64Atom
        Uint64Array
        Float32Atom
        Float32Array
        Float64Atom
        Float64Array
    end
    methods
        function set.BoolAtom(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AllTypeTest', 'BoolAtom');
            obj.BoolAtom = logical(val);
        end
        function set.BoolArray(obj, val)
            validClasses = {'logical', 'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 4};
            validateattributes(val, validClasses, validAttributes, 'AllTypeTest', 'BoolArray');
            obj.BoolArray = logical(val);
        end
        function set.Uint8Atom(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AllTypeTest', 'Uint8Atom');
            obj.Uint8Atom = uint8(val);
        end
        function set.Uint8Array(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 4};
            validateattributes(val, validClasses, validAttributes, 'AllTypeTest', 'Uint8Array');
            obj.Uint8Array = uint8(val);
        end
        function set.Int8Atom(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AllTypeTest', 'Int8Atom');
            obj.Int8Atom = int8(val);
        end
        function set.Int8Array(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 4};
            validateattributes(val, validClasses, validAttributes, 'AllTypeTest', 'Int8Array');
            obj.Int8Array = int8(val);
        end
        function set.Uint16Atom(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AllTypeTest', 'Uint16Atom');
            obj.Uint16Atom = uint16(val);
        end
        function set.Uint16Array(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 4};
            validateattributes(val, validClasses, validAttributes, 'AllTypeTest', 'Uint16Array');
            obj.Uint16Array = uint16(val);
        end
        function set.Int32Atom(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AllTypeTest', 'Int32Atom');
            obj.Int32Atom = int32(val);
        end
        function set.Int32Array(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 4};
            validateattributes(val, validClasses, validAttributes, 'AllTypeTest', 'Int32Array');
            obj.Int32Array = int32(val);
        end
        function set.Uint32Atom(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AllTypeTest', 'Uint32Atom');
            obj.Uint32Atom = uint32(val);
        end
        function set.Uint32Array(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 4};
            validateattributes(val, validClasses, validAttributes, 'AllTypeTest', 'Uint32Array');
            obj.Uint32Array = uint32(val);
        end
        function set.Int64Atom(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AllTypeTest', 'Int64Atom');
            obj.Int64Atom = int64(val);
        end
        function set.Int64Array(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 4};
            validateattributes(val, validClasses, validAttributes, 'AllTypeTest', 'Int64Array');
            obj.Int64Array = int64(val);
        end
        function set.Uint64Atom(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AllTypeTest', 'Uint64Atom');
            obj.Uint64Atom = uint64(val);
        end
        function set.Uint64Array(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 4};
            validateattributes(val, validClasses, validAttributes, 'AllTypeTest', 'Uint64Array');
            obj.Uint64Array = uint64(val);
        end
        function set.Float32Atom(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AllTypeTest', 'Float32Atom');
            obj.Float32Atom = single(val);
        end
        function set.Float32Array(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 4};
            validateattributes(val, validClasses, validAttributes, 'AllTypeTest', 'Float32Array');
            obj.Float32Array = single(val);
        end
        function set.Float64Atom(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AllTypeTest', 'Float64Atom');
            obj.Float64Atom = double(val);
        end
        function set.Float64Array(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 4};
            validateattributes(val, validClasses, validAttributes, 'AllTypeTest', 'Float64Array');
            obj.Float64Array = double(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.jsk_network_tools.AllTypeTest.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.jsk_network_tools.AllTypeTest(strObj);
        end
    end
end
