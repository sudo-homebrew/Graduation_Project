
classdef WifiStatus < ros.Message
    %WifiStatus MATLAB implementation of jsk_network_tools/WifiStatus
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'jsk_network_tools/WifiStatus' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '94da4b64008d69473c62c62019a8c0f6' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'Interface' 'Enabled' 'Connected' 'Ssid' 'Frequency' 'AccessPoint' 'Bitrate' 'TxPower' 'LinkQuality' 'SignalLevel' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'interface' 'enabled' 'connected' 'ssid' 'frequency' 'access_point' 'bitrate' 'tx_power' 'link_quality' 'signal_level' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        Interface
        Enabled
        Connected
        Ssid
        Frequency
        AccessPoint
        Bitrate
        TxPower
        LinkQuality
        SignalLevel
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'WifiStatus', 'Header')
            obj.Header = val;
        end
        function set.Interface(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'WifiStatus', 'Interface');
            obj.Interface = char(val);
        end
        function set.Enabled(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'WifiStatus', 'Enabled');
            obj.Enabled = logical(val);
        end
        function set.Connected(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'WifiStatus', 'Connected');
            obj.Connected = logical(val);
        end
        function set.Ssid(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'WifiStatus', 'Ssid');
            obj.Ssid = char(val);
        end
        function set.Frequency(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'WifiStatus', 'Frequency');
            obj.Frequency = single(val);
        end
        function set.AccessPoint(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'WifiStatus', 'AccessPoint');
            obj.AccessPoint = char(val);
        end
        function set.Bitrate(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'WifiStatus', 'Bitrate');
            obj.Bitrate = single(val);
        end
        function set.TxPower(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'WifiStatus', 'TxPower');
            obj.TxPower = int16(val);
        end
        function set.LinkQuality(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'WifiStatus', 'LinkQuality');
            obj.LinkQuality = single(val);
        end
        function set.SignalLevel(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'WifiStatus', 'SignalLevel');
            obj.SignalLevel = int16(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.jsk_network_tools.WifiStatus.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.jsk_network_tools.WifiStatus(strObj);
        end
    end
end
