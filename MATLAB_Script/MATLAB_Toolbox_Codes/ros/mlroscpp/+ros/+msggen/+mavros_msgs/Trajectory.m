
classdef Trajectory < ros.Message
    %Trajectory MATLAB implementation of mavros_msgs/Trajectory
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'mavros_msgs/Trajectory' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '477b47a103394ad6be940e5705f338e8' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'Point1' 'Point2' 'Point3' 'Point4' 'Point5' 'Type' 'PointValid' 'Command' 'TimeHorizon' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'point_1' 'point_2' 'point_3' 'point_4' 'point_5' 'type' 'point_valid' 'command' 'time_horizon' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            'ros.msggen.mavros_msgs.PositionTarget' ...
            'ros.msggen.mavros_msgs.PositionTarget' ...
            'ros.msggen.mavros_msgs.PositionTarget' ...
            'ros.msggen.mavros_msgs.PositionTarget' ...
            'ros.msggen.mavros_msgs.PositionTarget' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
        MAVTRAJECTORYREPRESENTATIONWAYPOINTS = uint8(0)
        MAVTRAJECTORYREPRESENTATIONBEZIER = uint8(1)
    end
    properties
        Header
        Point1
        Point2
        Point3
        Point4
        Point5
        Type
        PointValid
        Command
        TimeHorizon
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'Trajectory', 'Header')
            obj.Header = val;
        end
        function set.Point1(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.mavros_msgs.PositionTarget'};
            validateattributes(val, validClasses, validAttributes, 'Trajectory', 'Point1')
            obj.Point1 = val;
        end
        function set.Point2(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.mavros_msgs.PositionTarget'};
            validateattributes(val, validClasses, validAttributes, 'Trajectory', 'Point2')
            obj.Point2 = val;
        end
        function set.Point3(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.mavros_msgs.PositionTarget'};
            validateattributes(val, validClasses, validAttributes, 'Trajectory', 'Point3')
            obj.Point3 = val;
        end
        function set.Point4(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.mavros_msgs.PositionTarget'};
            validateattributes(val, validClasses, validAttributes, 'Trajectory', 'Point4')
            obj.Point4 = val;
        end
        function set.Point5(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.mavros_msgs.PositionTarget'};
            validateattributes(val, validClasses, validAttributes, 'Trajectory', 'Point5')
            obj.Point5 = val;
        end
        function set.Type(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Trajectory', 'Type');
            obj.Type = uint8(val);
        end
        function set.PointValid(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 5};
            validateattributes(val, validClasses, validAttributes, 'Trajectory', 'PointValid');
            obj.PointValid = uint8(val);
        end
        function set.Command(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 5};
            validateattributes(val, validClasses, validAttributes, 'Trajectory', 'Command');
            obj.Command = uint16(val);
        end
        function set.TimeHorizon(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 5};
            validateattributes(val, validClasses, validAttributes, 'Trajectory', 'TimeHorizon');
            obj.TimeHorizon = single(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.mavros_msgs.Trajectory.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.mavros_msgs.Trajectory(strObj);
        end
    end
end
