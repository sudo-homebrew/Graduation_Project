
classdef HilControls < ros.Message
    %HilControls MATLAB implementation of mavros_msgs/HilControls
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'mavros_msgs/HilControls' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '698148349c3a2e5720afcae2d934acca' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'RollAilerons' 'PitchElevator' 'YawRudder' 'Throttle' 'Aux1' 'Aux2' 'Aux3' 'Aux4' 'Mode' 'NavMode' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'roll_ailerons' 'pitch_elevator' 'yaw_rudder' 'throttle' 'aux1' 'aux2' 'aux3' 'aux4' 'mode' 'nav_mode' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        RollAilerons
        PitchElevator
        YawRudder
        Throttle
        Aux1
        Aux2
        Aux3
        Aux4
        Mode
        NavMode
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'HilControls', 'Header')
            obj.Header = val;
        end
        function set.RollAilerons(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'HilControls', 'RollAilerons');
            obj.RollAilerons = single(val);
        end
        function set.PitchElevator(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'HilControls', 'PitchElevator');
            obj.PitchElevator = single(val);
        end
        function set.YawRudder(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'HilControls', 'YawRudder');
            obj.YawRudder = single(val);
        end
        function set.Throttle(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'HilControls', 'Throttle');
            obj.Throttle = single(val);
        end
        function set.Aux1(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'HilControls', 'Aux1');
            obj.Aux1 = single(val);
        end
        function set.Aux2(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'HilControls', 'Aux2');
            obj.Aux2 = single(val);
        end
        function set.Aux3(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'HilControls', 'Aux3');
            obj.Aux3 = single(val);
        end
        function set.Aux4(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'HilControls', 'Aux4');
            obj.Aux4 = single(val);
        end
        function set.Mode(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'HilControls', 'Mode');
            obj.Mode = uint8(val);
        end
        function set.NavMode(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'HilControls', 'NavMode');
            obj.NavMode = uint8(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.mavros_msgs.HilControls.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.mavros_msgs.HilControls(strObj);
        end
    end
end
