
classdef VehicleInfo < ros.Message
    %VehicleInfo MATLAB implementation of mavros_msgs/VehicleInfo
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'mavros_msgs/VehicleInfo' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '9afa55616f5936bd9469d7d85c523ac1' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'AvailableInfo' 'Sysid' 'Compid' 'Autopilot' 'Type' 'SystemStatus' 'BaseMode' 'CustomMode' 'Mode' 'ModeId' 'Capabilities' 'FlightSwVersion' 'MiddlewareSwVersion' 'OsSwVersion' 'BoardVersion' 'FlightCustomVersion' 'VendorId' 'ProductId' 'Uid' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'available_info' 'sysid' 'compid' 'autopilot' 'type' 'system_status' 'base_mode' 'custom_mode' 'mode' 'mode_id' 'capabilities' 'flight_sw_version' 'middleware_sw_version' 'os_sw_version' 'board_version' 'flight_custom_version' 'vendor_id' 'product_id' 'uid' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
        HAVEINFOHEARTBEAT = uint8(1)
        HAVEINFOAUTOPILOTVERSION = uint8(2)
    end
    properties
        Header
        AvailableInfo
        Sysid
        Compid
        Autopilot
        Type
        SystemStatus
        BaseMode
        CustomMode
        Mode
        ModeId
        Capabilities
        FlightSwVersion
        MiddlewareSwVersion
        OsSwVersion
        BoardVersion
        FlightCustomVersion
        VendorId
        ProductId
        Uid
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'VehicleInfo', 'Header')
            obj.Header = val;
        end
        function set.AvailableInfo(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'VehicleInfo', 'AvailableInfo');
            obj.AvailableInfo = uint8(val);
        end
        function set.Sysid(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'VehicleInfo', 'Sysid');
            obj.Sysid = uint8(val);
        end
        function set.Compid(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'VehicleInfo', 'Compid');
            obj.Compid = uint8(val);
        end
        function set.Autopilot(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'VehicleInfo', 'Autopilot');
            obj.Autopilot = uint8(val);
        end
        function set.Type(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'VehicleInfo', 'Type');
            obj.Type = uint8(val);
        end
        function set.SystemStatus(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'VehicleInfo', 'SystemStatus');
            obj.SystemStatus = uint8(val);
        end
        function set.BaseMode(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'VehicleInfo', 'BaseMode');
            obj.BaseMode = uint8(val);
        end
        function set.CustomMode(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'VehicleInfo', 'CustomMode');
            obj.CustomMode = uint32(val);
        end
        function set.Mode(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'VehicleInfo', 'Mode');
            obj.Mode = char(val);
        end
        function set.ModeId(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'VehicleInfo', 'ModeId');
            obj.ModeId = uint32(val);
        end
        function set.Capabilities(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'VehicleInfo', 'Capabilities');
            obj.Capabilities = uint64(val);
        end
        function set.FlightSwVersion(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'VehicleInfo', 'FlightSwVersion');
            obj.FlightSwVersion = uint32(val);
        end
        function set.MiddlewareSwVersion(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'VehicleInfo', 'MiddlewareSwVersion');
            obj.MiddlewareSwVersion = uint32(val);
        end
        function set.OsSwVersion(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'VehicleInfo', 'OsSwVersion');
            obj.OsSwVersion = uint32(val);
        end
        function set.BoardVersion(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'VehicleInfo', 'BoardVersion');
            obj.BoardVersion = uint32(val);
        end
        function set.FlightCustomVersion(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'VehicleInfo', 'FlightCustomVersion');
            obj.FlightCustomVersion = char(val);
        end
        function set.VendorId(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'VehicleInfo', 'VendorId');
            obj.VendorId = uint16(val);
        end
        function set.ProductId(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'VehicleInfo', 'ProductId');
            obj.ProductId = uint16(val);
        end
        function set.Uid(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'VehicleInfo', 'Uid');
            obj.Uid = uint64(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.mavros_msgs.VehicleInfo.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.mavros_msgs.VehicleInfo(strObj);
        end
    end
end
