
classdef DebugValue < ros.Message
    %DebugValue MATLAB implementation of mavros_msgs/DebugValue
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'mavros_msgs/DebugValue' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'af412ff7223c64155e7e3c6b7508eaaa' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'Index' 'Name' 'ValueFloat' 'ValueInt' 'Data' 'Type' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'index' 'name' 'value_float' 'value_int' 'data' 'type' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
        TYPEDEBUG = uint8(0)
        TYPEDEBUGVECT = uint8(1)
        TYPEDEBUGARRAY = uint8(2)
        TYPENAMEDVALUEFLOAT = uint8(3)
        TYPENAMEDVALUEINT = uint8(4)
    end
    properties
        Header
        Index
        Name
        ValueFloat
        ValueInt
        Data
        Type
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'DebugValue', 'Header')
            obj.Header = val;
        end
        function set.Index(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DebugValue', 'Index');
            obj.Index = int32(val);
        end
        function set.Name(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'DebugValue', 'Name');
            obj.Name = char(val);
        end
        function set.ValueFloat(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DebugValue', 'ValueFloat');
            obj.ValueFloat = single(val);
        end
        function set.ValueInt(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DebugValue', 'ValueInt');
            obj.ValueInt = int32(val);
        end
        function set.Data(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = single.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'DebugValue', 'Data');
            obj.Data = single(val);
        end
        function set.Type(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DebugValue', 'Type');
            obj.Type = uint8(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.mavros_msgs.DebugValue.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.mavros_msgs.DebugValue(strObj);
        end
    end
end
