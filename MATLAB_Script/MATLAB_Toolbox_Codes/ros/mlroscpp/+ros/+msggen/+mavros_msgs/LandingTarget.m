
classdef LandingTarget < ros.Message
    %LandingTarget MATLAB implementation of mavros_msgs/LandingTarget
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'mavros_msgs/LandingTarget' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '76548ee08437914830bb7319d04d5490' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'Pose' 'TargetNum' 'Frame' 'Angle' 'Distance' 'Size' 'Type' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'pose' 'target_num' 'frame' 'angle' 'distance' 'size' 'type' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            'ros.msggen.geometry_msgs.Pose' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
        GLOBAL = uint8(0)
        LOCALNED = uint8(2)
        MISSION = uint8(3)
        GLOBALRELATIVEALT = uint8(4)
        LOCALENU = uint8(5)
        GLOBALINT = uint8(6)
        GLOBALRELATIVEALTINT = uint8(7)
        LOCALOFFSETNED = uint8(8)
        BODYNED = uint8(9)
        BODYOFFSETNED = uint8(10)
        GLOBALTERRAINALT = uint8(11)
        GLOBALTERRAINALTINT = uint8(12)
        LIGHTBEACON = uint8(0)
        RADIOBEACON = uint8(1)
        VISIONFIDUCIAL = uint8(2)
        VISIONOTHER = uint8(3)
    end
    properties
        Header
        Pose
        TargetNum
        Frame
        Angle
        Distance
        Size
        Type
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'LandingTarget', 'Header')
            obj.Header = val;
        end
        function set.Pose(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Pose'};
            validateattributes(val, validClasses, validAttributes, 'LandingTarget', 'Pose')
            obj.Pose = val;
        end
        function set.TargetNum(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'LandingTarget', 'TargetNum');
            obj.TargetNum = uint8(val);
        end
        function set.Frame(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'LandingTarget', 'Frame');
            obj.Frame = uint8(val);
        end
        function set.Angle(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 2};
            validateattributes(val, validClasses, validAttributes, 'LandingTarget', 'Angle');
            obj.Angle = single(val);
        end
        function set.Distance(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'LandingTarget', 'Distance');
            obj.Distance = single(val);
        end
        function set.Size(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 2};
            validateattributes(val, validClasses, validAttributes, 'LandingTarget', 'Size');
            obj.Size = single(val);
        end
        function set.Type(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'LandingTarget', 'Type');
            obj.Type = uint8(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.mavros_msgs.LandingTarget.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.mavros_msgs.LandingTarget(strObj);
        end
    end
end
