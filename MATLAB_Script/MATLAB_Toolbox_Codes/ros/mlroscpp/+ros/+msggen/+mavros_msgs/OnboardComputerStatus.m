
classdef OnboardComputerStatus < ros.Message
    %OnboardComputerStatus MATLAB implementation of mavros_msgs/OnboardComputerStatus
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'mavros_msgs/OnboardComputerStatus' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'aebe864fac2952ca9de45a2b65875a60' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'Component' 'Uptime' 'Type' 'CpuCores' 'CpuCombined' 'GpuCores' 'GpuCombined' 'TemperatureBoard' 'TemperatureCore' 'FanSpeed' 'RamUsage' 'RamTotal' 'StorageType' 'StorageUsage' 'StorageTotal' 'LinkType' 'LinkTxRate' 'LinkRxRate' 'LinkTxMax' 'LinkRxMax' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'component' 'uptime' 'type' 'cpu_cores' 'cpu_combined' 'gpu_cores' 'gpu_combined' 'temperature_board' 'temperature_core' 'fan_speed' 'ram_usage' 'ram_total' 'storage_type' 'storage_usage' 'storage_total' 'link_type' 'link_tx_rate' 'link_rx_rate' 'link_tx_max' 'link_rx_max' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        Component
        Uptime
        Type
        CpuCores
        CpuCombined
        GpuCores
        GpuCombined
        TemperatureBoard
        TemperatureCore
        FanSpeed
        RamUsage
        RamTotal
        StorageType
        StorageUsage
        StorageTotal
        LinkType
        LinkTxRate
        LinkRxRate
        LinkTxMax
        LinkRxMax
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'OnboardComputerStatus', 'Header')
            obj.Header = val;
        end
        function set.Component(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'OnboardComputerStatus', 'Component');
            obj.Component = uint8(val);
        end
        function set.Uptime(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'OnboardComputerStatus', 'Uptime');
            obj.Uptime = uint32(val);
        end
        function set.Type(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'OnboardComputerStatus', 'Type');
            obj.Type = uint8(val);
        end
        function set.CpuCores(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 8};
            validateattributes(val, validClasses, validAttributes, 'OnboardComputerStatus', 'CpuCores');
            obj.CpuCores = uint8(val);
        end
        function set.CpuCombined(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 10};
            validateattributes(val, validClasses, validAttributes, 'OnboardComputerStatus', 'CpuCombined');
            obj.CpuCombined = uint8(val);
        end
        function set.GpuCores(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 4};
            validateattributes(val, validClasses, validAttributes, 'OnboardComputerStatus', 'GpuCores');
            obj.GpuCores = uint8(val);
        end
        function set.GpuCombined(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 10};
            validateattributes(val, validClasses, validAttributes, 'OnboardComputerStatus', 'GpuCombined');
            obj.GpuCombined = uint8(val);
        end
        function set.TemperatureBoard(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'OnboardComputerStatus', 'TemperatureBoard');
            obj.TemperatureBoard = int8(val);
        end
        function set.TemperatureCore(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 8};
            validateattributes(val, validClasses, validAttributes, 'OnboardComputerStatus', 'TemperatureCore');
            obj.TemperatureCore = int8(val);
        end
        function set.FanSpeed(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 4};
            validateattributes(val, validClasses, validAttributes, 'OnboardComputerStatus', 'FanSpeed');
            obj.FanSpeed = int16(val);
        end
        function set.RamUsage(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'OnboardComputerStatus', 'RamUsage');
            obj.RamUsage = uint32(val);
        end
        function set.RamTotal(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'OnboardComputerStatus', 'RamTotal');
            obj.RamTotal = uint32(val);
        end
        function set.StorageType(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 4};
            validateattributes(val, validClasses, validAttributes, 'OnboardComputerStatus', 'StorageType');
            obj.StorageType = uint32(val);
        end
        function set.StorageUsage(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 4};
            validateattributes(val, validClasses, validAttributes, 'OnboardComputerStatus', 'StorageUsage');
            obj.StorageUsage = uint32(val);
        end
        function set.StorageTotal(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 4};
            validateattributes(val, validClasses, validAttributes, 'OnboardComputerStatus', 'StorageTotal');
            obj.StorageTotal = uint32(val);
        end
        function set.LinkType(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 6};
            validateattributes(val, validClasses, validAttributes, 'OnboardComputerStatus', 'LinkType');
            obj.LinkType = uint32(val);
        end
        function set.LinkTxRate(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 6};
            validateattributes(val, validClasses, validAttributes, 'OnboardComputerStatus', 'LinkTxRate');
            obj.LinkTxRate = uint32(val);
        end
        function set.LinkRxRate(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 6};
            validateattributes(val, validClasses, validAttributes, 'OnboardComputerStatus', 'LinkRxRate');
            obj.LinkRxRate = uint32(val);
        end
        function set.LinkTxMax(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 6};
            validateattributes(val, validClasses, validAttributes, 'OnboardComputerStatus', 'LinkTxMax');
            obj.LinkTxMax = uint32(val);
        end
        function set.LinkRxMax(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 6};
            validateattributes(val, validClasses, validAttributes, 'OnboardComputerStatus', 'LinkRxMax');
            obj.LinkRxMax = uint32(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.mavros_msgs.OnboardComputerStatus.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.mavros_msgs.OnboardComputerStatus(strObj);
        end
    end
end
