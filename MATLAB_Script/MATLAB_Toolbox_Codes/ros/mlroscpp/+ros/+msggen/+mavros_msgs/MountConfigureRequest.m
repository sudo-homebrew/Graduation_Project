
classdef MountConfigureRequest < ros.Message
    %MountConfigureRequest MATLAB implementation of mavros_msgs/MountConfigureRequest
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'mavros_msgs/MountConfigureRequest' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '6abfbffc4f7b14d5b05955b1813ae50e' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'Mode' 'StabilizeRoll' 'StabilizePitch' 'StabilizeYaw' 'RollInput' 'PitchInput' 'YawInput' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'mode' 'stabilize_roll' 'stabilize_pitch' 'stabilize_yaw' 'roll_input' 'pitch_input' 'yaw_input' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
        MODERETRACT = uint8(0)
        MODENEUTRAL = uint8(1)
        MODEMAVLINKTARGETING = uint8(2)
        MODERCTARGETING = uint8(3)
        MODEGPSPOINT = uint8(4)
        INPUTANGLEBODYFRAME = uint8(0)
        INPUTANGULARRATE = uint8(1)
        INPUTANGLEABSOLUTEFRAME = uint8(2)
    end
    properties
        Header
        Mode
        StabilizeRoll
        StabilizePitch
        StabilizeYaw
        RollInput
        PitchInput
        YawInput
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'MountConfigureRequest', 'Header')
            obj.Header = val;
        end
        function set.Mode(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MountConfigureRequest', 'Mode');
            obj.Mode = uint8(val);
        end
        function set.StabilizeRoll(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MountConfigureRequest', 'StabilizeRoll');
            obj.StabilizeRoll = logical(val);
        end
        function set.StabilizePitch(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MountConfigureRequest', 'StabilizePitch');
            obj.StabilizePitch = logical(val);
        end
        function set.StabilizeYaw(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MountConfigureRequest', 'StabilizeYaw');
            obj.StabilizeYaw = logical(val);
        end
        function set.RollInput(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MountConfigureRequest', 'RollInput');
            obj.RollInput = uint8(val);
        end
        function set.PitchInput(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MountConfigureRequest', 'PitchInput');
            obj.PitchInput = uint8(val);
        end
        function set.YawInput(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MountConfigureRequest', 'YawInput');
            obj.YawInput = uint8(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.mavros_msgs.MountConfigureRequest.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.mavros_msgs.MountConfigureRequest(strObj);
        end
    end
end
