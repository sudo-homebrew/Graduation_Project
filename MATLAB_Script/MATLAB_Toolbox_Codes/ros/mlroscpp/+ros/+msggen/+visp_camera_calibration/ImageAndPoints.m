
classdef ImageAndPoints < ros.Message
    %ImageAndPoints MATLAB implementation of visp_camera_calibration/ImageAndPoints
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'visp_camera_calibration/ImageAndPoints' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '0fea5fc0844344ec4ec1adadebd18f75' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'Image' 'Points' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'image' 'points' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            'ros.msg.sensor_msgs.Image' ...
            'ros.msggen.visp_camera_calibration.ImagePoint' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        Image
        Points
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'ImageAndPoints', 'Header')
            obj.Header = val;
        end
        function set.Image(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msg.sensor_msgs.Image'};
            validateattributes(val, validClasses, validAttributes, 'ImageAndPoints', 'Image')
            obj.Image = val;
        end
        function set.Points(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.visp_camera_calibration.ImagePoint.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.visp_camera_calibration.ImagePoint'};
            validateattributes(val, validClasses, validAttributes, 'ImageAndPoints', 'Points')
            obj.Points = val;
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.visp_camera_calibration.ImageAndPoints.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.visp_camera_calibration.ImageAndPoints(strObj);
        end
    end
end
