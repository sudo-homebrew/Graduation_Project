
classdef BaseOdometryState < ros.Message
    %BaseOdometryState MATLAB implementation of pr2_mechanism_controllers/BaseOdometryState
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'pr2_mechanism_controllers/BaseOdometryState' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '8a483e137ebc37abafa4c26549091dd6' % The MD5 Checksum of the message definition
        PropertyList = { 'Velocity' 'WheelLinkNames' 'DriveConstraintErrors' 'LongitudinalSlipConstraintErrors' } % List of non-constant message properties
        ROSPropertyList = { 'velocity' 'wheel_link_names' 'drive_constraint_errors' 'longitudinal_slip_constraint_errors' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.geometry_msgs.Twist' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Velocity
        WheelLinkNames
        DriveConstraintErrors
        LongitudinalSlipConstraintErrors
    end
    methods
        function set.Velocity(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Twist'};
            validateattributes(val, validClasses, validAttributes, 'BaseOdometryState', 'Velocity')
            obj.Velocity = val;
        end
        function set.WheelLinkNames(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'BaseOdometryState', 'WheelLinkNames');
            obj.WheelLinkNames = cell(val);
        end
        function set.DriveConstraintErrors(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'BaseOdometryState', 'DriveConstraintErrors');
            obj.DriveConstraintErrors = double(val);
        end
        function set.LongitudinalSlipConstraintErrors(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'BaseOdometryState', 'LongitudinalSlipConstraintErrors');
            obj.LongitudinalSlipConstraintErrors = double(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.pr2_mechanism_controllers.BaseOdometryState.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.pr2_mechanism_controllers.BaseOdometryState(strObj);
        end
    end
end
