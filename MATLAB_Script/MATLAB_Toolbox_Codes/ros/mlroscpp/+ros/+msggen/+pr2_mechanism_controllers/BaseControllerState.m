
classdef BaseControllerState < ros.Message
    %BaseControllerState MATLAB implementation of pr2_mechanism_controllers/BaseControllerState
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'pr2_mechanism_controllers/BaseControllerState' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '7a488aa492f9175d5fa35e22e56c4b28' % The MD5 Checksum of the message definition
        PropertyList = { 'Command' 'JointVelocityMeasured' 'JointVelocityCommanded' 'JointVelocityError' 'JointEffortMeasured' 'JointEffortCommanded' 'JointEffortError' 'JointNames' } % List of non-constant message properties
        ROSPropertyList = { 'command' 'joint_velocity_measured' 'joint_velocity_commanded' 'joint_velocity_error' 'joint_effort_measured' 'joint_effort_commanded' 'joint_effort_error' 'joint_names' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.geometry_msgs.Twist' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Command
        JointVelocityMeasured
        JointVelocityCommanded
        JointVelocityError
        JointEffortMeasured
        JointEffortCommanded
        JointEffortError
        JointNames
    end
    methods
        function set.Command(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Twist'};
            validateattributes(val, validClasses, validAttributes, 'BaseControllerState', 'Command')
            obj.Command = val;
        end
        function set.JointVelocityMeasured(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'BaseControllerState', 'JointVelocityMeasured');
            obj.JointVelocityMeasured = double(val);
        end
        function set.JointVelocityCommanded(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'BaseControllerState', 'JointVelocityCommanded');
            obj.JointVelocityCommanded = double(val);
        end
        function set.JointVelocityError(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'BaseControllerState', 'JointVelocityError');
            obj.JointVelocityError = double(val);
        end
        function set.JointEffortMeasured(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'BaseControllerState', 'JointEffortMeasured');
            obj.JointEffortMeasured = double(val);
        end
        function set.JointEffortCommanded(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'BaseControllerState', 'JointEffortCommanded');
            obj.JointEffortCommanded = double(val);
        end
        function set.JointEffortError(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'BaseControllerState', 'JointEffortError');
            obj.JointEffortError = double(val);
        end
        function set.JointNames(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'BaseControllerState', 'JointNames');
            obj.JointNames = cell(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.pr2_mechanism_controllers.BaseControllerState.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.pr2_mechanism_controllers.BaseControllerState(strObj);
        end
    end
end
