
classdef DiagnosticStatus < ros.Message
    %DiagnosticStatus MATLAB implementation of diagnostic_msgs/DiagnosticStatus
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'diagnostic_msgs/DiagnosticStatus' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'd0ce08bc6e5ba34c7754f563a9cabaf1' % The MD5 Checksum of the message definition
        PropertyList = { 'Values' 'Level' 'Name' 'Message' 'HardwareId' } % List of non-constant message properties
        ROSPropertyList = { 'values' 'level' 'name' 'message' 'hardware_id' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.diagnostic_msgs.KeyValue' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
        OK = int8(0)
        WARN = int8(1)
        ERROR = int8(2)
        STALE = int8(3)
    end
    properties
        Values
        Level
        Name
        Message
        HardwareId
    end
    methods
        function set.Values(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.diagnostic_msgs.KeyValue.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.diagnostic_msgs.KeyValue'};
            validateattributes(val, validClasses, validAttributes, 'DiagnosticStatus', 'Values')
            obj.Values = val;
        end
        function set.Level(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DiagnosticStatus', 'Level');
            obj.Level = int8(val);
        end
        function set.Name(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'DiagnosticStatus', 'Name');
            obj.Name = char(val);
        end
        function set.Message(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'DiagnosticStatus', 'Message');
            obj.Message = char(val);
        end
        function set.HardwareId(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'DiagnosticStatus', 'HardwareId');
            obj.HardwareId = char(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.diagnostic_msgs.DiagnosticStatus.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.diagnostic_msgs.DiagnosticStatus(strObj);
        end
    end
end
