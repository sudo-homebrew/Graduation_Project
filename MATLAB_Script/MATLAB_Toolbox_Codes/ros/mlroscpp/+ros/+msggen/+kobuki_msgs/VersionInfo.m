
classdef VersionInfo < ros.Message
    %VersionInfo MATLAB implementation of kobuki_msgs/VersionInfo
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'kobuki_msgs/VersionInfo' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '3dc0ce6edd49be1fc86730f4a4a21861' % The MD5 Checksum of the message definition
        PropertyList = { 'Hardware' 'Firmware' 'Software' 'Udid' 'Features' } % List of non-constant message properties
        ROSPropertyList = { 'hardware' 'firmware' 'software' 'udid' 'features' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
        SMOOTHMOVESTART = uint64(1)
        GYROSCOPE3DDATA = uint64(2)
    end
    properties
        Hardware
        Firmware
        Software
        Udid
        Features
    end
    methods
        function set.Hardware(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'VersionInfo', 'Hardware');
            obj.Hardware = char(val);
        end
        function set.Firmware(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'VersionInfo', 'Firmware');
            obj.Firmware = char(val);
        end
        function set.Software(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'VersionInfo', 'Software');
            obj.Software = char(val);
        end
        function set.Udid(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = uint32.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'VersionInfo', 'Udid');
            obj.Udid = uint32(val);
        end
        function set.Features(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'VersionInfo', 'Features');
            obj.Features = uint64(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.kobuki_msgs.VersionInfo.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.kobuki_msgs.VersionInfo(strObj);
        end
    end
end
