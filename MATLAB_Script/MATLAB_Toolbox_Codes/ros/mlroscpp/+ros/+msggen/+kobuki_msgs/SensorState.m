
classdef SensorState < ros.Message
    %SensorState MATLAB implementation of kobuki_msgs/SensorState
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'kobuki_msgs/SensorState' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '430a4bfd78449c8740bfef32b26613a6' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'TimeStamp' 'Bumper' 'WheelDrop' 'Cliff' 'LeftEncoder' 'RightEncoder' 'LeftPwm' 'RightPwm' 'Buttons' 'Charger' 'Battery' 'Bottom' 'Current' 'OverCurrent' 'DigitalInput' 'AnalogInput' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'time_stamp' 'bumper' 'wheel_drop' 'cliff' 'left_encoder' 'right_encoder' 'left_pwm' 'right_pwm' 'buttons' 'charger' 'battery' 'bottom' 'current' 'over_current' 'digital_input' 'analog_input' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
        BUMPERRIGHT = uint8(1)
        BUMPERCENTRE = uint8(2)
        BUMPERLEFT = uint8(4)
        WHEELDROPRIGHT = uint8(1)
        WHEELDROPLEFT = uint8(2)
        CLIFFRIGHT = uint8(1)
        CLIFFCENTRE = uint8(2)
        CLIFFLEFT = uint8(4)
        BUTTON0 = uint8(1)
        BUTTON1 = uint8(2)
        BUTTON2 = uint8(4)
        DISCHARGING = uint8(0)
        DOCKINGCHARGED = uint8(2)
        DOCKINGCHARGING = uint8(6)
        ADAPTERCHARGED = uint8(18)
        ADAPTERCHARGING = uint8(22)
        OVERCURRENTLEFTWHEEL = uint8(1)
        OVERCURRENTRIGHTWHEEL = uint8(2)
        OVERCURRENTBOTHWHEELS = uint8(3)
        DIGITALINPUT0 = uint8(1)
        DIGITALINPUT1 = uint8(2)
        DIGITALINPUT2 = uint8(4)
        DIGITALINPUT3 = uint8(8)
        DB25TESTBOARDCONNECTED = uint8(64)
    end
    properties
        Header
        TimeStamp
        Bumper
        WheelDrop
        Cliff
        LeftEncoder
        RightEncoder
        LeftPwm
        RightPwm
        Buttons
        Charger
        Battery
        Bottom
        Current
        OverCurrent
        DigitalInput
        AnalogInput
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'SensorState', 'Header')
            obj.Header = val;
        end
        function set.TimeStamp(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SensorState', 'TimeStamp');
            obj.TimeStamp = uint16(val);
        end
        function set.Bumper(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SensorState', 'Bumper');
            obj.Bumper = uint8(val);
        end
        function set.WheelDrop(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SensorState', 'WheelDrop');
            obj.WheelDrop = uint8(val);
        end
        function set.Cliff(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SensorState', 'Cliff');
            obj.Cliff = uint8(val);
        end
        function set.LeftEncoder(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SensorState', 'LeftEncoder');
            obj.LeftEncoder = uint16(val);
        end
        function set.RightEncoder(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SensorState', 'RightEncoder');
            obj.RightEncoder = uint16(val);
        end
        function set.LeftPwm(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SensorState', 'LeftPwm');
            obj.LeftPwm = int8(val);
        end
        function set.RightPwm(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SensorState', 'RightPwm');
            obj.RightPwm = int8(val);
        end
        function set.Buttons(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SensorState', 'Buttons');
            obj.Buttons = uint8(val);
        end
        function set.Charger(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SensorState', 'Charger');
            obj.Charger = uint8(val);
        end
        function set.Battery(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SensorState', 'Battery');
            obj.Battery = uint8(val);
        end
        function set.Bottom(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = uint16.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'SensorState', 'Bottom');
            obj.Bottom = uint16(val);
        end
        function set.Current(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = uint8.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'SensorState', 'Current');
            obj.Current = uint8(val);
        end
        function set.OverCurrent(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SensorState', 'OverCurrent');
            obj.OverCurrent = uint8(val);
        end
        function set.DigitalInput(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SensorState', 'DigitalInput');
            obj.DigitalInput = uint16(val);
        end
        function set.AnalogInput(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = uint16.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'SensorState', 'AnalogInput');
            obj.AnalogInput = uint16(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.kobuki_msgs.SensorState.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.kobuki_msgs.SensorState(strObj);
        end
    end
end
