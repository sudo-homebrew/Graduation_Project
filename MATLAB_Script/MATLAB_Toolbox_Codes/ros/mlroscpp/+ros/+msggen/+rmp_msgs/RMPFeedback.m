
classdef RMPFeedback < ros.Message
    %RMPFeedback MATLAB implementation of rmp_msgs/RMPFeedback
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'rmp_msgs/RMPFeedback' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '8688d7b0a2904002e7cc9d6c90a32697' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'SensorItems' 'SensorValues' 'FaultStatusItems' 'FaultStatusValues' 'IpInfo' 'IpValues' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'sensor_items' 'sensor_values' 'fault_status_items' 'fault_status_values' 'ip_info' 'ip_values' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        SensorItems
        SensorValues
        FaultStatusItems
        FaultStatusValues
        IpInfo
        IpValues
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'RMPFeedback', 'Header')
            obj.Header = val;
        end
        function set.SensorItems(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'RMPFeedback', 'SensorItems');
            obj.SensorItems = cell(val);
        end
        function set.SensorValues(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = single.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'RMPFeedback', 'SensorValues');
            obj.SensorValues = single(val);
        end
        function set.FaultStatusItems(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'RMPFeedback', 'FaultStatusItems');
            obj.FaultStatusItems = cell(val);
        end
        function set.FaultStatusValues(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = uint32.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'RMPFeedback', 'FaultStatusValues');
            obj.FaultStatusValues = uint32(val);
        end
        function set.IpInfo(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'RMPFeedback', 'IpInfo');
            obj.IpInfo = cell(val);
        end
        function set.IpValues(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'RMPFeedback', 'IpValues');
            obj.IpValues = cell(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.rmp_msgs.RMPFeedback.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.rmp_msgs.RMPFeedback(strObj);
        end
    end
end
