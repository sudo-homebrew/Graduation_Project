
classdef Action < ros.Message
    %Action MATLAB implementation of jsk_gui_msgs/Action
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'jsk_gui_msgs/Action' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'd81dc8475ff89ce7097d2e73ebfc2591' % The MD5 Checksum of the message definition
        PropertyList = { 'TaskName' 'ArmId' 'State' 'StateValue' 'Direction' 'DirectionValue' 'TouchX' 'TouchY' } % List of non-constant message properties
        ROSPropertyList = { 'task_name' 'arm_id' 'state' 'state_value' 'direction' 'direction_value' 'touch_x' 'touch_y' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
        RARMID = int8(0)
        LARMID = int8(1)
    end
    properties
        TaskName
        ArmId
        State
        StateValue
        Direction
        DirectionValue
        TouchX
        TouchY
    end
    methods
        function set.TaskName(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'Action', 'TaskName');
            obj.TaskName = char(val);
        end
        function set.ArmId(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Action', 'ArmId');
            obj.ArmId = int64(val);
        end
        function set.State(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'Action', 'State');
            obj.State = char(val);
        end
        function set.StateValue(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Action', 'StateValue');
            obj.StateValue = double(val);
        end
        function set.Direction(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'Action', 'Direction');
            obj.Direction = char(val);
        end
        function set.DirectionValue(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Action', 'DirectionValue');
            obj.DirectionValue = double(val);
        end
        function set.TouchX(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Action', 'TouchX');
            obj.TouchX = int64(val);
        end
        function set.TouchY(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Action', 'TouchY');
            obj.TouchY = int64(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.jsk_gui_msgs.Action.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.jsk_gui_msgs.Action(strObj);
        end
    end
end
