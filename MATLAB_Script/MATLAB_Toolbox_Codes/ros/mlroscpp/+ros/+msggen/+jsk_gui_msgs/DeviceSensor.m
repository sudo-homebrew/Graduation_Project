
classdef DeviceSensor < ros.Message
    %DeviceSensor MATLAB implementation of jsk_gui_msgs/DeviceSensor
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'jsk_gui_msgs/DeviceSensor' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'd3861ba768b988b4c249337d4dc6552d' % The MD5 Checksum of the message definition
        PropertyList = { 'Temperature' 'RelativeHumidity' 'Light' 'Pressure' 'Proximity' } % List of non-constant message properties
        ROSPropertyList = { 'temperature' 'relative_humidity' 'light' 'pressure' 'proximity' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Temperature
        RelativeHumidity
        Light
        Pressure
        Proximity
    end
    methods
        function set.Temperature(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DeviceSensor', 'Temperature');
            obj.Temperature = double(val);
        end
        function set.RelativeHumidity(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DeviceSensor', 'RelativeHumidity');
            obj.RelativeHumidity = double(val);
        end
        function set.Light(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DeviceSensor', 'Light');
            obj.Light = double(val);
        end
        function set.Pressure(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DeviceSensor', 'Pressure');
            obj.Pressure = double(val);
        end
        function set.Proximity(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DeviceSensor', 'Proximity');
            obj.Proximity = double(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.jsk_gui_msgs.DeviceSensor.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.jsk_gui_msgs.DeviceSensor(strObj);
        end
    end
end
