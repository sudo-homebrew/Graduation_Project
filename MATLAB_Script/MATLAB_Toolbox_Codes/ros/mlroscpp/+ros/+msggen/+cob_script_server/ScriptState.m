
classdef ScriptState < ros.Message
    %ScriptState MATLAB implementation of cob_script_server/ScriptState
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'cob_script_server/ScriptState' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'ab462458273d9b48179bdb9a115fdbc1' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'FunctionName' 'ComponentName' 'ParameterName' 'FullGraphName' 'State' 'ErrorCode' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'function_name' 'component_name' 'parameter_name' 'full_graph_name' 'state' 'error_code' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
        UNKNOWN = int8(0)
        ACTIVE = int8(1)
        SUCCEEDED = int8(2)
        FAILED = int8(3)
        PAUSED = int8(4)
    end
    properties
        Header
        FunctionName
        ComponentName
        ParameterName
        FullGraphName
        State
        ErrorCode
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'ScriptState', 'Header')
            obj.Header = val;
        end
        function set.FunctionName(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'ScriptState', 'FunctionName');
            obj.FunctionName = char(val);
        end
        function set.ComponentName(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'ScriptState', 'ComponentName');
            obj.ComponentName = char(val);
        end
        function set.ParameterName(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'ScriptState', 'ParameterName');
            obj.ParameterName = char(val);
        end
        function set.FullGraphName(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'ScriptState', 'FullGraphName');
            obj.FullGraphName = char(val);
        end
        function set.State(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ScriptState', 'State');
            obj.State = int8(val);
        end
        function set.ErrorCode(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ScriptState', 'ErrorCode');
            obj.ErrorCode = int16(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.cob_script_server.ScriptState.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.cob_script_server.ScriptState(strObj);
        end
    end
end
