
classdef LightMode < ros.Message
    %LightMode MATLAB implementation of cob_light/LightMode
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'cob_light/LightMode' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '7aecb45b0da2ee8d387f2bec4ee2faf9' % The MD5 Checksum of the message definition
        PropertyList = { 'Colors' 'Sequences' 'Mode' 'Frequency' 'Timeout' 'Pulses' 'Priority' } % List of non-constant message properties
        ROSPropertyList = { 'colors' 'sequences' 'mode' 'frequency' 'timeout' 'pulses' 'priority' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.ColorRGBA' ...
            'ros.msggen.cob_light.Sequence' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Colors
        Sequences
        Mode
        Frequency
        Timeout
        Pulses
        Priority
    end
    methods
        function set.Colors(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.std_msgs.ColorRGBA.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.std_msgs.ColorRGBA'};
            validateattributes(val, validClasses, validAttributes, 'LightMode', 'Colors')
            obj.Colors = val;
        end
        function set.Sequences(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.cob_light.Sequence.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.cob_light.Sequence'};
            validateattributes(val, validClasses, validAttributes, 'LightMode', 'Sequences')
            obj.Sequences = val;
        end
        function set.Mode(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'LightMode', 'Mode');
            obj.Mode = uint8(val);
        end
        function set.Frequency(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'LightMode', 'Frequency');
            obj.Frequency = single(val);
        end
        function set.Timeout(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'LightMode', 'Timeout');
            obj.Timeout = single(val);
        end
        function set.Pulses(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'LightMode', 'Pulses');
            obj.Pulses = int32(val);
        end
        function set.Priority(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'LightMode', 'Priority');
            obj.Priority = int8(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.cob_light.LightMode.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.cob_light.LightMode(strObj);
        end
    end
end
