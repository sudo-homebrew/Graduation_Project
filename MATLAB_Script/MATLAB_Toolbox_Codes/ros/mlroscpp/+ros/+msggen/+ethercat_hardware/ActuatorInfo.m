
classdef ActuatorInfo < ros.Message
    %ActuatorInfo MATLAB implementation of ethercat_hardware/ActuatorInfo
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'ethercat_hardware/ActuatorInfo' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '40f44d8ec4380adc0b63713486eecb09' % The MD5 Checksum of the message definition
        PropertyList = { 'Id' 'Name' 'RobotName' 'MotorMake' 'MotorModel' 'MaxCurrent' 'SpeedConstant' 'MotorResistance' 'MotorTorqueConstant' 'EncoderReduction' 'PulsesPerRevolution' } % List of non-constant message properties
        ROSPropertyList = { 'id' 'name' 'robot_name' 'motor_make' 'motor_model' 'max_current' 'speed_constant' 'motor_resistance' 'motor_torque_constant' 'encoder_reduction' 'pulses_per_revolution' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Id
        Name
        RobotName
        MotorMake
        MotorModel
        MaxCurrent
        SpeedConstant
        MotorResistance
        MotorTorqueConstant
        EncoderReduction
        PulsesPerRevolution
    end
    methods
        function set.Id(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ActuatorInfo', 'Id');
            obj.Id = uint32(val);
        end
        function set.Name(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'ActuatorInfo', 'Name');
            obj.Name = char(val);
        end
        function set.RobotName(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'ActuatorInfo', 'RobotName');
            obj.RobotName = char(val);
        end
        function set.MotorMake(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'ActuatorInfo', 'MotorMake');
            obj.MotorMake = char(val);
        end
        function set.MotorModel(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'ActuatorInfo', 'MotorModel');
            obj.MotorModel = char(val);
        end
        function set.MaxCurrent(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ActuatorInfo', 'MaxCurrent');
            obj.MaxCurrent = double(val);
        end
        function set.SpeedConstant(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ActuatorInfo', 'SpeedConstant');
            obj.SpeedConstant = double(val);
        end
        function set.MotorResistance(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ActuatorInfo', 'MotorResistance');
            obj.MotorResistance = double(val);
        end
        function set.MotorTorqueConstant(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ActuatorInfo', 'MotorTorqueConstant');
            obj.MotorTorqueConstant = double(val);
        end
        function set.EncoderReduction(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ActuatorInfo', 'EncoderReduction');
            obj.EncoderReduction = double(val);
        end
        function set.PulsesPerRevolution(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ActuatorInfo', 'PulsesPerRevolution');
            obj.PulsesPerRevolution = double(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.ethercat_hardware.ActuatorInfo.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.ethercat_hardware.ActuatorInfo(strObj);
        end
    end
end
