
classdef SoftProcessorFirmwareWriteRequest < ros.Message
    %SoftProcessorFirmwareWriteRequest MATLAB implementation of ethercat_hardware/SoftProcessorFirmwareWriteRequest
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'ethercat_hardware/SoftProcessorFirmwareWriteRequest' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '5234f035d5f911e880df479ac901a6e0' % The MD5 Checksum of the message definition
        PropertyList = { 'ActuatorName' 'ProcessorName' 'Instructions' } % List of non-constant message properties
        ROSPropertyList = { 'actuator_name' 'processor_name' 'instructions' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        ActuatorName
        ProcessorName
        Instructions
    end
    methods
        function set.ActuatorName(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'SoftProcessorFirmwareWriteRequest', 'ActuatorName');
            obj.ActuatorName = char(val);
        end
        function set.ProcessorName(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'SoftProcessorFirmwareWriteRequest', 'ProcessorName');
            obj.ProcessorName = char(val);
        end
        function set.Instructions(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = uint32.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'SoftProcessorFirmwareWriteRequest', 'Instructions');
            obj.Instructions = uint32(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.ethercat_hardware.SoftProcessorFirmwareWriteRequest.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.ethercat_hardware.SoftProcessorFirmwareWriteRequest(strObj);
        end
    end
end
