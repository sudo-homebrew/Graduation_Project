
classdef MotorTraceSample < ros.Message
    %MotorTraceSample MATLAB implementation of ethercat_hardware/MotorTraceSample
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'ethercat_hardware/MotorTraceSample' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '3734a66334bc2033448f9c561d39c5e0' % The MD5 Checksum of the message definition
        PropertyList = { 'Timestamp' 'Enabled' 'SupplyVoltage' 'MeasuredMotorVoltage' 'ProgrammedPwm' 'ExecutedCurrent' 'MeasuredCurrent' 'Velocity' 'EncoderPosition' 'EncoderErrorCount' 'MotorVoltageErrorLimit' 'FilteredMotorVoltageError' 'FilteredAbsMotorVoltageError' 'FilteredMeasuredVoltageError' 'FilteredAbsMeasuredVoltageError' 'FilteredCurrentError' 'FilteredAbsCurrentError' } % List of non-constant message properties
        ROSPropertyList = { 'timestamp' 'enabled' 'supply_voltage' 'measured_motor_voltage' 'programmed_pwm' 'executed_current' 'measured_current' 'velocity' 'encoder_position' 'encoder_error_count' 'motor_voltage_error_limit' 'filtered_motor_voltage_error' 'filtered_abs_motor_voltage_error' 'filtered_measured_voltage_error' 'filtered_abs_measured_voltage_error' 'filtered_current_error' 'filtered_abs_current_error' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Timestamp
        Enabled
        SupplyVoltage
        MeasuredMotorVoltage
        ProgrammedPwm
        ExecutedCurrent
        MeasuredCurrent
        Velocity
        EncoderPosition
        EncoderErrorCount
        MotorVoltageErrorLimit
        FilteredMotorVoltageError
        FilteredAbsMotorVoltageError
        FilteredMeasuredVoltageError
        FilteredAbsMeasuredVoltageError
        FilteredCurrentError
        FilteredAbsCurrentError
    end
    methods
        function set.Timestamp(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MotorTraceSample', 'Timestamp');
            obj.Timestamp = double(val);
        end
        function set.Enabled(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MotorTraceSample', 'Enabled');
            obj.Enabled = logical(val);
        end
        function set.SupplyVoltage(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MotorTraceSample', 'SupplyVoltage');
            obj.SupplyVoltage = double(val);
        end
        function set.MeasuredMotorVoltage(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MotorTraceSample', 'MeasuredMotorVoltage');
            obj.MeasuredMotorVoltage = double(val);
        end
        function set.ProgrammedPwm(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MotorTraceSample', 'ProgrammedPwm');
            obj.ProgrammedPwm = double(val);
        end
        function set.ExecutedCurrent(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MotorTraceSample', 'ExecutedCurrent');
            obj.ExecutedCurrent = double(val);
        end
        function set.MeasuredCurrent(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MotorTraceSample', 'MeasuredCurrent');
            obj.MeasuredCurrent = double(val);
        end
        function set.Velocity(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MotorTraceSample', 'Velocity');
            obj.Velocity = double(val);
        end
        function set.EncoderPosition(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MotorTraceSample', 'EncoderPosition');
            obj.EncoderPosition = double(val);
        end
        function set.EncoderErrorCount(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MotorTraceSample', 'EncoderErrorCount');
            obj.EncoderErrorCount = uint32(val);
        end
        function set.MotorVoltageErrorLimit(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MotorTraceSample', 'MotorVoltageErrorLimit');
            obj.MotorVoltageErrorLimit = double(val);
        end
        function set.FilteredMotorVoltageError(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MotorTraceSample', 'FilteredMotorVoltageError');
            obj.FilteredMotorVoltageError = double(val);
        end
        function set.FilteredAbsMotorVoltageError(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MotorTraceSample', 'FilteredAbsMotorVoltageError');
            obj.FilteredAbsMotorVoltageError = double(val);
        end
        function set.FilteredMeasuredVoltageError(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MotorTraceSample', 'FilteredMeasuredVoltageError');
            obj.FilteredMeasuredVoltageError = double(val);
        end
        function set.FilteredAbsMeasuredVoltageError(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MotorTraceSample', 'FilteredAbsMeasuredVoltageError');
            obj.FilteredAbsMeasuredVoltageError = double(val);
        end
        function set.FilteredCurrentError(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MotorTraceSample', 'FilteredCurrentError');
            obj.FilteredCurrentError = double(val);
        end
        function set.FilteredAbsCurrentError(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MotorTraceSample', 'FilteredAbsCurrentError');
            obj.FilteredAbsCurrentError = double(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.ethercat_hardware.MotorTraceSample.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.ethercat_hardware.MotorTraceSample(strObj);
        end
    end
end
