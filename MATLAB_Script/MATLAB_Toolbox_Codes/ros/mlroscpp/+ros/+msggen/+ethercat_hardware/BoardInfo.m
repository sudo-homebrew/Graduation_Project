
classdef BoardInfo < ros.Message
    %BoardInfo MATLAB implementation of ethercat_hardware/BoardInfo
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'ethercat_hardware/BoardInfo' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'ffcb87ef2725c5fab7d0d8fcd4c7e7bc' % The MD5 Checksum of the message definition
        PropertyList = { 'Description' 'ProductCode' 'Pcb' 'Pca' 'Serial' 'FirmwareMajor' 'FirmwareMinor' 'BoardResistance' 'MaxPwmRatio' 'HwMaxCurrent' 'PoorMeasuredMotorVoltage' } % List of non-constant message properties
        ROSPropertyList = { 'description' 'product_code' 'pcb' 'pca' 'serial' 'firmware_major' 'firmware_minor' 'board_resistance' 'max_pwm_ratio' 'hw_max_current' 'poor_measured_motor_voltage' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Description
        ProductCode
        Pcb
        Pca
        Serial
        FirmwareMajor
        FirmwareMinor
        BoardResistance
        MaxPwmRatio
        HwMaxCurrent
        PoorMeasuredMotorVoltage
    end
    methods
        function set.Description(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'BoardInfo', 'Description');
            obj.Description = char(val);
        end
        function set.ProductCode(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BoardInfo', 'ProductCode');
            obj.ProductCode = uint32(val);
        end
        function set.Pcb(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BoardInfo', 'Pcb');
            obj.Pcb = uint32(val);
        end
        function set.Pca(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BoardInfo', 'Pca');
            obj.Pca = uint32(val);
        end
        function set.Serial(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BoardInfo', 'Serial');
            obj.Serial = uint32(val);
        end
        function set.FirmwareMajor(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BoardInfo', 'FirmwareMajor');
            obj.FirmwareMajor = uint32(val);
        end
        function set.FirmwareMinor(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BoardInfo', 'FirmwareMinor');
            obj.FirmwareMinor = uint32(val);
        end
        function set.BoardResistance(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BoardInfo', 'BoardResistance');
            obj.BoardResistance = double(val);
        end
        function set.MaxPwmRatio(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BoardInfo', 'MaxPwmRatio');
            obj.MaxPwmRatio = double(val);
        end
        function set.HwMaxCurrent(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BoardInfo', 'HwMaxCurrent');
            obj.HwMaxCurrent = double(val);
        end
        function set.PoorMeasuredMotorVoltage(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BoardInfo', 'PoorMeasuredMotorVoltage');
            obj.PoorMeasuredMotorVoltage = logical(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.ethercat_hardware.BoardInfo.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.ethercat_hardware.BoardInfo(strObj);
        end
    end
end
