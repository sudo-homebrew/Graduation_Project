
classdef LaserSensorMsg < ros.Message
    %LaserSensorMsg MATLAB implementation of stdr_msgs/LaserSensorMsg
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'stdr_msgs/LaserSensorMsg' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '32812e51fee48d19daf80d745cf2ad57' % The MD5 Checksum of the message definition
        PropertyList = { 'Noise' 'Pose' 'MaxAngle' 'MinAngle' 'MaxRange' 'MinRange' 'NumRays' 'Frequency' 'FrameId' } % List of non-constant message properties
        ROSPropertyList = { 'noise' 'pose' 'maxAngle' 'minAngle' 'maxRange' 'minRange' 'numRays' 'frequency' 'frame_id' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.stdr_msgs.Noise' ...
            'ros.msggen.geometry_msgs.Pose2D' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Noise
        Pose
        MaxAngle
        MinAngle
        MaxRange
        MinRange
        NumRays
        Frequency
        FrameId
    end
    methods
        function set.Noise(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.stdr_msgs.Noise'};
            validateattributes(val, validClasses, validAttributes, 'LaserSensorMsg', 'Noise')
            obj.Noise = val;
        end
        function set.Pose(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Pose2D'};
            validateattributes(val, validClasses, validAttributes, 'LaserSensorMsg', 'Pose')
            obj.Pose = val;
        end
        function set.MaxAngle(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'LaserSensorMsg', 'MaxAngle');
            obj.MaxAngle = single(val);
        end
        function set.MinAngle(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'LaserSensorMsg', 'MinAngle');
            obj.MinAngle = single(val);
        end
        function set.MaxRange(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'LaserSensorMsg', 'MaxRange');
            obj.MaxRange = single(val);
        end
        function set.MinRange(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'LaserSensorMsg', 'MinRange');
            obj.MinRange = single(val);
        end
        function set.NumRays(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'LaserSensorMsg', 'NumRays');
            obj.NumRays = int32(val);
        end
        function set.Frequency(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'LaserSensorMsg', 'Frequency');
            obj.Frequency = single(val);
        end
        function set.FrameId(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'LaserSensorMsg', 'FrameId');
            obj.FrameId = char(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.stdr_msgs.LaserSensorMsg.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.stdr_msgs.LaserSensorMsg(strObj);
        end
    end
end
