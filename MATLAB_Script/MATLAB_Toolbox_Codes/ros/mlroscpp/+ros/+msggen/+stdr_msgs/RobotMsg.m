
classdef RobotMsg < ros.Message
    %RobotMsg MATLAB implementation of stdr_msgs/RobotMsg
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'stdr_msgs/RobotMsg' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'ffa138f7f6a9c979acfb84d2c8e73a39' % The MD5 Checksum of the message definition
        PropertyList = { 'InitialPose' 'Footprint' 'LaserSensors' 'SonarSensors' 'RfidSensors' 'Co2Sensors' 'SoundSensors' 'ThermalSensors' 'KinematicModel' } % List of non-constant message properties
        ROSPropertyList = { 'initialPose' 'footprint' 'laserSensors' 'sonarSensors' 'rfidSensors' 'co2Sensors' 'soundSensors' 'thermalSensors' 'kinematicModel' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.geometry_msgs.Pose2D' ...
            'ros.msggen.stdr_msgs.FootprintMsg' ...
            'ros.msggen.stdr_msgs.LaserSensorMsg' ...
            'ros.msggen.stdr_msgs.SonarSensorMsg' ...
            'ros.msggen.stdr_msgs.RfidSensorMsg' ...
            'ros.msggen.stdr_msgs.CO2SensorMsg' ...
            'ros.msggen.stdr_msgs.SoundSensorMsg' ...
            'ros.msggen.stdr_msgs.ThermalSensorMsg' ...
            'ros.msggen.stdr_msgs.KinematicMsg' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        InitialPose
        Footprint
        LaserSensors
        SonarSensors
        RfidSensors
        Co2Sensors
        SoundSensors
        ThermalSensors
        KinematicModel
    end
    methods
        function set.InitialPose(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Pose2D'};
            validateattributes(val, validClasses, validAttributes, 'RobotMsg', 'InitialPose')
            obj.InitialPose = val;
        end
        function set.Footprint(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.stdr_msgs.FootprintMsg'};
            validateattributes(val, validClasses, validAttributes, 'RobotMsg', 'Footprint')
            obj.Footprint = val;
        end
        function set.LaserSensors(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.stdr_msgs.LaserSensorMsg.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.stdr_msgs.LaserSensorMsg'};
            validateattributes(val, validClasses, validAttributes, 'RobotMsg', 'LaserSensors')
            obj.LaserSensors = val;
        end
        function set.SonarSensors(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.stdr_msgs.SonarSensorMsg.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.stdr_msgs.SonarSensorMsg'};
            validateattributes(val, validClasses, validAttributes, 'RobotMsg', 'SonarSensors')
            obj.SonarSensors = val;
        end
        function set.RfidSensors(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.stdr_msgs.RfidSensorMsg.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.stdr_msgs.RfidSensorMsg'};
            validateattributes(val, validClasses, validAttributes, 'RobotMsg', 'RfidSensors')
            obj.RfidSensors = val;
        end
        function set.Co2Sensors(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.stdr_msgs.CO2SensorMsg.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.stdr_msgs.CO2SensorMsg'};
            validateattributes(val, validClasses, validAttributes, 'RobotMsg', 'Co2Sensors')
            obj.Co2Sensors = val;
        end
        function set.SoundSensors(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.stdr_msgs.SoundSensorMsg.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.stdr_msgs.SoundSensorMsg'};
            validateattributes(val, validClasses, validAttributes, 'RobotMsg', 'SoundSensors')
            obj.SoundSensors = val;
        end
        function set.ThermalSensors(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.stdr_msgs.ThermalSensorMsg.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.stdr_msgs.ThermalSensorMsg'};
            validateattributes(val, validClasses, validAttributes, 'RobotMsg', 'ThermalSensors')
            obj.ThermalSensors = val;
        end
        function set.KinematicModel(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.stdr_msgs.KinematicMsg'};
            validateattributes(val, validClasses, validAttributes, 'RobotMsg', 'KinematicModel')
            obj.KinematicModel = val;
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.stdr_msgs.RobotMsg.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.stdr_msgs.RobotMsg(strObj);
        end
    end
end
