
classdef KinematicMsg < ros.Message
    %KinematicMsg MATLAB implementation of stdr_msgs/KinematicMsg
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'stdr_msgs/KinematicMsg' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '75d30a9f55f18dd9353f0abaabfaf261' % The MD5 Checksum of the message definition
        PropertyList = { 'Type' 'AUxUx' 'AUxUy' 'AUxW' 'AUyUx' 'AUyUy' 'AUyW' 'AWUx' 'AWUy' 'AWW' 'AGUx' 'AGUy' 'AGW' } % List of non-constant message properties
        ROSPropertyList = { 'type' 'a_ux_ux' 'a_ux_uy' 'a_ux_w' 'a_uy_ux' 'a_uy_uy' 'a_uy_w' 'a_w_ux' 'a_w_uy' 'a_w_w' 'a_g_ux' 'a_g_uy' 'a_g_w' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Type
        AUxUx
        AUxUy
        AUxW
        AUyUx
        AUyUy
        AUyW
        AWUx
        AWUy
        AWW
        AGUx
        AGUy
        AGW
    end
    methods
        function set.Type(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'KinematicMsg', 'Type');
            obj.Type = char(val);
        end
        function set.AUxUx(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'KinematicMsg', 'AUxUx');
            obj.AUxUx = single(val);
        end
        function set.AUxUy(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'KinematicMsg', 'AUxUy');
            obj.AUxUy = single(val);
        end
        function set.AUxW(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'KinematicMsg', 'AUxW');
            obj.AUxW = single(val);
        end
        function set.AUyUx(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'KinematicMsg', 'AUyUx');
            obj.AUyUx = single(val);
        end
        function set.AUyUy(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'KinematicMsg', 'AUyUy');
            obj.AUyUy = single(val);
        end
        function set.AUyW(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'KinematicMsg', 'AUyW');
            obj.AUyW = single(val);
        end
        function set.AWUx(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'KinematicMsg', 'AWUx');
            obj.AWUx = single(val);
        end
        function set.AWUy(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'KinematicMsg', 'AWUy');
            obj.AWUy = single(val);
        end
        function set.AWW(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'KinematicMsg', 'AWW');
            obj.AWW = single(val);
        end
        function set.AGUx(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'KinematicMsg', 'AGUx');
            obj.AGUx = single(val);
        end
        function set.AGUy(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'KinematicMsg', 'AGUy');
            obj.AGUy = single(val);
        end
        function set.AGW(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'KinematicMsg', 'AGW');
            obj.AGW = single(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.stdr_msgs.KinematicMsg.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.stdr_msgs.KinematicMsg(strObj);
        end
    end
end
