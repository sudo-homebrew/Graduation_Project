
classdef RfidSensorMeasurementMsg < ros.Message
    %RfidSensorMeasurementMsg MATLAB implementation of stdr_msgs/RfidSensorMeasurementMsg
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'stdr_msgs/RfidSensorMeasurementMsg' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '274b41808759cfa6e05b69149e9ea1ed' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'RfidTagsIds' 'RfidTagsMsgs' 'RfidTagsDbs' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'rfid_tags_ids' 'rfid_tags_msgs' 'rfid_tags_dbs' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        RfidTagsIds
        RfidTagsMsgs
        RfidTagsDbs
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'RfidSensorMeasurementMsg', 'Header')
            obj.Header = val;
        end
        function set.RfidTagsIds(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'RfidSensorMeasurementMsg', 'RfidTagsIds');
            obj.RfidTagsIds = cell(val);
        end
        function set.RfidTagsMsgs(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'RfidSensorMeasurementMsg', 'RfidTagsMsgs');
            obj.RfidTagsMsgs = cell(val);
        end
        function set.RfidTagsDbs(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = single.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'RfidSensorMeasurementMsg', 'RfidTagsDbs');
            obj.RfidTagsDbs = single(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.stdr_msgs.RfidSensorMeasurementMsg.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.stdr_msgs.RfidSensorMeasurementMsg(strObj);
        end
    end
end
