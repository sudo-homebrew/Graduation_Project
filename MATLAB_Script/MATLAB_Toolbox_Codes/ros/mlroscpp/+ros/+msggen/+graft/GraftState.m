
classdef GraftState < ros.Message
    %GraftState MATLAB implementation of graft/GraftState
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'graft/GraftState' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '4744aac037427813b68053f3a09da177' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'Pose' 'Twist' 'Acceleration' 'GyroBias' 'AccelBias' 'Covariance' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'pose' 'twist' 'acceleration' 'gyro_bias' 'accel_bias' 'covariance' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            'ros.msggen.geometry_msgs.Pose' ...
            'ros.msggen.geometry_msgs.Twist' ...
            'ros.msggen.geometry_msgs.Vector3' ...
            'ros.msggen.geometry_msgs.Vector3' ...
            'ros.msggen.geometry_msgs.Vector3' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        Pose
        Twist
        Acceleration
        GyroBias
        AccelBias
        Covariance
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'GraftState', 'Header')
            obj.Header = val;
        end
        function set.Pose(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Pose'};
            validateattributes(val, validClasses, validAttributes, 'GraftState', 'Pose')
            obj.Pose = val;
        end
        function set.Twist(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Twist'};
            validateattributes(val, validClasses, validAttributes, 'GraftState', 'Twist')
            obj.Twist = val;
        end
        function set.Acceleration(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Vector3'};
            validateattributes(val, validClasses, validAttributes, 'GraftState', 'Acceleration')
            obj.Acceleration = val;
        end
        function set.GyroBias(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Vector3'};
            validateattributes(val, validClasses, validAttributes, 'GraftState', 'GyroBias')
            obj.GyroBias = val;
        end
        function set.AccelBias(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Vector3'};
            validateattributes(val, validClasses, validAttributes, 'GraftState', 'AccelBias')
            obj.AccelBias = val;
        end
        function set.Covariance(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 324};
            validateattributes(val, validClasses, validAttributes, 'GraftState', 'Covariance');
            obj.Covariance = double(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.graft.GraftState.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.graft.GraftState(strObj);
        end
    end
end
