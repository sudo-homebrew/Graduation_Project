
classdef WFOVCompressedImage < ros.Message
    %WFOVCompressedImage MATLAB implementation of wfov_camera_msgs/WFOVCompressedImage
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'wfov_camera_msgs/WFOVCompressedImage' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '5b0f85e79ffccd27dc377911c83e026f' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'Image' 'Info' 'WorldToCamera' 'TimeReference' 'Shutter' 'Gain' 'WhiteBalanceBlue' 'WhiteBalanceRed' 'Temperature' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'image' 'info' 'worldToCamera' 'time_reference' 'shutter' 'gain' 'white_balance_blue' 'white_balance_red' 'temperature' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            'ros.msg.sensor_msgs.CompressedImage' ...
            'ros.msggen.sensor_msgs.CameraInfo' ...
            'ros.msg.geometry_msgs.TransformStamped' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        Image
        Info
        WorldToCamera
        TimeReference
        Shutter
        Gain
        WhiteBalanceBlue
        WhiteBalanceRed
        Temperature
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'WFOVCompressedImage', 'Header')
            obj.Header = val;
        end
        function set.Image(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msg.sensor_msgs.CompressedImage'};
            validateattributes(val, validClasses, validAttributes, 'WFOVCompressedImage', 'Image')
            obj.Image = val;
        end
        function set.Info(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.sensor_msgs.CameraInfo'};
            validateattributes(val, validClasses, validAttributes, 'WFOVCompressedImage', 'Info')
            obj.Info = val;
        end
        function set.WorldToCamera(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msg.geometry_msgs.TransformStamped'};
            validateattributes(val, validClasses, validAttributes, 'WFOVCompressedImage', 'WorldToCamera')
            obj.WorldToCamera = val;
        end
        function set.TimeReference(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'WFOVCompressedImage', 'TimeReference');
            obj.TimeReference = char(val);
        end
        function set.Shutter(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'WFOVCompressedImage', 'Shutter');
            obj.Shutter = single(val);
        end
        function set.Gain(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'WFOVCompressedImage', 'Gain');
            obj.Gain = single(val);
        end
        function set.WhiteBalanceBlue(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'WFOVCompressedImage', 'WhiteBalanceBlue');
            obj.WhiteBalanceBlue = uint16(val);
        end
        function set.WhiteBalanceRed(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'WFOVCompressedImage', 'WhiteBalanceRed');
            obj.WhiteBalanceRed = uint16(val);
        end
        function set.Temperature(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'WFOVCompressedImage', 'Temperature');
            obj.Temperature = single(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.wfov_camera_msgs.WFOVCompressedImage.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.wfov_camera_msgs.WFOVCompressedImage(strObj);
        end
    end
end
