
classdef BatteryState < ros.Message
    %BatteryState MATLAB implementation of sensor_msgs/BatteryState
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'sensor_msgs/BatteryState' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '4ddae7f048e32fda22cac764685e3974' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'Voltage' 'Temperature' 'Current' 'Charge' 'Capacity' 'DesignCapacity' 'Percentage' 'PowerSupplyStatus' 'PowerSupplyHealth' 'PowerSupplyTechnology' 'Present' 'CellVoltage' 'CellTemperature' 'Location' 'SerialNumber' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'voltage' 'temperature' 'current' 'charge' 'capacity' 'design_capacity' 'percentage' 'power_supply_status' 'power_supply_health' 'power_supply_technology' 'present' 'cell_voltage' 'cell_temperature' 'location' 'serial_number' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
        POWERSUPPLYSTATUSUNKNOWN = uint8(0)
        POWERSUPPLYSTATUSCHARGING = uint8(1)
        POWERSUPPLYSTATUSDISCHARGING = uint8(2)
        POWERSUPPLYSTATUSNOTCHARGING = uint8(3)
        POWERSUPPLYSTATUSFULL = uint8(4)
        POWERSUPPLYHEALTHUNKNOWN = uint8(0)
        POWERSUPPLYHEALTHGOOD = uint8(1)
        POWERSUPPLYHEALTHOVERHEAT = uint8(2)
        POWERSUPPLYHEALTHDEAD = uint8(3)
        POWERSUPPLYHEALTHOVERVOLTAGE = uint8(4)
        POWERSUPPLYHEALTHUNSPECFAILURE = uint8(5)
        POWERSUPPLYHEALTHCOLD = uint8(6)
        POWERSUPPLYHEALTHWATCHDOGTIMEREXPIRE = uint8(7)
        POWERSUPPLYHEALTHSAFETYTIMEREXPIRE = uint8(8)
        POWERSUPPLYTECHNOLOGYUNKNOWN = uint8(0)
        POWERSUPPLYTECHNOLOGYNIMH = uint8(1)
        POWERSUPPLYTECHNOLOGYLION = uint8(2)
        POWERSUPPLYTECHNOLOGYLIPO = uint8(3)
        POWERSUPPLYTECHNOLOGYLIFE = uint8(4)
        POWERSUPPLYTECHNOLOGYNICD = uint8(5)
        POWERSUPPLYTECHNOLOGYLIMN = uint8(6)
    end
    properties
        Header
        Voltage
        Temperature
        Current
        Charge
        Capacity
        DesignCapacity
        Percentage
        PowerSupplyStatus
        PowerSupplyHealth
        PowerSupplyTechnology
        Present
        CellVoltage
        CellTemperature
        Location
        SerialNumber
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'BatteryState', 'Header')
            obj.Header = val;
        end
        function set.Voltage(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BatteryState', 'Voltage');
            obj.Voltage = single(val);
        end
        function set.Temperature(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BatteryState', 'Temperature');
            obj.Temperature = single(val);
        end
        function set.Current(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BatteryState', 'Current');
            obj.Current = single(val);
        end
        function set.Charge(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BatteryState', 'Charge');
            obj.Charge = single(val);
        end
        function set.Capacity(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BatteryState', 'Capacity');
            obj.Capacity = single(val);
        end
        function set.DesignCapacity(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BatteryState', 'DesignCapacity');
            obj.DesignCapacity = single(val);
        end
        function set.Percentage(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BatteryState', 'Percentage');
            obj.Percentage = single(val);
        end
        function set.PowerSupplyStatus(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BatteryState', 'PowerSupplyStatus');
            obj.PowerSupplyStatus = uint8(val);
        end
        function set.PowerSupplyHealth(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BatteryState', 'PowerSupplyHealth');
            obj.PowerSupplyHealth = uint8(val);
        end
        function set.PowerSupplyTechnology(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BatteryState', 'PowerSupplyTechnology');
            obj.PowerSupplyTechnology = uint8(val);
        end
        function set.Present(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BatteryState', 'Present');
            obj.Present = logical(val);
        end
        function set.CellVoltage(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = single.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'BatteryState', 'CellVoltage');
            obj.CellVoltage = single(val);
        end
        function set.CellTemperature(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = single.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'BatteryState', 'CellTemperature');
            obj.CellTemperature = single(val);
        end
        function set.Location(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'BatteryState', 'Location');
            obj.Location = char(val);
        end
        function set.SerialNumber(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'BatteryState', 'SerialNumber');
            obj.SerialNumber = char(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.sensor_msgs.BatteryState.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.sensor_msgs.BatteryState(strObj);
        end
    end
end
