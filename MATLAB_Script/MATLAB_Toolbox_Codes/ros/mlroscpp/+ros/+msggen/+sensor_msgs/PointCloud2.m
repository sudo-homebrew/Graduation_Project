
classdef PointCloud2 < ros.Message
    %PointCloud2 MATLAB implementation of sensor_msgs/PointCloud2
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'sensor_msgs/PointCloud2' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '1158d486dd51d683ce2f1be655c3c181' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'Fields' 'Height' 'Width' 'IsBigendian' 'PointStep' 'RowStep' 'Data' 'IsDense' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'fields' 'height' 'width' 'is_bigendian' 'point_step' 'row_step' 'data' 'is_dense' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            'ros.msggen.sensor_msgs.PointField' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        Fields
        Height
        Width
        IsBigendian
        PointStep
        RowStep
        Data
        IsDense
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'PointCloud2', 'Header')
            obj.Header = val;
        end
        function set.Fields(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.sensor_msgs.PointField.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.sensor_msgs.PointField'};
            validateattributes(val, validClasses, validAttributes, 'PointCloud2', 'Fields')
            obj.Fields = val;
        end
        function set.Height(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PointCloud2', 'Height');
            obj.Height = uint32(val);
        end
        function set.Width(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PointCloud2', 'Width');
            obj.Width = uint32(val);
        end
        function set.IsBigendian(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PointCloud2', 'IsBigendian');
            obj.IsBigendian = logical(val);
        end
        function set.PointStep(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PointCloud2', 'PointStep');
            obj.PointStep = uint32(val);
        end
        function set.RowStep(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PointCloud2', 'RowStep');
            obj.RowStep = uint32(val);
        end
        function set.Data(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = uint8.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'PointCloud2', 'Data');
            obj.Data = uint8(val);
        end
        function set.IsDense(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PointCloud2', 'IsDense');
            obj.IsDense = logical(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.sensor_msgs.PointCloud2.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.sensor_msgs.PointCloud2(strObj);
        end
    end
end
