
classdef Range < ros.Message
    %Range MATLAB implementation of sensor_msgs/Range
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'sensor_msgs/Range' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'c005c34273dc426c67a020a87bc24148' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'RadiationType' 'FieldOfView' 'MinRange' 'MaxRange' 'Range_' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'radiation_type' 'field_of_view' 'min_range' 'max_range' 'range' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
        ULTRASOUND = uint8(0)
        INFRARED = uint8(1)
    end
    properties
        Header
        RadiationType
        FieldOfView
        MinRange
        MaxRange
        Range_
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'Range', 'Header')
            obj.Header = val;
        end
        function set.RadiationType(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Range', 'RadiationType');
            obj.RadiationType = uint8(val);
        end
        function set.FieldOfView(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Range', 'FieldOfView');
            obj.FieldOfView = single(val);
        end
        function set.MinRange(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Range', 'MinRange');
            obj.MinRange = single(val);
        end
        function set.MaxRange(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Range', 'MaxRange');
            obj.MaxRange = single(val);
        end
        function set.Range_(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Range', 'Range_');
            obj.Range_ = single(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.sensor_msgs.Range.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.sensor_msgs.Range(strObj);
        end
    end
end
