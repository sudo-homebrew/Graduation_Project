
classdef MultiEchoLaserScan < ros.Message
    %MultiEchoLaserScan MATLAB implementation of sensor_msgs/MultiEchoLaserScan
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'sensor_msgs/MultiEchoLaserScan' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '6fefb0c6da89d7c8abe4b339f5c2f8fb' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'Ranges' 'Intensities' 'AngleMin' 'AngleMax' 'AngleIncrement' 'TimeIncrement' 'ScanTime' 'RangeMin' 'RangeMax' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'ranges' 'intensities' 'angle_min' 'angle_max' 'angle_increment' 'time_increment' 'scan_time' 'range_min' 'range_max' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            'ros.msggen.sensor_msgs.LaserEcho' ...
            'ros.msggen.sensor_msgs.LaserEcho' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        Ranges
        Intensities
        AngleMin
        AngleMax
        AngleIncrement
        TimeIncrement
        ScanTime
        RangeMin
        RangeMax
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'MultiEchoLaserScan', 'Header')
            obj.Header = val;
        end
        function set.Ranges(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.sensor_msgs.LaserEcho.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.sensor_msgs.LaserEcho'};
            validateattributes(val, validClasses, validAttributes, 'MultiEchoLaserScan', 'Ranges')
            obj.Ranges = val;
        end
        function set.Intensities(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.sensor_msgs.LaserEcho.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.sensor_msgs.LaserEcho'};
            validateattributes(val, validClasses, validAttributes, 'MultiEchoLaserScan', 'Intensities')
            obj.Intensities = val;
        end
        function set.AngleMin(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MultiEchoLaserScan', 'AngleMin');
            obj.AngleMin = single(val);
        end
        function set.AngleMax(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MultiEchoLaserScan', 'AngleMax');
            obj.AngleMax = single(val);
        end
        function set.AngleIncrement(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MultiEchoLaserScan', 'AngleIncrement');
            obj.AngleIncrement = single(val);
        end
        function set.TimeIncrement(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MultiEchoLaserScan', 'TimeIncrement');
            obj.TimeIncrement = single(val);
        end
        function set.ScanTime(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MultiEchoLaserScan', 'ScanTime');
            obj.ScanTime = single(val);
        end
        function set.RangeMin(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MultiEchoLaserScan', 'RangeMin');
            obj.RangeMin = single(val);
        end
        function set.RangeMax(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MultiEchoLaserScan', 'RangeMax');
            obj.RangeMax = single(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.sensor_msgs.MultiEchoLaserScan.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.sensor_msgs.MultiEchoLaserScan(strObj);
        end
    end
end
