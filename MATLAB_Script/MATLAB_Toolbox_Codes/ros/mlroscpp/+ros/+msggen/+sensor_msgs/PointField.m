
classdef PointField < ros.Message
    %PointField MATLAB implementation of sensor_msgs/PointField
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'sensor_msgs/PointField' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '268eacb2962780ceac86cbd17e328150' % The MD5 Checksum of the message definition
        PropertyList = { 'Name' 'Offset' 'Datatype' 'Count' } % List of non-constant message properties
        ROSPropertyList = { 'name' 'offset' 'datatype' 'count' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
        INT8 = uint8(1)
        UINT8 = uint8(2)
        INT16 = uint8(3)
        UINT16 = uint8(4)
        INT32 = uint8(5)
        UINT32 = uint8(6)
        FLOAT32 = uint8(7)
        FLOAT64 = uint8(8)
    end
    properties
        Name
        Offset
        Datatype
        Count
    end
    methods
        function set.Name(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'PointField', 'Name');
            obj.Name = char(val);
        end
        function set.Offset(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PointField', 'Offset');
            obj.Offset = uint32(val);
        end
        function set.Datatype(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PointField', 'Datatype');
            obj.Datatype = uint8(val);
        end
        function set.Count(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PointField', 'Count');
            obj.Count = uint32(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.sensor_msgs.PointField.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.sensor_msgs.PointField(strObj);
        end
    end
end
