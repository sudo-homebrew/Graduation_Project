
classdef JointState < ros.Message
    %JointState MATLAB implementation of sensor_msgs/JointState
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'sensor_msgs/JointState' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '3066dcd76a6cfaef579bd0f34173e9fd' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'Name' 'Position' 'Velocity' 'Effort' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'name' 'position' 'velocity' 'effort' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        Name
        Position
        Velocity
        Effort
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'JointState', 'Header')
            obj.Header = val;
        end
        function set.Name(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'JointState', 'Name');
            obj.Name = cell(val);
        end
        function set.Position(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'JointState', 'Position');
            obj.Position = double(val);
        end
        function set.Velocity(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'JointState', 'Velocity');
            obj.Velocity = double(val);
        end
        function set.Effort(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'JointState', 'Effort');
            obj.Effort = double(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.sensor_msgs.JointState.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.sensor_msgs.JointState(strObj);
        end
    end
end
