
classdef SetTemplateRequest < ros.Message
    %SetTemplateRequest MATLAB implementation of jsk_perception/SetTemplateRequest
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'jsk_perception/SetTemplateRequest' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '116fa80f27cbdfcd76d0b57a30ef79ec' % The MD5 Checksum of the message definition
        PropertyList = { 'Image' 'Relativepose' 'Type' 'Dimx' 'Dimy' 'Savefilename' } % List of non-constant message properties
        ROSPropertyList = { 'image' 'relativepose' 'type' 'dimx' 'dimy' 'savefilename' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msg.sensor_msgs.Image' ...
            'ros.msggen.geometry_msgs.Pose' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Image
        Relativepose
        Type
        Dimx
        Dimy
        Savefilename
    end
    methods
        function set.Image(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msg.sensor_msgs.Image'};
            validateattributes(val, validClasses, validAttributes, 'SetTemplateRequest', 'Image')
            obj.Image = val;
        end
        function set.Relativepose(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Pose'};
            validateattributes(val, validClasses, validAttributes, 'SetTemplateRequest', 'Relativepose')
            obj.Relativepose = val;
        end
        function set.Type(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'SetTemplateRequest', 'Type');
            obj.Type = char(val);
        end
        function set.Dimx(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SetTemplateRequest', 'Dimx');
            obj.Dimx = single(val);
        end
        function set.Dimy(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SetTemplateRequest', 'Dimy');
            obj.Dimy = single(val);
        end
        function set.Savefilename(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'SetTemplateRequest', 'Savefilename');
            obj.Savefilename = char(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.jsk_perception.SetTemplateRequest.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.jsk_perception.SetTemplateRequest(strObj);
        end
    end
end
