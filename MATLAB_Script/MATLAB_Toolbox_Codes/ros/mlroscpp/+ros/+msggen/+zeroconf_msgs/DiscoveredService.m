
classdef DiscoveredService < ros.Message
    %DiscoveredService MATLAB implementation of zeroconf_msgs/DiscoveredService
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'zeroconf_msgs/DiscoveredService' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '3aabc6dd9875ef180c75536ad9a51d86' % The MD5 Checksum of the message definition
        PropertyList = { 'Name' 'Type' 'Domain' 'Description' 'Hostname' 'Ipv4Addresses' 'Ipv6Addresses' 'Port' 'Cookie' 'IsLocal' 'OurOwn' 'WideArea' 'Multicast' 'Cached' } % List of non-constant message properties
        ROSPropertyList = { 'name' 'type' 'domain' 'description' 'hostname' 'ipv4_addresses' 'ipv6_addresses' 'port' 'cookie' 'is_local' 'our_own' 'wide_area' 'multicast' 'cached' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Name
        Type
        Domain
        Description
        Hostname
        Ipv4Addresses
        Ipv6Addresses
        Port
        Cookie
        IsLocal
        OurOwn
        WideArea
        Multicast
        Cached
    end
    methods
        function set.Name(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'DiscoveredService', 'Name');
            obj.Name = char(val);
        end
        function set.Type(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'DiscoveredService', 'Type');
            obj.Type = char(val);
        end
        function set.Domain(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'DiscoveredService', 'Domain');
            obj.Domain = char(val);
        end
        function set.Description(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'DiscoveredService', 'Description');
            obj.Description = char(val);
        end
        function set.Hostname(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'DiscoveredService', 'Hostname');
            obj.Hostname = char(val);
        end
        function set.Ipv4Addresses(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'DiscoveredService', 'Ipv4Addresses');
            obj.Ipv4Addresses = cell(val);
        end
        function set.Ipv6Addresses(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'DiscoveredService', 'Ipv6Addresses');
            obj.Ipv6Addresses = cell(val);
        end
        function set.Port(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DiscoveredService', 'Port');
            obj.Port = int32(val);
        end
        function set.Cookie(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DiscoveredService', 'Cookie');
            obj.Cookie = uint32(val);
        end
        function set.IsLocal(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DiscoveredService', 'IsLocal');
            obj.IsLocal = logical(val);
        end
        function set.OurOwn(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DiscoveredService', 'OurOwn');
            obj.OurOwn = logical(val);
        end
        function set.WideArea(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DiscoveredService', 'WideArea');
            obj.WideArea = logical(val);
        end
        function set.Multicast(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DiscoveredService', 'Multicast');
            obj.Multicast = logical(val);
        end
        function set.Cached(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DiscoveredService', 'Cached');
            obj.Cached = logical(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.zeroconf_msgs.DiscoveredService.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.zeroconf_msgs.DiscoveredService(strObj);
        end
    end
end
