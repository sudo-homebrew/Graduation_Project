
classdef Finger < ros.Message
    %Finger MATLAB implementation of leap_motion/Finger
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'leap_motion/Finger' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'c62c3b47717473d8242b45f476fc55c7' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'BoneList' 'LmcFingerId' 'Type' 'Length' 'Width' 'ToString' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'bone_list' 'lmc_finger_id' 'type' 'length' 'width' 'to_string' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            'ros.msggen.leap_motion.Bone' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        BoneList
        LmcFingerId
        Type
        Length
        Width
        ToString
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'Finger', 'Header')
            obj.Header = val;
        end
        function set.BoneList(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.leap_motion.Bone.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.leap_motion.Bone'};
            validateattributes(val, validClasses, validAttributes, 'Finger', 'BoneList')
            obj.BoneList = val;
        end
        function set.LmcFingerId(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Finger', 'LmcFingerId');
            obj.LmcFingerId = int32(val);
        end
        function set.Type(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Finger', 'Type');
            obj.Type = uint8(val);
        end
        function set.Length(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Finger', 'Length');
            obj.Length = single(val);
        end
        function set.Width(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Finger', 'Width');
            obj.Width = single(val);
        end
        function set.ToString(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'Finger', 'ToString');
            obj.ToString = char(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.leap_motion.Finger.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.leap_motion.Finger(strObj);
        end
    end
end
