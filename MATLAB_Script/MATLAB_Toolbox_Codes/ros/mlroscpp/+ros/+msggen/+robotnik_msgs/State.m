
classdef State < ros.Message
    %State MATLAB implementation of robotnik_msgs/State
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'robotnik_msgs/State' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'b3a486e7c5d573e5d1475cd7c02a518b' % The MD5 Checksum of the message definition
        PropertyList = { 'State_' 'DesiredFreq' 'RealFreq' 'StateDescription' } % List of non-constant message properties
        ROSPropertyList = { 'state' 'desired_freq' 'real_freq' 'state_description' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
        INITSTATE = int32(100)
        STANDBYSTATE = int32(200)
        READYSTATE = int32(300)
        EMERGENCYSTATE = int32(400)
        FAILURESTATE = int32(500)
        SHUTDOWNSTATE = int32(600)
        UNKOWNSTATE = int32(700)
    end
    properties
        State_
        DesiredFreq
        RealFreq
        StateDescription
    end
    methods
        function set.State_(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'State', 'State_');
            obj.State_ = int32(val);
        end
        function set.DesiredFreq(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'State', 'DesiredFreq');
            obj.DesiredFreq = single(val);
        end
        function set.RealFreq(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'State', 'RealFreq');
            obj.RealFreq = single(val);
        end
        function set.StateDescription(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'State', 'StateDescription');
            obj.StateDescription = char(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.robotnik_msgs.State.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.robotnik_msgs.State(strObj);
        end
    end
end
