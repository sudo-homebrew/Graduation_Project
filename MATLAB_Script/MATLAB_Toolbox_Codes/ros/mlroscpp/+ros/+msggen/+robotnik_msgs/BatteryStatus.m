
classdef BatteryStatus < ros.Message
    %BatteryStatus MATLAB implementation of robotnik_msgs/BatteryStatus
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'robotnik_msgs/BatteryStatus' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '6b1ba378a989551f0cb299f03c5355bb' % The MD5 Checksum of the message definition
        PropertyList = { 'Voltage' 'Current' 'Level' 'TimeRemaining' 'TimeCharging' 'IsCharging' } % List of non-constant message properties
        ROSPropertyList = { 'voltage' 'current' 'level' 'time_remaining' 'time_charging' 'is_charging' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Voltage
        Current
        Level
        TimeRemaining
        TimeCharging
        IsCharging
    end
    methods
        function set.Voltage(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BatteryStatus', 'Voltage');
            obj.Voltage = single(val);
        end
        function set.Current(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BatteryStatus', 'Current');
            obj.Current = single(val);
        end
        function set.Level(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BatteryStatus', 'Level');
            obj.Level = single(val);
        end
        function set.TimeRemaining(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BatteryStatus', 'TimeRemaining');
            obj.TimeRemaining = uint32(val);
        end
        function set.TimeCharging(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BatteryStatus', 'TimeCharging');
            obj.TimeCharging = uint32(val);
        end
        function set.IsCharging(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BatteryStatus', 'IsCharging');
            obj.IsCharging = logical(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.robotnik_msgs.BatteryStatus.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.robotnik_msgs.BatteryStatus(strObj);
        end
    end
end
