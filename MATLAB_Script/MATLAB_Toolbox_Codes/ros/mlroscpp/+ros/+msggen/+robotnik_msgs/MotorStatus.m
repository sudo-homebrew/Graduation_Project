
classdef MotorStatus < ros.Message
    %MotorStatus MATLAB implementation of robotnik_msgs/MotorStatus
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'robotnik_msgs/MotorStatus' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'bee7a4674a1d69703bedee2437db3d94' % The MD5 Checksum of the message definition
        PropertyList = { 'State' 'Status' 'Communicationstatus' 'Statusword' 'Driveflags' 'Activestatusword' 'Activedriveflags' 'Digitaloutputs' 'Digitalinputs' 'Averagecurrent' 'Analoginputs' } % List of non-constant message properties
        ROSPropertyList = { 'state' 'status' 'communicationstatus' 'statusword' 'driveflags' 'activestatusword' 'activedriveflags' 'digitaloutputs' 'digitalinputs' 'averagecurrent' 'analoginputs' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        State
        Status
        Communicationstatus
        Statusword
        Driveflags
        Activestatusword
        Activedriveflags
        Digitaloutputs
        Digitalinputs
        Averagecurrent
        Analoginputs
    end
    methods
        function set.State(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'MotorStatus', 'State');
            obj.State = char(val);
        end
        function set.Status(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'MotorStatus', 'Status');
            obj.Status = char(val);
        end
        function set.Communicationstatus(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'MotorStatus', 'Communicationstatus');
            obj.Communicationstatus = char(val);
        end
        function set.Statusword(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'MotorStatus', 'Statusword');
            obj.Statusword = char(val);
        end
        function set.Driveflags(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'MotorStatus', 'Driveflags');
            obj.Driveflags = char(val);
        end
        function set.Activestatusword(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'MotorStatus', 'Activestatusword');
            obj.Activestatusword = cell(val);
        end
        function set.Activedriveflags(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'MotorStatus', 'Activedriveflags');
            obj.Activedriveflags = cell(val);
        end
        function set.Digitaloutputs(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MotorStatus', 'Digitaloutputs');
            obj.Digitaloutputs = int32(val);
        end
        function set.Digitalinputs(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MotorStatus', 'Digitalinputs');
            obj.Digitalinputs = int32(val);
        end
        function set.Averagecurrent(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MotorStatus', 'Averagecurrent');
            obj.Averagecurrent = single(val);
        end
        function set.Analoginputs(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = single.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'MotorStatus', 'Analoginputs');
            obj.Analoginputs = single(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.robotnik_msgs.MotorStatus.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.robotnik_msgs.MotorStatus(strObj);
        end
    end
end
