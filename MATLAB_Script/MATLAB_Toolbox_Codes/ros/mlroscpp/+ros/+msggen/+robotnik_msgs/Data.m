
classdef Data < ros.Message
    %Data MATLAB implementation of robotnik_msgs/Data
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'robotnik_msgs/Data' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'beae478f52d7795f673d8edc9e4295a2' % The MD5 Checksum of the message definition
        PropertyList = { 'Interface' 'BytesSent' 'BytesReceived' 'UnitsSent' 'UnitsReceived' 'PackagesSent' 'PackagesReceived' } % List of non-constant message properties
        ROSPropertyList = { 'interface' 'bytes_sent' 'bytes_received' 'units_sent' 'units_received' 'packages_sent' 'packages_received' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Interface
        BytesSent
        BytesReceived
        UnitsSent
        UnitsReceived
        PackagesSent
        PackagesReceived
    end
    methods
        function set.Interface(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'Data', 'Interface');
            obj.Interface = char(val);
        end
        function set.BytesSent(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Data', 'BytesSent');
            obj.BytesSent = single(val);
        end
        function set.BytesReceived(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Data', 'BytesReceived');
            obj.BytesReceived = single(val);
        end
        function set.UnitsSent(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'Data', 'UnitsSent');
            obj.UnitsSent = char(val);
        end
        function set.UnitsReceived(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'Data', 'UnitsReceived');
            obj.UnitsReceived = char(val);
        end
        function set.PackagesSent(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Data', 'PackagesSent');
            obj.PackagesSent = int32(val);
        end
        function set.PackagesReceived(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Data', 'PackagesReceived');
            obj.PackagesReceived = int32(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.robotnik_msgs.Data.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.robotnik_msgs.Data(strObj);
        end
    end
end
