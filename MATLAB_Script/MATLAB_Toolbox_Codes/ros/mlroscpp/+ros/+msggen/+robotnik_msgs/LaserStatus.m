
classdef LaserStatus < ros.Message
    %LaserStatus MATLAB implementation of robotnik_msgs/LaserStatus
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'robotnik_msgs/LaserStatus' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '59f57d3a0c4aa9b97dcd8bd40152ebb4' % The MD5 Checksum of the message definition
        PropertyList = { 'Name' 'DetectingObstacles' 'Contaminated' 'FreeWarning' 'WarningZones' } % List of non-constant message properties
        ROSPropertyList = { 'name' 'detecting_obstacles' 'contaminated' 'free_warning' 'warning_zones' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Name
        DetectingObstacles
        Contaminated
        FreeWarning
        WarningZones
    end
    methods
        function set.Name(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'LaserStatus', 'Name');
            obj.Name = char(val);
        end
        function set.DetectingObstacles(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'LaserStatus', 'DetectingObstacles');
            obj.DetectingObstacles = logical(val);
        end
        function set.Contaminated(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'LaserStatus', 'Contaminated');
            obj.Contaminated = logical(val);
        end
        function set.FreeWarning(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'LaserStatus', 'FreeWarning');
            obj.FreeWarning = logical(val);
        end
        function set.WarningZones(obj, val)
            validClasses = {'logical', 'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = logical.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'LaserStatus', 'WarningZones');
            obj.WarningZones = logical(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.robotnik_msgs.LaserStatus.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.robotnik_msgs.LaserStatus(strObj);
        end
    end
end
