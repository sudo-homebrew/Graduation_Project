
classdef InverterStatus < ros.Message
    %InverterStatus MATLAB implementation of robotnik_msgs/InverterStatus
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'robotnik_msgs/InverterStatus' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'd693ae8f6a65a0d35c771d1a15a9e199' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'AcVoltage' 'DcVoltage' 'Load' 'Percentage' 'Temperature' 'On' 'SerialNumber' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'ac_voltage' 'dc_voltage' 'load' 'percentage' 'temperature' 'on' 'serial_number' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        AcVoltage
        DcVoltage
        Load
        Percentage
        Temperature
        On
        SerialNumber
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'InverterStatus', 'Header')
            obj.Header = val;
        end
        function set.AcVoltage(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'InverterStatus', 'AcVoltage');
            obj.AcVoltage = single(val);
        end
        function set.DcVoltage(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'InverterStatus', 'DcVoltage');
            obj.DcVoltage = single(val);
        end
        function set.Load(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'InverterStatus', 'Load');
            obj.Load = single(val);
        end
        function set.Percentage(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'InverterStatus', 'Percentage');
            obj.Percentage = single(val);
        end
        function set.Temperature(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'InverterStatus', 'Temperature');
            obj.Temperature = single(val);
        end
        function set.On(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'InverterStatus', 'On');
            obj.On = logical(val);
        end
        function set.SerialNumber(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'InverterStatus', 'SerialNumber');
            obj.SerialNumber = char(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.robotnik_msgs.InverterStatus.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.robotnik_msgs.InverterStatus(strObj);
        end
    end
end
