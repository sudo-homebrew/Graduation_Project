
classdef PresenceSensor < ros.Message
    %PresenceSensor MATLAB implementation of robotnik_msgs/PresenceSensor
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'robotnik_msgs/PresenceSensor' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'd655196d2d8c595af378ef8e462eca4a' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'Pose' 'SensorId' 'SensorType' 'DetectedId' 'Zone' 'Enabled' 'Value' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'pose' 'sensor_id' 'sensor_type' 'detected_id' 'zone' 'enabled' 'value' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            'ros.msggen.geometry_msgs.Pose' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
        CAMERA = 'camera';
        PHOTOCELL = 'photocell';
    end
    properties
        Header
        Pose
        SensorId
        SensorType
        DetectedId
        Zone
        Enabled
        Value
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'PresenceSensor', 'Header')
            obj.Header = val;
        end
        function set.Pose(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Pose'};
            validateattributes(val, validClasses, validAttributes, 'PresenceSensor', 'Pose')
            obj.Pose = val;
        end
        function set.SensorId(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'PresenceSensor', 'SensorId');
            obj.SensorId = char(val);
        end
        function set.SensorType(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'PresenceSensor', 'SensorType');
            obj.SensorType = char(val);
        end
        function set.DetectedId(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'PresenceSensor', 'DetectedId');
            obj.DetectedId = char(val);
        end
        function set.Zone(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'PresenceSensor', 'Zone');
            obj.Zone = char(val);
        end
        function set.Enabled(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PresenceSensor', 'Enabled');
            obj.Enabled = logical(val);
        end
        function set.Value(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PresenceSensor', 'Value');
            obj.Value = logical(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.robotnik_msgs.PresenceSensor.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.robotnik_msgs.PresenceSensor(strObj);
        end
    end
end
