
classdef inputs_outputs < ros.Message
    %inputs_outputs MATLAB implementation of robotnik_msgs/inputs_outputs
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'robotnik_msgs/inputs_outputs' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '219be75bd56b8ebdca0dfa526c3803be' % The MD5 Checksum of the message definition
        PropertyList = { 'DigitalInputs' 'DigitalOutputs' 'AnalogInputs' 'AnalogOutputs' } % List of non-constant message properties
        ROSPropertyList = { 'digital_inputs' 'digital_outputs' 'analog_inputs' 'analog_outputs' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        DigitalInputs
        DigitalOutputs
        AnalogInputs
        AnalogOutputs
    end
    methods
        function set.DigitalInputs(obj, val)
            validClasses = {'logical', 'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = logical.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'inputs_outputs', 'DigitalInputs');
            obj.DigitalInputs = logical(val);
        end
        function set.DigitalOutputs(obj, val)
            validClasses = {'logical', 'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = logical.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'inputs_outputs', 'DigitalOutputs');
            obj.DigitalOutputs = logical(val);
        end
        function set.AnalogInputs(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = single.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'inputs_outputs', 'AnalogInputs');
            obj.AnalogInputs = single(val);
        end
        function set.AnalogOutputs(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = single.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'inputs_outputs', 'AnalogOutputs');
            obj.AnalogOutputs = single(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.robotnik_msgs.inputs_outputs.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.robotnik_msgs.inputs_outputs(strObj);
        end
    end
end
