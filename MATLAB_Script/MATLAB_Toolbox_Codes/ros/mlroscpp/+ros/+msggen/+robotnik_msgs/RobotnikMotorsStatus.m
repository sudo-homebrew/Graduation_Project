
classdef RobotnikMotorsStatus < ros.Message
    %RobotnikMotorsStatus MATLAB implementation of robotnik_msgs/RobotnikMotorsStatus
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'robotnik_msgs/RobotnikMotorsStatus' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '40f5305ac2c33d213d54d21bf9ba7fc9' % The MD5 Checksum of the message definition
        PropertyList = { 'MotorStatus' 'Name' 'CanId' } % List of non-constant message properties
        ROSPropertyList = { 'motor_status' 'name' 'can_id' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.robotnik_msgs.MotorStatus' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        MotorStatus
        Name
        CanId
    end
    methods
        function set.MotorStatus(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.robotnik_msgs.MotorStatus.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.robotnik_msgs.MotorStatus'};
            validateattributes(val, validClasses, validAttributes, 'RobotnikMotorsStatus', 'MotorStatus')
            obj.MotorStatus = val;
        end
        function set.Name(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'RobotnikMotorsStatus', 'Name');
            obj.Name = cell(val);
        end
        function set.CanId(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = int32.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'RobotnikMotorsStatus', 'CanId');
            obj.CanId = int32(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.robotnik_msgs.RobotnikMotorsStatus.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.robotnik_msgs.RobotnikMotorsStatus(strObj);
        end
    end
end
