
classdef GetLinkPropertiesResponse < ros.Message
    %GetLinkPropertiesResponse MATLAB implementation of gazebo_msgs/GetLinkPropertiesResponse
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'gazebo_msgs/GetLinkPropertiesResponse' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'a8619f92d17cfcc3958c0fd13299443d' % The MD5 Checksum of the message definition
        PropertyList = { 'Com' 'GravityMode' 'Mass' 'Ixx' 'Ixy' 'Ixz' 'Iyy' 'Iyz' 'Izz' 'Success' 'StatusMessage' } % List of non-constant message properties
        ROSPropertyList = { 'com' 'gravity_mode' 'mass' 'ixx' 'ixy' 'ixz' 'iyy' 'iyz' 'izz' 'success' 'status_message' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.geometry_msgs.Pose' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Com
        GravityMode
        Mass
        Ixx
        Ixy
        Ixz
        Iyy
        Iyz
        Izz
        Success
        StatusMessage
    end
    methods
        function set.Com(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Pose'};
            validateattributes(val, validClasses, validAttributes, 'GetLinkPropertiesResponse', 'Com')
            obj.Com = val;
        end
        function set.GravityMode(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GetLinkPropertiesResponse', 'GravityMode');
            obj.GravityMode = logical(val);
        end
        function set.Mass(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GetLinkPropertiesResponse', 'Mass');
            obj.Mass = double(val);
        end
        function set.Ixx(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GetLinkPropertiesResponse', 'Ixx');
            obj.Ixx = double(val);
        end
        function set.Ixy(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GetLinkPropertiesResponse', 'Ixy');
            obj.Ixy = double(val);
        end
        function set.Ixz(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GetLinkPropertiesResponse', 'Ixz');
            obj.Ixz = double(val);
        end
        function set.Iyy(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GetLinkPropertiesResponse', 'Iyy');
            obj.Iyy = double(val);
        end
        function set.Iyz(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GetLinkPropertiesResponse', 'Iyz');
            obj.Iyz = double(val);
        end
        function set.Izz(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GetLinkPropertiesResponse', 'Izz');
            obj.Izz = double(val);
        end
        function set.Success(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GetLinkPropertiesResponse', 'Success');
            obj.Success = logical(val);
        end
        function set.StatusMessage(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'GetLinkPropertiesResponse', 'StatusMessage');
            obj.StatusMessage = char(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.gazebo_msgs.GetLinkPropertiesResponse.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.gazebo_msgs.GetLinkPropertiesResponse(strObj);
        end
    end
end
