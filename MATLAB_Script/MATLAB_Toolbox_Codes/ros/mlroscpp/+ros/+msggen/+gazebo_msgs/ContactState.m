
classdef ContactState < ros.Message
    %ContactState MATLAB implementation of gazebo_msgs/ContactState
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'gazebo_msgs/ContactState' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '48c0ffb054b8c444f870cecea1ee50d9' % The MD5 Checksum of the message definition
        PropertyList = { 'Wrenches' 'TotalWrench' 'ContactPositions' 'ContactNormals' 'Info' 'Collision1Name' 'Collision2Name' 'Depths' } % List of non-constant message properties
        ROSPropertyList = { 'wrenches' 'total_wrench' 'contact_positions' 'contact_normals' 'info' 'collision1_name' 'collision2_name' 'depths' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.geometry_msgs.Wrench' ...
            'ros.msggen.geometry_msgs.Wrench' ...
            'ros.msggen.geometry_msgs.Vector3' ...
            'ros.msggen.geometry_msgs.Vector3' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Wrenches
        TotalWrench
        ContactPositions
        ContactNormals
        Info
        Collision1Name
        Collision2Name
        Depths
    end
    methods
        function set.Wrenches(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.geometry_msgs.Wrench.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.geometry_msgs.Wrench'};
            validateattributes(val, validClasses, validAttributes, 'ContactState', 'Wrenches')
            obj.Wrenches = val;
        end
        function set.TotalWrench(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Wrench'};
            validateattributes(val, validClasses, validAttributes, 'ContactState', 'TotalWrench')
            obj.TotalWrench = val;
        end
        function set.ContactPositions(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.geometry_msgs.Vector3.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.geometry_msgs.Vector3'};
            validateattributes(val, validClasses, validAttributes, 'ContactState', 'ContactPositions')
            obj.ContactPositions = val;
        end
        function set.ContactNormals(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.geometry_msgs.Vector3.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.geometry_msgs.Vector3'};
            validateattributes(val, validClasses, validAttributes, 'ContactState', 'ContactNormals')
            obj.ContactNormals = val;
        end
        function set.Info(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'ContactState', 'Info');
            obj.Info = char(val);
        end
        function set.Collision1Name(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'ContactState', 'Collision1Name');
            obj.Collision1Name = char(val);
        end
        function set.Collision2Name(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'ContactState', 'Collision2Name');
            obj.Collision2Name = char(val);
        end
        function set.Depths(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'ContactState', 'Depths');
            obj.Depths = double(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.gazebo_msgs.ContactState.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.gazebo_msgs.ContactState(strObj);
        end
    end
end
