
classdef GetWorldPropertiesResponse < ros.Message
    %GetWorldPropertiesResponse MATLAB implementation of gazebo_msgs/GetWorldPropertiesResponse
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'gazebo_msgs/GetWorldPropertiesResponse' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '36bb0f2eccf4d8be971410c22818ba3f' % The MD5 Checksum of the message definition
        PropertyList = { 'SimTime' 'ModelNames' 'RenderingEnabled' 'Success' 'StatusMessage' } % List of non-constant message properties
        ROSPropertyList = { 'sim_time' 'model_names' 'rendering_enabled' 'success' 'status_message' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        SimTime
        ModelNames
        RenderingEnabled
        Success
        StatusMessage
    end
    methods
        function set.SimTime(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GetWorldPropertiesResponse', 'SimTime');
            obj.SimTime = double(val);
        end
        function set.ModelNames(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'GetWorldPropertiesResponse', 'ModelNames');
            obj.ModelNames = cell(val);
        end
        function set.RenderingEnabled(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GetWorldPropertiesResponse', 'RenderingEnabled');
            obj.RenderingEnabled = logical(val);
        end
        function set.Success(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GetWorldPropertiesResponse', 'Success');
            obj.Success = logical(val);
        end
        function set.StatusMessage(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'GetWorldPropertiesResponse', 'StatusMessage');
            obj.StatusMessage = char(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.gazebo_msgs.GetWorldPropertiesResponse.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.gazebo_msgs.GetWorldPropertiesResponse(strObj);
        end
    end
end
