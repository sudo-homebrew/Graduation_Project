
classdef GetModelPropertiesResponse < ros.Message
    %GetModelPropertiesResponse MATLAB implementation of gazebo_msgs/GetModelPropertiesResponse
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'gazebo_msgs/GetModelPropertiesResponse' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'b7f370938ef77b464b95f1bab3ec5028' % The MD5 Checksum of the message definition
        PropertyList = { 'ParentModelName' 'CanonicalBodyName' 'BodyNames' 'GeomNames' 'JointNames' 'ChildModelNames' 'IsStatic' 'Success' 'StatusMessage' } % List of non-constant message properties
        ROSPropertyList = { 'parent_model_name' 'canonical_body_name' 'body_names' 'geom_names' 'joint_names' 'child_model_names' 'is_static' 'success' 'status_message' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        ParentModelName
        CanonicalBodyName
        BodyNames
        GeomNames
        JointNames
        ChildModelNames
        IsStatic
        Success
        StatusMessage
    end
    methods
        function set.ParentModelName(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'GetModelPropertiesResponse', 'ParentModelName');
            obj.ParentModelName = char(val);
        end
        function set.CanonicalBodyName(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'GetModelPropertiesResponse', 'CanonicalBodyName');
            obj.CanonicalBodyName = char(val);
        end
        function set.BodyNames(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'GetModelPropertiesResponse', 'BodyNames');
            obj.BodyNames = cell(val);
        end
        function set.GeomNames(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'GetModelPropertiesResponse', 'GeomNames');
            obj.GeomNames = cell(val);
        end
        function set.JointNames(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'GetModelPropertiesResponse', 'JointNames');
            obj.JointNames = cell(val);
        end
        function set.ChildModelNames(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'GetModelPropertiesResponse', 'ChildModelNames');
            obj.ChildModelNames = cell(val);
        end
        function set.IsStatic(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GetModelPropertiesResponse', 'IsStatic');
            obj.IsStatic = logical(val);
        end
        function set.Success(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GetModelPropertiesResponse', 'Success');
            obj.Success = logical(val);
        end
        function set.StatusMessage(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'GetModelPropertiesResponse', 'StatusMessage');
            obj.StatusMessage = char(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.gazebo_msgs.GetModelPropertiesResponse.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.gazebo_msgs.GetModelPropertiesResponse(strObj);
        end
    end
end
