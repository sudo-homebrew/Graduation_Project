
classdef SensorPerformanceMetric < ros.Message
    %SensorPerformanceMetric MATLAB implementation of gazebo_msgs/SensorPerformanceMetric
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'gazebo_msgs/SensorPerformanceMetric' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '01762ded18cfe9ebc7c8222667c99547' % The MD5 Checksum of the message definition
        PropertyList = { 'Name' 'SimUpdateRate' 'RealUpdateRate' 'Fps' } % List of non-constant message properties
        ROSPropertyList = { 'name' 'sim_update_rate' 'real_update_rate' 'fps' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Name
        SimUpdateRate
        RealUpdateRate
        Fps
    end
    methods
        function set.Name(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'SensorPerformanceMetric', 'Name');
            obj.Name = char(val);
        end
        function set.SimUpdateRate(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SensorPerformanceMetric', 'SimUpdateRate');
            obj.SimUpdateRate = double(val);
        end
        function set.RealUpdateRate(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SensorPerformanceMetric', 'RealUpdateRate');
            obj.RealUpdateRate = double(val);
        end
        function set.Fps(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SensorPerformanceMetric', 'Fps');
            obj.Fps = double(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.gazebo_msgs.SensorPerformanceMetric.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.gazebo_msgs.SensorPerformanceMetric(strObj);
        end
    end
end
