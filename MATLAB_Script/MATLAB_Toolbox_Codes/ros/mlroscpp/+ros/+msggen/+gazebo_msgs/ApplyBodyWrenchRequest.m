
classdef ApplyBodyWrenchRequest < ros.Message
    %ApplyBodyWrenchRequest MATLAB implementation of gazebo_msgs/ApplyBodyWrenchRequest
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'gazebo_msgs/ApplyBodyWrenchRequest' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'e37e6adf97eba5095baa77dffb71e5bd' % The MD5 Checksum of the message definition
        PropertyList = { 'ReferencePoint' 'Wrench' 'StartTime' 'Duration' 'BodyName' 'ReferenceFrame' } % List of non-constant message properties
        ROSPropertyList = { 'reference_point' 'wrench' 'start_time' 'duration' 'body_name' 'reference_frame' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.geometry_msgs.Point' ...
            'ros.msggen.geometry_msgs.Wrench' ...
            'ros.msg.Time' ...
            'ros.msg.Duration' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        ReferencePoint
        Wrench
        StartTime
        Duration
        BodyName
        ReferenceFrame
    end
    methods
        function set.ReferencePoint(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Point'};
            validateattributes(val, validClasses, validAttributes, 'ApplyBodyWrenchRequest', 'ReferencePoint')
            obj.ReferencePoint = val;
        end
        function set.Wrench(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Wrench'};
            validateattributes(val, validClasses, validAttributes, 'ApplyBodyWrenchRequest', 'Wrench')
            obj.Wrench = val;
        end
        function set.StartTime(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msg.Time'};
            validateattributes(val, validClasses, validAttributes, 'ApplyBodyWrenchRequest', 'StartTime')
            obj.StartTime = val;
        end
        function set.Duration(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msg.Duration'};
            validateattributes(val, validClasses, validAttributes, 'ApplyBodyWrenchRequest', 'Duration')
            obj.Duration = val;
        end
        function set.BodyName(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'ApplyBodyWrenchRequest', 'BodyName');
            obj.BodyName = char(val);
        end
        function set.ReferenceFrame(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'ApplyBodyWrenchRequest', 'ReferenceFrame');
            obj.ReferenceFrame = char(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.gazebo_msgs.ApplyBodyWrenchRequest.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.gazebo_msgs.ApplyBodyWrenchRequest(strObj);
        end
    end
end
