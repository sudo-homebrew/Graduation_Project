
classdef SpawnModelRequest < ros.Message
    %SpawnModelRequest MATLAB implementation of gazebo_msgs/SpawnModelRequest
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'gazebo_msgs/SpawnModelRequest' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '6d0eba5753761cd57e6263a056b79930' % The MD5 Checksum of the message definition
        PropertyList = { 'InitialPose' 'ModelName' 'ModelXml' 'RobotNamespace' 'ReferenceFrame' } % List of non-constant message properties
        ROSPropertyList = { 'initial_pose' 'model_name' 'model_xml' 'robot_namespace' 'reference_frame' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.geometry_msgs.Pose' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        InitialPose
        ModelName
        ModelXml
        RobotNamespace
        ReferenceFrame
    end
    methods
        function set.InitialPose(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Pose'};
            validateattributes(val, validClasses, validAttributes, 'SpawnModelRequest', 'InitialPose')
            obj.InitialPose = val;
        end
        function set.ModelName(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'SpawnModelRequest', 'ModelName');
            obj.ModelName = char(val);
        end
        function set.ModelXml(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'SpawnModelRequest', 'ModelXml');
            obj.ModelXml = char(val);
        end
        function set.RobotNamespace(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'SpawnModelRequest', 'RobotNamespace');
            obj.RobotNamespace = char(val);
        end
        function set.ReferenceFrame(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'SpawnModelRequest', 'ReferenceFrame');
            obj.ReferenceFrame = char(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.gazebo_msgs.SpawnModelRequest.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.gazebo_msgs.SpawnModelRequest(strObj);
        end
    end
end
