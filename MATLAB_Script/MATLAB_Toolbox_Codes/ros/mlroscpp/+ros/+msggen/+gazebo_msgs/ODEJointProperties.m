
classdef ODEJointProperties < ros.Message
    %ODEJointProperties MATLAB implementation of gazebo_msgs/ODEJointProperties
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'gazebo_msgs/ODEJointProperties' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '1b744c32a920af979f53afe2f9c3511f' % The MD5 Checksum of the message definition
        PropertyList = { 'Damping' 'HiStop' 'LoStop' 'Erp' 'Cfm' 'StopErp' 'StopCfm' 'FudgeFactor' 'Fmax' 'Vel' } % List of non-constant message properties
        ROSPropertyList = { 'damping' 'hiStop' 'loStop' 'erp' 'cfm' 'stop_erp' 'stop_cfm' 'fudge_factor' 'fmax' 'vel' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Damping
        HiStop
        LoStop
        Erp
        Cfm
        StopErp
        StopCfm
        FudgeFactor
        Fmax
        Vel
    end
    methods
        function set.Damping(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'ODEJointProperties', 'Damping');
            obj.Damping = double(val);
        end
        function set.HiStop(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'ODEJointProperties', 'HiStop');
            obj.HiStop = double(val);
        end
        function set.LoStop(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'ODEJointProperties', 'LoStop');
            obj.LoStop = double(val);
        end
        function set.Erp(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'ODEJointProperties', 'Erp');
            obj.Erp = double(val);
        end
        function set.Cfm(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'ODEJointProperties', 'Cfm');
            obj.Cfm = double(val);
        end
        function set.StopErp(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'ODEJointProperties', 'StopErp');
            obj.StopErp = double(val);
        end
        function set.StopCfm(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'ODEJointProperties', 'StopCfm');
            obj.StopCfm = double(val);
        end
        function set.FudgeFactor(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'ODEJointProperties', 'FudgeFactor');
            obj.FudgeFactor = double(val);
        end
        function set.Fmax(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'ODEJointProperties', 'Fmax');
            obj.Fmax = double(val);
        end
        function set.Vel(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'ODEJointProperties', 'Vel');
            obj.Vel = double(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.gazebo_msgs.ODEJointProperties.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.gazebo_msgs.ODEJointProperties(strObj);
        end
    end
end
