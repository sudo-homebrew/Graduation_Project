
classdef JointState < ros.Message
    %JointState MATLAB implementation of dynamixel_msgs/JointState
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'dynamixel_msgs/JointState' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '2b8449320cde76616338e2539db27c32' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'Name' 'MotorIds' 'MotorTemps' 'GoalPos' 'CurrentPos' 'Error' 'Velocity' 'Load' 'IsMoving' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'name' 'motor_ids' 'motor_temps' 'goal_pos' 'current_pos' 'error' 'velocity' 'load' 'is_moving' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        Name
        MotorIds
        MotorTemps
        GoalPos
        CurrentPos
        Error
        Velocity
        Load
        IsMoving
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'JointState', 'Header')
            obj.Header = val;
        end
        function set.Name(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'JointState', 'Name');
            obj.Name = char(val);
        end
        function set.MotorIds(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = int32.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'JointState', 'MotorIds');
            obj.MotorIds = int32(val);
        end
        function set.MotorTemps(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = int32.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'JointState', 'MotorTemps');
            obj.MotorTemps = int32(val);
        end
        function set.GoalPos(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointState', 'GoalPos');
            obj.GoalPos = double(val);
        end
        function set.CurrentPos(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointState', 'CurrentPos');
            obj.CurrentPos = double(val);
        end
        function set.Error(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointState', 'Error');
            obj.Error = double(val);
        end
        function set.Velocity(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointState', 'Velocity');
            obj.Velocity = double(val);
        end
        function set.Load(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointState', 'Load');
            obj.Load = double(val);
        end
        function set.IsMoving(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointState', 'IsMoving');
            obj.IsMoving = logical(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.dynamixel_msgs.JointState.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.dynamixel_msgs.JointState(strObj);
        end
    end
end
