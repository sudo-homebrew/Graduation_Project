
classdef MotorState < ros.Message
    %MotorState MATLAB implementation of dynamixel_msgs/MotorState
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'dynamixel_msgs/MotorState' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '1cefdc3ff0c7d52e475886024476b74d' % The MD5 Checksum of the message definition
        PropertyList = { 'Timestamp' 'Id' 'Goal' 'Position' 'Error' 'Speed' 'Load' 'Voltage' 'Temperature' 'Moving' } % List of non-constant message properties
        ROSPropertyList = { 'timestamp' 'id' 'goal' 'position' 'error' 'speed' 'load' 'voltage' 'temperature' 'moving' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Timestamp
        Id
        Goal
        Position
        Error
        Speed
        Load
        Voltage
        Temperature
        Moving
    end
    methods
        function set.Timestamp(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MotorState', 'Timestamp');
            obj.Timestamp = double(val);
        end
        function set.Id(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MotorState', 'Id');
            obj.Id = int32(val);
        end
        function set.Goal(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MotorState', 'Goal');
            obj.Goal = int32(val);
        end
        function set.Position(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MotorState', 'Position');
            obj.Position = int32(val);
        end
        function set.Error(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MotorState', 'Error');
            obj.Error = int32(val);
        end
        function set.Speed(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MotorState', 'Speed');
            obj.Speed = int32(val);
        end
        function set.Load(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MotorState', 'Load');
            obj.Load = double(val);
        end
        function set.Voltage(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MotorState', 'Voltage');
            obj.Voltage = double(val);
        end
        function set.Temperature(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MotorState', 'Temperature');
            obj.Temperature = int32(val);
        end
        function set.Moving(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'MotorState', 'Moving');
            obj.Moving = logical(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.dynamixel_msgs.MotorState.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.dynamixel_msgs.MotorState(strObj);
        end
    end
end
