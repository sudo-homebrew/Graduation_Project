
classdef PidState < ros.Message
    %PidState MATLAB implementation of control_msgs/PidState
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'control_msgs/PidState' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'b138ec00e886c10e73f27e8712252ea6' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'Timestep' 'Error' 'ErrorDot' 'PError' 'IError' 'DError' 'PTerm' 'ITerm' 'DTerm' 'IMax' 'IMin' 'Output' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'timestep' 'error' 'error_dot' 'p_error' 'i_error' 'd_error' 'p_term' 'i_term' 'd_term' 'i_max' 'i_min' 'output' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            'ros.msg.Duration' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        Timestep
        Error
        ErrorDot
        PError
        IError
        DError
        PTerm
        ITerm
        DTerm
        IMax
        IMin
        Output
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'PidState', 'Header')
            obj.Header = val;
        end
        function set.Timestep(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msg.Duration'};
            validateattributes(val, validClasses, validAttributes, 'PidState', 'Timestep')
            obj.Timestep = val;
        end
        function set.Error(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PidState', 'Error');
            obj.Error = double(val);
        end
        function set.ErrorDot(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PidState', 'ErrorDot');
            obj.ErrorDot = double(val);
        end
        function set.PError(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PidState', 'PError');
            obj.PError = double(val);
        end
        function set.IError(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PidState', 'IError');
            obj.IError = double(val);
        end
        function set.DError(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PidState', 'DError');
            obj.DError = double(val);
        end
        function set.PTerm(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PidState', 'PTerm');
            obj.PTerm = double(val);
        end
        function set.ITerm(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PidState', 'ITerm');
            obj.ITerm = double(val);
        end
        function set.DTerm(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PidState', 'DTerm');
            obj.DTerm = double(val);
        end
        function set.IMax(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PidState', 'IMax');
            obj.IMax = double(val);
        end
        function set.IMin(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PidState', 'IMin');
            obj.IMin = double(val);
        end
        function set.Output(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PidState', 'Output');
            obj.Output = double(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.control_msgs.PidState.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.control_msgs.PidState(strObj);
        end
    end
end
