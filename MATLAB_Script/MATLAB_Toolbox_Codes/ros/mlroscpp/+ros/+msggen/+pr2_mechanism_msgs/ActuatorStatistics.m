
classdef ActuatorStatistics < ros.Message
    %ActuatorStatistics MATLAB implementation of pr2_mechanism_msgs/ActuatorStatistics
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'pr2_mechanism_msgs/ActuatorStatistics' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'c37184273b29627de29382f1d3670175' % The MD5 Checksum of the message definition
        PropertyList = { 'Timestamp' 'Name' 'DeviceId' 'EncoderCount' 'EncoderOffset' 'Position' 'EncoderVelocity' 'Velocity' 'CalibrationReading' 'CalibrationRisingEdgeValid' 'CalibrationFallingEdgeValid' 'LastCalibrationRisingEdge' 'LastCalibrationFallingEdge' 'IsEnabled' 'Halted' 'LastCommandedCurrent' 'LastCommandedEffort' 'LastExecutedCurrent' 'LastExecutedEffort' 'LastMeasuredCurrent' 'LastMeasuredEffort' 'MotorVoltage' 'NumEncoderErrors' } % List of non-constant message properties
        ROSPropertyList = { 'timestamp' 'name' 'device_id' 'encoder_count' 'encoder_offset' 'position' 'encoder_velocity' 'velocity' 'calibration_reading' 'calibration_rising_edge_valid' 'calibration_falling_edge_valid' 'last_calibration_rising_edge' 'last_calibration_falling_edge' 'is_enabled' 'halted' 'last_commanded_current' 'last_commanded_effort' 'last_executed_current' 'last_executed_effort' 'last_measured_current' 'last_measured_effort' 'motor_voltage' 'num_encoder_errors' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msg.Time' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Timestamp
        Name
        DeviceId
        EncoderCount
        EncoderOffset
        Position
        EncoderVelocity
        Velocity
        CalibrationReading
        CalibrationRisingEdgeValid
        CalibrationFallingEdgeValid
        LastCalibrationRisingEdge
        LastCalibrationFallingEdge
        IsEnabled
        Halted
        LastCommandedCurrent
        LastCommandedEffort
        LastExecutedCurrent
        LastExecutedEffort
        LastMeasuredCurrent
        LastMeasuredEffort
        MotorVoltage
        NumEncoderErrors
    end
    methods
        function set.Timestamp(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msg.Time'};
            validateattributes(val, validClasses, validAttributes, 'ActuatorStatistics', 'Timestamp')
            obj.Timestamp = val;
        end
        function set.Name(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'ActuatorStatistics', 'Name');
            obj.Name = char(val);
        end
        function set.DeviceId(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ActuatorStatistics', 'DeviceId');
            obj.DeviceId = int32(val);
        end
        function set.EncoderCount(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ActuatorStatistics', 'EncoderCount');
            obj.EncoderCount = int32(val);
        end
        function set.EncoderOffset(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ActuatorStatistics', 'EncoderOffset');
            obj.EncoderOffset = double(val);
        end
        function set.Position(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ActuatorStatistics', 'Position');
            obj.Position = double(val);
        end
        function set.EncoderVelocity(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ActuatorStatistics', 'EncoderVelocity');
            obj.EncoderVelocity = double(val);
        end
        function set.Velocity(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ActuatorStatistics', 'Velocity');
            obj.Velocity = double(val);
        end
        function set.CalibrationReading(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ActuatorStatistics', 'CalibrationReading');
            obj.CalibrationReading = logical(val);
        end
        function set.CalibrationRisingEdgeValid(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ActuatorStatistics', 'CalibrationRisingEdgeValid');
            obj.CalibrationRisingEdgeValid = logical(val);
        end
        function set.CalibrationFallingEdgeValid(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ActuatorStatistics', 'CalibrationFallingEdgeValid');
            obj.CalibrationFallingEdgeValid = logical(val);
        end
        function set.LastCalibrationRisingEdge(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ActuatorStatistics', 'LastCalibrationRisingEdge');
            obj.LastCalibrationRisingEdge = double(val);
        end
        function set.LastCalibrationFallingEdge(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ActuatorStatistics', 'LastCalibrationFallingEdge');
            obj.LastCalibrationFallingEdge = double(val);
        end
        function set.IsEnabled(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ActuatorStatistics', 'IsEnabled');
            obj.IsEnabled = logical(val);
        end
        function set.Halted(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ActuatorStatistics', 'Halted');
            obj.Halted = logical(val);
        end
        function set.LastCommandedCurrent(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ActuatorStatistics', 'LastCommandedCurrent');
            obj.LastCommandedCurrent = double(val);
        end
        function set.LastCommandedEffort(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ActuatorStatistics', 'LastCommandedEffort');
            obj.LastCommandedEffort = double(val);
        end
        function set.LastExecutedCurrent(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ActuatorStatistics', 'LastExecutedCurrent');
            obj.LastExecutedCurrent = double(val);
        end
        function set.LastExecutedEffort(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ActuatorStatistics', 'LastExecutedEffort');
            obj.LastExecutedEffort = double(val);
        end
        function set.LastMeasuredCurrent(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ActuatorStatistics', 'LastMeasuredCurrent');
            obj.LastMeasuredCurrent = double(val);
        end
        function set.LastMeasuredEffort(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ActuatorStatistics', 'LastMeasuredEffort');
            obj.LastMeasuredEffort = double(val);
        end
        function set.MotorVoltage(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ActuatorStatistics', 'MotorVoltage');
            obj.MotorVoltage = double(val);
        end
        function set.NumEncoderErrors(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ActuatorStatistics', 'NumEncoderErrors');
            obj.NumEncoderErrors = int32(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.pr2_mechanism_msgs.ActuatorStatistics.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.pr2_mechanism_msgs.ActuatorStatistics(strObj);
        end
    end
end
