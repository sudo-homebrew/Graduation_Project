
classdef JointStatistics < ros.Message
    %JointStatistics MATLAB implementation of pr2_mechanism_msgs/JointStatistics
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'pr2_mechanism_msgs/JointStatistics' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '90fdc8acbce5bc783d8b4aec49af6590' % The MD5 Checksum of the message definition
        PropertyList = { 'Timestamp' 'Name' 'Position' 'Velocity' 'MeasuredEffort' 'CommandedEffort' 'IsCalibrated' 'ViolatedLimits' 'Odometer' 'MinPosition' 'MaxPosition' 'MaxAbsVelocity' 'MaxAbsEffort' } % List of non-constant message properties
        ROSPropertyList = { 'timestamp' 'name' 'position' 'velocity' 'measured_effort' 'commanded_effort' 'is_calibrated' 'violated_limits' 'odometer' 'min_position' 'max_position' 'max_abs_velocity' 'max_abs_effort' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msg.Time' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Timestamp
        Name
        Position
        Velocity
        MeasuredEffort
        CommandedEffort
        IsCalibrated
        ViolatedLimits
        Odometer
        MinPosition
        MaxPosition
        MaxAbsVelocity
        MaxAbsEffort
    end
    methods
        function set.Timestamp(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msg.Time'};
            validateattributes(val, validClasses, validAttributes, 'JointStatistics', 'Timestamp')
            obj.Timestamp = val;
        end
        function set.Name(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'JointStatistics', 'Name');
            obj.Name = char(val);
        end
        function set.Position(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointStatistics', 'Position');
            obj.Position = double(val);
        end
        function set.Velocity(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointStatistics', 'Velocity');
            obj.Velocity = double(val);
        end
        function set.MeasuredEffort(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointStatistics', 'MeasuredEffort');
            obj.MeasuredEffort = double(val);
        end
        function set.CommandedEffort(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointStatistics', 'CommandedEffort');
            obj.CommandedEffort = double(val);
        end
        function set.IsCalibrated(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointStatistics', 'IsCalibrated');
            obj.IsCalibrated = logical(val);
        end
        function set.ViolatedLimits(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointStatistics', 'ViolatedLimits');
            obj.ViolatedLimits = logical(val);
        end
        function set.Odometer(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointStatistics', 'Odometer');
            obj.Odometer = double(val);
        end
        function set.MinPosition(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointStatistics', 'MinPosition');
            obj.MinPosition = double(val);
        end
        function set.MaxPosition(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointStatistics', 'MaxPosition');
            obj.MaxPosition = double(val);
        end
        function set.MaxAbsVelocity(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointStatistics', 'MaxAbsVelocity');
            obj.MaxAbsVelocity = double(val);
        end
        function set.MaxAbsEffort(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointStatistics', 'MaxAbsEffort');
            obj.MaxAbsEffort = double(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.pr2_mechanism_msgs.JointStatistics.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.pr2_mechanism_msgs.JointStatistics(strObj);
        end
    end
end
