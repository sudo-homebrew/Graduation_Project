
classdef CameraMeasurement < ros.Message
    %CameraMeasurement MATLAB implementation of calibration_msgs/CameraMeasurement
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'calibration_msgs/CameraMeasurement' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'f7a0cca96cdd8e17d1424338e086252f' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'ImagePoints' 'CamInfo' 'Image' 'ImageRect' 'Features' 'CameraId' 'Verbose' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'image_points' 'cam_info' 'image' 'image_rect' 'features' 'camera_id' 'verbose' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            'ros.msggen.geometry_msgs.Point' ...
            'ros.msggen.sensor_msgs.CameraInfo' ...
            'ros.msg.sensor_msgs.Image' ...
            'ros.msg.sensor_msgs.Image' ...
            'ros.msggen.calibration_msgs.CalibrationPattern' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        ImagePoints
        CamInfo
        Image
        ImageRect
        Features
        CameraId
        Verbose
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'CameraMeasurement', 'Header')
            obj.Header = val;
        end
        function set.ImagePoints(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.geometry_msgs.Point.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.geometry_msgs.Point'};
            validateattributes(val, validClasses, validAttributes, 'CameraMeasurement', 'ImagePoints')
            obj.ImagePoints = val;
        end
        function set.CamInfo(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.sensor_msgs.CameraInfo'};
            validateattributes(val, validClasses, validAttributes, 'CameraMeasurement', 'CamInfo')
            obj.CamInfo = val;
        end
        function set.Image(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msg.sensor_msgs.Image'};
            validateattributes(val, validClasses, validAttributes, 'CameraMeasurement', 'Image')
            obj.Image = val;
        end
        function set.ImageRect(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msg.sensor_msgs.Image'};
            validateattributes(val, validClasses, validAttributes, 'CameraMeasurement', 'ImageRect')
            obj.ImageRect = val;
        end
        function set.Features(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.calibration_msgs.CalibrationPattern'};
            validateattributes(val, validClasses, validAttributes, 'CameraMeasurement', 'Features')
            obj.Features = val;
        end
        function set.CameraId(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'CameraMeasurement', 'CameraId');
            obj.CameraId = char(val);
        end
        function set.Verbose(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'CameraMeasurement', 'Verbose');
            obj.Verbose = logical(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.calibration_msgs.CameraMeasurement.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.calibration_msgs.CameraMeasurement(strObj);
        end
    end
end
