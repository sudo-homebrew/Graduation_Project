
classdef DenseLaserSnapshot < ros.Message
    %DenseLaserSnapshot MATLAB implementation of calibration_msgs/DenseLaserSnapshot
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'calibration_msgs/DenseLaserSnapshot' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'deb2810d3530db3484f886a81243195d' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'ScanStart' 'AngleMin' 'AngleMax' 'AngleIncrement' 'TimeIncrement' 'RangeMin' 'RangeMax' 'ReadingsPerScan' 'NumScans' 'Ranges' 'Intensities' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'scan_start' 'angle_min' 'angle_max' 'angle_increment' 'time_increment' 'range_min' 'range_max' 'readings_per_scan' 'num_scans' 'ranges' 'intensities' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            'ros.msg.Time' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        ScanStart
        AngleMin
        AngleMax
        AngleIncrement
        TimeIncrement
        RangeMin
        RangeMax
        ReadingsPerScan
        NumScans
        Ranges
        Intensities
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'DenseLaserSnapshot', 'Header')
            obj.Header = val;
        end
        function set.ScanStart(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msg.Time.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msg.Time'};
            validateattributes(val, validClasses, validAttributes, 'DenseLaserSnapshot', 'ScanStart')
            obj.ScanStart = val;
        end
        function set.AngleMin(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DenseLaserSnapshot', 'AngleMin');
            obj.AngleMin = single(val);
        end
        function set.AngleMax(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DenseLaserSnapshot', 'AngleMax');
            obj.AngleMax = single(val);
        end
        function set.AngleIncrement(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DenseLaserSnapshot', 'AngleIncrement');
            obj.AngleIncrement = single(val);
        end
        function set.TimeIncrement(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DenseLaserSnapshot', 'TimeIncrement');
            obj.TimeIncrement = single(val);
        end
        function set.RangeMin(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DenseLaserSnapshot', 'RangeMin');
            obj.RangeMin = single(val);
        end
        function set.RangeMax(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DenseLaserSnapshot', 'RangeMax');
            obj.RangeMax = single(val);
        end
        function set.ReadingsPerScan(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DenseLaserSnapshot', 'ReadingsPerScan');
            obj.ReadingsPerScan = uint32(val);
        end
        function set.NumScans(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DenseLaserSnapshot', 'NumScans');
            obj.NumScans = uint32(val);
        end
        function set.Ranges(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = single.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'DenseLaserSnapshot', 'Ranges');
            obj.Ranges = single(val);
        end
        function set.Intensities(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = single.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'DenseLaserSnapshot', 'Intensities');
            obj.Intensities = single(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.calibration_msgs.DenseLaserSnapshot.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.calibration_msgs.DenseLaserSnapshot(strObj);
        end
    end
end
