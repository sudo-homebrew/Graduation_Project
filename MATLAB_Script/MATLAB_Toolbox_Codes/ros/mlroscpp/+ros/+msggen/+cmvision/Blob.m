
classdef Blob < ros.Message
    %Blob MATLAB implementation of cmvision/Blob
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'cmvision/Blob' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '4b9d58fede89a6e254c678818159f6c9' % The MD5 Checksum of the message definition
        PropertyList = { 'Name' 'Red' 'Green' 'Blue' 'Area' 'X' 'Y' 'Left' 'Right' 'Top' 'Bottom' } % List of non-constant message properties
        ROSPropertyList = { 'name' 'red' 'green' 'blue' 'area' 'x' 'y' 'left' 'right' 'top' 'bottom' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Name
        Red
        Green
        Blue
        Area
        X
        Y
        Left
        Right
        Top
        Bottom
    end
    methods
        function set.Name(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'Blob', 'Name');
            obj.Name = char(val);
        end
        function set.Red(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Blob', 'Red');
            obj.Red = uint32(val);
        end
        function set.Green(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Blob', 'Green');
            obj.Green = uint32(val);
        end
        function set.Blue(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Blob', 'Blue');
            obj.Blue = uint32(val);
        end
        function set.Area(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Blob', 'Area');
            obj.Area = uint32(val);
        end
        function set.X(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Blob', 'X');
            obj.X = uint32(val);
        end
        function set.Y(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Blob', 'Y');
            obj.Y = uint32(val);
        end
        function set.Left(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Blob', 'Left');
            obj.Left = uint32(val);
        end
        function set.Right(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Blob', 'Right');
            obj.Right = uint32(val);
        end
        function set.Top(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Blob', 'Top');
            obj.Top = uint32(val);
        end
        function set.Bottom(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Blob', 'Bottom');
            obj.Bottom = uint32(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.cmvision.Blob.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.cmvision.Blob(strObj);
        end
    end
end
