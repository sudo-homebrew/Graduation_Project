
classdef QueryTrajectoryStateResponse < ros.Message
    %QueryTrajectoryStateResponse MATLAB implementation of pr2_controllers_msgs/QueryTrajectoryStateResponse
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'pr2_controllers_msgs/QueryTrajectoryStateResponse' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '1f1a6554ad060f44d013e71868403c1a' % The MD5 Checksum of the message definition
        PropertyList = { 'Name' 'Position' 'Velocity' 'Acceleration' } % List of non-constant message properties
        ROSPropertyList = { 'name' 'position' 'velocity' 'acceleration' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Name
        Position
        Velocity
        Acceleration
    end
    methods
        function set.Name(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'QueryTrajectoryStateResponse', 'Name');
            obj.Name = cell(val);
        end
        function set.Position(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'QueryTrajectoryStateResponse', 'Position');
            obj.Position = double(val);
        end
        function set.Velocity(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'QueryTrajectoryStateResponse', 'Velocity');
            obj.Velocity = double(val);
        end
        function set.Acceleration(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'QueryTrajectoryStateResponse', 'Acceleration');
            obj.Acceleration = double(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.pr2_controllers_msgs.QueryTrajectoryStateResponse.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.pr2_controllers_msgs.QueryTrajectoryStateResponse(strObj);
        end
    end
end
