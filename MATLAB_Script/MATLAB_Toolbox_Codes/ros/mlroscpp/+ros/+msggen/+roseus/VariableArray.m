
classdef VariableArray < ros.Message
    %VariableArray MATLAB implementation of roseus/VariableArray
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'roseus/VariableArray' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'aebf8af723dcbdb6782481457d175157' % The MD5 Checksum of the message definition
        PropertyList = { 'TimeData' 'DurationData' 'StringData' 'Float32Data' 'Float64Data' 'Int16Data' 'Int32Data' 'Int64Data' 'Int8Data' 'Uint16Data' 'Uint32Data' 'Uint64Data' 'Uint8Data' 'BoolData' } % List of non-constant message properties
        ROSPropertyList = { 'time_data' 'duration_data' 'string_data' 'float32_data' 'float64_data' 'int16_data' 'int32_data' 'int64_data' 'int8_data' 'uint16_data' 'uint32_data' 'uint64_data' 'uint8_data' 'bool_data' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msg.Time' ...
            'ros.msg.Duration' ...
            'ros.msggen.std_msgs.String' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        TimeData
        DurationData
        StringData
        Float32Data
        Float64Data
        Int16Data
        Int32Data
        Int64Data
        Int8Data
        Uint16Data
        Uint32Data
        Uint64Data
        Uint8Data
        BoolData
    end
    methods
        function set.TimeData(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msg.Time.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msg.Time'};
            validateattributes(val, validClasses, validAttributes, 'VariableArray', 'TimeData')
            obj.TimeData = val;
        end
        function set.DurationData(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msg.Duration.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msg.Duration'};
            validateattributes(val, validClasses, validAttributes, 'VariableArray', 'DurationData')
            obj.DurationData = val;
        end
        function set.StringData(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.std_msgs.String.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.std_msgs.String'};
            validateattributes(val, validClasses, validAttributes, 'VariableArray', 'StringData')
            obj.StringData = val;
        end
        function set.Float32Data(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = single.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'VariableArray', 'Float32Data');
            obj.Float32Data = single(val);
        end
        function set.Float64Data(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'VariableArray', 'Float64Data');
            obj.Float64Data = double(val);
        end
        function set.Int16Data(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = int16.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'VariableArray', 'Int16Data');
            obj.Int16Data = int16(val);
        end
        function set.Int32Data(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = int32.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'VariableArray', 'Int32Data');
            obj.Int32Data = int32(val);
        end
        function set.Int64Data(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = int64.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'VariableArray', 'Int64Data');
            obj.Int64Data = int64(val);
        end
        function set.Int8Data(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = int8.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'VariableArray', 'Int8Data');
            obj.Int8Data = int8(val);
        end
        function set.Uint16Data(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = uint16.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'VariableArray', 'Uint16Data');
            obj.Uint16Data = uint16(val);
        end
        function set.Uint32Data(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = uint32.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'VariableArray', 'Uint32Data');
            obj.Uint32Data = uint32(val);
        end
        function set.Uint64Data(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = uint64.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'VariableArray', 'Uint64Data');
            obj.Uint64Data = uint64(val);
        end
        function set.Uint8Data(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = uint8.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'VariableArray', 'Uint8Data');
            obj.Uint8Data = uint8(val);
        end
        function set.BoolData(obj, val)
            validClasses = {'logical', 'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = logical.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'VariableArray', 'BoolData');
            obj.BoolData = logical(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.roseus.VariableArray.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.roseus.VariableArray(strObj);
        end
    end
end
