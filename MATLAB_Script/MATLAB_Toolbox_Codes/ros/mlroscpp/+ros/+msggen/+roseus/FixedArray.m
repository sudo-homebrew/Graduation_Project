
classdef FixedArray < ros.Message
    %FixedArray MATLAB implementation of roseus/FixedArray
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'roseus/FixedArray' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '6b30ccf11bc7409743664778a763a8c9' % The MD5 Checksum of the message definition
        PropertyList = { 'TimeData' 'DurationData' 'StringData' 'Float32Data' 'Float64Data' 'Int16Data' 'Int32Data' 'Int64Data' 'Int8Data' 'Uint16Data' 'Uint32Data' 'Uint64Data' 'Uint8Data' 'BoolData' } % List of non-constant message properties
        ROSPropertyList = { 'time_data' 'duration_data' 'string_data' 'float32_data' 'float64_data' 'int16_data' 'int32_data' 'int64_data' 'int8_data' 'uint16_data' 'uint32_data' 'uint64_data' 'uint8_data' 'bool_data' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msg.Time' ...
            'ros.msg.Duration' ...
            'ros.msggen.std_msgs.String' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        TimeData
        DurationData
        StringData
        Float32Data
        Float64Data
        Int16Data
        Int32Data
        Int64Data
        Int8Data
        Uint16Data
        Uint32Data
        Uint64Data
        Uint8Data
        BoolData
    end
    methods
        function set.TimeData(obj, val)
            val = val(:);
            validAttributes = {'vector', 'numel', 2};
            validClasses = {'ros.msg.Time'};
            validateattributes(val, validClasses, validAttributes, 'FixedArray', 'TimeData')
            obj.TimeData = val;
        end
        function set.DurationData(obj, val)
            val = val(:);
            validAttributes = {'vector', 'numel', 2};
            validClasses = {'ros.msg.Duration'};
            validateattributes(val, validClasses, validAttributes, 'FixedArray', 'DurationData')
            obj.DurationData = val;
        end
        function set.StringData(obj, val)
            val = val(:);
            validAttributes = {'vector', 'numel', 2};
            validClasses = {'ros.msggen.std_msgs.String'};
            validateattributes(val, validClasses, validAttributes, 'FixedArray', 'StringData')
            obj.StringData = val;
        end
        function set.Float32Data(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 3};
            validateattributes(val, validClasses, validAttributes, 'FixedArray', 'Float32Data');
            obj.Float32Data = single(val);
        end
        function set.Float64Data(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 3};
            validateattributes(val, validClasses, validAttributes, 'FixedArray', 'Float64Data');
            obj.Float64Data = double(val);
        end
        function set.Int16Data(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 3};
            validateattributes(val, validClasses, validAttributes, 'FixedArray', 'Int16Data');
            obj.Int16Data = int16(val);
        end
        function set.Int32Data(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 3};
            validateattributes(val, validClasses, validAttributes, 'FixedArray', 'Int32Data');
            obj.Int32Data = int32(val);
        end
        function set.Int64Data(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 3};
            validateattributes(val, validClasses, validAttributes, 'FixedArray', 'Int64Data');
            obj.Int64Data = int64(val);
        end
        function set.Int8Data(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 3};
            validateattributes(val, validClasses, validAttributes, 'FixedArray', 'Int8Data');
            obj.Int8Data = int8(val);
        end
        function set.Uint16Data(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 3};
            validateattributes(val, validClasses, validAttributes, 'FixedArray', 'Uint16Data');
            obj.Uint16Data = uint16(val);
        end
        function set.Uint32Data(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 3};
            validateattributes(val, validClasses, validAttributes, 'FixedArray', 'Uint32Data');
            obj.Uint32Data = uint32(val);
        end
        function set.Uint64Data(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 3};
            validateattributes(val, validClasses, validAttributes, 'FixedArray', 'Uint64Data');
            obj.Uint64Data = uint64(val);
        end
        function set.Uint8Data(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 17};
            validateattributes(val, validClasses, validAttributes, 'FixedArray', 'Uint8Data');
            obj.Uint8Data = uint8(val);
        end
        function set.BoolData(obj, val)
            validClasses = {'logical', 'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 2};
            validateattributes(val, validClasses, validAttributes, 'FixedArray', 'BoolData');
            obj.BoolData = logical(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.roseus.FixedArray.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.roseus.FixedArray(strObj);
        end
    end
end
