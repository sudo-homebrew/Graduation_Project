
classdef CartesianPose < ros.Message
    %CartesianPose MATLAB implementation of brics_actuator/CartesianPose
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'brics_actuator/CartesianPose' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '0fe287468091771914ed98dea2d2a5a5' % The MD5 Checksum of the message definition
        PropertyList = { 'TimeStamp' 'PoisonStamp' 'Position' 'Orientation' 'BaseFrameUri' 'TargetFrameUri' } % List of non-constant message properties
        ROSPropertyList = { 'timeStamp' 'poisonStamp' 'position' 'orientation' 'base_frame_uri' 'target_frame_uri' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msg.Time' ...
            'ros.msggen.brics_actuator.Poison' ...
            'ros.msggen.brics_actuator.CartesianVector' ...
            'ros.msg.geometry_msgs.Quaternion' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        TimeStamp
        PoisonStamp
        Position
        Orientation
        BaseFrameUri
        TargetFrameUri
    end
    methods
        function set.TimeStamp(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msg.Time'};
            validateattributes(val, validClasses, validAttributes, 'CartesianPose', 'TimeStamp')
            obj.TimeStamp = val;
        end
        function set.PoisonStamp(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.brics_actuator.Poison'};
            validateattributes(val, validClasses, validAttributes, 'CartesianPose', 'PoisonStamp')
            obj.PoisonStamp = val;
        end
        function set.Position(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.brics_actuator.CartesianVector'};
            validateattributes(val, validClasses, validAttributes, 'CartesianPose', 'Position')
            obj.Position = val;
        end
        function set.Orientation(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msg.geometry_msgs.Quaternion'};
            validateattributes(val, validClasses, validAttributes, 'CartesianPose', 'Orientation')
            obj.Orientation = val;
        end
        function set.BaseFrameUri(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'CartesianPose', 'BaseFrameUri');
            obj.BaseFrameUri = char(val);
        end
        function set.TargetFrameUri(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'CartesianPose', 'TargetFrameUri');
            obj.TargetFrameUri = char(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.brics_actuator.CartesianPose.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.brics_actuator.CartesianPose(strObj);
        end
    end
end
