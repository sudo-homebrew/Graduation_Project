
classdef JointConstraint < ros.Message
    %JointConstraint MATLAB implementation of brics_actuator/JointConstraint
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'brics_actuator/JointConstraint' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'f77db04949b26b64f80564df22f00ecb' % The MD5 Checksum of the message definition
        PropertyList = { 'Value' 'Type' } % List of non-constant message properties
        ROSPropertyList = { 'value' 'type' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.brics_actuator.JointValue' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Value
        Type
    end
    methods
        function set.Value(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.brics_actuator.JointValue'};
            validateattributes(val, validClasses, validAttributes, 'JointConstraint', 'Value')
            obj.Value = val;
        end
        function set.Type(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'JointConstraint', 'Type');
            obj.Type = char(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.brics_actuator.JointConstraint.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.brics_actuator.JointConstraint(strObj);
        end
    end
end
