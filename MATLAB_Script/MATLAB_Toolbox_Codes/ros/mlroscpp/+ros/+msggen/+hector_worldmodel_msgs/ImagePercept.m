
classdef ImagePercept < ros.Message
    %ImagePercept MATLAB implementation of hector_worldmodel_msgs/ImagePercept
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'hector_worldmodel_msgs/ImagePercept' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'cfe1ba9ccbb3e43950b420f7336a3c6c' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'CameraInfo' 'Info' 'X' 'Y' 'Width' 'Height' 'Distance' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'camera_info' 'info' 'x' 'y' 'width' 'height' 'distance' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            'ros.msggen.sensor_msgs.CameraInfo' ...
            'ros.msggen.hector_worldmodel_msgs.PerceptInfo' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        CameraInfo
        Info
        X
        Y
        Width
        Height
        Distance
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'ImagePercept', 'Header')
            obj.Header = val;
        end
        function set.CameraInfo(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.sensor_msgs.CameraInfo'};
            validateattributes(val, validClasses, validAttributes, 'ImagePercept', 'CameraInfo')
            obj.CameraInfo = val;
        end
        function set.Info(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.hector_worldmodel_msgs.PerceptInfo'};
            validateattributes(val, validClasses, validAttributes, 'ImagePercept', 'Info')
            obj.Info = val;
        end
        function set.X(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ImagePercept', 'X');
            obj.X = single(val);
        end
        function set.Y(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ImagePercept', 'Y');
            obj.Y = single(val);
        end
        function set.Width(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ImagePercept', 'Width');
            obj.Width = single(val);
        end
        function set.Height(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ImagePercept', 'Height');
            obj.Height = single(val);
        end
        function set.Distance(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ImagePercept', 'Distance');
            obj.Distance = single(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.hector_worldmodel_msgs.ImagePercept.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.hector_worldmodel_msgs.ImagePercept(strObj);
        end
    end
end
