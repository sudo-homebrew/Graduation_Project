
classdef PlanFootstepsBetweenFeetResponse < ros.Message
    %PlanFootstepsBetweenFeetResponse MATLAB implementation of humanoid_nav_msgs/PlanFootstepsBetweenFeetResponse
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'humanoid_nav_msgs/PlanFootstepsBetweenFeetResponse' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '1af07cd1d4ffe34a9a731e87aa13835c' % The MD5 Checksum of the message definition
        PropertyList = { 'Footsteps' 'Result' 'Costs' 'FinalEps' 'PlanningTime' 'ExpandedStates' } % List of non-constant message properties
        ROSPropertyList = { 'footsteps' 'result' 'costs' 'final_eps' 'planning_time' 'expanded_states' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.humanoid_nav_msgs.StepTarget' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Footsteps
        Result
        Costs
        FinalEps
        PlanningTime
        ExpandedStates
    end
    methods
        function set.Footsteps(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.humanoid_nav_msgs.StepTarget.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.humanoid_nav_msgs.StepTarget'};
            validateattributes(val, validClasses, validAttributes, 'PlanFootstepsBetweenFeetResponse', 'Footsteps')
            obj.Footsteps = val;
        end
        function set.Result(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PlanFootstepsBetweenFeetResponse', 'Result');
            obj.Result = logical(val);
        end
        function set.Costs(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PlanFootstepsBetweenFeetResponse', 'Costs');
            obj.Costs = double(val);
        end
        function set.FinalEps(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PlanFootstepsBetweenFeetResponse', 'FinalEps');
            obj.FinalEps = double(val);
        end
        function set.PlanningTime(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PlanFootstepsBetweenFeetResponse', 'PlanningTime');
            obj.PlanningTime = double(val);
        end
        function set.ExpandedStates(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PlanFootstepsBetweenFeetResponse', 'ExpandedStates');
            obj.ExpandedStates = int64(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.humanoid_nav_msgs.PlanFootstepsBetweenFeetResponse.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.humanoid_nav_msgs.PlanFootstepsBetweenFeetResponse(strObj);
        end
    end
end
