
classdef navdata_phys_measures < ros.Message
    %navdata_phys_measures MATLAB implementation of ardrone_autonomy/navdata_phys_measures
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'ardrone_autonomy/navdata_phys_measures' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '649dd469618f5ff313f6bceab2c356b7' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'DroneTime' 'Tag' 'Size' 'AccsTemp' 'GyroTemp' 'PhysAccs' 'PhysGyros' 'Alim3V3' 'VrefEpson' 'VrefIDG' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'drone_time' 'tag' 'size' 'accs_temp' 'gyro_temp' 'phys_accs' 'phys_gyros' 'alim3V3' 'vrefEpson' 'vrefIDG' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        DroneTime
        Tag
        Size
        AccsTemp
        GyroTemp
        PhysAccs
        PhysGyros
        Alim3V3
        VrefEpson
        VrefIDG
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'navdata_phys_measures', 'Header')
            obj.Header = val;
        end
        function set.DroneTime(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_phys_measures', 'DroneTime');
            obj.DroneTime = double(val);
        end
        function set.Tag(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_phys_measures', 'Tag');
            obj.Tag = uint16(val);
        end
        function set.Size(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_phys_measures', 'Size');
            obj.Size = uint16(val);
        end
        function set.AccsTemp(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_phys_measures', 'AccsTemp');
            obj.AccsTemp = single(val);
        end
        function set.GyroTemp(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_phys_measures', 'GyroTemp');
            obj.GyroTemp = uint16(val);
        end
        function set.PhysAccs(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = single.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'navdata_phys_measures', 'PhysAccs');
            obj.PhysAccs = single(val);
        end
        function set.PhysGyros(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = single.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'navdata_phys_measures', 'PhysGyros');
            obj.PhysGyros = single(val);
        end
        function set.Alim3V3(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_phys_measures', 'Alim3V3');
            obj.Alim3V3 = uint32(val);
        end
        function set.VrefEpson(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_phys_measures', 'VrefEpson');
            obj.VrefEpson = uint32(val);
        end
        function set.VrefIDG(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_phys_measures', 'VrefIDG');
            obj.VrefIDG = uint32(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.ardrone_autonomy.navdata_phys_measures.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.ardrone_autonomy.navdata_phys_measures(strObj);
        end
    end
end
