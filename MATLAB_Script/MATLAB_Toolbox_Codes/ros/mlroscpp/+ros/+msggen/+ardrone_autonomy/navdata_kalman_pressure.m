
classdef navdata_kalman_pressure < ros.Message
    %navdata_kalman_pressure MATLAB implementation of ardrone_autonomy/navdata_kalman_pressure
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'ardrone_autonomy/navdata_kalman_pressure' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '70734b6caff0fb7ea6fc88ffeea5cde5' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'DroneTime' 'Tag' 'Size' 'OffsetPressure' 'EstZ' 'EstZdot' 'EstBiasPWM' 'EstBiaisPression' 'OffsetUS' 'PredictionUS' 'CovAlt' 'CovPWM' 'CovVitesse' 'BoolEffetSol' 'SommeInno' 'FlagRejetUS' 'UMultisinus' 'GazAltitude' 'FlagMultisinus' 'FlagMultisinusDebut' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'drone_time' 'tag' 'size' 'offset_pressure' 'est_z' 'est_zdot' 'est_bias_PWM' 'est_biais_pression' 'offset_US' 'prediction_US' 'cov_alt' 'cov_PWM' 'cov_vitesse' 'bool_effet_sol' 'somme_inno' 'flag_rejet_US' 'u_multisinus' 'gaz_altitude' 'Flag_multisinus' 'Flag_multisinus_debut' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        DroneTime
        Tag
        Size
        OffsetPressure
        EstZ
        EstZdot
        EstBiasPWM
        EstBiaisPression
        OffsetUS
        PredictionUS
        CovAlt
        CovPWM
        CovVitesse
        BoolEffetSol
        SommeInno
        FlagRejetUS
        UMultisinus
        GazAltitude
        FlagMultisinus
        FlagMultisinusDebut
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'navdata_kalman_pressure', 'Header')
            obj.Header = val;
        end
        function set.DroneTime(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_kalman_pressure', 'DroneTime');
            obj.DroneTime = double(val);
        end
        function set.Tag(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_kalman_pressure', 'Tag');
            obj.Tag = uint16(val);
        end
        function set.Size(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_kalman_pressure', 'Size');
            obj.Size = uint16(val);
        end
        function set.OffsetPressure(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_kalman_pressure', 'OffsetPressure');
            obj.OffsetPressure = single(val);
        end
        function set.EstZ(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_kalman_pressure', 'EstZ');
            obj.EstZ = single(val);
        end
        function set.EstZdot(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_kalman_pressure', 'EstZdot');
            obj.EstZdot = single(val);
        end
        function set.EstBiasPWM(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_kalman_pressure', 'EstBiasPWM');
            obj.EstBiasPWM = single(val);
        end
        function set.EstBiaisPression(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_kalman_pressure', 'EstBiaisPression');
            obj.EstBiaisPression = single(val);
        end
        function set.OffsetUS(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_kalman_pressure', 'OffsetUS');
            obj.OffsetUS = single(val);
        end
        function set.PredictionUS(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_kalman_pressure', 'PredictionUS');
            obj.PredictionUS = single(val);
        end
        function set.CovAlt(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_kalman_pressure', 'CovAlt');
            obj.CovAlt = single(val);
        end
        function set.CovPWM(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_kalman_pressure', 'CovPWM');
            obj.CovPWM = single(val);
        end
        function set.CovVitesse(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_kalman_pressure', 'CovVitesse');
            obj.CovVitesse = single(val);
        end
        function set.BoolEffetSol(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_kalman_pressure', 'BoolEffetSol');
            obj.BoolEffetSol = int32(val);
        end
        function set.SommeInno(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_kalman_pressure', 'SommeInno');
            obj.SommeInno = single(val);
        end
        function set.FlagRejetUS(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_kalman_pressure', 'FlagRejetUS');
            obj.FlagRejetUS = int32(val);
        end
        function set.UMultisinus(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_kalman_pressure', 'UMultisinus');
            obj.UMultisinus = single(val);
        end
        function set.GazAltitude(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_kalman_pressure', 'GazAltitude');
            obj.GazAltitude = single(val);
        end
        function set.FlagMultisinus(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_kalman_pressure', 'FlagMultisinus');
            obj.FlagMultisinus = int32(val);
        end
        function set.FlagMultisinusDebut(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_kalman_pressure', 'FlagMultisinusDebut');
            obj.FlagMultisinusDebut = int32(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.ardrone_autonomy.navdata_kalman_pressure.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.ardrone_autonomy.navdata_kalman_pressure(strObj);
        end
    end
end
