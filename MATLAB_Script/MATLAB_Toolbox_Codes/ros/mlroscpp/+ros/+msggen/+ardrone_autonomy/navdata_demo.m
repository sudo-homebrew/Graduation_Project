
classdef navdata_demo < ros.Message
    %navdata_demo MATLAB implementation of ardrone_autonomy/navdata_demo
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'ardrone_autonomy/navdata_demo' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '5f569653293c884e2ea43f113057d0ea' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'DroneTime' 'Tag' 'Size' 'CtrlState' 'VbatFlyingPercentage' 'Theta' 'Phi' 'Psi' 'Altitude' 'Vx' 'Vy' 'Vz' 'NumFrames' 'DetectionCameraType' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'drone_time' 'tag' 'size' 'ctrl_state' 'vbat_flying_percentage' 'theta' 'phi' 'psi' 'altitude' 'vx' 'vy' 'vz' 'num_frames' 'detection_camera_type' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        DroneTime
        Tag
        Size
        CtrlState
        VbatFlyingPercentage
        Theta
        Phi
        Psi
        Altitude
        Vx
        Vy
        Vz
        NumFrames
        DetectionCameraType
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'navdata_demo', 'Header')
            obj.Header = val;
        end
        function set.DroneTime(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_demo', 'DroneTime');
            obj.DroneTime = double(val);
        end
        function set.Tag(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_demo', 'Tag');
            obj.Tag = uint16(val);
        end
        function set.Size(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_demo', 'Size');
            obj.Size = uint16(val);
        end
        function set.CtrlState(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_demo', 'CtrlState');
            obj.CtrlState = uint32(val);
        end
        function set.VbatFlyingPercentage(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_demo', 'VbatFlyingPercentage');
            obj.VbatFlyingPercentage = uint32(val);
        end
        function set.Theta(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_demo', 'Theta');
            obj.Theta = single(val);
        end
        function set.Phi(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_demo', 'Phi');
            obj.Phi = single(val);
        end
        function set.Psi(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_demo', 'Psi');
            obj.Psi = single(val);
        end
        function set.Altitude(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_demo', 'Altitude');
            obj.Altitude = int32(val);
        end
        function set.Vx(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_demo', 'Vx');
            obj.Vx = single(val);
        end
        function set.Vy(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_demo', 'Vy');
            obj.Vy = single(val);
        end
        function set.Vz(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_demo', 'Vz');
            obj.Vz = single(val);
        end
        function set.NumFrames(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_demo', 'NumFrames');
            obj.NumFrames = uint32(val);
        end
        function set.DetectionCameraType(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_demo', 'DetectionCameraType');
            obj.DetectionCameraType = uint32(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.ardrone_autonomy.navdata_demo.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.ardrone_autonomy.navdata_demo(strObj);
        end
    end
end
