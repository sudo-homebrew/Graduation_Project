
classdef Navdata < ros.Message
    %Navdata MATLAB implementation of ardrone_autonomy/Navdata
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'ardrone_autonomy/Navdata' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'e1169f766234363125ac62c9a3f87eeb' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'BatteryPercent' 'State' 'MagX' 'MagY' 'MagZ' 'Pressure' 'Temp' 'WindSpeed' 'WindAngle' 'WindCompAngle' 'RotX' 'RotY' 'RotZ' 'Altd' 'Vx' 'Vy' 'Vz' 'Ax' 'Ay' 'Az' 'Motor1' 'Motor2' 'Motor3' 'Motor4' 'TagsCount' 'TagsType' 'TagsXc' 'TagsYc' 'TagsWidth' 'TagsHeight' 'TagsOrientation' 'TagsDistance' 'Tm' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'batteryPercent' 'state' 'magX' 'magY' 'magZ' 'pressure' 'temp' 'wind_speed' 'wind_angle' 'wind_comp_angle' 'rotX' 'rotY' 'rotZ' 'altd' 'vx' 'vy' 'vz' 'ax' 'ay' 'az' 'motor1' 'motor2' 'motor3' 'motor4' 'tags_count' 'tags_type' 'tags_xc' 'tags_yc' 'tags_width' 'tags_height' 'tags_orientation' 'tags_distance' 'tm' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        BatteryPercent
        State
        MagX
        MagY
        MagZ
        Pressure
        Temp
        WindSpeed
        WindAngle
        WindCompAngle
        RotX
        RotY
        RotZ
        Altd
        Vx
        Vy
        Vz
        Ax
        Ay
        Az
        Motor1
        Motor2
        Motor3
        Motor4
        TagsCount
        TagsType
        TagsXc
        TagsYc
        TagsWidth
        TagsHeight
        TagsOrientation
        TagsDistance
        Tm
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'Navdata', 'Header')
            obj.Header = val;
        end
        function set.BatteryPercent(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Navdata', 'BatteryPercent');
            obj.BatteryPercent = single(val);
        end
        function set.State(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Navdata', 'State');
            obj.State = uint32(val);
        end
        function set.MagX(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Navdata', 'MagX');
            obj.MagX = int32(val);
        end
        function set.MagY(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Navdata', 'MagY');
            obj.MagY = int32(val);
        end
        function set.MagZ(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Navdata', 'MagZ');
            obj.MagZ = int32(val);
        end
        function set.Pressure(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Navdata', 'Pressure');
            obj.Pressure = int32(val);
        end
        function set.Temp(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Navdata', 'Temp');
            obj.Temp = int32(val);
        end
        function set.WindSpeed(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Navdata', 'WindSpeed');
            obj.WindSpeed = single(val);
        end
        function set.WindAngle(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Navdata', 'WindAngle');
            obj.WindAngle = single(val);
        end
        function set.WindCompAngle(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Navdata', 'WindCompAngle');
            obj.WindCompAngle = single(val);
        end
        function set.RotX(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Navdata', 'RotX');
            obj.RotX = single(val);
        end
        function set.RotY(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Navdata', 'RotY');
            obj.RotY = single(val);
        end
        function set.RotZ(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Navdata', 'RotZ');
            obj.RotZ = single(val);
        end
        function set.Altd(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Navdata', 'Altd');
            obj.Altd = int32(val);
        end
        function set.Vx(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Navdata', 'Vx');
            obj.Vx = single(val);
        end
        function set.Vy(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Navdata', 'Vy');
            obj.Vy = single(val);
        end
        function set.Vz(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Navdata', 'Vz');
            obj.Vz = single(val);
        end
        function set.Ax(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Navdata', 'Ax');
            obj.Ax = single(val);
        end
        function set.Ay(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Navdata', 'Ay');
            obj.Ay = single(val);
        end
        function set.Az(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Navdata', 'Az');
            obj.Az = single(val);
        end
        function set.Motor1(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Navdata', 'Motor1');
            obj.Motor1 = uint8(val);
        end
        function set.Motor2(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Navdata', 'Motor2');
            obj.Motor2 = uint8(val);
        end
        function set.Motor3(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Navdata', 'Motor3');
            obj.Motor3 = uint8(val);
        end
        function set.Motor4(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Navdata', 'Motor4');
            obj.Motor4 = uint8(val);
        end
        function set.TagsCount(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Navdata', 'TagsCount');
            obj.TagsCount = uint32(val);
        end
        function set.TagsType(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = uint32.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'Navdata', 'TagsType');
            obj.TagsType = uint32(val);
        end
        function set.TagsXc(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = uint32.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'Navdata', 'TagsXc');
            obj.TagsXc = uint32(val);
        end
        function set.TagsYc(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = uint32.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'Navdata', 'TagsYc');
            obj.TagsYc = uint32(val);
        end
        function set.TagsWidth(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = uint32.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'Navdata', 'TagsWidth');
            obj.TagsWidth = uint32(val);
        end
        function set.TagsHeight(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = uint32.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'Navdata', 'TagsHeight');
            obj.TagsHeight = uint32(val);
        end
        function set.TagsOrientation(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = single.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'Navdata', 'TagsOrientation');
            obj.TagsOrientation = single(val);
        end
        function set.TagsDistance(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = single.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'Navdata', 'TagsDistance');
            obj.TagsDistance = single(val);
        end
        function set.Tm(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Navdata', 'Tm');
            obj.Tm = single(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.ardrone_autonomy.Navdata.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.ardrone_autonomy.Navdata(strObj);
        end
    end
end
