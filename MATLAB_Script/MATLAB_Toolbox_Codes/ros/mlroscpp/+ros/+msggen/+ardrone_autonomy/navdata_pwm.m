
classdef navdata_pwm < ros.Message
    %navdata_pwm MATLAB implementation of ardrone_autonomy/navdata_pwm
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'ardrone_autonomy/navdata_pwm' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '6369e637a869960c68d7de5c2e10d6b1' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'DroneTime' 'Tag' 'Size' 'Motor1' 'Motor2' 'Motor3' 'Motor4' 'SatMotor1' 'SatMotor2' 'SatMotor3' 'SatMotor4' 'GazFeedForward' 'GazAltitude' 'AltitudeIntegral' 'VzRef' 'UPitch' 'URoll' 'UYaw' 'YawUI' 'UPitchPlanif' 'URollPlanif' 'UYawPlanif' 'UGazPlanif' 'CurrentMotor1' 'CurrentMotor2' 'CurrentMotor3' 'CurrentMotor4' 'AltitudeDer' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'drone_time' 'tag' 'size' 'motor1' 'motor2' 'motor3' 'motor4' 'sat_motor1' 'sat_motor2' 'sat_motor3' 'sat_motor4' 'gaz_feed_forward' 'gaz_altitude' 'altitude_integral' 'vz_ref' 'u_pitch' 'u_roll' 'u_yaw' 'yaw_u_I' 'u_pitch_planif' 'u_roll_planif' 'u_yaw_planif' 'u_gaz_planif' 'current_motor1' 'current_motor2' 'current_motor3' 'current_motor4' 'altitude_der' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        DroneTime
        Tag
        Size
        Motor1
        Motor2
        Motor3
        Motor4
        SatMotor1
        SatMotor2
        SatMotor3
        SatMotor4
        GazFeedForward
        GazAltitude
        AltitudeIntegral
        VzRef
        UPitch
        URoll
        UYaw
        YawUI
        UPitchPlanif
        URollPlanif
        UYawPlanif
        UGazPlanif
        CurrentMotor1
        CurrentMotor2
        CurrentMotor3
        CurrentMotor4
        AltitudeDer
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'navdata_pwm', 'Header')
            obj.Header = val;
        end
        function set.DroneTime(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_pwm', 'DroneTime');
            obj.DroneTime = double(val);
        end
        function set.Tag(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_pwm', 'Tag');
            obj.Tag = uint16(val);
        end
        function set.Size(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_pwm', 'Size');
            obj.Size = uint16(val);
        end
        function set.Motor1(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_pwm', 'Motor1');
            obj.Motor1 = uint8(val);
        end
        function set.Motor2(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_pwm', 'Motor2');
            obj.Motor2 = uint8(val);
        end
        function set.Motor3(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_pwm', 'Motor3');
            obj.Motor3 = uint8(val);
        end
        function set.Motor4(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_pwm', 'Motor4');
            obj.Motor4 = uint8(val);
        end
        function set.SatMotor1(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_pwm', 'SatMotor1');
            obj.SatMotor1 = uint8(val);
        end
        function set.SatMotor2(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_pwm', 'SatMotor2');
            obj.SatMotor2 = uint8(val);
        end
        function set.SatMotor3(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_pwm', 'SatMotor3');
            obj.SatMotor3 = uint8(val);
        end
        function set.SatMotor4(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_pwm', 'SatMotor4');
            obj.SatMotor4 = uint8(val);
        end
        function set.GazFeedForward(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_pwm', 'GazFeedForward');
            obj.GazFeedForward = single(val);
        end
        function set.GazAltitude(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_pwm', 'GazAltitude');
            obj.GazAltitude = single(val);
        end
        function set.AltitudeIntegral(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_pwm', 'AltitudeIntegral');
            obj.AltitudeIntegral = single(val);
        end
        function set.VzRef(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_pwm', 'VzRef');
            obj.VzRef = single(val);
        end
        function set.UPitch(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_pwm', 'UPitch');
            obj.UPitch = int32(val);
        end
        function set.URoll(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_pwm', 'URoll');
            obj.URoll = int32(val);
        end
        function set.UYaw(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_pwm', 'UYaw');
            obj.UYaw = int32(val);
        end
        function set.YawUI(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_pwm', 'YawUI');
            obj.YawUI = single(val);
        end
        function set.UPitchPlanif(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_pwm', 'UPitchPlanif');
            obj.UPitchPlanif = int32(val);
        end
        function set.URollPlanif(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_pwm', 'URollPlanif');
            obj.URollPlanif = int32(val);
        end
        function set.UYawPlanif(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_pwm', 'UYawPlanif');
            obj.UYawPlanif = int32(val);
        end
        function set.UGazPlanif(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_pwm', 'UGazPlanif');
            obj.UGazPlanif = single(val);
        end
        function set.CurrentMotor1(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_pwm', 'CurrentMotor1');
            obj.CurrentMotor1 = uint16(val);
        end
        function set.CurrentMotor2(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_pwm', 'CurrentMotor2');
            obj.CurrentMotor2 = uint16(val);
        end
        function set.CurrentMotor3(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_pwm', 'CurrentMotor3');
            obj.CurrentMotor3 = uint16(val);
        end
        function set.CurrentMotor4(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_pwm', 'CurrentMotor4');
            obj.CurrentMotor4 = uint16(val);
        end
        function set.AltitudeDer(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_pwm', 'AltitudeDer');
            obj.AltitudeDer = single(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.ardrone_autonomy.navdata_pwm.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.ardrone_autonomy.navdata_pwm(strObj);
        end
    end
end
