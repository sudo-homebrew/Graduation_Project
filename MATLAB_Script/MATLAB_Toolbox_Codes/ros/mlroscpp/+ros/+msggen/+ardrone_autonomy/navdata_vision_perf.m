
classdef navdata_vision_perf < ros.Message
    %navdata_vision_perf MATLAB implementation of ardrone_autonomy/navdata_vision_perf
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'ardrone_autonomy/navdata_vision_perf' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '5ed8267a2e2980a430a3439af8e5c9f7' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'DroneTime' 'Tag' 'Size' 'TimeCorners' 'TimeCompute' 'TimeTracking' 'TimeTrans' 'TimeUpdate' 'TimeCustom' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'drone_time' 'tag' 'size' 'time_corners' 'time_compute' 'time_tracking' 'time_trans' 'time_update' 'time_custom' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        DroneTime
        Tag
        Size
        TimeCorners
        TimeCompute
        TimeTracking
        TimeTrans
        TimeUpdate
        TimeCustom
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'navdata_vision_perf', 'Header')
            obj.Header = val;
        end
        function set.DroneTime(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_vision_perf', 'DroneTime');
            obj.DroneTime = double(val);
        end
        function set.Tag(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_vision_perf', 'Tag');
            obj.Tag = uint16(val);
        end
        function set.Size(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_vision_perf', 'Size');
            obj.Size = uint16(val);
        end
        function set.TimeCorners(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_vision_perf', 'TimeCorners');
            obj.TimeCorners = single(val);
        end
        function set.TimeCompute(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_vision_perf', 'TimeCompute');
            obj.TimeCompute = single(val);
        end
        function set.TimeTracking(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_vision_perf', 'TimeTracking');
            obj.TimeTracking = single(val);
        end
        function set.TimeTrans(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_vision_perf', 'TimeTrans');
            obj.TimeTrans = single(val);
        end
        function set.TimeUpdate(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_vision_perf', 'TimeUpdate');
            obj.TimeUpdate = single(val);
        end
        function set.TimeCustom(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = single.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'navdata_vision_perf', 'TimeCustom');
            obj.TimeCustom = single(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.ardrone_autonomy.navdata_vision_perf.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.ardrone_autonomy.navdata_vision_perf(strObj);
        end
    end
end
