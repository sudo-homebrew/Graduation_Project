
classdef navdata_vision < ros.Message
    %navdata_vision MATLAB implementation of ardrone_autonomy/navdata_vision
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'ardrone_autonomy/navdata_vision' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '55dd9a6c13917332d6d39025ed1318ab' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'BodyV' 'DroneTime' 'Tag' 'Size' 'VisionState' 'VisionMisc' 'VisionPhiTrim' 'VisionPhiRefProp' 'VisionThetaTrim' 'VisionThetaRefProp' 'NewRawPicture' 'ThetaCapture' 'PhiCapture' 'PsiCapture' 'AltitudeCapture' 'TimeCapture' 'DeltaPhi' 'DeltaTheta' 'DeltaPsi' 'GoldDefined' 'GoldReset' 'GoldX' 'GoldY' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'body_v' 'drone_time' 'tag' 'size' 'vision_state' 'vision_misc' 'vision_phi_trim' 'vision_phi_ref_prop' 'vision_theta_trim' 'vision_theta_ref_prop' 'new_raw_picture' 'theta_capture' 'phi_capture' 'psi_capture' 'altitude_capture' 'time_capture' 'delta_phi' 'delta_theta' 'delta_psi' 'gold_defined' 'gold_reset' 'gold_x' 'gold_y' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            'ros.msggen.ardrone_autonomy.vector31' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        BodyV
        DroneTime
        Tag
        Size
        VisionState
        VisionMisc
        VisionPhiTrim
        VisionPhiRefProp
        VisionThetaTrim
        VisionThetaRefProp
        NewRawPicture
        ThetaCapture
        PhiCapture
        PsiCapture
        AltitudeCapture
        TimeCapture
        DeltaPhi
        DeltaTheta
        DeltaPsi
        GoldDefined
        GoldReset
        GoldX
        GoldY
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'navdata_vision', 'Header')
            obj.Header = val;
        end
        function set.BodyV(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.ardrone_autonomy.vector31'};
            validateattributes(val, validClasses, validAttributes, 'navdata_vision', 'BodyV')
            obj.BodyV = val;
        end
        function set.DroneTime(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_vision', 'DroneTime');
            obj.DroneTime = double(val);
        end
        function set.Tag(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_vision', 'Tag');
            obj.Tag = uint16(val);
        end
        function set.Size(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_vision', 'Size');
            obj.Size = uint16(val);
        end
        function set.VisionState(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_vision', 'VisionState');
            obj.VisionState = uint32(val);
        end
        function set.VisionMisc(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_vision', 'VisionMisc');
            obj.VisionMisc = int32(val);
        end
        function set.VisionPhiTrim(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_vision', 'VisionPhiTrim');
            obj.VisionPhiTrim = single(val);
        end
        function set.VisionPhiRefProp(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_vision', 'VisionPhiRefProp');
            obj.VisionPhiRefProp = single(val);
        end
        function set.VisionThetaTrim(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_vision', 'VisionThetaTrim');
            obj.VisionThetaTrim = single(val);
        end
        function set.VisionThetaRefProp(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_vision', 'VisionThetaRefProp');
            obj.VisionThetaRefProp = single(val);
        end
        function set.NewRawPicture(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_vision', 'NewRawPicture');
            obj.NewRawPicture = int32(val);
        end
        function set.ThetaCapture(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_vision', 'ThetaCapture');
            obj.ThetaCapture = single(val);
        end
        function set.PhiCapture(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_vision', 'PhiCapture');
            obj.PhiCapture = single(val);
        end
        function set.PsiCapture(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_vision', 'PsiCapture');
            obj.PsiCapture = single(val);
        end
        function set.AltitudeCapture(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_vision', 'AltitudeCapture');
            obj.AltitudeCapture = int32(val);
        end
        function set.TimeCapture(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_vision', 'TimeCapture');
            obj.TimeCapture = uint32(val);
        end
        function set.DeltaPhi(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_vision', 'DeltaPhi');
            obj.DeltaPhi = single(val);
        end
        function set.DeltaTheta(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_vision', 'DeltaTheta');
            obj.DeltaTheta = single(val);
        end
        function set.DeltaPsi(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_vision', 'DeltaPsi');
            obj.DeltaPsi = single(val);
        end
        function set.GoldDefined(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_vision', 'GoldDefined');
            obj.GoldDefined = uint32(val);
        end
        function set.GoldReset(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_vision', 'GoldReset');
            obj.GoldReset = uint32(val);
        end
        function set.GoldX(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_vision', 'GoldX');
            obj.GoldX = single(val);
        end
        function set.GoldY(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'navdata_vision', 'GoldY');
            obj.GoldY = single(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.ardrone_autonomy.navdata_vision.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.ardrone_autonomy.navdata_vision(strObj);
        end
    end
end
