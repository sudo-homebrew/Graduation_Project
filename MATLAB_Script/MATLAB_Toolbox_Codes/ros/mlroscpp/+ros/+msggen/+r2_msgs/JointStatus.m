
classdef JointStatus < ros.Message
    %JointStatus MATLAB implementation of r2_msgs/JointStatus
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'r2_msgs/JointStatus' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '03efe3c55d2652ccbab38921d83a5f63' % The MD5 Checksum of the message definition
        PropertyList = { 'Publisher' 'Joint' 'RegisterValue' 'BridgeEnabled' 'MotorEnabled' 'BrakeReleased' 'MotorPowerDetected' 'EmbeddedMotCom' 'JointFaulted' } % List of non-constant message properties
        ROSPropertyList = { 'publisher' 'joint' 'registerValue' 'bridgeEnabled' 'motorEnabled' 'brakeReleased' 'motorPowerDetected' 'embeddedMotCom' 'jointFaulted' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Publisher
        Joint
        RegisterValue
        BridgeEnabled
        MotorEnabled
        BrakeReleased
        MotorPowerDetected
        EmbeddedMotCom
        JointFaulted
    end
    methods
        function set.Publisher(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'JointStatus', 'Publisher');
            obj.Publisher = char(val);
        end
        function set.Joint(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'JointStatus', 'Joint');
            obj.Joint = char(val);
        end
        function set.RegisterValue(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointStatus', 'RegisterValue');
            obj.RegisterValue = uint32(val);
        end
        function set.BridgeEnabled(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointStatus', 'BridgeEnabled');
            obj.BridgeEnabled = logical(val);
        end
        function set.MotorEnabled(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointStatus', 'MotorEnabled');
            obj.MotorEnabled = logical(val);
        end
        function set.BrakeReleased(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointStatus', 'BrakeReleased');
            obj.BrakeReleased = logical(val);
        end
        function set.MotorPowerDetected(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointStatus', 'MotorPowerDetected');
            obj.MotorPowerDetected = logical(val);
        end
        function set.EmbeddedMotCom(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointStatus', 'EmbeddedMotCom');
            obj.EmbeddedMotCom = logical(val);
        end
        function set.JointFaulted(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointStatus', 'JointFaulted');
            obj.JointFaulted = logical(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.r2_msgs.JointStatus.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.r2_msgs.JointStatus(strObj);
        end
    end
end
