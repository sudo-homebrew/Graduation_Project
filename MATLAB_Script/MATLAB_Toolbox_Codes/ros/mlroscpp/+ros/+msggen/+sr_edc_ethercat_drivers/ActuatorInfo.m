
classdef ActuatorInfo < ros.Message
    %ActuatorInfo MATLAB implementation of sr_edc_ethercat_drivers/ActuatorInfo
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'sr_edc_ethercat_drivers/ActuatorInfo' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'b69309b2980b8b35e7e2b52bad59330a' % The MD5 Checksum of the message definition
        PropertyList = { 'Name' 'SlowMotorCurrentLimit' 'QuickMotorCurrentLimit' 'DutyLimit' 'MaxDuty' } % List of non-constant message properties
        ROSPropertyList = { 'name' 'slow_motor_current_limit' 'quick_motor_current_limit' 'duty_limit' 'max_duty' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Name
        SlowMotorCurrentLimit
        QuickMotorCurrentLimit
        DutyLimit
        MaxDuty
    end
    methods
        function set.Name(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'ActuatorInfo', 'Name');
            obj.Name = char(val);
        end
        function set.SlowMotorCurrentLimit(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ActuatorInfo', 'SlowMotorCurrentLimit');
            obj.SlowMotorCurrentLimit = double(val);
        end
        function set.QuickMotorCurrentLimit(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ActuatorInfo', 'QuickMotorCurrentLimit');
            obj.QuickMotorCurrentLimit = double(val);
        end
        function set.DutyLimit(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ActuatorInfo', 'DutyLimit');
            obj.DutyLimit = double(val);
        end
        function set.MaxDuty(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ActuatorInfo', 'MaxDuty');
            obj.MaxDuty = double(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.sr_edc_ethercat_drivers.ActuatorInfo.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.sr_edc_ethercat_drivers.ActuatorInfo(strObj);
        end
    end
end
