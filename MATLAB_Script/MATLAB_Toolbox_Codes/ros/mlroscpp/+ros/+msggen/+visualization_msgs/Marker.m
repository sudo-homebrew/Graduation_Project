
classdef Marker < ros.Message
    %Marker MATLAB implementation of visualization_msgs/Marker
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'visualization_msgs/Marker' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '4048c9de2a16f4ae8e0538085ebf1b97' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'Pose' 'Scale' 'Color' 'Lifetime' 'Points' 'Colors' 'Ns' 'Id' 'Type' 'Action' 'FrameLocked' 'Text' 'MeshResource' 'MeshUseEmbeddedMaterials' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'pose' 'scale' 'color' 'lifetime' 'points' 'colors' 'ns' 'id' 'type' 'action' 'frame_locked' 'text' 'mesh_resource' 'mesh_use_embedded_materials' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            'ros.msggen.geometry_msgs.Pose' ...
            'ros.msggen.geometry_msgs.Vector3' ...
            'ros.msggen.std_msgs.ColorRGBA' ...
            'ros.msg.Duration' ...
            'ros.msggen.geometry_msgs.Point' ...
            'ros.msggen.std_msgs.ColorRGBA' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
        ARROW = uint8(0)
        CUBE = uint8(1)
        SPHERE = uint8(2)
        CYLINDER = uint8(3)
        LINESTRIP = uint8(4)
        LINELIST = uint8(5)
        CUBELIST = uint8(6)
        SPHERELIST = uint8(7)
        POINTS = uint8(8)
        TEXTVIEWFACING = uint8(9)
        MESHRESOURCE = uint8(10)
        TRIANGLELIST = uint8(11)
        ADD = uint8(0)
        MODIFY = uint8(0)
        DELETE = uint8(2)
        DELETEALL = uint8(3)
    end
    properties
        Header
        Pose
        Scale
        Color
        Lifetime
        Points
        Colors
        Ns
        Id
        Type
        Action
        FrameLocked
        Text
        MeshResource
        MeshUseEmbeddedMaterials
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'Marker', 'Header')
            obj.Header = val;
        end
        function set.Pose(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Pose'};
            validateattributes(val, validClasses, validAttributes, 'Marker', 'Pose')
            obj.Pose = val;
        end
        function set.Scale(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Vector3'};
            validateattributes(val, validClasses, validAttributes, 'Marker', 'Scale')
            obj.Scale = val;
        end
        function set.Color(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.ColorRGBA'};
            validateattributes(val, validClasses, validAttributes, 'Marker', 'Color')
            obj.Color = val;
        end
        function set.Lifetime(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msg.Duration'};
            validateattributes(val, validClasses, validAttributes, 'Marker', 'Lifetime')
            obj.Lifetime = val;
        end
        function set.Points(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.geometry_msgs.Point.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.geometry_msgs.Point'};
            validateattributes(val, validClasses, validAttributes, 'Marker', 'Points')
            obj.Points = val;
        end
        function set.Colors(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.std_msgs.ColorRGBA.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.std_msgs.ColorRGBA'};
            validateattributes(val, validClasses, validAttributes, 'Marker', 'Colors')
            obj.Colors = val;
        end
        function set.Ns(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'Marker', 'Ns');
            obj.Ns = char(val);
        end
        function set.Id(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Marker', 'Id');
            obj.Id = int32(val);
        end
        function set.Type(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Marker', 'Type');
            obj.Type = int32(val);
        end
        function set.Action(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Marker', 'Action');
            obj.Action = int32(val);
        end
        function set.FrameLocked(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Marker', 'FrameLocked');
            obj.FrameLocked = logical(val);
        end
        function set.Text(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'Marker', 'Text');
            obj.Text = char(val);
        end
        function set.MeshResource(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'Marker', 'MeshResource');
            obj.MeshResource = char(val);
        end
        function set.MeshUseEmbeddedMaterials(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Marker', 'MeshUseEmbeddedMaterials');
            obj.MeshUseEmbeddedMaterials = logical(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.visualization_msgs.Marker.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.visualization_msgs.Marker(strObj);
        end
    end
end
