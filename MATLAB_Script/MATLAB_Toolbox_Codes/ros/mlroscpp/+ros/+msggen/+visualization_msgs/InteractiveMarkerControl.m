
classdef InteractiveMarkerControl < ros.Message
    %InteractiveMarkerControl MATLAB implementation of visualization_msgs/InteractiveMarkerControl
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'visualization_msgs/InteractiveMarkerControl' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'b3c81e785788195d1840b86c28da1aac' % The MD5 Checksum of the message definition
        PropertyList = { 'Orientation' 'Markers' 'Name' 'OrientationMode' 'InteractionMode' 'AlwaysVisible' 'IndependentMarkerOrientation' 'Description' } % List of non-constant message properties
        ROSPropertyList = { 'orientation' 'markers' 'name' 'orientation_mode' 'interaction_mode' 'always_visible' 'independent_marker_orientation' 'description' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msg.geometry_msgs.Quaternion' ...
            'ros.msggen.visualization_msgs.Marker' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
        INHERIT = uint8(0)
        FIXED = uint8(1)
        VIEWFACING = uint8(2)
        NONE = uint8(0)
        MENU = uint8(1)
        BUTTON = uint8(2)
        MOVEAXIS = uint8(3)
        MOVEPLANE = uint8(4)
        ROTATEAXIS = uint8(5)
        MOVEROTATE = uint8(6)
        MOVE3D = uint8(7)
        ROTATE3D = uint8(8)
        MOVEROTATE3D = uint8(9)
    end
    properties
        Orientation
        Markers
        Name
        OrientationMode
        InteractionMode
        AlwaysVisible
        IndependentMarkerOrientation
        Description
    end
    methods
        function set.Orientation(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msg.geometry_msgs.Quaternion'};
            validateattributes(val, validClasses, validAttributes, 'InteractiveMarkerControl', 'Orientation')
            obj.Orientation = val;
        end
        function set.Markers(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.visualization_msgs.Marker.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.visualization_msgs.Marker'};
            validateattributes(val, validClasses, validAttributes, 'InteractiveMarkerControl', 'Markers')
            obj.Markers = val;
        end
        function set.Name(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'InteractiveMarkerControl', 'Name');
            obj.Name = char(val);
        end
        function set.OrientationMode(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'InteractiveMarkerControl', 'OrientationMode');
            obj.OrientationMode = uint8(val);
        end
        function set.InteractionMode(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'InteractiveMarkerControl', 'InteractionMode');
            obj.InteractionMode = uint8(val);
        end
        function set.AlwaysVisible(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'InteractiveMarkerControl', 'AlwaysVisible');
            obj.AlwaysVisible = logical(val);
        end
        function set.IndependentMarkerOrientation(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'InteractiveMarkerControl', 'IndependentMarkerOrientation');
            obj.IndependentMarkerOrientation = logical(val);
        end
        function set.Description(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'InteractiveMarkerControl', 'Description');
            obj.Description = char(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.visualization_msgs.InteractiveMarkerControl.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.visualization_msgs.InteractiveMarkerControl(strObj);
        end
    end
end
