
classdef ImageMarker < ros.Message
    %ImageMarker MATLAB implementation of visualization_msgs/ImageMarker
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'visualization_msgs/ImageMarker' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '1de93c67ec8858b831025a08fbf1b35c' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'Position' 'OutlineColor' 'FillColor' 'Lifetime' 'Points' 'OutlineColors' 'Ns' 'Id' 'Type' 'Action' 'Scale' 'Filled' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'position' 'outline_color' 'fill_color' 'lifetime' 'points' 'outline_colors' 'ns' 'id' 'type' 'action' 'scale' 'filled' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            'ros.msggen.geometry_msgs.Point' ...
            'ros.msggen.std_msgs.ColorRGBA' ...
            'ros.msggen.std_msgs.ColorRGBA' ...
            'ros.msg.Duration' ...
            'ros.msggen.geometry_msgs.Point' ...
            'ros.msggen.std_msgs.ColorRGBA' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
        CIRCLE = uint8(0)
        LINESTRIP = uint8(1)
        LINELIST = uint8(2)
        POLYGON = uint8(3)
        POINTS = uint8(4)
        ADD = uint8(0)
        REMOVE = uint8(1)
    end
    properties
        Header
        Position
        OutlineColor
        FillColor
        Lifetime
        Points
        OutlineColors
        Ns
        Id
        Type
        Action
        Scale
        Filled
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'ImageMarker', 'Header')
            obj.Header = val;
        end
        function set.Position(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Point'};
            validateattributes(val, validClasses, validAttributes, 'ImageMarker', 'Position')
            obj.Position = val;
        end
        function set.OutlineColor(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.ColorRGBA'};
            validateattributes(val, validClasses, validAttributes, 'ImageMarker', 'OutlineColor')
            obj.OutlineColor = val;
        end
        function set.FillColor(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.ColorRGBA'};
            validateattributes(val, validClasses, validAttributes, 'ImageMarker', 'FillColor')
            obj.FillColor = val;
        end
        function set.Lifetime(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msg.Duration'};
            validateattributes(val, validClasses, validAttributes, 'ImageMarker', 'Lifetime')
            obj.Lifetime = val;
        end
        function set.Points(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.geometry_msgs.Point.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.geometry_msgs.Point'};
            validateattributes(val, validClasses, validAttributes, 'ImageMarker', 'Points')
            obj.Points = val;
        end
        function set.OutlineColors(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.std_msgs.ColorRGBA.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.std_msgs.ColorRGBA'};
            validateattributes(val, validClasses, validAttributes, 'ImageMarker', 'OutlineColors')
            obj.OutlineColors = val;
        end
        function set.Ns(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'ImageMarker', 'Ns');
            obj.Ns = char(val);
        end
        function set.Id(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ImageMarker', 'Id');
            obj.Id = int32(val);
        end
        function set.Type(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ImageMarker', 'Type');
            obj.Type = int32(val);
        end
        function set.Action(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ImageMarker', 'Action');
            obj.Action = int32(val);
        end
        function set.Scale(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ImageMarker', 'Scale');
            obj.Scale = single(val);
        end
        function set.Filled(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ImageMarker', 'Filled');
            obj.Filled = uint8(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.visualization_msgs.ImageMarker.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.visualization_msgs.ImageMarker(strObj);
        end
    end
end
