
classdef InteractiveMarkerFeedback < ros.Message
    %InteractiveMarkerFeedback MATLAB implementation of visualization_msgs/InteractiveMarkerFeedback
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'visualization_msgs/InteractiveMarkerFeedback' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'ab0f1eee058667e28c19ff3ffc3f4b78' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'Pose' 'MousePoint' 'ClientId' 'MarkerName' 'ControlName' 'EventType' 'MenuEntryId' 'MousePointValid' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'pose' 'mouse_point' 'client_id' 'marker_name' 'control_name' 'event_type' 'menu_entry_id' 'mouse_point_valid' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            'ros.msggen.geometry_msgs.Pose' ...
            'ros.msggen.geometry_msgs.Point' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
        KEEPALIVE = uint8(0)
        POSEUPDATE = uint8(1)
        MENUSELECT = uint8(2)
        BUTTONCLICK = uint8(3)
        MOUSEDOWN = uint8(4)
        MOUSEUP = uint8(5)
    end
    properties
        Header
        Pose
        MousePoint
        ClientId
        MarkerName
        ControlName
        EventType
        MenuEntryId
        MousePointValid
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'InteractiveMarkerFeedback', 'Header')
            obj.Header = val;
        end
        function set.Pose(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Pose'};
            validateattributes(val, validClasses, validAttributes, 'InteractiveMarkerFeedback', 'Pose')
            obj.Pose = val;
        end
        function set.MousePoint(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Point'};
            validateattributes(val, validClasses, validAttributes, 'InteractiveMarkerFeedback', 'MousePoint')
            obj.MousePoint = val;
        end
        function set.ClientId(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'InteractiveMarkerFeedback', 'ClientId');
            obj.ClientId = char(val);
        end
        function set.MarkerName(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'InteractiveMarkerFeedback', 'MarkerName');
            obj.MarkerName = char(val);
        end
        function set.ControlName(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'InteractiveMarkerFeedback', 'ControlName');
            obj.ControlName = char(val);
        end
        function set.EventType(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'InteractiveMarkerFeedback', 'EventType');
            obj.EventType = uint8(val);
        end
        function set.MenuEntryId(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'InteractiveMarkerFeedback', 'MenuEntryId');
            obj.MenuEntryId = uint32(val);
        end
        function set.MousePointValid(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'InteractiveMarkerFeedback', 'MousePointValid');
            obj.MousePointValid = logical(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.visualization_msgs.InteractiveMarkerFeedback.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.visualization_msgs.InteractiveMarkerFeedback(strObj);
        end
    end
end
