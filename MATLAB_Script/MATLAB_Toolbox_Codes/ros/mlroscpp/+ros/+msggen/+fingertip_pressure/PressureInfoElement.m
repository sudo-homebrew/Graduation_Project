
classdef PressureInfoElement < ros.Message
    %PressureInfoElement MATLAB implementation of fingertip_pressure/PressureInfoElement
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'fingertip_pressure/PressureInfoElement' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '1cb486bb542ab85e1ff8d84fe9cc899f' % The MD5 Checksum of the message definition
        PropertyList = { 'Center' 'Halfside1' 'Halfside2' 'FrameId' 'ForcePerUnit' } % List of non-constant message properties
        ROSPropertyList = { 'center' 'halfside1' 'halfside2' 'frame_id' 'force_per_unit' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.geometry_msgs.Vector3' ...
            'ros.msggen.geometry_msgs.Vector3' ...
            'ros.msggen.geometry_msgs.Vector3' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Center
        Halfside1
        Halfside2
        FrameId
        ForcePerUnit
    end
    methods
        function set.Center(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.geometry_msgs.Vector3.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.geometry_msgs.Vector3'};
            validateattributes(val, validClasses, validAttributes, 'PressureInfoElement', 'Center')
            obj.Center = val;
        end
        function set.Halfside1(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.geometry_msgs.Vector3.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.geometry_msgs.Vector3'};
            validateattributes(val, validClasses, validAttributes, 'PressureInfoElement', 'Halfside1')
            obj.Halfside1 = val;
        end
        function set.Halfside2(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.geometry_msgs.Vector3.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.geometry_msgs.Vector3'};
            validateattributes(val, validClasses, validAttributes, 'PressureInfoElement', 'Halfside2')
            obj.Halfside2 = val;
        end
        function set.FrameId(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'PressureInfoElement', 'FrameId');
            obj.FrameId = char(val);
        end
        function set.ForcePerUnit(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'PressureInfoElement', 'ForcePerUnit');
            obj.ForcePerUnit = double(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.fingertip_pressure.PressureInfoElement.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.fingertip_pressure.PressureInfoElement(strObj);
        end
    end
end
