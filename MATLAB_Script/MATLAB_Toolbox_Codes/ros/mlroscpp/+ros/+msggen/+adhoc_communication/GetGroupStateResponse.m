
classdef GetGroupStateResponse < ros.Message
    %GetGroupStateResponse MATLAB implementation of adhoc_communication/GetGroupStateResponse
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'adhoc_communication/GetGroupStateResponse' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'a60c9124520fea5a021262dcbe436318' % The MD5 Checksum of the message definition
        PropertyList = { 'Member' 'Activated' 'Connected' 'Root' 'Joining' 'RouteUplink' 'Downlinks' } % List of non-constant message properties
        ROSPropertyList = { 'member' 'activated' 'connected' 'root' 'joining' 'route_uplink' 'downlinks' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Member
        Activated
        Connected
        Root
        Joining
        RouteUplink
        Downlinks
    end
    methods
        function set.Member(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GetGroupStateResponse', 'Member');
            obj.Member = logical(val);
        end
        function set.Activated(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GetGroupStateResponse', 'Activated');
            obj.Activated = logical(val);
        end
        function set.Connected(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GetGroupStateResponse', 'Connected');
            obj.Connected = logical(val);
        end
        function set.Root(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GetGroupStateResponse', 'Root');
            obj.Root = logical(val);
        end
        function set.Joining(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GetGroupStateResponse', 'Joining');
            obj.Joining = logical(val);
        end
        function set.RouteUplink(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'GetGroupStateResponse', 'RouteUplink');
            obj.RouteUplink = char(val);
        end
        function set.Downlinks(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'GetGroupStateResponse', 'Downlinks');
            obj.Downlinks = cell(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.adhoc_communication.GetGroupStateResponse.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.adhoc_communication.GetGroupStateResponse(strObj);
        end
    end
end
