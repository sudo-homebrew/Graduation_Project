
classdef ExpAuction < ros.Message
    %ExpAuction MATLAB implementation of adhoc_communication/ExpAuction
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'adhoc_communication/ExpAuction' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '99f1253490d52d5e7eb6095beeea2711' % The MD5 Checksum of the message definition
        PropertyList = { 'OccupiedIds' 'RequestedClusters' 'AvailableClusters' 'AuctionStatusMessage' 'StartAuction' 'AuctionFinished' 'AuctionId' 'RobotName' } % List of non-constant message properties
        ROSPropertyList = { 'occupied_ids' 'requested_clusters' 'available_clusters' 'auction_status_message' 'start_auction' 'auction_finished' 'auction_id' 'robot_name' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.adhoc_communication.ExpAuctionElement' ...
            'ros.msggen.adhoc_communication.ExpCluster' ...
            'ros.msggen.adhoc_communication.ExpCluster' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        OccupiedIds
        RequestedClusters
        AvailableClusters
        AuctionStatusMessage
        StartAuction
        AuctionFinished
        AuctionId
        RobotName
    end
    methods
        function set.OccupiedIds(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.adhoc_communication.ExpAuctionElement.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.adhoc_communication.ExpAuctionElement'};
            validateattributes(val, validClasses, validAttributes, 'ExpAuction', 'OccupiedIds')
            obj.OccupiedIds = val;
        end
        function set.RequestedClusters(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.adhoc_communication.ExpCluster.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.adhoc_communication.ExpCluster'};
            validateattributes(val, validClasses, validAttributes, 'ExpAuction', 'RequestedClusters')
            obj.RequestedClusters = val;
        end
        function set.AvailableClusters(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.adhoc_communication.ExpCluster.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.adhoc_communication.ExpCluster'};
            validateattributes(val, validClasses, validAttributes, 'ExpAuction', 'AvailableClusters')
            obj.AvailableClusters = val;
        end
        function set.AuctionStatusMessage(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ExpAuction', 'AuctionStatusMessage');
            obj.AuctionStatusMessage = logical(val);
        end
        function set.StartAuction(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ExpAuction', 'StartAuction');
            obj.StartAuction = logical(val);
        end
        function set.AuctionFinished(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ExpAuction', 'AuctionFinished');
            obj.AuctionFinished = logical(val);
        end
        function set.AuctionId(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ExpAuction', 'AuctionId');
            obj.AuctionId = uint32(val);
        end
        function set.RobotName(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'ExpAuction', 'RobotName');
            obj.RobotName = char(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.adhoc_communication.ExpAuction.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.adhoc_communication.ExpAuction(strObj);
        end
    end
end
