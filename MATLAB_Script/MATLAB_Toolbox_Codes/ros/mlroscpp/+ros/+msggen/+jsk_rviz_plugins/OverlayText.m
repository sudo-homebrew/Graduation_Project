
classdef OverlayText < ros.Message
    %OverlayText MATLAB implementation of jsk_rviz_plugins/OverlayText
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'jsk_rviz_plugins/OverlayText' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '7efc1ed34881f913afcee6ba02aa1242' % The MD5 Checksum of the message definition
        PropertyList = { 'BgColor' 'FgColor' 'Action' 'Width' 'Height' 'Left' 'Top' 'LineWidth' 'TextSize' 'Font' 'Text' } % List of non-constant message properties
        ROSPropertyList = { 'bg_color' 'fg_color' 'action' 'width' 'height' 'left' 'top' 'line_width' 'text_size' 'font' 'text' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.ColorRGBA' ...
            'ros.msggen.std_msgs.ColorRGBA' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
        ADD = uint8(0)
        DELETE = uint8(1)
    end
    properties
        BgColor
        FgColor
        Action
        Width
        Height
        Left
        Top
        LineWidth
        TextSize
        Font
        Text
    end
    methods
        function set.BgColor(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.ColorRGBA'};
            validateattributes(val, validClasses, validAttributes, 'OverlayText', 'BgColor')
            obj.BgColor = val;
        end
        function set.FgColor(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.ColorRGBA'};
            validateattributes(val, validClasses, validAttributes, 'OverlayText', 'FgColor')
            obj.FgColor = val;
        end
        function set.Action(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'OverlayText', 'Action');
            obj.Action = uint8(val);
        end
        function set.Width(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'OverlayText', 'Width');
            obj.Width = int32(val);
        end
        function set.Height(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'OverlayText', 'Height');
            obj.Height = int32(val);
        end
        function set.Left(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'OverlayText', 'Left');
            obj.Left = int32(val);
        end
        function set.Top(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'OverlayText', 'Top');
            obj.Top = int32(val);
        end
        function set.LineWidth(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'OverlayText', 'LineWidth');
            obj.LineWidth = int32(val);
        end
        function set.TextSize(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'OverlayText', 'TextSize');
            obj.TextSize = single(val);
        end
        function set.Font(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'OverlayText', 'Font');
            obj.Font = char(val);
        end
        function set.Text(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'OverlayText', 'Text');
            obj.Text = char(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.jsk_rviz_plugins.OverlayText.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.jsk_rviz_plugins.OverlayText(strObj);
        end
    end
end
