
classdef Pictogram < ros.Message
    %Pictogram MATLAB implementation of jsk_rviz_plugins/Pictogram
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'jsk_rviz_plugins/Pictogram' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '29667e5652a8cfdc9c87d2ed97aa7bbc' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'Pose' 'Color' 'Action' 'Mode' 'Character' 'Size' 'Ttl' 'Speed' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'pose' 'color' 'action' 'mode' 'character' 'size' 'ttl' 'speed' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            'ros.msggen.geometry_msgs.Pose' ...
            'ros.msggen.std_msgs.ColorRGBA' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
        ADD = uint8(0)
        DELETE = uint8(1)
        ROTATEZ = uint8(2)
        ROTATEY = uint8(3)
        ROTATEX = uint8(4)
        JUMP = uint8(5)
        JUMPONCE = uint8(6)
        PICTOGRAMMODE = uint8(0)
        STRINGMODE = uint8(1)
    end
    properties
        Header
        Pose
        Color
        Action
        Mode
        Character
        Size
        Ttl
        Speed
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'Pictogram', 'Header')
            obj.Header = val;
        end
        function set.Pose(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Pose'};
            validateattributes(val, validClasses, validAttributes, 'Pictogram', 'Pose')
            obj.Pose = val;
        end
        function set.Color(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.ColorRGBA'};
            validateattributes(val, validClasses, validAttributes, 'Pictogram', 'Color')
            obj.Color = val;
        end
        function set.Action(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Pictogram', 'Action');
            obj.Action = uint8(val);
        end
        function set.Mode(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Pictogram', 'Mode');
            obj.Mode = uint8(val);
        end
        function set.Character(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'Pictogram', 'Character');
            obj.Character = char(val);
        end
        function set.Size(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Pictogram', 'Size');
            obj.Size = double(val);
        end
        function set.Ttl(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Pictogram', 'Ttl');
            obj.Ttl = double(val);
        end
        function set.Speed(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Pictogram', 'Speed');
            obj.Speed = double(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.jsk_rviz_plugins.Pictogram.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.jsk_rviz_plugins.Pictogram(strObj);
        end
    end
end
