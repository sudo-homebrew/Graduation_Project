
classdef BaTestEnvironmentResponse < ros.Message
    %BaTestEnvironmentResponse MATLAB implementation of cob_object_detection_msgs/BaTestEnvironmentResponse
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'cob_object_detection_msgs/BaTestEnvironmentResponse' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '73db4f13e99b7e554aa13b596abbef41' % The MD5 Checksum of the message definition
        PropertyList = { 'Result' 'MeanError' 'StdDev' 'MinError' 'MaxError' 'RunsCount' 'RunsSum' 'RunsSum2' 'TimeDuration' 'Observations' 'FalseMatchings' } % List of non-constant message properties
        ROSPropertyList = { 'result' 'mean_error' 'std_dev' 'min_error' 'max_error' 'runs_count' 'runs_sum' 'runs_sum2' 'time_duration' 'observations' 'false_matchings' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.String' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Result
        MeanError
        StdDev
        MinError
        MaxError
        RunsCount
        RunsSum
        RunsSum2
        TimeDuration
        Observations
        FalseMatchings
    end
    methods
        function set.Result(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.String'};
            validateattributes(val, validClasses, validAttributes, 'BaTestEnvironmentResponse', 'Result')
            obj.Result = val;
        end
        function set.MeanError(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BaTestEnvironmentResponse', 'MeanError');
            obj.MeanError = single(val);
        end
        function set.StdDev(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BaTestEnvironmentResponse', 'StdDev');
            obj.StdDev = single(val);
        end
        function set.MinError(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BaTestEnvironmentResponse', 'MinError');
            obj.MinError = single(val);
        end
        function set.MaxError(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BaTestEnvironmentResponse', 'MaxError');
            obj.MaxError = single(val);
        end
        function set.RunsCount(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BaTestEnvironmentResponse', 'RunsCount');
            obj.RunsCount = single(val);
        end
        function set.RunsSum(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BaTestEnvironmentResponse', 'RunsSum');
            obj.RunsSum = single(val);
        end
        function set.RunsSum2(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BaTestEnvironmentResponse', 'RunsSum2');
            obj.RunsSum2 = single(val);
        end
        function set.TimeDuration(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BaTestEnvironmentResponse', 'TimeDuration');
            obj.TimeDuration = single(val);
        end
        function set.Observations(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BaTestEnvironmentResponse', 'Observations');
            obj.Observations = int32(val);
        end
        function set.FalseMatchings(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BaTestEnvironmentResponse', 'FalseMatchings');
            obj.FalseMatchings = int32(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.cob_object_detection_msgs.BaTestEnvironmentResponse.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.cob_object_detection_msgs.BaTestEnvironmentResponse(strObj);
        end
    end
end
