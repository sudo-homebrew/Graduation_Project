
classdef ImageMarker2 < ros.Message
    %ImageMarker2 MATLAB implementation of image_view2/ImageMarker2
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'image_view2/ImageMarker2' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '8efc23e411f94f2c04288719c078c291' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'Position' 'Position3D' 'Pose' 'OutlineColor' 'FillColor' 'Lifetime' 'Points' 'Points3D' 'OutlineColors' 'Ns' 'Id' 'Type' 'Action' 'Scale' 'Width' 'Filled' 'Arc' 'Angle' 'Frames' 'Text' 'LeftUpOrigin' 'RatioScale' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'position' 'position3D' 'pose' 'outline_color' 'fill_color' 'lifetime' 'points' 'points3D' 'outline_colors' 'ns' 'id' 'type' 'action' 'scale' 'width' 'filled' 'arc' 'angle' 'frames' 'text' 'left_up_origin' 'ratio_scale' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            'ros.msggen.geometry_msgs.Point' ...
            'ros.msggen.geometry_msgs.PointStamped' ...
            'ros.msggen.geometry_msgs.PoseStamped' ...
            'ros.msggen.std_msgs.ColorRGBA' ...
            'ros.msggen.std_msgs.ColorRGBA' ...
            'ros.msg.Duration' ...
            'ros.msggen.geometry_msgs.Point' ...
            'ros.msggen.image_view2.PointArrayStamped' ...
            'ros.msggen.std_msgs.ColorRGBA' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
        CIRCLE = int8(0)
        LINESTRIP = int8(1)
        LINELIST = int8(2)
        POLYGON = int8(3)
        POINTS = int8(4)
        FRAMES = int8(5)
        TEXT = int8(6)
        LINESTRIP3D = int8(7)
        LINELIST3D = int8(8)
        POLYGON3D = int8(9)
        POINTS3D = int8(10)
        TEXT3D = int8(11)
        CIRCLE3D = int8(12)
        ADD = int8(0)
        REMOVE = int8(1)
    end
    properties
        Header
        Position
        Position3D
        Pose
        OutlineColor
        FillColor
        Lifetime
        Points
        Points3D
        OutlineColors
        Ns
        Id
        Type
        Action
        Scale
        Width
        Filled
        Arc
        Angle
        Frames
        Text
        LeftUpOrigin
        RatioScale
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'ImageMarker2', 'Header')
            obj.Header = val;
        end
        function set.Position(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Point'};
            validateattributes(val, validClasses, validAttributes, 'ImageMarker2', 'Position')
            obj.Position = val;
        end
        function set.Position3D(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.PointStamped'};
            validateattributes(val, validClasses, validAttributes, 'ImageMarker2', 'Position3D')
            obj.Position3D = val;
        end
        function set.Pose(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.PoseStamped'};
            validateattributes(val, validClasses, validAttributes, 'ImageMarker2', 'Pose')
            obj.Pose = val;
        end
        function set.OutlineColor(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.ColorRGBA'};
            validateattributes(val, validClasses, validAttributes, 'ImageMarker2', 'OutlineColor')
            obj.OutlineColor = val;
        end
        function set.FillColor(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.ColorRGBA'};
            validateattributes(val, validClasses, validAttributes, 'ImageMarker2', 'FillColor')
            obj.FillColor = val;
        end
        function set.Lifetime(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msg.Duration'};
            validateattributes(val, validClasses, validAttributes, 'ImageMarker2', 'Lifetime')
            obj.Lifetime = val;
        end
        function set.Points(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.geometry_msgs.Point.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.geometry_msgs.Point'};
            validateattributes(val, validClasses, validAttributes, 'ImageMarker2', 'Points')
            obj.Points = val;
        end
        function set.Points3D(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.image_view2.PointArrayStamped'};
            validateattributes(val, validClasses, validAttributes, 'ImageMarker2', 'Points3D')
            obj.Points3D = val;
        end
        function set.OutlineColors(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.std_msgs.ColorRGBA.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.std_msgs.ColorRGBA'};
            validateattributes(val, validClasses, validAttributes, 'ImageMarker2', 'OutlineColors')
            obj.OutlineColors = val;
        end
        function set.Ns(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'ImageMarker2', 'Ns');
            obj.Ns = char(val);
        end
        function set.Id(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ImageMarker2', 'Id');
            obj.Id = int32(val);
        end
        function set.Type(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ImageMarker2', 'Type');
            obj.Type = int32(val);
        end
        function set.Action(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ImageMarker2', 'Action');
            obj.Action = int32(val);
        end
        function set.Scale(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ImageMarker2', 'Scale');
            obj.Scale = single(val);
        end
        function set.Width(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ImageMarker2', 'Width');
            obj.Width = single(val);
        end
        function set.Filled(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ImageMarker2', 'Filled');
            obj.Filled = int8(val);
        end
        function set.Arc(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ImageMarker2', 'Arc');
            obj.Arc = int8(val);
        end
        function set.Angle(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ImageMarker2', 'Angle');
            obj.Angle = single(val);
        end
        function set.Frames(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'ImageMarker2', 'Frames');
            obj.Frames = cell(val);
        end
        function set.Text(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'ImageMarker2', 'Text');
            obj.Text = char(val);
        end
        function set.LeftUpOrigin(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ImageMarker2', 'LeftUpOrigin');
            obj.LeftUpOrigin = logical(val);
        end
        function set.RatioScale(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ImageMarker2', 'RatioScale');
            obj.RatioScale = logical(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.image_view2.ImageMarker2.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.image_view2.ImageMarker2(strObj);
        end
    end
end
