
classdef ConfigGoal < ros.Message
    %ConfigGoal MATLAB implementation of laser_cb_detector/ConfigGoal
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'laser_cb_detector/ConfigGoal' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'd592564bc71ebb8458e3d0d3a079d731' % The MD5 Checksum of the message definition
        PropertyList = { 'NumX' 'NumY' 'SpacingX' 'SpacingY' 'WidthScaling' 'HeightScaling' 'MinIntensity' 'MaxIntensity' 'SubpixelWindow' 'SubpixelZeroZone' 'FlipHorizontal' } % List of non-constant message properties
        ROSPropertyList = { 'num_x' 'num_y' 'spacing_x' 'spacing_y' 'width_scaling' 'height_scaling' 'min_intensity' 'max_intensity' 'subpixel_window' 'subpixel_zero_zone' 'flip_horizontal' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        NumX
        NumY
        SpacingX
        SpacingY
        WidthScaling
        HeightScaling
        MinIntensity
        MaxIntensity
        SubpixelWindow
        SubpixelZeroZone
        FlipHorizontal
    end
    methods
        function set.NumX(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ConfigGoal', 'NumX');
            obj.NumX = uint32(val);
        end
        function set.NumY(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ConfigGoal', 'NumY');
            obj.NumY = uint32(val);
        end
        function set.SpacingX(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ConfigGoal', 'SpacingX');
            obj.SpacingX = single(val);
        end
        function set.SpacingY(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ConfigGoal', 'SpacingY');
            obj.SpacingY = single(val);
        end
        function set.WidthScaling(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ConfigGoal', 'WidthScaling');
            obj.WidthScaling = single(val);
        end
        function set.HeightScaling(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ConfigGoal', 'HeightScaling');
            obj.HeightScaling = single(val);
        end
        function set.MinIntensity(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ConfigGoal', 'MinIntensity');
            obj.MinIntensity = single(val);
        end
        function set.MaxIntensity(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ConfigGoal', 'MaxIntensity');
            obj.MaxIntensity = single(val);
        end
        function set.SubpixelWindow(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ConfigGoal', 'SubpixelWindow');
            obj.SubpixelWindow = uint32(val);
        end
        function set.SubpixelZeroZone(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ConfigGoal', 'SubpixelZeroZone');
            obj.SubpixelZeroZone = int32(val);
        end
        function set.FlipHorizontal(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ConfigGoal', 'FlipHorizontal');
            obj.FlipHorizontal = uint8(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.laser_cb_detector.ConfigGoal.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.laser_cb_detector.ConfigGoal(strObj);
        end
    end
end
