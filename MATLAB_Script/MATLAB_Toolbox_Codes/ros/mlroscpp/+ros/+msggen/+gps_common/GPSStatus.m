
classdef GPSStatus < ros.Message
    %GPSStatus MATLAB implementation of gps_common/GPSStatus
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'gps_common/GPSStatus' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '313baa8951fdd056c78bf61b1b07d249' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'SatellitesUsed' 'SatelliteUsedPrn' 'SatellitesVisible' 'SatelliteVisiblePrn' 'SatelliteVisibleZ' 'SatelliteVisibleAzimuth' 'SatelliteVisibleSnr' 'Status' 'MotionSource' 'OrientationSource' 'PositionSource' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'satellites_used' 'satellite_used_prn' 'satellites_visible' 'satellite_visible_prn' 'satellite_visible_z' 'satellite_visible_azimuth' 'satellite_visible_snr' 'status' 'motion_source' 'orientation_source' 'position_source' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
        STATUSNOFIX = int16(-1)
        STATUSFIX = int16(0)
        STATUSSBASFIX = int16(1)
        STATUSGBASFIX = int16(2)
        STATUSDGPSFIX = int16(18)
        STATUSWAASFIX = int16(33)
        SOURCENONE = uint16(0)
        SOURCEGPS = uint16(1)
        SOURCEPOINTS = uint16(2)
        SOURCEDOPPLER = uint16(4)
        SOURCEALTIMETER = uint16(8)
        SOURCEMAGNETIC = uint16(16)
        SOURCEGYRO = uint16(32)
        SOURCEACCEL = uint16(64)
    end
    properties
        Header
        SatellitesUsed
        SatelliteUsedPrn
        SatellitesVisible
        SatelliteVisiblePrn
        SatelliteVisibleZ
        SatelliteVisibleAzimuth
        SatelliteVisibleSnr
        Status
        MotionSource
        OrientationSource
        PositionSource
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'GPSStatus', 'Header')
            obj.Header = val;
        end
        function set.SatellitesUsed(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GPSStatus', 'SatellitesUsed');
            obj.SatellitesUsed = uint16(val);
        end
        function set.SatelliteUsedPrn(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = int32.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'GPSStatus', 'SatelliteUsedPrn');
            obj.SatelliteUsedPrn = int32(val);
        end
        function set.SatellitesVisible(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GPSStatus', 'SatellitesVisible');
            obj.SatellitesVisible = uint16(val);
        end
        function set.SatelliteVisiblePrn(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = int32.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'GPSStatus', 'SatelliteVisiblePrn');
            obj.SatelliteVisiblePrn = int32(val);
        end
        function set.SatelliteVisibleZ(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = int32.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'GPSStatus', 'SatelliteVisibleZ');
            obj.SatelliteVisibleZ = int32(val);
        end
        function set.SatelliteVisibleAzimuth(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = int32.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'GPSStatus', 'SatelliteVisibleAzimuth');
            obj.SatelliteVisibleAzimuth = int32(val);
        end
        function set.SatelliteVisibleSnr(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = int32.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'GPSStatus', 'SatelliteVisibleSnr');
            obj.SatelliteVisibleSnr = int32(val);
        end
        function set.Status(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GPSStatus', 'Status');
            obj.Status = int16(val);
        end
        function set.MotionSource(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GPSStatus', 'MotionSource');
            obj.MotionSource = uint16(val);
        end
        function set.OrientationSource(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GPSStatus', 'OrientationSource');
            obj.OrientationSource = uint16(val);
        end
        function set.PositionSource(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GPSStatus', 'PositionSource');
            obj.PositionSource = uint16(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.gps_common.GPSStatus.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.gps_common.GPSStatus(strObj);
        end
    end
end
