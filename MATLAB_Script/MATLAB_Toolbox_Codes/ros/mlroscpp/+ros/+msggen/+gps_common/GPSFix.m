
classdef GPSFix < ros.Message
    %GPSFix MATLAB implementation of gps_common/GPSFix
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'gps_common/GPSFix' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '3db3d0a7bc53054c67c528af84710b70' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'Status' 'Latitude' 'Longitude' 'Altitude' 'Track' 'Speed' 'Climb' 'Pitch' 'Roll' 'Dip' 'Time' 'Gdop' 'Pdop' 'Hdop' 'Vdop' 'Tdop' 'Err' 'ErrHorz' 'ErrVert' 'ErrTrack' 'ErrSpeed' 'ErrClimb' 'ErrTime' 'ErrPitch' 'ErrRoll' 'ErrDip' 'PositionCovariance' 'PositionCovarianceType' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'status' 'latitude' 'longitude' 'altitude' 'track' 'speed' 'climb' 'pitch' 'roll' 'dip' 'time' 'gdop' 'pdop' 'hdop' 'vdop' 'tdop' 'err' 'err_horz' 'err_vert' 'err_track' 'err_speed' 'err_climb' 'err_time' 'err_pitch' 'err_roll' 'err_dip' 'position_covariance' 'position_covariance_type' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            'ros.msggen.gps_common.GPSStatus' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
        COVARIANCETYPEUNKNOWN = uint8(0)
        COVARIANCETYPEAPPROXIMATED = uint8(1)
        COVARIANCETYPEDIAGONALKNOWN = uint8(2)
        COVARIANCETYPEKNOWN = uint8(3)
    end
    properties
        Header
        Status
        Latitude
        Longitude
        Altitude
        Track
        Speed
        Climb
        Pitch
        Roll
        Dip
        Time
        Gdop
        Pdop
        Hdop
        Vdop
        Tdop
        Err
        ErrHorz
        ErrVert
        ErrTrack
        ErrSpeed
        ErrClimb
        ErrTime
        ErrPitch
        ErrRoll
        ErrDip
        PositionCovariance
        PositionCovarianceType
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'GPSFix', 'Header')
            obj.Header = val;
        end
        function set.Status(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.gps_common.GPSStatus'};
            validateattributes(val, validClasses, validAttributes, 'GPSFix', 'Status')
            obj.Status = val;
        end
        function set.Latitude(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GPSFix', 'Latitude');
            obj.Latitude = double(val);
        end
        function set.Longitude(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GPSFix', 'Longitude');
            obj.Longitude = double(val);
        end
        function set.Altitude(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GPSFix', 'Altitude');
            obj.Altitude = double(val);
        end
        function set.Track(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GPSFix', 'Track');
            obj.Track = double(val);
        end
        function set.Speed(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GPSFix', 'Speed');
            obj.Speed = double(val);
        end
        function set.Climb(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GPSFix', 'Climb');
            obj.Climb = double(val);
        end
        function set.Pitch(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GPSFix', 'Pitch');
            obj.Pitch = double(val);
        end
        function set.Roll(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GPSFix', 'Roll');
            obj.Roll = double(val);
        end
        function set.Dip(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GPSFix', 'Dip');
            obj.Dip = double(val);
        end
        function set.Time(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GPSFix', 'Time');
            obj.Time = double(val);
        end
        function set.Gdop(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GPSFix', 'Gdop');
            obj.Gdop = double(val);
        end
        function set.Pdop(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GPSFix', 'Pdop');
            obj.Pdop = double(val);
        end
        function set.Hdop(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GPSFix', 'Hdop');
            obj.Hdop = double(val);
        end
        function set.Vdop(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GPSFix', 'Vdop');
            obj.Vdop = double(val);
        end
        function set.Tdop(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GPSFix', 'Tdop');
            obj.Tdop = double(val);
        end
        function set.Err(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GPSFix', 'Err');
            obj.Err = double(val);
        end
        function set.ErrHorz(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GPSFix', 'ErrHorz');
            obj.ErrHorz = double(val);
        end
        function set.ErrVert(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GPSFix', 'ErrVert');
            obj.ErrVert = double(val);
        end
        function set.ErrTrack(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GPSFix', 'ErrTrack');
            obj.ErrTrack = double(val);
        end
        function set.ErrSpeed(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GPSFix', 'ErrSpeed');
            obj.ErrSpeed = double(val);
        end
        function set.ErrClimb(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GPSFix', 'ErrClimb');
            obj.ErrClimb = double(val);
        end
        function set.ErrTime(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GPSFix', 'ErrTime');
            obj.ErrTime = double(val);
        end
        function set.ErrPitch(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GPSFix', 'ErrPitch');
            obj.ErrPitch = double(val);
        end
        function set.ErrRoll(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GPSFix', 'ErrRoll');
            obj.ErrRoll = double(val);
        end
        function set.ErrDip(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GPSFix', 'ErrDip');
            obj.ErrDip = double(val);
        end
        function set.PositionCovariance(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 9};
            validateattributes(val, validClasses, validAttributes, 'GPSFix', 'PositionCovariance');
            obj.PositionCovariance = double(val);
        end
        function set.PositionCovarianceType(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GPSFix', 'PositionCovarianceType');
            obj.PositionCovarianceType = uint8(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.gps_common.GPSFix.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.gps_common.GPSFix(strObj);
        end
    end
end
