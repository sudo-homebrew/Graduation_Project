
classdef Status < ros.Message
    %Status MATLAB implementation of bond/Status
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'bond/Status' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'eacc84bf5d65b6777d4c50f463dfb9c8' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'Id' 'InstanceId' 'Active' 'HeartbeatTimeout' 'HeartbeatPeriod' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'id' 'instance_id' 'active' 'heartbeat_timeout' 'heartbeat_period' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        Id
        InstanceId
        Active
        HeartbeatTimeout
        HeartbeatPeriod
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'Status', 'Header')
            obj.Header = val;
        end
        function set.Id(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'Status', 'Id');
            obj.Id = char(val);
        end
        function set.InstanceId(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'Status', 'InstanceId');
            obj.InstanceId = char(val);
        end
        function set.Active(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Status', 'Active');
            obj.Active = logical(val);
        end
        function set.HeartbeatTimeout(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Status', 'HeartbeatTimeout');
            obj.HeartbeatTimeout = single(val);
        end
        function set.HeartbeatPeriod(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'Status', 'HeartbeatPeriod');
            obj.HeartbeatPeriod = single(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.bond.Status.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.bond.Status(strObj);
        end
    end
end
