
classdef DifferentialControl < ros.Message
    %DifferentialControl MATLAB implementation of clearpath_base/DifferentialControl
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'clearpath_base/DifferentialControl' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'ae0672163e13fc0bb6491960c53a3259' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'LP' 'LI' 'LD' 'LFfwd' 'LStic' 'LSat' 'RP' 'RI' 'RD' 'RFfwd' 'RStic' 'RSat' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'l_p' 'l_i' 'l_d' 'l_ffwd' 'l_stic' 'l_sat' 'r_p' 'r_i' 'r_d' 'r_ffwd' 'r_stic' 'r_sat' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        LP
        LI
        LD
        LFfwd
        LStic
        LSat
        RP
        RI
        RD
        RFfwd
        RStic
        RSat
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'DifferentialControl', 'Header')
            obj.Header = val;
        end
        function set.LP(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DifferentialControl', 'LP');
            obj.LP = double(val);
        end
        function set.LI(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DifferentialControl', 'LI');
            obj.LI = double(val);
        end
        function set.LD(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DifferentialControl', 'LD');
            obj.LD = double(val);
        end
        function set.LFfwd(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DifferentialControl', 'LFfwd');
            obj.LFfwd = double(val);
        end
        function set.LStic(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DifferentialControl', 'LStic');
            obj.LStic = double(val);
        end
        function set.LSat(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DifferentialControl', 'LSat');
            obj.LSat = double(val);
        end
        function set.RP(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DifferentialControl', 'RP');
            obj.RP = double(val);
        end
        function set.RI(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DifferentialControl', 'RI');
            obj.RI = double(val);
        end
        function set.RD(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DifferentialControl', 'RD');
            obj.RD = double(val);
        end
        function set.RFfwd(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DifferentialControl', 'RFfwd');
            obj.RFfwd = double(val);
        end
        function set.RStic(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DifferentialControl', 'RStic');
            obj.RStic = double(val);
        end
        function set.RSat(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'DifferentialControl', 'RSat');
            obj.RSat = double(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.clearpath_base.DifferentialControl.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.clearpath_base.DifferentialControl(strObj);
        end
    end
end
