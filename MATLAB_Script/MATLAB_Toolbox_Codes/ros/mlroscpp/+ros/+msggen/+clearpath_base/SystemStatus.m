
classdef SystemStatus < ros.Message
    %SystemStatus MATLAB implementation of clearpath_base/SystemStatus
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'clearpath_base/SystemStatus' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'b24850c808eb727058fff35ba598006f' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'Uptime' 'Voltages' 'Currents' 'Temperatures' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'uptime' 'voltages' 'currents' 'temperatures' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        Uptime
        Voltages
        Currents
        Temperatures
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'SystemStatus', 'Header')
            obj.Header = val;
        end
        function set.Uptime(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SystemStatus', 'Uptime');
            obj.Uptime = uint32(val);
        end
        function set.Voltages(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'SystemStatus', 'Voltages');
            obj.Voltages = double(val);
        end
        function set.Currents(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'SystemStatus', 'Currents');
            obj.Currents = double(val);
        end
        function set.Temperatures(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'SystemStatus', 'Temperatures');
            obj.Temperatures = double(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.clearpath_base.SystemStatus.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.clearpath_base.SystemStatus(strObj);
        end
    end
end
