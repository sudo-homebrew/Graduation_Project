
classdef PDDLDomain < ros.Message
    %PDDLDomain MATLAB implementation of pddl_msgs/PDDLDomain
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'pddl_msgs/PDDLDomain' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '1db1abf7dbdf3e62fc55c75c4b365253' % The MD5 Checksum of the message definition
        PropertyList = { 'Actions' 'Name' 'Requirements' 'Types' 'Constants' 'Predicates' 'Functions' } % List of non-constant message properties
        ROSPropertyList = { 'actions' 'name' 'requirements' 'types' 'constants' 'predicates' 'functions' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.pddl_msgs.PDDLAction' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Actions
        Name
        Requirements
        Types
        Constants
        Predicates
        Functions
    end
    methods
        function set.Actions(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.pddl_msgs.PDDLAction.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.pddl_msgs.PDDLAction'};
            validateattributes(val, validClasses, validAttributes, 'PDDLDomain', 'Actions')
            obj.Actions = val;
        end
        function set.Name(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'PDDLDomain', 'Name');
            obj.Name = char(val);
        end
        function set.Requirements(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'PDDLDomain', 'Requirements');
            obj.Requirements = char(val);
        end
        function set.Types(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'PDDLDomain', 'Types');
            obj.Types = cell(val);
        end
        function set.Constants(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'PDDLDomain', 'Constants');
            obj.Constants = cell(val);
        end
        function set.Predicates(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'PDDLDomain', 'Predicates');
            obj.Predicates = cell(val);
        end
        function set.Functions(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'PDDLDomain', 'Functions');
            obj.Functions = cell(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.pddl_msgs.PDDLDomain.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.pddl_msgs.PDDLDomain(strObj);
        end
    end
end
