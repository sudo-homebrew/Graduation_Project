
classdef PDDLProblem < ros.Message
    %PDDLProblem MATLAB implementation of pddl_msgs/PDDLProblem
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'pddl_msgs/PDDLProblem' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'dfd9bdd094d91245128f960694763882' % The MD5 Checksum of the message definition
        PropertyList = { 'Objects' 'Name' 'Domain' 'Initial' 'Goal' 'Metric' } % List of non-constant message properties
        ROSPropertyList = { 'objects' 'name' 'domain' 'initial' 'goal' 'metric' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.pddl_msgs.PDDLObject' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Objects
        Name
        Domain
        Initial
        Goal
        Metric
    end
    methods
        function set.Objects(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.pddl_msgs.PDDLObject.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.pddl_msgs.PDDLObject'};
            validateattributes(val, validClasses, validAttributes, 'PDDLProblem', 'Objects')
            obj.Objects = val;
        end
        function set.Name(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'PDDLProblem', 'Name');
            obj.Name = char(val);
        end
        function set.Domain(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'PDDLProblem', 'Domain');
            obj.Domain = char(val);
        end
        function set.Initial(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'PDDLProblem', 'Initial');
            obj.Initial = cell(val);
        end
        function set.Goal(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'PDDLProblem', 'Goal');
            obj.Goal = char(val);
        end
        function set.Metric(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'PDDLProblem', 'Metric');
            obj.Metric = char(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.pddl_msgs.PDDLProblem.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.pddl_msgs.PDDLProblem(strObj);
        end
    end
end
