
classdef RunningCapability < ros.Message
    %RunningCapability MATLAB implementation of capabilities/RunningCapability
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'capabilities/RunningCapability' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'f97e2b23f907893008679ba2ff64fafc' % The MD5 Checksum of the message definition
        PropertyList = { 'Capability' 'DependentCapabilities' 'StartedBy' 'Pid' } % List of non-constant message properties
        ROSPropertyList = { 'capability' 'dependent_capabilities' 'started_by' 'pid' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.capabilities.Capability' ...
            'ros.msggen.capabilities.Capability' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Capability
        DependentCapabilities
        StartedBy
        Pid
    end
    methods
        function set.Capability(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.capabilities.Capability'};
            validateattributes(val, validClasses, validAttributes, 'RunningCapability', 'Capability')
            obj.Capability = val;
        end
        function set.DependentCapabilities(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.capabilities.Capability.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.capabilities.Capability'};
            validateattributes(val, validClasses, validAttributes, 'RunningCapability', 'DependentCapabilities')
            obj.DependentCapabilities = val;
        end
        function set.StartedBy(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'RunningCapability', 'StartedBy');
            obj.StartedBy = char(val);
        end
        function set.Pid(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RunningCapability', 'Pid');
            obj.Pid = int32(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.capabilities.RunningCapability.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.capabilities.RunningCapability(strObj);
        end
    end
end
