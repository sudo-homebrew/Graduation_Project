
classdef SegwayStatus < ros.Message
    %SegwayStatus MATLAB implementation of segway_rmp/SegwayStatus
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'segway_rmp/SegwayStatus' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '658b68a87a84c7483fa3f522de0a2f66' % The MD5 Checksum of the message definition
        PropertyList = { 'PitchAngle' 'PitchRate' 'RollAngle' 'RollRate' 'LeftWheelVelocity' 'RightWheelVelocity' 'YawRate' 'ServoFrames' 'LeftWheelDisplacement' 'RightWheelDisplacement' 'ForwardDisplacement' 'YawDisplacement' 'LeftMotorTorque' 'RightMotorTorque' 'OperationMode' 'GainSchedule' 'UiBattery' 'PowerbaseBattery' 'MotorsEnabled' } % List of non-constant message properties
        ROSPropertyList = { 'pitch_angle' 'pitch_rate' 'roll_angle' 'roll_rate' 'left_wheel_velocity' 'right_wheel_velocity' 'yaw_rate' 'servo_frames' 'left_wheel_displacement' 'right_wheel_displacement' 'forward_displacement' 'yaw_displacement' 'left_motor_torque' 'right_motor_torque' 'operation_mode' 'gain_schedule' 'ui_battery' 'powerbase_battery' 'motors_enabled' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
        LIGHT = int8(1)
        TALL = int8(2)
        HEAVY = int8(3)
        BALANCE = int8(1)
        TRACTOR = int8(2)
        POWERDOWN = int8(3)
    end
    properties
        PitchAngle
        PitchRate
        RollAngle
        RollRate
        LeftWheelVelocity
        RightWheelVelocity
        YawRate
        ServoFrames
        LeftWheelDisplacement
        RightWheelDisplacement
        ForwardDisplacement
        YawDisplacement
        LeftMotorTorque
        RightMotorTorque
        OperationMode
        GainSchedule
        UiBattery
        PowerbaseBattery
        MotorsEnabled
    end
    methods
        function set.PitchAngle(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SegwayStatus', 'PitchAngle');
            obj.PitchAngle = single(val);
        end
        function set.PitchRate(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SegwayStatus', 'PitchRate');
            obj.PitchRate = single(val);
        end
        function set.RollAngle(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SegwayStatus', 'RollAngle');
            obj.RollAngle = single(val);
        end
        function set.RollRate(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SegwayStatus', 'RollRate');
            obj.RollRate = single(val);
        end
        function set.LeftWheelVelocity(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SegwayStatus', 'LeftWheelVelocity');
            obj.LeftWheelVelocity = single(val);
        end
        function set.RightWheelVelocity(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SegwayStatus', 'RightWheelVelocity');
            obj.RightWheelVelocity = single(val);
        end
        function set.YawRate(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SegwayStatus', 'YawRate');
            obj.YawRate = single(val);
        end
        function set.ServoFrames(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SegwayStatus', 'ServoFrames');
            obj.ServoFrames = single(val);
        end
        function set.LeftWheelDisplacement(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SegwayStatus', 'LeftWheelDisplacement');
            obj.LeftWheelDisplacement = single(val);
        end
        function set.RightWheelDisplacement(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SegwayStatus', 'RightWheelDisplacement');
            obj.RightWheelDisplacement = single(val);
        end
        function set.ForwardDisplacement(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SegwayStatus', 'ForwardDisplacement');
            obj.ForwardDisplacement = single(val);
        end
        function set.YawDisplacement(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SegwayStatus', 'YawDisplacement');
            obj.YawDisplacement = single(val);
        end
        function set.LeftMotorTorque(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SegwayStatus', 'LeftMotorTorque');
            obj.LeftMotorTorque = single(val);
        end
        function set.RightMotorTorque(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SegwayStatus', 'RightMotorTorque');
            obj.RightMotorTorque = single(val);
        end
        function set.OperationMode(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SegwayStatus', 'OperationMode');
            obj.OperationMode = int8(val);
        end
        function set.GainSchedule(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SegwayStatus', 'GainSchedule');
            obj.GainSchedule = int8(val);
        end
        function set.UiBattery(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SegwayStatus', 'UiBattery');
            obj.UiBattery = single(val);
        end
        function set.PowerbaseBattery(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SegwayStatus', 'PowerbaseBattery');
            obj.PowerbaseBattery = single(val);
        end
        function set.MotorsEnabled(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SegwayStatus', 'MotorsEnabled');
            obj.MotorsEnabled = logical(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.segway_rmp.SegwayStatus.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.segway_rmp.SegwayStatus(strObj);
        end
    end
end
