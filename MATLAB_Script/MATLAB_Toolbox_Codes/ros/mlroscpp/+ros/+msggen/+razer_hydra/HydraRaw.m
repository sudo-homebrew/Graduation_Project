
classdef HydraRaw < ros.Message
    %HydraRaw MATLAB implementation of razer_hydra/HydraRaw
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'razer_hydra/HydraRaw' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'abda63674ce89e542bda766f5d8939f7' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'Pos' 'Quat' 'Buttons' 'Analog' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'pos' 'quat' 'buttons' 'analog' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        Pos
        Quat
        Buttons
        Analog
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'HydraRaw', 'Header')
            obj.Header = val;
        end
        function set.Pos(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 6};
            validateattributes(val, validClasses, validAttributes, 'HydraRaw', 'Pos');
            obj.Pos = int16(val);
        end
        function set.Quat(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 8};
            validateattributes(val, validClasses, validAttributes, 'HydraRaw', 'Quat');
            obj.Quat = int16(val);
        end
        function set.Buttons(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 2};
            validateattributes(val, validClasses, validAttributes, 'HydraRaw', 'Buttons');
            obj.Buttons = uint8(val);
        end
        function set.Analog(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 6};
            validateattributes(val, validClasses, validAttributes, 'HydraRaw', 'Analog');
            obj.Analog = int16(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.razer_hydra.HydraRaw.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.razer_hydra.HydraRaw(strObj);
        end
    end
end
