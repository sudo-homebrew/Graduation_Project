
classdef RouteNetwork < ros.Message
    %RouteNetwork MATLAB implementation of geographic_msgs/RouteNetwork
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'geographic_msgs/RouteNetwork' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'fd717c0a34a7c954deed32c6847f30a8' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'Id' 'Bounds' 'Points' 'Segments' 'Props' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'id' 'bounds' 'points' 'segments' 'props' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            'ros.msggen.uuid_msgs.UniqueID' ...
            'ros.msggen.geographic_msgs.BoundingBox' ...
            'ros.msggen.geographic_msgs.WayPoint' ...
            'ros.msggen.geographic_msgs.RouteSegment' ...
            'ros.msggen.geographic_msgs.KeyValue' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        Id
        Bounds
        Points
        Segments
        Props
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'RouteNetwork', 'Header')
            obj.Header = val;
        end
        function set.Id(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.uuid_msgs.UniqueID'};
            validateattributes(val, validClasses, validAttributes, 'RouteNetwork', 'Id')
            obj.Id = val;
        end
        function set.Bounds(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geographic_msgs.BoundingBox'};
            validateattributes(val, validClasses, validAttributes, 'RouteNetwork', 'Bounds')
            obj.Bounds = val;
        end
        function set.Points(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.geographic_msgs.WayPoint.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.geographic_msgs.WayPoint'};
            validateattributes(val, validClasses, validAttributes, 'RouteNetwork', 'Points')
            obj.Points = val;
        end
        function set.Segments(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.geographic_msgs.RouteSegment.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.geographic_msgs.RouteSegment'};
            validateattributes(val, validClasses, validAttributes, 'RouteNetwork', 'Segments')
            obj.Segments = val;
        end
        function set.Props(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.geographic_msgs.KeyValue.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.geographic_msgs.KeyValue'};
            validateattributes(val, validClasses, validAttributes, 'RouteNetwork', 'Props')
            obj.Props = val;
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.geographic_msgs.RouteNetwork.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.geographic_msgs.RouteNetwork(strObj);
        end
    end
end
