
classdef PickupGoal < ros.Message
    %PickupGoal MATLAB implementation of moveit_msgs/PickupGoal
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'moveit_msgs/PickupGoal' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '3a71f6f9bc6e640594ce6a411ccfe764' % The MD5 Checksum of the message definition
        PropertyList = { 'PossibleGrasps' 'PathConstraints' 'PlanningOptions' 'TargetName' 'GroupName' 'EndEffector' 'SupportSurfaceName' 'AllowGripperSupportCollision' 'AttachedObjectTouchLinks' 'MinimizeObjectDistance' 'PlannerId' 'AllowedTouchObjects' 'AllowedPlanningTime' } % List of non-constant message properties
        ROSPropertyList = { 'possible_grasps' 'path_constraints' 'planning_options' 'target_name' 'group_name' 'end_effector' 'support_surface_name' 'allow_gripper_support_collision' 'attached_object_touch_links' 'minimize_object_distance' 'planner_id' 'allowed_touch_objects' 'allowed_planning_time' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.moveit_msgs.Grasp' ...
            'ros.msggen.moveit_msgs.Constraints' ...
            'ros.msggen.moveit_msgs.PlanningOptions' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        PossibleGrasps
        PathConstraints
        PlanningOptions
        TargetName
        GroupName
        EndEffector
        SupportSurfaceName
        AllowGripperSupportCollision
        AttachedObjectTouchLinks
        MinimizeObjectDistance
        PlannerId
        AllowedTouchObjects
        AllowedPlanningTime
    end
    methods
        function set.PossibleGrasps(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.moveit_msgs.Grasp.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.moveit_msgs.Grasp'};
            validateattributes(val, validClasses, validAttributes, 'PickupGoal', 'PossibleGrasps')
            obj.PossibleGrasps = val;
        end
        function set.PathConstraints(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.moveit_msgs.Constraints'};
            validateattributes(val, validClasses, validAttributes, 'PickupGoal', 'PathConstraints')
            obj.PathConstraints = val;
        end
        function set.PlanningOptions(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.moveit_msgs.PlanningOptions'};
            validateattributes(val, validClasses, validAttributes, 'PickupGoal', 'PlanningOptions')
            obj.PlanningOptions = val;
        end
        function set.TargetName(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'PickupGoal', 'TargetName');
            obj.TargetName = char(val);
        end
        function set.GroupName(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'PickupGoal', 'GroupName');
            obj.GroupName = char(val);
        end
        function set.EndEffector(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'PickupGoal', 'EndEffector');
            obj.EndEffector = char(val);
        end
        function set.SupportSurfaceName(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'PickupGoal', 'SupportSurfaceName');
            obj.SupportSurfaceName = char(val);
        end
        function set.AllowGripperSupportCollision(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PickupGoal', 'AllowGripperSupportCollision');
            obj.AllowGripperSupportCollision = logical(val);
        end
        function set.AttachedObjectTouchLinks(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'PickupGoal', 'AttachedObjectTouchLinks');
            obj.AttachedObjectTouchLinks = cell(val);
        end
        function set.MinimizeObjectDistance(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PickupGoal', 'MinimizeObjectDistance');
            obj.MinimizeObjectDistance = logical(val);
        end
        function set.PlannerId(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'PickupGoal', 'PlannerId');
            obj.PlannerId = char(val);
        end
        function set.AllowedTouchObjects(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'PickupGoal', 'AllowedTouchObjects');
            obj.AllowedTouchObjects = cell(val);
        end
        function set.AllowedPlanningTime(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PickupGoal', 'AllowedPlanningTime');
            obj.AllowedPlanningTime = double(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.moveit_msgs.PickupGoal.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.moveit_msgs.PickupGoal(strObj);
        end
    end
end
