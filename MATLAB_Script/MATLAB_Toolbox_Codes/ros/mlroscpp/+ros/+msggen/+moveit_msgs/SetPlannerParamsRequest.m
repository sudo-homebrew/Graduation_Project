
classdef SetPlannerParamsRequest < ros.Message
    %SetPlannerParamsRequest MATLAB implementation of moveit_msgs/SetPlannerParamsRequest
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'moveit_msgs/SetPlannerParamsRequest' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '14bebee5d4d53a2df94b7f146d3eb2ff' % The MD5 Checksum of the message definition
        PropertyList = { 'Params' 'PipelineId' 'PlannerConfig' 'Group' 'Replace' } % List of non-constant message properties
        ROSPropertyList = { 'params' 'pipeline_id' 'planner_config' 'group' 'replace' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.moveit_msgs.PlannerParams' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Params
        PipelineId
        PlannerConfig
        Group
        Replace
    end
    methods
        function set.Params(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.moveit_msgs.PlannerParams'};
            validateattributes(val, validClasses, validAttributes, 'SetPlannerParamsRequest', 'Params')
            obj.Params = val;
        end
        function set.PipelineId(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'SetPlannerParamsRequest', 'PipelineId');
            obj.PipelineId = char(val);
        end
        function set.PlannerConfig(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'SetPlannerParamsRequest', 'PlannerConfig');
            obj.PlannerConfig = char(val);
        end
        function set.Group(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'SetPlannerParamsRequest', 'Group');
            obj.Group = char(val);
        end
        function set.Replace(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'SetPlannerParamsRequest', 'Replace');
            obj.Replace = logical(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.moveit_msgs.SetPlannerParamsRequest.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.moveit_msgs.SetPlannerParamsRequest(strObj);
        end
    end
end
