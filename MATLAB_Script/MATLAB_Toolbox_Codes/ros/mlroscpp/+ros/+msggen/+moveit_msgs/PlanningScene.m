
classdef PlanningScene < ros.Message
    %PlanningScene MATLAB implementation of moveit_msgs/PlanningScene
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'moveit_msgs/PlanningScene' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'acfc50bcfd6c7b978066bfa7c786002c' % The MD5 Checksum of the message definition
        PropertyList = { 'RobotState' 'FixedFrameTransforms' 'AllowedCollisionMatrix' 'LinkPadding' 'LinkScale' 'ObjectColors' 'World' 'Name' 'RobotModelName' 'IsDiff' } % List of non-constant message properties
        ROSPropertyList = { 'robot_state' 'fixed_frame_transforms' 'allowed_collision_matrix' 'link_padding' 'link_scale' 'object_colors' 'world' 'name' 'robot_model_name' 'is_diff' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.moveit_msgs.RobotState' ...
            'ros.msg.geometry_msgs.TransformStamped' ...
            'ros.msggen.moveit_msgs.AllowedCollisionMatrix' ...
            'ros.msggen.moveit_msgs.LinkPadding' ...
            'ros.msggen.moveit_msgs.LinkScale' ...
            'ros.msggen.moveit_msgs.ObjectColor' ...
            'ros.msggen.moveit_msgs.PlanningSceneWorld' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        RobotState
        FixedFrameTransforms
        AllowedCollisionMatrix
        LinkPadding
        LinkScale
        ObjectColors
        World
        Name
        RobotModelName
        IsDiff
    end
    methods
        function set.RobotState(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.moveit_msgs.RobotState'};
            validateattributes(val, validClasses, validAttributes, 'PlanningScene', 'RobotState')
            obj.RobotState = val;
        end
        function set.FixedFrameTransforms(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msg.geometry_msgs.TransformStamped.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msg.geometry_msgs.TransformStamped'};
            validateattributes(val, validClasses, validAttributes, 'PlanningScene', 'FixedFrameTransforms')
            obj.FixedFrameTransforms = val;
        end
        function set.AllowedCollisionMatrix(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.moveit_msgs.AllowedCollisionMatrix'};
            validateattributes(val, validClasses, validAttributes, 'PlanningScene', 'AllowedCollisionMatrix')
            obj.AllowedCollisionMatrix = val;
        end
        function set.LinkPadding(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.moveit_msgs.LinkPadding.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.moveit_msgs.LinkPadding'};
            validateattributes(val, validClasses, validAttributes, 'PlanningScene', 'LinkPadding')
            obj.LinkPadding = val;
        end
        function set.LinkScale(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.moveit_msgs.LinkScale.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.moveit_msgs.LinkScale'};
            validateattributes(val, validClasses, validAttributes, 'PlanningScene', 'LinkScale')
            obj.LinkScale = val;
        end
        function set.ObjectColors(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.moveit_msgs.ObjectColor.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.moveit_msgs.ObjectColor'};
            validateattributes(val, validClasses, validAttributes, 'PlanningScene', 'ObjectColors')
            obj.ObjectColors = val;
        end
        function set.World(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.moveit_msgs.PlanningSceneWorld'};
            validateattributes(val, validClasses, validAttributes, 'PlanningScene', 'World')
            obj.World = val;
        end
        function set.Name(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'PlanningScene', 'Name');
            obj.Name = char(val);
        end
        function set.RobotModelName(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'PlanningScene', 'RobotModelName');
            obj.RobotModelName = char(val);
        end
        function set.IsDiff(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PlanningScene', 'IsDiff');
            obj.IsDiff = logical(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.moveit_msgs.PlanningScene.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.moveit_msgs.PlanningScene(strObj);
        end
    end
end
