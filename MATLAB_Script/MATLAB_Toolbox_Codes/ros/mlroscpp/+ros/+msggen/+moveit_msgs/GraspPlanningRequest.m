
classdef GraspPlanningRequest < ros.Message
    %GraspPlanningRequest MATLAB implementation of moveit_msgs/GraspPlanningRequest
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'moveit_msgs/GraspPlanningRequest' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '213bcb2a85f6f966990ab629958810a1' % The MD5 Checksum of the message definition
        PropertyList = { 'Target' 'CandidateGrasps' 'MovableObstacles' 'GroupName' 'SupportSurfaces' } % List of non-constant message properties
        ROSPropertyList = { 'target' 'candidate_grasps' 'movable_obstacles' 'group_name' 'support_surfaces' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.moveit_msgs.CollisionObject' ...
            'ros.msggen.moveit_msgs.Grasp' ...
            'ros.msggen.moveit_msgs.CollisionObject' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Target
        CandidateGrasps
        MovableObstacles
        GroupName
        SupportSurfaces
    end
    methods
        function set.Target(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.moveit_msgs.CollisionObject'};
            validateattributes(val, validClasses, validAttributes, 'GraspPlanningRequest', 'Target')
            obj.Target = val;
        end
        function set.CandidateGrasps(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.moveit_msgs.Grasp.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.moveit_msgs.Grasp'};
            validateattributes(val, validClasses, validAttributes, 'GraspPlanningRequest', 'CandidateGrasps')
            obj.CandidateGrasps = val;
        end
        function set.MovableObstacles(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.moveit_msgs.CollisionObject.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.moveit_msgs.CollisionObject'};
            validateattributes(val, validClasses, validAttributes, 'GraspPlanningRequest', 'MovableObstacles')
            obj.MovableObstacles = val;
        end
        function set.GroupName(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'GraspPlanningRequest', 'GroupName');
            obj.GroupName = char(val);
        end
        function set.SupportSurfaces(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'GraspPlanningRequest', 'SupportSurfaces');
            obj.SupportSurfaces = cell(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.moveit_msgs.GraspPlanningRequest.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.moveit_msgs.GraspPlanningRequest(strObj);
        end
    end
end
