
classdef PositionIKRequest < ros.Message
    %PositionIKRequest MATLAB implementation of moveit_msgs/PositionIKRequest
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'moveit_msgs/PositionIKRequest' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'cb7c3615ee4d29d023dfdc5950af0504' % The MD5 Checksum of the message definition
        PropertyList = { 'RobotState' 'Constraints' 'PoseStamped' 'PoseStampedVector' 'Timeout' 'GroupName' 'AvoidCollisions' 'IkLinkName' 'IkLinkNames' } % List of non-constant message properties
        ROSPropertyList = { 'robot_state' 'constraints' 'pose_stamped' 'pose_stamped_vector' 'timeout' 'group_name' 'avoid_collisions' 'ik_link_name' 'ik_link_names' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.moveit_msgs.RobotState' ...
            'ros.msggen.moveit_msgs.Constraints' ...
            'ros.msggen.geometry_msgs.PoseStamped' ...
            'ros.msggen.geometry_msgs.PoseStamped' ...
            'ros.msg.Duration' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        RobotState
        Constraints
        PoseStamped
        PoseStampedVector
        Timeout
        GroupName
        AvoidCollisions
        IkLinkName
        IkLinkNames
    end
    methods
        function set.RobotState(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.moveit_msgs.RobotState'};
            validateattributes(val, validClasses, validAttributes, 'PositionIKRequest', 'RobotState')
            obj.RobotState = val;
        end
        function set.Constraints(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.moveit_msgs.Constraints'};
            validateattributes(val, validClasses, validAttributes, 'PositionIKRequest', 'Constraints')
            obj.Constraints = val;
        end
        function set.PoseStamped(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.PoseStamped'};
            validateattributes(val, validClasses, validAttributes, 'PositionIKRequest', 'PoseStamped')
            obj.PoseStamped = val;
        end
        function set.PoseStampedVector(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.geometry_msgs.PoseStamped.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.geometry_msgs.PoseStamped'};
            validateattributes(val, validClasses, validAttributes, 'PositionIKRequest', 'PoseStampedVector')
            obj.PoseStampedVector = val;
        end
        function set.Timeout(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msg.Duration'};
            validateattributes(val, validClasses, validAttributes, 'PositionIKRequest', 'Timeout')
            obj.Timeout = val;
        end
        function set.GroupName(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'PositionIKRequest', 'GroupName');
            obj.GroupName = char(val);
        end
        function set.AvoidCollisions(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PositionIKRequest', 'AvoidCollisions');
            obj.AvoidCollisions = logical(val);
        end
        function set.IkLinkName(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'PositionIKRequest', 'IkLinkName');
            obj.IkLinkName = char(val);
        end
        function set.IkLinkNames(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'PositionIKRequest', 'IkLinkNames');
            obj.IkLinkNames = cell(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.moveit_msgs.PositionIKRequest.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.moveit_msgs.PositionIKRequest(strObj);
        end
    end
end
