
classdef AllowedCollisionMatrix < ros.Message
    %AllowedCollisionMatrix MATLAB implementation of moveit_msgs/AllowedCollisionMatrix
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'moveit_msgs/AllowedCollisionMatrix' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'aedce13587eef0d79165a075659c1879' % The MD5 Checksum of the message definition
        PropertyList = { 'EntryValues' 'EntryNames' 'DefaultEntryNames' 'DefaultEntryValues' } % List of non-constant message properties
        ROSPropertyList = { 'entry_values' 'entry_names' 'default_entry_names' 'default_entry_values' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.moveit_msgs.AllowedCollisionEntry' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        EntryValues
        EntryNames
        DefaultEntryNames
        DefaultEntryValues
    end
    methods
        function set.EntryValues(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.moveit_msgs.AllowedCollisionEntry.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.moveit_msgs.AllowedCollisionEntry'};
            validateattributes(val, validClasses, validAttributes, 'AllowedCollisionMatrix', 'EntryValues')
            obj.EntryValues = val;
        end
        function set.EntryNames(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'AllowedCollisionMatrix', 'EntryNames');
            obj.EntryNames = cell(val);
        end
        function set.DefaultEntryNames(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'AllowedCollisionMatrix', 'DefaultEntryNames');
            obj.DefaultEntryNames = cell(val);
        end
        function set.DefaultEntryValues(obj, val)
            validClasses = {'logical', 'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = logical.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'AllowedCollisionMatrix', 'DefaultEntryValues');
            obj.DefaultEntryValues = logical(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.moveit_msgs.AllowedCollisionMatrix.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.moveit_msgs.AllowedCollisionMatrix(strObj);
        end
    end
end
