
classdef JointLimits < ros.Message
    %JointLimits MATLAB implementation of moveit_msgs/JointLimits
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'moveit_msgs/JointLimits' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '8ca618c7329ea46142cbc864a2efe856' % The MD5 Checksum of the message definition
        PropertyList = { 'JointName' 'HasPositionLimits' 'MinPosition' 'MaxPosition' 'HasVelocityLimits' 'MaxVelocity' 'HasAccelerationLimits' 'MaxAcceleration' } % List of non-constant message properties
        ROSPropertyList = { 'joint_name' 'has_position_limits' 'min_position' 'max_position' 'has_velocity_limits' 'max_velocity' 'has_acceleration_limits' 'max_acceleration' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        JointName
        HasPositionLimits
        MinPosition
        MaxPosition
        HasVelocityLimits
        MaxVelocity
        HasAccelerationLimits
        MaxAcceleration
    end
    methods
        function set.JointName(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'JointLimits', 'JointName');
            obj.JointName = char(val);
        end
        function set.HasPositionLimits(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointLimits', 'HasPositionLimits');
            obj.HasPositionLimits = logical(val);
        end
        function set.MinPosition(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointLimits', 'MinPosition');
            obj.MinPosition = double(val);
        end
        function set.MaxPosition(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointLimits', 'MaxPosition');
            obj.MaxPosition = double(val);
        end
        function set.HasVelocityLimits(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointLimits', 'HasVelocityLimits');
            obj.HasVelocityLimits = logical(val);
        end
        function set.MaxVelocity(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointLimits', 'MaxVelocity');
            obj.MaxVelocity = double(val);
        end
        function set.HasAccelerationLimits(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointLimits', 'HasAccelerationLimits');
            obj.HasAccelerationLimits = logical(val);
        end
        function set.MaxAcceleration(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'JointLimits', 'MaxAcceleration');
            obj.MaxAcceleration = double(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.moveit_msgs.JointLimits.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.moveit_msgs.JointLimits(strObj);
        end
    end
end
