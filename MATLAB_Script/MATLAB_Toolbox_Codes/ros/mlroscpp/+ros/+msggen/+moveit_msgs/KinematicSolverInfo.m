
classdef KinematicSolverInfo < ros.Message
    %KinematicSolverInfo MATLAB implementation of moveit_msgs/KinematicSolverInfo
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'moveit_msgs/KinematicSolverInfo' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'cc048557c0f9795c392dd80f8bb00489' % The MD5 Checksum of the message definition
        PropertyList = { 'Limits' 'JointNames' 'LinkNames' } % List of non-constant message properties
        ROSPropertyList = { 'limits' 'joint_names' 'link_names' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.moveit_msgs.JointLimits' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Limits
        JointNames
        LinkNames
    end
    methods
        function set.Limits(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.moveit_msgs.JointLimits.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.moveit_msgs.JointLimits'};
            validateattributes(val, validClasses, validAttributes, 'KinematicSolverInfo', 'Limits')
            obj.Limits = val;
        end
        function set.JointNames(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'KinematicSolverInfo', 'JointNames');
            obj.JointNames = cell(val);
        end
        function set.LinkNames(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'KinematicSolverInfo', 'LinkNames');
            obj.LinkNames = cell(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.moveit_msgs.KinematicSolverInfo.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.moveit_msgs.KinematicSolverInfo(strObj);
        end
    end
end
