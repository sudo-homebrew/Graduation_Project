
classdef CollisionObject < ros.Message
    %CollisionObject MATLAB implementation of moveit_msgs/CollisionObject
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'moveit_msgs/CollisionObject' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'dbba710596087da521c07564160dfccb' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'Pose' 'Type' 'Primitives' 'PrimitivePoses' 'Meshes' 'MeshPoses' 'Planes' 'PlanePoses' 'SubframePoses' 'Id' 'SubframeNames' 'Operation' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'pose' 'type' 'primitives' 'primitive_poses' 'meshes' 'mesh_poses' 'planes' 'plane_poses' 'subframe_poses' 'id' 'subframe_names' 'operation' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            'ros.msggen.geometry_msgs.Pose' ...
            'ros.msggen.object_recognition_msgs.ObjectType' ...
            'ros.msggen.shape_msgs.SolidPrimitive' ...
            'ros.msggen.geometry_msgs.Pose' ...
            'ros.msggen.shape_msgs.Mesh' ...
            'ros.msggen.geometry_msgs.Pose' ...
            'ros.msggen.shape_msgs.Plane' ...
            'ros.msggen.geometry_msgs.Pose' ...
            'ros.msggen.geometry_msgs.Pose' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
        ADD = int8(0)
        REMOVE = int8(1)
        APPEND = int8(2)
        MOVE = int8(3)
    end
    properties
        Header
        Pose
        Type
        Primitives
        PrimitivePoses
        Meshes
        MeshPoses
        Planes
        PlanePoses
        SubframePoses
        Id
        SubframeNames
        Operation
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'CollisionObject', 'Header')
            obj.Header = val;
        end
        function set.Pose(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.geometry_msgs.Pose'};
            validateattributes(val, validClasses, validAttributes, 'CollisionObject', 'Pose')
            obj.Pose = val;
        end
        function set.Type(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.object_recognition_msgs.ObjectType'};
            validateattributes(val, validClasses, validAttributes, 'CollisionObject', 'Type')
            obj.Type = val;
        end
        function set.Primitives(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.shape_msgs.SolidPrimitive.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.shape_msgs.SolidPrimitive'};
            validateattributes(val, validClasses, validAttributes, 'CollisionObject', 'Primitives')
            obj.Primitives = val;
        end
        function set.PrimitivePoses(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.geometry_msgs.Pose.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.geometry_msgs.Pose'};
            validateattributes(val, validClasses, validAttributes, 'CollisionObject', 'PrimitivePoses')
            obj.PrimitivePoses = val;
        end
        function set.Meshes(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.shape_msgs.Mesh.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.shape_msgs.Mesh'};
            validateattributes(val, validClasses, validAttributes, 'CollisionObject', 'Meshes')
            obj.Meshes = val;
        end
        function set.MeshPoses(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.geometry_msgs.Pose.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.geometry_msgs.Pose'};
            validateattributes(val, validClasses, validAttributes, 'CollisionObject', 'MeshPoses')
            obj.MeshPoses = val;
        end
        function set.Planes(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.shape_msgs.Plane.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.shape_msgs.Plane'};
            validateattributes(val, validClasses, validAttributes, 'CollisionObject', 'Planes')
            obj.Planes = val;
        end
        function set.PlanePoses(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.geometry_msgs.Pose.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.geometry_msgs.Pose'};
            validateattributes(val, validClasses, validAttributes, 'CollisionObject', 'PlanePoses')
            obj.PlanePoses = val;
        end
        function set.SubframePoses(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.geometry_msgs.Pose.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.geometry_msgs.Pose'};
            validateattributes(val, validClasses, validAttributes, 'CollisionObject', 'SubframePoses')
            obj.SubframePoses = val;
        end
        function set.Id(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'CollisionObject', 'Id');
            obj.Id = char(val);
        end
        function set.SubframeNames(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'CollisionObject', 'SubframeNames');
            obj.SubframeNames = cell(val);
        end
        function set.Operation(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'CollisionObject', 'Operation');
            obj.Operation = int8(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.moveit_msgs.CollisionObject.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.moveit_msgs.CollisionObject(strObj);
        end
    end
end
