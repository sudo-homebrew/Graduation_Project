
classdef GetCartesianPathRequest < ros.Message
    %GetCartesianPathRequest MATLAB implementation of moveit_msgs/GetCartesianPathRequest
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'moveit_msgs/GetCartesianPathRequest' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '721648200a81dbec003e9f1273aa2c80' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'StartState' 'Waypoints' 'PathConstraints' 'GroupName' 'LinkName' 'MaxStep' 'JumpThreshold' 'PrismaticJumpThreshold' 'RevoluteJumpThreshold' 'AvoidCollisions' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'start_state' 'waypoints' 'path_constraints' 'group_name' 'link_name' 'max_step' 'jump_threshold' 'prismatic_jump_threshold' 'revolute_jump_threshold' 'avoid_collisions' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            'ros.msggen.moveit_msgs.RobotState' ...
            'ros.msggen.geometry_msgs.Pose' ...
            'ros.msggen.moveit_msgs.Constraints' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        StartState
        Waypoints
        PathConstraints
        GroupName
        LinkName
        MaxStep
        JumpThreshold
        PrismaticJumpThreshold
        RevoluteJumpThreshold
        AvoidCollisions
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'GetCartesianPathRequest', 'Header')
            obj.Header = val;
        end
        function set.StartState(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.moveit_msgs.RobotState'};
            validateattributes(val, validClasses, validAttributes, 'GetCartesianPathRequest', 'StartState')
            obj.StartState = val;
        end
        function set.Waypoints(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.geometry_msgs.Pose.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.geometry_msgs.Pose'};
            validateattributes(val, validClasses, validAttributes, 'GetCartesianPathRequest', 'Waypoints')
            obj.Waypoints = val;
        end
        function set.PathConstraints(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.moveit_msgs.Constraints'};
            validateattributes(val, validClasses, validAttributes, 'GetCartesianPathRequest', 'PathConstraints')
            obj.PathConstraints = val;
        end
        function set.GroupName(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'GetCartesianPathRequest', 'GroupName');
            obj.GroupName = char(val);
        end
        function set.LinkName(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'GetCartesianPathRequest', 'LinkName');
            obj.LinkName = char(val);
        end
        function set.MaxStep(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GetCartesianPathRequest', 'MaxStep');
            obj.MaxStep = double(val);
        end
        function set.JumpThreshold(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GetCartesianPathRequest', 'JumpThreshold');
            obj.JumpThreshold = double(val);
        end
        function set.PrismaticJumpThreshold(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GetCartesianPathRequest', 'PrismaticJumpThreshold');
            obj.PrismaticJumpThreshold = double(val);
        end
        function set.RevoluteJumpThreshold(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GetCartesianPathRequest', 'RevoluteJumpThreshold');
            obj.RevoluteJumpThreshold = double(val);
        end
        function set.AvoidCollisions(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'GetCartesianPathRequest', 'AvoidCollisions');
            obj.AvoidCollisions = logical(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.moveit_msgs.GetCartesianPathRequest.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.moveit_msgs.GetCartesianPathRequest(strObj);
        end
    end
end
