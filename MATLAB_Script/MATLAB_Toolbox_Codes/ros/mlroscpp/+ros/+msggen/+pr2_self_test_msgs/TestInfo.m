
classdef TestInfo < ros.Message
    %TestInfo MATLAB implementation of pr2_self_test_msgs/TestInfo
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'pr2_self_test_msgs/TestInfo' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '594219b720ecaee963aa0b601d38b8f2' % The MD5 Checksum of the message definition
        PropertyList = { 'Serial' 'TestName' 'TestStatus' 'BayName' 'Machine' 'Board' 'Breaker' 'PowerStatus' 'Estop' 'Elapsed' 'StatusMsg' } % List of non-constant message properties
        ROSPropertyList = { 'serial' 'test_name' 'test_status' 'bay_name' 'machine' 'board' 'breaker' 'power_status' 'estop' 'elapsed' 'status_msg' } % List of non-constant ROS message properties
        PropertyMessageTypes = { '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Serial
        TestName
        TestStatus
        BayName
        Machine
        Board
        Breaker
        PowerStatus
        Estop
        Elapsed
        StatusMsg
    end
    methods
        function set.Serial(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'TestInfo', 'Serial');
            obj.Serial = char(val);
        end
        function set.TestName(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'TestInfo', 'TestName');
            obj.TestName = char(val);
        end
        function set.TestStatus(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'TestInfo', 'TestStatus');
            obj.TestStatus = int8(val);
        end
        function set.BayName(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'TestInfo', 'BayName');
            obj.BayName = char(val);
        end
        function set.Machine(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'TestInfo', 'Machine');
            obj.Machine = char(val);
        end
        function set.Board(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'TestInfo', 'Board');
            obj.Board = int32(val);
        end
        function set.Breaker(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'TestInfo', 'Breaker');
            obj.Breaker = int32(val);
        end
        function set.PowerStatus(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'TestInfo', 'PowerStatus');
            obj.PowerStatus = char(val);
        end
        function set.Estop(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'TestInfo', 'Estop');
            obj.Estop = int8(val);
        end
        function set.Elapsed(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'TestInfo', 'Elapsed');
            obj.Elapsed = int32(val);
        end
        function set.StatusMsg(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'TestInfo', 'StatusMsg');
            obj.StatusMsg = char(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.pr2_self_test_msgs.TestInfo.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.pr2_self_test_msgs.TestInfo(strObj);
        end
    end
end
