
classdef SmachContainerStructure < ros.Message
    %SmachContainerStructure MATLAB implementation of smach_msgs/SmachContainerStructure
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'smach_msgs/SmachContainerStructure' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '3d3d1e0d0f99779ee9e58101a5dcf7ea' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'Path' 'Children' 'InternalOutcomes' 'OutcomesFrom' 'OutcomesTo' 'ContainerOutcomes' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'path' 'children' 'internal_outcomes' 'outcomes_from' 'outcomes_to' 'container_outcomes' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        Path
        Children
        InternalOutcomes
        OutcomesFrom
        OutcomesTo
        ContainerOutcomes
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'SmachContainerStructure', 'Header')
            obj.Header = val;
        end
        function set.Path(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'SmachContainerStructure', 'Path');
            obj.Path = char(val);
        end
        function set.Children(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'SmachContainerStructure', 'Children');
            obj.Children = cell(val);
        end
        function set.InternalOutcomes(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'SmachContainerStructure', 'InternalOutcomes');
            obj.InternalOutcomes = cell(val);
        end
        function set.OutcomesFrom(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'SmachContainerStructure', 'OutcomesFrom');
            obj.OutcomesFrom = cell(val);
        end
        function set.OutcomesTo(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'SmachContainerStructure', 'OutcomesTo');
            obj.OutcomesTo = cell(val);
        end
        function set.ContainerOutcomes(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'cell', 'string'};
            if isempty(val)
                % Allow empty [] input
                val = cell.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'SmachContainerStructure', 'ContainerOutcomes');
            obj.ContainerOutcomes = cell(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.smach_msgs.SmachContainerStructure.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.smach_msgs.SmachContainerStructure(strObj);
        end
    end
end
