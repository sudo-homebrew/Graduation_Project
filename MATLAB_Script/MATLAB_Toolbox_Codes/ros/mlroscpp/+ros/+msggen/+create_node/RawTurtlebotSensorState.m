
classdef RawTurtlebotSensorState < ros.Message
    %RawTurtlebotSensorState MATLAB implementation of create_node/RawTurtlebotSensorState
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'create_node/RawTurtlebotSensorState' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '103d192c45e953c8bb1c3c046e89e2ff' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'BumpsWheeldrops' 'Wall' 'CliffLeft' 'CliffFrontLeft' 'CliffFrontRight' 'CliffRight' 'VirtualWall' 'MotorOvercurrents' 'DirtDetectorLeft' 'DirtDetectorRight' 'RemoteOpcode' 'Buttons' 'Distance' 'Angle' 'ChargingState' 'Voltage' 'Current' 'Temperature' 'Charge' 'Capacity' 'WallSignal' 'CliffLeftSignal' 'CliffFrontLeftSignal' 'CliffFrontRightSignal' 'CliffRightSignal' 'UserDigitalInputs' 'UserAnalogInput' 'ChargingSourcesAvailable' 'OiMode' 'SongNumber' 'SongPlaying' 'NumberOfStreamPackets' 'RequestedVelocity' 'RequestedRadius' 'RequestedRightVelocity' 'RequestedLeftVelocity' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'bumps_wheeldrops' 'wall' 'cliff_left' 'cliff_front_left' 'cliff_front_right' 'cliff_right' 'virtual_wall' 'motor_overcurrents' 'dirt_detector_left' 'dirt_detector_right' 'remote_opcode' 'buttons' 'distance' 'angle' 'charging_state' 'voltage' 'current' 'temperature' 'charge' 'capacity' 'wall_signal' 'cliff_left_signal' 'cliff_front_left_signal' 'cliff_front_right_signal' 'cliff_right_signal' 'user_digital_inputs' 'user_analog_input' 'charging_sources_available' 'oi_mode' 'song_number' 'song_playing' 'number_of_stream_packets' 'requested_velocity' 'requested_radius' 'requested_right_velocity' 'requested_left_velocity' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
        OIMODEOFF = uint8(0)
        OIMODEPASSIVE = uint8(1)
        OIMODESAFE = uint8(2)
        OIMODEFULL = uint8(3)
        REMOTELEFT = uint8(129)
        REMOTEFORWARD = uint8(130)
        REMOTERIGHT = uint8(131)
        REMOTESPOT = uint8(132)
        REMOTEMAX = uint8(133)
        REMOTESMALL = uint8(134)
        REMOTEMEDIUM = uint8(135)
        REMOTELARGE = uint8(136)
        REMOTECLEAN = uint8(136)
        REMOTEPAUSE = uint8(137)
        REMOTEPOWER = uint8(138)
        REMOTEARCLEFT = uint8(139)
        REMOTEARCRIGHT = uint8(140)
        REMOTEDRIVESTOP = uint8(141)
        REMOTESENDALL = uint8(142)
        REMOTESEEKDOCK = uint8(143)
        REMOTERESERVED = uint8(240)
        REMOTEFORCEFIELD = uint8(242)
        REMOTEGREENBUOY = uint8(244)
        REMOTEGREENBUOYANDFORCEFIELD = uint8(246)
        REMOTEREDBUOY = uint8(248)
        REMOTEREDBUOYANDFORCEFIELD = uint8(250)
        REMOTEREDBUOYANDGREENBUOY = uint8(252)
        REMOTEREDBUOYANDGREENBUOYANDFORCEFIELD = uint8(254)
        REMOTENONE = uint8(255)
        CHARGINGNOTCHARGING = uint8(0)
        CHARGINGCHARGINGRECOVERY = uint8(1)
        CHARGINGCHARGING = uint8(2)
        CHARGINGTRICKLECHARGING = uint8(3)
        CHARGINGWAITING = uint8(4)
        CHARGINGCHARGINGERROR = uint8(5)
    end
    properties
        Header
        BumpsWheeldrops
        Wall
        CliffLeft
        CliffFrontLeft
        CliffFrontRight
        CliffRight
        VirtualWall
        MotorOvercurrents
        DirtDetectorLeft
        DirtDetectorRight
        RemoteOpcode
        Buttons
        Distance
        Angle
        ChargingState
        Voltage
        Current
        Temperature
        Charge
        Capacity
        WallSignal
        CliffLeftSignal
        CliffFrontLeftSignal
        CliffFrontRightSignal
        CliffRightSignal
        UserDigitalInputs
        UserAnalogInput
        ChargingSourcesAvailable
        OiMode
        SongNumber
        SongPlaying
        NumberOfStreamPackets
        RequestedVelocity
        RequestedRadius
        RequestedRightVelocity
        RequestedLeftVelocity
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'RawTurtlebotSensorState', 'Header')
            obj.Header = val;
        end
        function set.BumpsWheeldrops(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawTurtlebotSensorState', 'BumpsWheeldrops');
            obj.BumpsWheeldrops = uint8(val);
        end
        function set.Wall(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawTurtlebotSensorState', 'Wall');
            obj.Wall = logical(val);
        end
        function set.CliffLeft(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawTurtlebotSensorState', 'CliffLeft');
            obj.CliffLeft = logical(val);
        end
        function set.CliffFrontLeft(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawTurtlebotSensorState', 'CliffFrontLeft');
            obj.CliffFrontLeft = logical(val);
        end
        function set.CliffFrontRight(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawTurtlebotSensorState', 'CliffFrontRight');
            obj.CliffFrontRight = logical(val);
        end
        function set.CliffRight(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawTurtlebotSensorState', 'CliffRight');
            obj.CliffRight = logical(val);
        end
        function set.VirtualWall(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawTurtlebotSensorState', 'VirtualWall');
            obj.VirtualWall = logical(val);
        end
        function set.MotorOvercurrents(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawTurtlebotSensorState', 'MotorOvercurrents');
            obj.MotorOvercurrents = uint8(val);
        end
        function set.DirtDetectorLeft(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawTurtlebotSensorState', 'DirtDetectorLeft');
            obj.DirtDetectorLeft = uint8(val);
        end
        function set.DirtDetectorRight(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawTurtlebotSensorState', 'DirtDetectorRight');
            obj.DirtDetectorRight = uint8(val);
        end
        function set.RemoteOpcode(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawTurtlebotSensorState', 'RemoteOpcode');
            obj.RemoteOpcode = uint8(val);
        end
        function set.Buttons(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawTurtlebotSensorState', 'Buttons');
            obj.Buttons = uint8(val);
        end
        function set.Distance(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawTurtlebotSensorState', 'Distance');
            obj.Distance = int16(val);
        end
        function set.Angle(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawTurtlebotSensorState', 'Angle');
            obj.Angle = int16(val);
        end
        function set.ChargingState(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawTurtlebotSensorState', 'ChargingState');
            obj.ChargingState = uint8(val);
        end
        function set.Voltage(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawTurtlebotSensorState', 'Voltage');
            obj.Voltage = uint16(val);
        end
        function set.Current(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawTurtlebotSensorState', 'Current');
            obj.Current = int16(val);
        end
        function set.Temperature(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawTurtlebotSensorState', 'Temperature');
            obj.Temperature = int8(val);
        end
        function set.Charge(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawTurtlebotSensorState', 'Charge');
            obj.Charge = uint16(val);
        end
        function set.Capacity(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawTurtlebotSensorState', 'Capacity');
            obj.Capacity = uint16(val);
        end
        function set.WallSignal(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawTurtlebotSensorState', 'WallSignal');
            obj.WallSignal = uint16(val);
        end
        function set.CliffLeftSignal(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawTurtlebotSensorState', 'CliffLeftSignal');
            obj.CliffLeftSignal = uint16(val);
        end
        function set.CliffFrontLeftSignal(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawTurtlebotSensorState', 'CliffFrontLeftSignal');
            obj.CliffFrontLeftSignal = uint16(val);
        end
        function set.CliffFrontRightSignal(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawTurtlebotSensorState', 'CliffFrontRightSignal');
            obj.CliffFrontRightSignal = uint16(val);
        end
        function set.CliffRightSignal(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawTurtlebotSensorState', 'CliffRightSignal');
            obj.CliffRightSignal = uint16(val);
        end
        function set.UserDigitalInputs(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawTurtlebotSensorState', 'UserDigitalInputs');
            obj.UserDigitalInputs = uint8(val);
        end
        function set.UserAnalogInput(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawTurtlebotSensorState', 'UserAnalogInput');
            obj.UserAnalogInput = uint16(val);
        end
        function set.ChargingSourcesAvailable(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawTurtlebotSensorState', 'ChargingSourcesAvailable');
            obj.ChargingSourcesAvailable = uint8(val);
        end
        function set.OiMode(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawTurtlebotSensorState', 'OiMode');
            obj.OiMode = uint8(val);
        end
        function set.SongNumber(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawTurtlebotSensorState', 'SongNumber');
            obj.SongNumber = uint8(val);
        end
        function set.SongPlaying(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawTurtlebotSensorState', 'SongPlaying');
            obj.SongPlaying = logical(val);
        end
        function set.NumberOfStreamPackets(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawTurtlebotSensorState', 'NumberOfStreamPackets');
            obj.NumberOfStreamPackets = uint8(val);
        end
        function set.RequestedVelocity(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawTurtlebotSensorState', 'RequestedVelocity');
            obj.RequestedVelocity = int16(val);
        end
        function set.RequestedRadius(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawTurtlebotSensorState', 'RequestedRadius');
            obj.RequestedRadius = int16(val);
        end
        function set.RequestedRightVelocity(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawTurtlebotSensorState', 'RequestedRightVelocity');
            obj.RequestedRightVelocity = int16(val);
        end
        function set.RequestedLeftVelocity(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RawTurtlebotSensorState', 'RequestedLeftVelocity');
            obj.RequestedLeftVelocity = int16(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.create_node.RawTurtlebotSensorState.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.create_node.RawTurtlebotSensorState(strObj);
        end
    end
end
