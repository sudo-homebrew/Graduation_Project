
classdef MotorCommand < ros.Message
    %MotorCommand MATLAB implementation of hector_uav_msgs/MotorCommand
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'hector_uav_msgs/MotorCommand' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'ccd4d4d4606731d1c73409e9bfa55808' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'Force' 'Torque' 'Frequency' 'Voltage' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'force' 'torque' 'frequency' 'voltage' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        Force
        Torque
        Frequency
        Voltage
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'MotorCommand', 'Header')
            obj.Header = val;
        end
        function set.Force(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = single.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'MotorCommand', 'Force');
            obj.Force = single(val);
        end
        function set.Torque(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = single.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'MotorCommand', 'Torque');
            obj.Torque = single(val);
        end
        function set.Frequency(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = single.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'MotorCommand', 'Frequency');
            obj.Frequency = single(val);
        end
        function set.Voltage(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = single.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'MotorCommand', 'Voltage');
            obj.Voltage = single(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.hector_uav_msgs.MotorCommand.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.hector_uav_msgs.MotorCommand(strObj);
        end
    end
end
