
classdef ControllerState < ros.Message
    %ControllerState MATLAB implementation of hector_uav_msgs/ControllerState
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'hector_uav_msgs/ControllerState' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'cf55b8af1d9e1de941887ee78e23079c' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'Source' 'Mode' 'State' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'source' 'mode' 'state' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
        MOTORS = uint8(1)
        ATTITUDE = uint8(2)
        VELOCITY = uint8(4)
        POSITION = uint8(8)
        TURNRATE = uint8(16)
        HEADING = uint8(32)
        CLIMBRATE = uint8(64)
        HEIGHT = uint8(128)
        MOTORSRUNNING = uint8(1)
        FLYING = uint8(2)
        AIRBORNE = uint8(4)
    end
    properties
        Header
        Source
        Mode
        State
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'ControllerState', 'Header')
            obj.Header = val;
        end
        function set.Source(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ControllerState', 'Source');
            obj.Source = uint8(val);
        end
        function set.Mode(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ControllerState', 'Mode');
            obj.Mode = uint8(val);
        end
        function set.State(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'ControllerState', 'State');
            obj.State = uint8(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.hector_uav_msgs.ControllerState.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.hector_uav_msgs.ControllerState(strObj);
        end
    end
end
