
classdef RC < ros.Message
    %RC MATLAB implementation of hector_uav_msgs/RC
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'hector_uav_msgs/RC' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '2691c2fe8c5ab2323146bdd8dd2e449e' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'Status' 'Valid' 'Axis' 'AxisFunction' 'Swit' 'SwitFunction' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'status' 'valid' 'axis' 'axis_function' 'swit' 'swit_function' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
        ROLL = uint8(1)
        PITCH = uint8(2)
        YAW = uint8(3)
        STEER = uint8(4)
        HEIGHT = uint8(5)
        THRUST = uint8(6)
        BRAKE = uint8(7)
    end
    properties
        Header
        Status
        Valid
        Axis
        AxisFunction
        Swit
        SwitFunction
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'RC', 'Header')
            obj.Header = val;
        end
        function set.Status(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RC', 'Status');
            obj.Status = uint8(val);
        end
        function set.Valid(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'RC', 'Valid');
            obj.Valid = logical(val);
        end
        function set.Axis(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = single.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'RC', 'Axis');
            obj.Axis = single(val);
        end
        function set.AxisFunction(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = uint8.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'RC', 'AxisFunction');
            obj.AxisFunction = uint8(val);
        end
        function set.Swit(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = int8.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'RC', 'Swit');
            obj.Swit = int8(val);
        end
        function set.SwitFunction(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = uint8.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'RC', 'SwitFunction');
            obj.SwitFunction = uint8(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.hector_uav_msgs.RC.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.hector_uav_msgs.RC(strObj);
        end
    end
end
