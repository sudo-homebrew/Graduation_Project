
classdef JointTrajectoryPoint < ros.Message
    %JointTrajectoryPoint MATLAB implementation of trajectory_msgs/JointTrajectoryPoint
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'trajectory_msgs/JointTrajectoryPoint' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = 'f3cd1e1c4d320c79d6985c904ae5dcd3' % The MD5 Checksum of the message definition
        PropertyList = { 'TimeFromStart' 'Positions' 'Velocities' 'Accelerations' 'Effort' } % List of non-constant message properties
        ROSPropertyList = { 'time_from_start' 'positions' 'velocities' 'accelerations' 'effort' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msg.Duration' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        TimeFromStart
        Positions
        Velocities
        Accelerations
        Effort
    end
    methods
        function set.TimeFromStart(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msg.Duration'};
            validateattributes(val, validClasses, validAttributes, 'JointTrajectoryPoint', 'TimeFromStart')
            obj.TimeFromStart = val;
        end
        function set.Positions(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'JointTrajectoryPoint', 'Positions');
            obj.Positions = double(val);
        end
        function set.Velocities(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'JointTrajectoryPoint', 'Velocities');
            obj.Velocities = double(val);
        end
        function set.Accelerations(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'JointTrajectoryPoint', 'Accelerations');
            obj.Accelerations = double(val);
        end
        function set.Effort(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'JointTrajectoryPoint', 'Effort');
            obj.Effort = double(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.trajectory_msgs.JointTrajectoryPoint.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.trajectory_msgs.JointTrajectoryPoint(strObj);
        end
    end
end
