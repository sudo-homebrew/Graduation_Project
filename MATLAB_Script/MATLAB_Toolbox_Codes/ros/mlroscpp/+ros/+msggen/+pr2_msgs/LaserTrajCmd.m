
classdef LaserTrajCmd < ros.Message
    %LaserTrajCmd MATLAB implementation of pr2_msgs/LaserTrajCmd
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'pr2_msgs/LaserTrajCmd' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '68a1665e9079049dce55a0384cb2e9b5' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'TimeFromStart' 'Profile' 'Position' 'MaxVelocity' 'MaxAcceleration' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'time_from_start' 'profile' 'position' 'max_velocity' 'max_acceleration' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            'ros.msg.Duration' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        TimeFromStart
        Profile
        Position
        MaxVelocity
        MaxAcceleration
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'LaserTrajCmd', 'Header')
            obj.Header = val;
        end
        function set.TimeFromStart(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msg.Duration.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msg.Duration'};
            validateattributes(val, validClasses, validAttributes, 'LaserTrajCmd', 'TimeFromStart')
            obj.TimeFromStart = val;
        end
        function set.Profile(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'LaserTrajCmd', 'Profile');
            obj.Profile = char(val);
        end
        function set.Position(obj, val)
            validClasses = {'numeric'};
            if isempty(val)
                % Allow empty [] input
                val = double.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validateattributes(val, validClasses, validAttributes, 'LaserTrajCmd', 'Position');
            obj.Position = double(val);
        end
        function set.MaxVelocity(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'LaserTrajCmd', 'MaxVelocity');
            obj.MaxVelocity = double(val);
        end
        function set.MaxAcceleration(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'LaserTrajCmd', 'MaxAcceleration');
            obj.MaxAcceleration = double(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.pr2_msgs.LaserTrajCmd.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.pr2_msgs.LaserTrajCmd(strObj);
        end
    end
end
