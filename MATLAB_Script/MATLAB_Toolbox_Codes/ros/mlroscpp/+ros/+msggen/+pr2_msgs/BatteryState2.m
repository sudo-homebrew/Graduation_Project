
classdef BatteryState2 < ros.Message
    %BatteryState2 MATLAB implementation of pr2_msgs/BatteryState2
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'pr2_msgs/BatteryState2' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '91b4acb000aa990ac3006834f9a99669' % The MD5 Checksum of the message definition
        PropertyList = { 'LastBatteryUpdate' 'BatteryRegisterUpdate' 'Present' 'Charging' 'Discharging' 'PowerPresent' 'PowerNoGood' 'Inhibited' 'BatteryRegister' 'BatteryUpdateFlag' } % List of non-constant message properties
        ROSPropertyList = { 'last_battery_update' 'battery_register_update' 'present' 'charging' 'discharging' 'power_present' 'power_no_good' 'inhibited' 'battery_register' 'battery_update_flag' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msg.Time' ...
            'ros.msg.Time' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        LastBatteryUpdate
        BatteryRegisterUpdate
        Present
        Charging
        Discharging
        PowerPresent
        PowerNoGood
        Inhibited
        BatteryRegister
        BatteryUpdateFlag
    end
    methods
        function set.LastBatteryUpdate(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msg.Time'};
            validateattributes(val, validClasses, validAttributes, 'BatteryState2', 'LastBatteryUpdate')
            obj.LastBatteryUpdate = val;
        end
        function set.BatteryRegisterUpdate(obj, val)
            val = val(:);
            validAttributes = {'vector', 'numel', 48};
            validClasses = {'ros.msg.Time'};
            validateattributes(val, validClasses, validAttributes, 'BatteryState2', 'BatteryRegisterUpdate')
            obj.BatteryRegisterUpdate = val;
        end
        function set.Present(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BatteryState2', 'Present');
            obj.Present = logical(val);
        end
        function set.Charging(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BatteryState2', 'Charging');
            obj.Charging = logical(val);
        end
        function set.Discharging(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BatteryState2', 'Discharging');
            obj.Discharging = logical(val);
        end
        function set.PowerPresent(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BatteryState2', 'PowerPresent');
            obj.PowerPresent = logical(val);
        end
        function set.PowerNoGood(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BatteryState2', 'PowerNoGood');
            obj.PowerNoGood = logical(val);
        end
        function set.Inhibited(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BatteryState2', 'Inhibited');
            obj.Inhibited = logical(val);
        end
        function set.BatteryRegister(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 48};
            validateattributes(val, validClasses, validAttributes, 'BatteryState2', 'BatteryRegister');
            obj.BatteryRegister = int16(val);
        end
        function set.BatteryUpdateFlag(obj, val)
            validClasses = {'logical', 'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 48};
            validateattributes(val, validClasses, validAttributes, 'BatteryState2', 'BatteryUpdateFlag');
            obj.BatteryUpdateFlag = logical(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.pr2_msgs.BatteryState2.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.pr2_msgs.BatteryState2(strObj);
        end
    end
end
