
classdef AccessPoint < ros.Message
    %AccessPoint MATLAB implementation of pr2_msgs/AccessPoint
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'pr2_msgs/AccessPoint' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '810217d9e35df31ffb396ea5673d7d1b' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'Essid' 'Macaddr' 'Signal' 'Noise' 'Snr' 'Channel' 'Rate' 'TxPower' 'Quality' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'essid' 'macaddr' 'signal' 'noise' 'snr' 'channel' 'rate' 'tx_power' 'quality' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
    end
    properties
        Header
        Essid
        Macaddr
        Signal
        Noise
        Snr
        Channel
        Rate
        TxPower
        Quality
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'AccessPoint', 'Header')
            obj.Header = val;
        end
        function set.Essid(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'AccessPoint', 'Essid');
            obj.Essid = char(val);
        end
        function set.Macaddr(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'AccessPoint', 'Macaddr');
            obj.Macaddr = char(val);
        end
        function set.Signal(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AccessPoint', 'Signal');
            obj.Signal = int32(val);
        end
        function set.Noise(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AccessPoint', 'Noise');
            obj.Noise = int32(val);
        end
        function set.Snr(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AccessPoint', 'Snr');
            obj.Snr = int32(val);
        end
        function set.Channel(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AccessPoint', 'Channel');
            obj.Channel = int32(val);
        end
        function set.Rate(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'AccessPoint', 'Rate');
            obj.Rate = char(val);
        end
        function set.TxPower(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'AccessPoint', 'TxPower');
            obj.TxPower = char(val);
        end
        function set.Quality(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'AccessPoint', 'Quality');
            obj.Quality = int32(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.pr2_msgs.AccessPoint.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.pr2_msgs.AccessPoint(strObj);
        end
    end
end
