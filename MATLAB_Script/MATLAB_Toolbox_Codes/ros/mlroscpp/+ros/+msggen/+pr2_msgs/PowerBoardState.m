
classdef PowerBoardState < ros.Message
    %PowerBoardState MATLAB implementation of pr2_msgs/PowerBoardState
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'pr2_msgs/PowerBoardState' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '08899b671e6a1a449e7ce0000da8ae7b' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'Name' 'SerialNum' 'InputVoltage' 'MasterState' 'CircuitState' 'CircuitVoltage' 'RunStop' 'WirelessStop' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'name' 'serial_num' 'input_voltage' 'master_state' 'circuit_state' 'circuit_voltage' 'run_stop' 'wireless_stop' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
        STATENOPOWER = int8(0)
        STATESTANDBY = int8(1)
        STATEPUMPING = int8(2)
        STATEON = int8(3)
        STATEENABLED = int8(3)
        STATEDISABLED = int8(4)
        MASTERNOPOWER = int8(0)
        MASTERSTANDBY = int8(1)
        MASTERON = int8(2)
        MASTEROFF = int8(3)
        MASTERSHUTDOWN = int8(4)
    end
    properties
        Header
        Name
        SerialNum
        InputVoltage
        MasterState
        CircuitState
        CircuitVoltage
        RunStop
        WirelessStop
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'PowerBoardState', 'Header')
            obj.Header = val;
        end
        function set.Name(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'PowerBoardState', 'Name');
            obj.Name = char(val);
        end
        function set.SerialNum(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PowerBoardState', 'SerialNum');
            obj.SerialNum = uint32(val);
        end
        function set.InputVoltage(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PowerBoardState', 'InputVoltage');
            obj.InputVoltage = double(val);
        end
        function set.MasterState(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PowerBoardState', 'MasterState');
            obj.MasterState = int8(val);
        end
        function set.CircuitState(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 3};
            validateattributes(val, validClasses, validAttributes, 'PowerBoardState', 'CircuitState');
            obj.CircuitState = int8(val);
        end
        function set.CircuitVoltage(obj, val)
            validClasses = {'numeric'};
            val = val(:);
            validAttributes = {'vector', 'numel', 3};
            validateattributes(val, validClasses, validAttributes, 'PowerBoardState', 'CircuitVoltage');
            obj.CircuitVoltage = double(val);
        end
        function set.RunStop(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PowerBoardState', 'RunStop');
            obj.RunStop = logical(val);
        end
        function set.WirelessStop(obj, val)
            validClasses = {'logical', 'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'PowerBoardState', 'WirelessStop');
            obj.WirelessStop = logical(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.pr2_msgs.PowerBoardState.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.pr2_msgs.PowerBoardState(strObj);
        end
    end
end
