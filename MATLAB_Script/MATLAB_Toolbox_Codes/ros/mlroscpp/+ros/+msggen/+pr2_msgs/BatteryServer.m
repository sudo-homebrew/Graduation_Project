
classdef BatteryServer < ros.Message
    %BatteryServer MATLAB implementation of pr2_msgs/BatteryServer
    %   This class was automatically generated by
    %   ros.internal.pubsubEmitter.

    %   Copyright 2014-2020 The MathWorks, Inc.
    properties (Constant)
        MessageType = 'pr2_msgs/BatteryServer' % The ROS message type
    end
    properties (Constant, Hidden)
        MD5Checksum = '4f6d6e54c9581beb1df7ea408c0727be' % The MD5 Checksum of the message definition
        PropertyList = { 'Header' 'Battery' 'Id' 'LastTimeSystem' 'TimeLeft' 'AverageCharge' 'Message' 'LastTimeController' 'Present' 'Charging' 'Discharging' 'Reserved' 'PowerPresent' 'PowerNG' 'Inhibited' } % List of non-constant message properties
        ROSPropertyList = { 'header' 'battery' 'id' 'lastTimeSystem' 'timeLeft' 'averageCharge' 'message' 'lastTimeController' 'present' 'charging' 'discharging' 'reserved' 'powerPresent' 'powerNG' 'inhibited' } % List of non-constant ROS message properties
        PropertyMessageTypes = { 'ros.msggen.std_msgs.Header' ...
            'ros.msggen.pr2_msgs.BatteryState' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            '' ...
            } % Types of contained nested messages
    end
    properties (Constant)
        MAXBATCOUNT = uint32(4)
        MAXBATREG = uint32(48)
    end
    properties
        Header
        Battery
        Id
        LastTimeSystem
        TimeLeft
        AverageCharge
        Message
        LastTimeController
        Present
        Charging
        Discharging
        Reserved
        PowerPresent
        PowerNG
        Inhibited
    end
    methods
        function set.Header(obj, val)
            validAttributes = {'nonempty', 'scalar'};
            validClasses = {'ros.msggen.std_msgs.Header'};
            validateattributes(val, validClasses, validAttributes, 'BatteryServer', 'Header')
            obj.Header = val;
        end
        function set.Battery(obj, val)
            if isempty(val)
                % Allow empty [] input
                val = ros.msggen.pr2_msgs.BatteryState.empty(0, 1);
            end
            val = val(:);
            validAttributes = {'vector'};
            validClasses = {'ros.msggen.pr2_msgs.BatteryState'};
            validateattributes(val, validClasses, validAttributes, 'BatteryServer', 'Battery')
            obj.Battery = val;
        end
        function set.Id(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BatteryServer', 'Id');
            obj.Id = int32(val);
        end
        function set.LastTimeSystem(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BatteryServer', 'LastTimeSystem');
            obj.LastTimeSystem = int32(val);
        end
        function set.TimeLeft(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BatteryServer', 'TimeLeft');
            obj.TimeLeft = uint16(val);
        end
        function set.AverageCharge(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BatteryServer', 'AverageCharge');
            obj.AverageCharge = uint16(val);
        end
        function set.Message(obj, val)
            val = convertStringsToChars(val);
            validClasses = {'char', 'string'};
            validAttributes = {};
            validateattributes(val, validClasses, validAttributes, 'BatteryServer', 'Message');
            obj.Message = char(val);
        end
        function set.LastTimeController(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BatteryServer', 'LastTimeController');
            obj.LastTimeController = int32(val);
        end
        function set.Present(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BatteryServer', 'Present');
            obj.Present = uint16(val);
        end
        function set.Charging(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BatteryServer', 'Charging');
            obj.Charging = uint16(val);
        end
        function set.Discharging(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BatteryServer', 'Discharging');
            obj.Discharging = uint16(val);
        end
        function set.Reserved(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BatteryServer', 'Reserved');
            obj.Reserved = uint16(val);
        end
        function set.PowerPresent(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BatteryServer', 'PowerPresent');
            obj.PowerPresent = uint16(val);
        end
        function set.PowerNG(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BatteryServer', 'PowerNG');
            obj.PowerNG = uint16(val);
        end
        function set.Inhibited(obj, val)
            validClasses = {'numeric'};
            validAttributes = {'nonempty', 'scalar'};
            validateattributes(val, validClasses, validAttributes, 'BatteryServer', 'Inhibited');
            obj.Inhibited = uint16(val);
        end
    end
    methods (Static, Access = {?matlab.unittest.TestCase, ?ros.Message})
        function obj = loadobj(strObj)
        %loadobj Implements loading of message from MAT file
        % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = ros.msggen.pr2_msgs.BatteryServer.empty(0,1);
                return
            end
            % Create an empty message object
            obj = ros.msggen.pr2_msgs.BatteryServer(strObj);
        end
    end
end
