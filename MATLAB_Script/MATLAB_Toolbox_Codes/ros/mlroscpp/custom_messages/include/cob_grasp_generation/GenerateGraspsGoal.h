// Generated by gencpp from file cob_grasp_generation/GenerateGraspsGoal.msg
// DO NOT EDIT!


#ifndef COB_GRASP_GENERATION_MESSAGE_GENERATEGRASPSGOAL_H
#define COB_GRASP_GENERATION_MESSAGE_GENERATEGRASPSGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cob_grasp_generation
{
template <class ContainerAllocator>
struct GenerateGraspsGoal_
{
  typedef GenerateGraspsGoal_<ContainerAllocator> Type;

  GenerateGraspsGoal_()
    : object_name()
    , gripper_type()
    , replan(false)
    , viewer(false)  {
    }
  GenerateGraspsGoal_(const ContainerAllocator& _alloc)
    : object_name(_alloc)
    , gripper_type(_alloc)
    , replan(false)
    , viewer(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _object_name_type;
  _object_name_type object_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gripper_type_type;
  _gripper_type_type gripper_type;

   typedef uint8_t _replan_type;
  _replan_type replan;

   typedef uint8_t _viewer_type;
  _viewer_type viewer;





  typedef boost::shared_ptr< ::cob_grasp_generation::GenerateGraspsGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_grasp_generation::GenerateGraspsGoal_<ContainerAllocator> const> ConstPtr;

}; // struct GenerateGraspsGoal_

typedef ::cob_grasp_generation::GenerateGraspsGoal_<std::allocator<void> > GenerateGraspsGoal;

typedef boost::shared_ptr< ::cob_grasp_generation::GenerateGraspsGoal > GenerateGraspsGoalPtr;
typedef boost::shared_ptr< ::cob_grasp_generation::GenerateGraspsGoal const> GenerateGraspsGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cob_grasp_generation::GenerateGraspsGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cob_grasp_generation::GenerateGraspsGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cob_grasp_generation::GenerateGraspsGoal_<ContainerAllocator1> & lhs, const ::cob_grasp_generation::GenerateGraspsGoal_<ContainerAllocator2> & rhs)
{
  return lhs.object_name == rhs.object_name &&
    lhs.gripper_type == rhs.gripper_type &&
    lhs.replan == rhs.replan &&
    lhs.viewer == rhs.viewer;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cob_grasp_generation::GenerateGraspsGoal_<ContainerAllocator1> & lhs, const ::cob_grasp_generation::GenerateGraspsGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cob_grasp_generation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cob_grasp_generation::GenerateGraspsGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cob_grasp_generation::GenerateGraspsGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cob_grasp_generation::GenerateGraspsGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cob_grasp_generation::GenerateGraspsGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_grasp_generation::GenerateGraspsGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_grasp_generation::GenerateGraspsGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cob_grasp_generation::GenerateGraspsGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "94b854875e7b7faa473bfe91df259b3c";
  }

  static const char* value(const ::cob_grasp_generation::GenerateGraspsGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x94b854875e7b7faaULL;
  static const uint64_t static_value2 = 0x473bfe91df259b3cULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_grasp_generation::GenerateGraspsGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cob_grasp_generation/GenerateGraspsGoal";
  }

  static const char* value(const ::cob_grasp_generation::GenerateGraspsGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cob_grasp_generation::GenerateGraspsGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#goal definition\n"
"string object_name\n"
"\n"
"#gripper used on the robot\n"
"string gripper_type\n"
"\n"
"#grasp generation parameters for OpenRAVE\n"
"\n"
"\n"
"\n"
"#replan grasps\n"
"bool replan\n"
"\n"
"#show Viewer\n"
"bool viewer\n"
;
  }

  static const char* value(const ::cob_grasp_generation::GenerateGraspsGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cob_grasp_generation::GenerateGraspsGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.object_name);
      stream.next(m.gripper_type);
      stream.next(m.replan);
      stream.next(m.viewer);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GenerateGraspsGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cob_grasp_generation::GenerateGraspsGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cob_grasp_generation::GenerateGraspsGoal_<ContainerAllocator>& v)
  {
    s << indent << "object_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.object_name);
    s << indent << "gripper_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gripper_type);
    s << indent << "replan: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.replan);
    s << indent << "viewer: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.viewer);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COB_GRASP_GENERATION_MESSAGE_GENERATEGRASPSGOAL_H
