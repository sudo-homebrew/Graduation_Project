// Generated by gencpp from file cob_grasp_generation/QueryGraspsGoal.msg
// DO NOT EDIT!


#ifndef COB_GRASP_GENERATION_MESSAGE_QUERYGRASPSGOAL_H
#define COB_GRASP_GENERATION_MESSAGE_QUERYGRASPSGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cob_grasp_generation
{
template <class ContainerAllocator>
struct QueryGraspsGoal_
{
  typedef QueryGraspsGoal_<ContainerAllocator> Type;

  QueryGraspsGoal_()
    : object_name()
    , gripper_type()
    , gripper_side()
    , grasp_id(0)
    , num_grasps(0)
    , threshold(0.0)  {
    }
  QueryGraspsGoal_(const ContainerAllocator& _alloc)
    : object_name(_alloc)
    , gripper_type(_alloc)
    , gripper_side(_alloc)
    , grasp_id(0)
    , num_grasps(0)
    , threshold(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _object_name_type;
  _object_name_type object_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gripper_type_type;
  _gripper_type_type gripper_type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gripper_side_type;
  _gripper_side_type gripper_side;

   typedef uint32_t _grasp_id_type;
  _grasp_id_type grasp_id;

   typedef uint32_t _num_grasps_type;
  _num_grasps_type num_grasps;

   typedef double _threshold_type;
  _threshold_type threshold;





  typedef boost::shared_ptr< ::cob_grasp_generation::QueryGraspsGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_grasp_generation::QueryGraspsGoal_<ContainerAllocator> const> ConstPtr;

}; // struct QueryGraspsGoal_

typedef ::cob_grasp_generation::QueryGraspsGoal_<std::allocator<void> > QueryGraspsGoal;

typedef boost::shared_ptr< ::cob_grasp_generation::QueryGraspsGoal > QueryGraspsGoalPtr;
typedef boost::shared_ptr< ::cob_grasp_generation::QueryGraspsGoal const> QueryGraspsGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cob_grasp_generation::QueryGraspsGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cob_grasp_generation::QueryGraspsGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cob_grasp_generation::QueryGraspsGoal_<ContainerAllocator1> & lhs, const ::cob_grasp_generation::QueryGraspsGoal_<ContainerAllocator2> & rhs)
{
  return lhs.object_name == rhs.object_name &&
    lhs.gripper_type == rhs.gripper_type &&
    lhs.gripper_side == rhs.gripper_side &&
    lhs.grasp_id == rhs.grasp_id &&
    lhs.num_grasps == rhs.num_grasps &&
    lhs.threshold == rhs.threshold;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cob_grasp_generation::QueryGraspsGoal_<ContainerAllocator1> & lhs, const ::cob_grasp_generation::QueryGraspsGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cob_grasp_generation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cob_grasp_generation::QueryGraspsGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cob_grasp_generation::QueryGraspsGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cob_grasp_generation::QueryGraspsGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cob_grasp_generation::QueryGraspsGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_grasp_generation::QueryGraspsGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_grasp_generation::QueryGraspsGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cob_grasp_generation::QueryGraspsGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2aaeac295326ed87cc4e63f737837d1f";
  }

  static const char* value(const ::cob_grasp_generation::QueryGraspsGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2aaeac295326ed87ULL;
  static const uint64_t static_value2 = 0xcc4e63f737837d1fULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_grasp_generation::QueryGraspsGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cob_grasp_generation/QueryGraspsGoal";
  }

  static const char* value(const ::cob_grasp_generation::QueryGraspsGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cob_grasp_generation::QueryGraspsGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#goal definition\n"
"string object_name\n"
"\n"
"#gripper used on the robot\n"
"string gripper_type\n"
"string gripper_side\n"
"\n"
"#only return grasp with given id\n"
"#note: cannot be used to return first grasp (id = 0)\n"
"uint32 grasp_id\n"
"\n"
"#only return that many grasps\n"
"#returns all grasps when set to 0\n"
"uint32 num_grasps\n"
"\n"
"#only return graps that have quality >= threshold\n"
"#returns all grasps when set to 0\n"
"float64 threshold\n"
"\n"
;
  }

  static const char* value(const ::cob_grasp_generation::QueryGraspsGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cob_grasp_generation::QueryGraspsGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.object_name);
      stream.next(m.gripper_type);
      stream.next(m.gripper_side);
      stream.next(m.grasp_id);
      stream.next(m.num_grasps);
      stream.next(m.threshold);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct QueryGraspsGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cob_grasp_generation::QueryGraspsGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cob_grasp_generation::QueryGraspsGoal_<ContainerAllocator>& v)
  {
    s << indent << "object_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.object_name);
    s << indent << "gripper_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gripper_type);
    s << indent << "gripper_side: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gripper_side);
    s << indent << "grasp_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.grasp_id);
    s << indent << "num_grasps: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.num_grasps);
    s << indent << "threshold: ";
    Printer<double>::stream(s, indent + "  ", v.threshold);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COB_GRASP_GENERATION_MESSAGE_QUERYGRASPSGOAL_H
