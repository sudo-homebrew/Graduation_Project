// Generated by gencpp from file cob_srvs/DockRequest.msg
// DO NOT EDIT!


#ifndef COB_SRVS_MESSAGE_DOCKREQUEST_H
#define COB_SRVS_MESSAGE_DOCKREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace cob_srvs
{
template <class ContainerAllocator>
struct DockRequest_
{
  typedef DockRequest_<ContainerAllocator> Type;

  DockRequest_()
    : frame_id()
    , poses()
    , stop_topic()
    , stop_message_field()
    , stop_compare_value(false)
    , dist_threshold(0.0)  {
    }
  DockRequest_(const ContainerAllocator& _alloc)
    : frame_id(_alloc)
    , poses(_alloc)
    , stop_topic(_alloc)
    , stop_message_field(_alloc)
    , stop_compare_value(false)
    , dist_threshold(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _frame_id_type;
  _frame_id_type frame_id;

   typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  _poses_type;
  _poses_type poses;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _stop_topic_type;
  _stop_topic_type stop_topic;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _stop_message_field_type;
  _stop_message_field_type stop_message_field;

   typedef uint8_t _stop_compare_value_type;
  _stop_compare_value_type stop_compare_value;

   typedef float _dist_threshold_type;
  _dist_threshold_type dist_threshold;





  typedef boost::shared_ptr< ::cob_srvs::DockRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_srvs::DockRequest_<ContainerAllocator> const> ConstPtr;

}; // struct DockRequest_

typedef ::cob_srvs::DockRequest_<std::allocator<void> > DockRequest;

typedef boost::shared_ptr< ::cob_srvs::DockRequest > DockRequestPtr;
typedef boost::shared_ptr< ::cob_srvs::DockRequest const> DockRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cob_srvs::DockRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cob_srvs::DockRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cob_srvs::DockRequest_<ContainerAllocator1> & lhs, const ::cob_srvs::DockRequest_<ContainerAllocator2> & rhs)
{
  return lhs.frame_id == rhs.frame_id &&
    lhs.poses == rhs.poses &&
    lhs.stop_topic == rhs.stop_topic &&
    lhs.stop_message_field == rhs.stop_message_field &&
    lhs.stop_compare_value == rhs.stop_compare_value &&
    lhs.dist_threshold == rhs.dist_threshold;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cob_srvs::DockRequest_<ContainerAllocator1> & lhs, const ::cob_srvs::DockRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cob_srvs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cob_srvs::DockRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cob_srvs::DockRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cob_srvs::DockRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cob_srvs::DockRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_srvs::DockRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_srvs::DockRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cob_srvs::DockRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bca2ed6cdf3583c72905a8a6c651ef08";
  }

  static const char* value(const ::cob_srvs::DockRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbca2ed6cdf3583c7ULL;
  static const uint64_t static_value2 = 0x2905a8a6c651ef08ULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_srvs::DockRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cob_srvs/DockRequest";
  }

  static const char* value(const ::cob_srvs::DockRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cob_srvs::DockRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string frame_id\n"
"geometry_msgs/Pose[] poses\n"
"string stop_topic\n"
"string stop_message_field\n"
"bool stop_compare_value\n"
"float32 dist_threshold\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::cob_srvs::DockRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cob_srvs::DockRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frame_id);
      stream.next(m.poses);
      stream.next(m.stop_topic);
      stream.next(m.stop_message_field);
      stream.next(m.stop_compare_value);
      stream.next(m.dist_threshold);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DockRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cob_srvs::DockRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cob_srvs::DockRequest_<ContainerAllocator>& v)
  {
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.frame_id);
    s << indent << "poses[]" << std::endl;
    for (size_t i = 0; i < v.poses.size(); ++i)
    {
      s << indent << "  poses[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.poses[i]);
    }
    s << indent << "stop_topic: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.stop_topic);
    s << indent << "stop_message_field: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.stop_message_field);
    s << indent << "stop_compare_value: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stop_compare_value);
    s << indent << "dist_threshold: ";
    Printer<float>::stream(s, indent + "  ", v.dist_threshold);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COB_SRVS_MESSAGE_DOCKREQUEST_H
