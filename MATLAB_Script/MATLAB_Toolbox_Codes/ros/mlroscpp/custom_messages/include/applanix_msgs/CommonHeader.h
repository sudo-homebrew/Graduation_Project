// Generated by gencpp from file applanix_msgs/CommonHeader.msg
// DO NOT EDIT!


#ifndef APPLANIX_MSGS_MESSAGE_COMMONHEADER_H
#define APPLANIX_MSGS_MESSAGE_COMMONHEADER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace applanix_msgs
{
template <class ContainerAllocator>
struct CommonHeader_
{
  typedef CommonHeader_<ContainerAllocator> Type;

  CommonHeader_()
    : start()
    , id(0)
    , length(0)  {
      start.assign(0);
  }
  CommonHeader_(const ContainerAllocator& _alloc)
    : start()
    , id(0)
    , length(0)  {
  (void)_alloc;
      start.assign(0);
  }



   typedef boost::array<uint8_t, 4>  _start_type;
  _start_type start;

   typedef uint16_t _id_type;
  _id_type id;

   typedef uint16_t _length_type;
  _length_type length;




  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  START_GROUP;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  START_MESSAGE;

  typedef boost::shared_ptr< ::applanix_msgs::CommonHeader_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::applanix_msgs::CommonHeader_<ContainerAllocator> const> ConstPtr;

}; // struct CommonHeader_

typedef ::applanix_msgs::CommonHeader_<std::allocator<void> > CommonHeader;

typedef boost::shared_ptr< ::applanix_msgs::CommonHeader > CommonHeaderPtr;
typedef boost::shared_ptr< ::applanix_msgs::CommonHeader const> CommonHeaderConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommonHeader_<ContainerAllocator>::START_GROUP =
        
          "$GRP"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CommonHeader_<ContainerAllocator>::START_MESSAGE =
        
          "$MSG"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::applanix_msgs::CommonHeader_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::applanix_msgs::CommonHeader_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace applanix_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/geometry_msgs/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'applanix_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/applanix_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::applanix_msgs::CommonHeader_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::applanix_msgs::CommonHeader_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::applanix_msgs::CommonHeader_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::applanix_msgs::CommonHeader_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::applanix_msgs::CommonHeader_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::applanix_msgs::CommonHeader_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::applanix_msgs::CommonHeader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cb573def7f5977ee910df3469d33c060";
  }

  static const char* value(const ::applanix_msgs::CommonHeader_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcb573def7f5977eeULL;
  static const uint64_t static_value2 = 0x910df3469d33c060ULL;
};

template<class ContainerAllocator>
struct DataType< ::applanix_msgs::CommonHeader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "applanix_msgs/CommonHeader";
  }

  static const char* value(const ::applanix_msgs::CommonHeader_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::applanix_msgs::CommonHeader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string START_GROUP=$GRP\n"
"string START_MESSAGE=$MSG\n"
"\n"
"uint8[4] start\n"
"uint16 id\n"
"uint16 length\n"
;
  }

  static const char* value(const ::applanix_msgs::CommonHeader_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::applanix_msgs::CommonHeader_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start);
      stream.next(m.id);
      stream.next(m.length);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CommonHeader_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::applanix_msgs::CommonHeader_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::applanix_msgs::CommonHeader_<ContainerAllocator>& v)
  {
    s << indent << "start[]" << std::endl;
    for (size_t i = 0; i < v.start.size(); ++i)
    {
      s << indent << "  start[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.start[i]);
    }
    s << indent << "id: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.id);
    s << indent << "length: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.length);
  }
};

} // namespace message_operations
} // namespace ros

#endif // APPLANIX_MSGS_MESSAGE_COMMONHEADER_H
