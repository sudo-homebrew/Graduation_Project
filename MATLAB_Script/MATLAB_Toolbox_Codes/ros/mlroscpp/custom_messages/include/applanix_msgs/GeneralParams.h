// Generated by gencpp from file applanix_msgs/GeneralParams.msg
// DO NOT EDIT!


#ifndef APPLANIX_MSGS_MESSAGE_GENERALPARAMS_H
#define APPLANIX_MSGS_MESSAGE_GENERALPARAMS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point32.h>
#include <geometry_msgs/Point32.h>
#include <geometry_msgs/Point32.h>
#include <geometry_msgs/Point32.h>
#include <geometry_msgs/Point32.h>
#include <geometry_msgs/Point32.h>

namespace applanix_msgs
{
template <class ContainerAllocator>
struct GeneralParams_
{
  typedef GeneralParams_<ContainerAllocator> Type;

  GeneralParams_()
    : transaction(0)
    , time_types(0)
    , distance_type(0)
    , autostart(0)
    , imu_lever_arm()
    , primary_gnss_lever_arm()
    , aux_1_gnss_lever_arm()
    , aux_2_gnss_lever_arm()
    , imu_mounting_angle()
    , ref_mounting_angle()
    , multipath(0)  {
    }
  GeneralParams_(const ContainerAllocator& _alloc)
    : transaction(0)
    , time_types(0)
    , distance_type(0)
    , autostart(0)
    , imu_lever_arm(_alloc)
    , primary_gnss_lever_arm(_alloc)
    , aux_1_gnss_lever_arm(_alloc)
    , aux_2_gnss_lever_arm(_alloc)
    , imu_mounting_angle(_alloc)
    , ref_mounting_angle(_alloc)
    , multipath(0)  {
  (void)_alloc;
    }



   typedef uint16_t _transaction_type;
  _transaction_type transaction;

   typedef uint8_t _time_types_type;
  _time_types_type time_types;

   typedef uint8_t _distance_type_type;
  _distance_type_type distance_type;

   typedef uint8_t _autostart_type;
  _autostart_type autostart;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _imu_lever_arm_type;
  _imu_lever_arm_type imu_lever_arm;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _primary_gnss_lever_arm_type;
  _primary_gnss_lever_arm_type primary_gnss_lever_arm;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _aux_1_gnss_lever_arm_type;
  _aux_1_gnss_lever_arm_type aux_1_gnss_lever_arm;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _aux_2_gnss_lever_arm_type;
  _aux_2_gnss_lever_arm_type aux_2_gnss_lever_arm;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _imu_mounting_angle_type;
  _imu_mounting_angle_type imu_mounting_angle;

   typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _ref_mounting_angle_type;
  _ref_mounting_angle_type ref_mounting_angle;

   typedef uint8_t _multipath_type;
  _multipath_type multipath;



  enum {
    MULTIPATH_LOW = 0u,
    MULTIPATH_MEDIUM = 1u,
    MULTIPATH_HIGH = 2u,
  };


  typedef boost::shared_ptr< ::applanix_msgs::GeneralParams_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::applanix_msgs::GeneralParams_<ContainerAllocator> const> ConstPtr;

}; // struct GeneralParams_

typedef ::applanix_msgs::GeneralParams_<std::allocator<void> > GeneralParams;

typedef boost::shared_ptr< ::applanix_msgs::GeneralParams > GeneralParamsPtr;
typedef boost::shared_ptr< ::applanix_msgs::GeneralParams const> GeneralParamsConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::applanix_msgs::GeneralParams_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::applanix_msgs::GeneralParams_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace applanix_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/geometry_msgs/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'applanix_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/applanix_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::applanix_msgs::GeneralParams_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::applanix_msgs::GeneralParams_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::applanix_msgs::GeneralParams_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::applanix_msgs::GeneralParams_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::applanix_msgs::GeneralParams_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::applanix_msgs::GeneralParams_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::applanix_msgs::GeneralParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dd32351725c9c39d1131c0be17b24a7b";
  }

  static const char* value(const ::applanix_msgs::GeneralParams_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdd32351725c9c39dULL;
  static const uint64_t static_value2 = 0x1131c0be17b24a7bULL;
};

template<class ContainerAllocator>
struct DataType< ::applanix_msgs::GeneralParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "applanix_msgs/GeneralParams";
  }

  static const char* value(const ::applanix_msgs::GeneralParams_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::applanix_msgs::GeneralParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Msg 20\n"
"uint16 transaction\n"
"\n"
"uint8 time_types\n"
"uint8 distance_type\n"
"uint8 autostart\n"
"\n"
"geometry_msgs/Point32 imu_lever_arm\n"
"geometry_msgs/Point32 primary_gnss_lever_arm\n"
"geometry_msgs/Point32 aux_1_gnss_lever_arm\n"
"geometry_msgs/Point32 aux_2_gnss_lever_arm\n"
"geometry_msgs/Point32 imu_mounting_angle\n"
"geometry_msgs/Point32 ref_mounting_angle\n"
"\n"
"uint8 MULTIPATH_LOW=0\n"
"uint8 MULTIPATH_MEDIUM=1\n"
"uint8 MULTIPATH_HIGH=2\n"
"uint8 multipath\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::applanix_msgs::GeneralParams_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::applanix_msgs::GeneralParams_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.transaction);
      stream.next(m.time_types);
      stream.next(m.distance_type);
      stream.next(m.autostart);
      stream.next(m.imu_lever_arm);
      stream.next(m.primary_gnss_lever_arm);
      stream.next(m.aux_1_gnss_lever_arm);
      stream.next(m.aux_2_gnss_lever_arm);
      stream.next(m.imu_mounting_angle);
      stream.next(m.ref_mounting_angle);
      stream.next(m.multipath);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GeneralParams_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::applanix_msgs::GeneralParams_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::applanix_msgs::GeneralParams_<ContainerAllocator>& v)
  {
    s << indent << "transaction: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.transaction);
    s << indent << "time_types: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.time_types);
    s << indent << "distance_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.distance_type);
    s << indent << "autostart: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.autostart);
    s << indent << "imu_lever_arm: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.imu_lever_arm);
    s << indent << "primary_gnss_lever_arm: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.primary_gnss_lever_arm);
    s << indent << "aux_1_gnss_lever_arm: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.aux_1_gnss_lever_arm);
    s << indent << "aux_2_gnss_lever_arm: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.aux_2_gnss_lever_arm);
    s << indent << "imu_mounting_angle: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.imu_mounting_angle);
    s << indent << "ref_mounting_angle: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.ref_mounting_angle);
    s << indent << "multipath: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.multipath);
  }
};

} // namespace message_operations
} // namespace ros

#endif // APPLANIX_MSGS_MESSAGE_GENERALPARAMS_H
