// Generated by gencpp from file applanix_msgs/GNSSDGPSChannelStatus.msg
// DO NOT EDIT!


#ifndef APPLANIX_MSGS_MESSAGE_GNSSDGPSCHANNELSTATUS_H
#define APPLANIX_MSGS_MESSAGE_GNSSDGPSCHANNELSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace applanix_msgs
{
template <class ContainerAllocator>
struct GNSSDGPSChannelStatus_
{
  typedef GNSSDGPSChannelStatus_<ContainerAllocator> Type;

  GNSSDGPSChannelStatus_()
    : frequency(0.0)
    , acquisition_mode(0)
    , status(0)
    , rtcm(0)
    , snr(0)
    , data_rate(0)
    , lock(0)
    , dgps_source_auto_switching(0)
    , provider(0)  {
    }
  GNSSDGPSChannelStatus_(const ContainerAllocator& _alloc)
    : frequency(0.0)
    , acquisition_mode(0)
    , status(0)
    , rtcm(0)
    , snr(0)
    , data_rate(0)
    , lock(0)
    , dgps_source_auto_switching(0)
    , provider(0)  {
  (void)_alloc;
    }



   typedef double _frequency_type;
  _frequency_type frequency;

   typedef uint8_t _acquisition_mode_type;
  _acquisition_mode_type acquisition_mode;

   typedef uint8_t _status_type;
  _status_type status;

   typedef uint8_t _rtcm_type;
  _rtcm_type rtcm;

   typedef uint8_t _snr_type;
  _snr_type snr;

   typedef uint8_t _data_rate_type;
  _data_rate_type data_rate;

   typedef uint8_t _lock_type;
  _lock_type lock;

   typedef uint8_t _dgps_source_auto_switching_type;
  _dgps_source_auto_switching_type dgps_source_auto_switching;

   typedef uint8_t _provider_type;
  _provider_type provider;





  typedef boost::shared_ptr< ::applanix_msgs::GNSSDGPSChannelStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::applanix_msgs::GNSSDGPSChannelStatus_<ContainerAllocator> const> ConstPtr;

}; // struct GNSSDGPSChannelStatus_

typedef ::applanix_msgs::GNSSDGPSChannelStatus_<std::allocator<void> > GNSSDGPSChannelStatus;

typedef boost::shared_ptr< ::applanix_msgs::GNSSDGPSChannelStatus > GNSSDGPSChannelStatusPtr;
typedef boost::shared_ptr< ::applanix_msgs::GNSSDGPSChannelStatus const> GNSSDGPSChannelStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::applanix_msgs::GNSSDGPSChannelStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::applanix_msgs::GNSSDGPSChannelStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace applanix_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/geometry_msgs/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'applanix_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/applanix_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::applanix_msgs::GNSSDGPSChannelStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::applanix_msgs::GNSSDGPSChannelStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::applanix_msgs::GNSSDGPSChannelStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::applanix_msgs::GNSSDGPSChannelStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::applanix_msgs::GNSSDGPSChannelStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::applanix_msgs::GNSSDGPSChannelStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::applanix_msgs::GNSSDGPSChannelStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8441bd37d9364590ce86273785774816";
  }

  static const char* value(const ::applanix_msgs::GNSSDGPSChannelStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8441bd37d9364590ULL;
  static const uint64_t static_value2 = 0xce86273785774816ULL;
};

template<class ContainerAllocator>
struct DataType< ::applanix_msgs::GNSSDGPSChannelStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "applanix_msgs/GNSSDGPSChannelStatus";
  }

  static const char* value(const ::applanix_msgs::GNSSDGPSChannelStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::applanix_msgs::GNSSDGPSChannelStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Part of Group 25.\n"
"# TODO: enums\n"
"\n"
"float64 frequency\n"
"uint8 acquisition_mode\n"
"uint8 status\n"
"uint8 rtcm\n"
"uint8 snr\n"
"uint8 data_rate\n"
"uint8 lock\n"
"uint8 dgps_source_auto_switching\n"
"uint8 provider\n"
"\n"
;
  }

  static const char* value(const ::applanix_msgs::GNSSDGPSChannelStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::applanix_msgs::GNSSDGPSChannelStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frequency);
      stream.next(m.acquisition_mode);
      stream.next(m.status);
      stream.next(m.rtcm);
      stream.next(m.snr);
      stream.next(m.data_rate);
      stream.next(m.lock);
      stream.next(m.dgps_source_auto_switching);
      stream.next(m.provider);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GNSSDGPSChannelStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::applanix_msgs::GNSSDGPSChannelStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::applanix_msgs::GNSSDGPSChannelStatus_<ContainerAllocator>& v)
  {
    s << indent << "frequency: ";
    Printer<double>::stream(s, indent + "  ", v.frequency);
    s << indent << "acquisition_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.acquisition_mode);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "rtcm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rtcm);
    s << indent << "snr: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.snr);
    s << indent << "data_rate: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.data_rate);
    s << indent << "lock: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lock);
    s << indent << "dgps_source_auto_switching: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dgps_source_auto_switching);
    s << indent << "provider: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.provider);
  }
};

} // namespace message_operations
} // namespace ros

#endif // APPLANIX_MSGS_MESSAGE_GNSSDGPSCHANNELSTATUS_H
