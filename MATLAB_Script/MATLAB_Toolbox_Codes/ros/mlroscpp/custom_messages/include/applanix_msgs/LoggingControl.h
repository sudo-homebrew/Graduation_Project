// Generated by gencpp from file applanix_msgs/LoggingControl.msg
// DO NOT EDIT!


#ifndef APPLANIX_MSGS_MESSAGE_LOGGINGCONTROL_H
#define APPLANIX_MSGS_MESSAGE_LOGGINGCONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <applanix_msgs/OutputGroup.h>

namespace applanix_msgs
{
template <class ContainerAllocator>
struct LoggingControl_
{
  typedef LoggingControl_<ContainerAllocator> Type;

  LoggingControl_()
    : transaction(0)
    , groups_count(0)
    , groups()
    , rate(0)
    , autolog(0)
    , disk_logging(0)
    , filename_kernel()
    , reserved()  {
      filename_kernel.assign(0);

      reserved.assign(0);
  }
  LoggingControl_(const ContainerAllocator& _alloc)
    : transaction(0)
    , groups_count(0)
    , groups(_alloc)
    , rate(0)
    , autolog(0)
    , disk_logging(0)
    , filename_kernel()
    , reserved()  {
  (void)_alloc;
      filename_kernel.assign(0);

      reserved.assign(0);
  }



   typedef uint16_t _transaction_type;
  _transaction_type transaction;

   typedef uint16_t _groups_count_type;
  _groups_count_type groups_count;

   typedef std::vector< ::applanix_msgs::OutputGroup_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::applanix_msgs::OutputGroup_<ContainerAllocator> >::other >  _groups_type;
  _groups_type groups;

   typedef uint16_t _rate_type;
  _rate_type rate;

   typedef uint8_t _autolog_type;
  _autolog_type autolog;

   typedef uint8_t _disk_logging_type;
  _disk_logging_type disk_logging;

   typedef boost::array<uint8_t, 32>  _filename_kernel_type;
  _filename_kernel_type filename_kernel;

   typedef boost::array<uint8_t, 32>  _reserved_type;
  _reserved_type reserved;



  enum {
    AUTOLOG_DISABLED = 0u,
    AUTOLOG_ENABLED = 1u,
    DISK_LOGGING_STOP = 0u,
    DISK_LOGGING_START = 1u,
  };


  typedef boost::shared_ptr< ::applanix_msgs::LoggingControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::applanix_msgs::LoggingControl_<ContainerAllocator> const> ConstPtr;

}; // struct LoggingControl_

typedef ::applanix_msgs::LoggingControl_<std::allocator<void> > LoggingControl;

typedef boost::shared_ptr< ::applanix_msgs::LoggingControl > LoggingControlPtr;
typedef boost::shared_ptr< ::applanix_msgs::LoggingControl const> LoggingControlConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::applanix_msgs::LoggingControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::applanix_msgs::LoggingControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace applanix_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/geometry_msgs/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'applanix_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/applanix_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::applanix_msgs::LoggingControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::applanix_msgs::LoggingControl_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::applanix_msgs::LoggingControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::applanix_msgs::LoggingControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::applanix_msgs::LoggingControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::applanix_msgs::LoggingControl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::applanix_msgs::LoggingControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c039312796bd7205fe681c6df276e3af";
  }

  static const char* value(const ::applanix_msgs::LoggingControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc039312796bd7205ULL;
  static const uint64_t static_value2 = 0xfe681c6df276e3afULL;
};

template<class ContainerAllocator>
struct DataType< ::applanix_msgs::LoggingControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "applanix_msgs/LoggingControl";
  }

  static const char* value(const ::applanix_msgs::LoggingControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::applanix_msgs::LoggingControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Msg 51, 52, 61\n"
"uint16 transaction\n"
"\n"
"uint16 groups_count\n"
"OutputGroup[] groups\n"
"\n"
"# 1, 2, 10, 20, 25, 50, 100, 200\n"
"uint16 rate\n"
"\n"
"uint8 AUTOLOG_DISABLED=0\n"
"uint8 AUTOLOG_ENABLED=1\n"
"uint8 autolog\n"
"\n"
"uint8 DISK_LOGGING_STOP=0\n"
"uint8 DISK_LOGGING_START=1\n"
"uint8 disk_logging\n"
"\n"
"uint8[32] filename_kernel\n"
"uint8[32] reserved\n"
"\n"
"================================================================================\n"
"MSG: applanix_msgs/OutputGroup\n"
"uint16 group\n"
;
  }

  static const char* value(const ::applanix_msgs::LoggingControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::applanix_msgs::LoggingControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.transaction);
      stream.next(m.groups_count);
      stream.next(m.groups);
      stream.next(m.rate);
      stream.next(m.autolog);
      stream.next(m.disk_logging);
      stream.next(m.filename_kernel);
      stream.next(m.reserved);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LoggingControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::applanix_msgs::LoggingControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::applanix_msgs::LoggingControl_<ContainerAllocator>& v)
  {
    s << indent << "transaction: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.transaction);
    s << indent << "groups_count: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.groups_count);
    s << indent << "groups[]" << std::endl;
    for (size_t i = 0; i < v.groups.size(); ++i)
    {
      s << indent << "  groups[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::applanix_msgs::OutputGroup_<ContainerAllocator> >::stream(s, indent + "    ", v.groups[i]);
    }
    s << indent << "rate: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.rate);
    s << indent << "autolog: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.autolog);
    s << indent << "disk_logging: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.disk_logging);
    s << indent << "filename_kernel[]" << std::endl;
    for (size_t i = 0; i < v.filename_kernel.size(); ++i)
    {
      s << indent << "  filename_kernel[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.filename_kernel[i]);
    }
    s << indent << "reserved[]" << std::endl;
    for (size_t i = 0; i < v.reserved.size(); ++i)
    {
      s << indent << "  reserved[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.reserved[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // APPLANIX_MSGS_MESSAGE_LOGGINGCONTROL_H
