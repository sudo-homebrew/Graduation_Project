// Generated by gencpp from file applanix_msgs/NavigationSolution.msg
// DO NOT EDIT!


#ifndef APPLANIX_MSGS_MESSAGE_NAVIGATIONSOLUTION_H
#define APPLANIX_MSGS_MESSAGE_NAVIGATIONSOLUTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <applanix_msgs/TimeDistance.h>

namespace applanix_msgs
{
template <class ContainerAllocator>
struct NavigationSolution_
{
  typedef NavigationSolution_<ContainerAllocator> Type;

  NavigationSolution_()
    : td()
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , north_vel(0.0)
    , east_vel(0.0)
    , down_vel(0.0)
    , roll(0.0)
    , pitch(0.0)
    , heading(0.0)
    , wander_angle(0.0)
    , track_angle(0.0)
    , speed(0.0)
    , ang_rate_long(0.0)
    , ang_rate_trans(0.0)
    , ang_rate_down(0.0)
    , long_accel(0.0)
    , trans_accel(0.0)
    , down_accel(0.0)
    , alignment_status(0)  {
    }
  NavigationSolution_(const ContainerAllocator& _alloc)
    : td(_alloc)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , north_vel(0.0)
    , east_vel(0.0)
    , down_vel(0.0)
    , roll(0.0)
    , pitch(0.0)
    , heading(0.0)
    , wander_angle(0.0)
    , track_angle(0.0)
    , speed(0.0)
    , ang_rate_long(0.0)
    , ang_rate_trans(0.0)
    , ang_rate_down(0.0)
    , long_accel(0.0)
    , trans_accel(0.0)
    , down_accel(0.0)
    , alignment_status(0)  {
  (void)_alloc;
    }



   typedef  ::applanix_msgs::TimeDistance_<ContainerAllocator>  _td_type;
  _td_type td;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _altitude_type;
  _altitude_type altitude;

   typedef float _north_vel_type;
  _north_vel_type north_vel;

   typedef float _east_vel_type;
  _east_vel_type east_vel;

   typedef float _down_vel_type;
  _down_vel_type down_vel;

   typedef double _roll_type;
  _roll_type roll;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _heading_type;
  _heading_type heading;

   typedef double _wander_angle_type;
  _wander_angle_type wander_angle;

   typedef float _track_angle_type;
  _track_angle_type track_angle;

   typedef float _speed_type;
  _speed_type speed;

   typedef float _ang_rate_long_type;
  _ang_rate_long_type ang_rate_long;

   typedef float _ang_rate_trans_type;
  _ang_rate_trans_type ang_rate_trans;

   typedef float _ang_rate_down_type;
  _ang_rate_down_type ang_rate_down;

   typedef float _long_accel_type;
  _long_accel_type long_accel;

   typedef float _trans_accel_type;
  _trans_accel_type trans_accel;

   typedef float _down_accel_type;
  _down_accel_type down_accel;

   typedef uint8_t _alignment_status_type;
  _alignment_status_type alignment_status;



  enum {
    ALIGNMENT_FULL_NAVIGATION = 0u,
    ALIGNMENT_FINE_ALIGNMENT_ACTIVE = 1u,
    ALIGNMENT_GC_CHI_2 = 2u,
    ALIGNMENT_PC_CHI_2 = 3u,
    ALIGNMENT_GC_CHI_1 = 4u,
    ALIGNMENT_PC_CHI_1 = 5u,
    ALIGNMENT_COARSE_LEVELING = 6u,
    ALIGNMENT_INITIAL_SOLUTION = 7u,
    ALIGNMENT_NO_VALID_SOLUTION = 8u,
  };


  typedef boost::shared_ptr< ::applanix_msgs::NavigationSolution_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::applanix_msgs::NavigationSolution_<ContainerAllocator> const> ConstPtr;

}; // struct NavigationSolution_

typedef ::applanix_msgs::NavigationSolution_<std::allocator<void> > NavigationSolution;

typedef boost::shared_ptr< ::applanix_msgs::NavigationSolution > NavigationSolutionPtr;
typedef boost::shared_ptr< ::applanix_msgs::NavigationSolution const> NavigationSolutionConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::applanix_msgs::NavigationSolution_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::applanix_msgs::NavigationSolution_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace applanix_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/geometry_msgs/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'applanix_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/applanix_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::applanix_msgs::NavigationSolution_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::applanix_msgs::NavigationSolution_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::applanix_msgs::NavigationSolution_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::applanix_msgs::NavigationSolution_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::applanix_msgs::NavigationSolution_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::applanix_msgs::NavigationSolution_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::applanix_msgs::NavigationSolution_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5bd9b6a0dde762b9354121b78d050654";
  }

  static const char* value(const ::applanix_msgs::NavigationSolution_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5bd9b6a0dde762b9ULL;
  static const uint64_t static_value2 = 0x354121b78d050654ULL;
};

template<class ContainerAllocator>
struct DataType< ::applanix_msgs::NavigationSolution_<ContainerAllocator> >
{
  static const char* value()
  {
    return "applanix_msgs/NavigationSolution";
  }

  static const char* value(const ::applanix_msgs::NavigationSolution_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::applanix_msgs::NavigationSolution_<ContainerAllocator> >
{
  static const char* value()
  {
    return "TimeDistance td\n"
"\n"
"# Position in degrees\n"
"float64 latitude\n"
"float64 longitude\n"
"\n"
"# Meters\n"
"float64 altitude\n"
"\n"
"# Meters/second\n"
"float32 north_vel\n"
"float32 east_vel\n"
"float32 down_vel\n"
"\n"
"# Degrees\n"
"float64 roll\n"
"float64 pitch\n"
"float64 heading\n"
"float64 wander_angle\n"
"float32 track_angle\n"
"\n"
"# Meters/second\n"
"float32 speed\n"
"\n"
"# Degrees/second\n"
"float32 ang_rate_long\n"
"float32 ang_rate_trans\n"
"float32 ang_rate_down\n"
"\n"
"# Meters/second^2\n"
"float32 long_accel\n"
"float32 trans_accel\n"
"float32 down_accel\n"
"\n"
"uint8 ALIGNMENT_FULL_NAVIGATION=0\n"
"uint8 ALIGNMENT_FINE_ALIGNMENT_ACTIVE=1\n"
"uint8 ALIGNMENT_GC_CHI_2=2\n"
"uint8 ALIGNMENT_PC_CHI_2=3\n"
"uint8 ALIGNMENT_GC_CHI_1=4\n"
"uint8 ALIGNMENT_PC_CHI_1=5\n"
"uint8 ALIGNMENT_COARSE_LEVELING=6\n"
"uint8 ALIGNMENT_INITIAL_SOLUTION=7\n"
"uint8 ALIGNMENT_NO_VALID_SOLUTION=8\n"
"uint8 alignment_status\n"
"\n"
"================================================================================\n"
"MSG: applanix_msgs/TimeDistance\n"
"float64 time1\n"
"float64 time2\n"
"float64 distance\n"
"uint8 time_types\n"
"uint8 distance_type\n"
;
  }

  static const char* value(const ::applanix_msgs::NavigationSolution_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::applanix_msgs::NavigationSolution_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.td);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.altitude);
      stream.next(m.north_vel);
      stream.next(m.east_vel);
      stream.next(m.down_vel);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.heading);
      stream.next(m.wander_angle);
      stream.next(m.track_angle);
      stream.next(m.speed);
      stream.next(m.ang_rate_long);
      stream.next(m.ang_rate_trans);
      stream.next(m.ang_rate_down);
      stream.next(m.long_accel);
      stream.next(m.trans_accel);
      stream.next(m.down_accel);
      stream.next(m.alignment_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NavigationSolution_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::applanix_msgs::NavigationSolution_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::applanix_msgs::NavigationSolution_<ContainerAllocator>& v)
  {
    s << indent << "td: ";
    s << std::endl;
    Printer< ::applanix_msgs::TimeDistance_<ContainerAllocator> >::stream(s, indent + "  ", v.td);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
    s << indent << "north_vel: ";
    Printer<float>::stream(s, indent + "  ", v.north_vel);
    s << indent << "east_vel: ";
    Printer<float>::stream(s, indent + "  ", v.east_vel);
    s << indent << "down_vel: ";
    Printer<float>::stream(s, indent + "  ", v.down_vel);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "heading: ";
    Printer<double>::stream(s, indent + "  ", v.heading);
    s << indent << "wander_angle: ";
    Printer<double>::stream(s, indent + "  ", v.wander_angle);
    s << indent << "track_angle: ";
    Printer<float>::stream(s, indent + "  ", v.track_angle);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "ang_rate_long: ";
    Printer<float>::stream(s, indent + "  ", v.ang_rate_long);
    s << indent << "ang_rate_trans: ";
    Printer<float>::stream(s, indent + "  ", v.ang_rate_trans);
    s << indent << "ang_rate_down: ";
    Printer<float>::stream(s, indent + "  ", v.ang_rate_down);
    s << indent << "long_accel: ";
    Printer<float>::stream(s, indent + "  ", v.long_accel);
    s << indent << "trans_accel: ";
    Printer<float>::stream(s, indent + "  ", v.trans_accel);
    s << indent << "down_accel: ";
    Printer<float>::stream(s, indent + "  ", v.down_accel);
    s << indent << "alignment_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.alignment_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // APPLANIX_MSGS_MESSAGE_NAVIGATIONSOLUTION_H
