// Generated by gencpp from file capabilities/GetRemappingsResponse.msg
// DO NOT EDIT!


#ifndef CAPABILITIES_MESSAGE_GETREMAPPINGSRESPONSE_H
#define CAPABILITIES_MESSAGE_GETREMAPPINGSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <capabilities/Remapping.h>
#include <capabilities/Remapping.h>
#include <capabilities/Remapping.h>
#include <capabilities/Remapping.h>

namespace capabilities
{
template <class ContainerAllocator>
struct GetRemappingsResponse_
{
  typedef GetRemappingsResponse_<ContainerAllocator> Type;

  GetRemappingsResponse_()
    : topics()
    , services()
    , actions()
    , parameters()  {
    }
  GetRemappingsResponse_(const ContainerAllocator& _alloc)
    : topics(_alloc)
    , services(_alloc)
    , actions(_alloc)
    , parameters(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::capabilities::Remapping_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::capabilities::Remapping_<ContainerAllocator> >::other >  _topics_type;
  _topics_type topics;

   typedef std::vector< ::capabilities::Remapping_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::capabilities::Remapping_<ContainerAllocator> >::other >  _services_type;
  _services_type services;

   typedef std::vector< ::capabilities::Remapping_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::capabilities::Remapping_<ContainerAllocator> >::other >  _actions_type;
  _actions_type actions;

   typedef std::vector< ::capabilities::Remapping_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::capabilities::Remapping_<ContainerAllocator> >::other >  _parameters_type;
  _parameters_type parameters;





  typedef boost::shared_ptr< ::capabilities::GetRemappingsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::capabilities::GetRemappingsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetRemappingsResponse_

typedef ::capabilities::GetRemappingsResponse_<std::allocator<void> > GetRemappingsResponse;

typedef boost::shared_ptr< ::capabilities::GetRemappingsResponse > GetRemappingsResponsePtr;
typedef boost::shared_ptr< ::capabilities::GetRemappingsResponse const> GetRemappingsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::capabilities::GetRemappingsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::capabilities::GetRemappingsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::capabilities::GetRemappingsResponse_<ContainerAllocator1> & lhs, const ::capabilities::GetRemappingsResponse_<ContainerAllocator2> & rhs)
{
  return lhs.topics == rhs.topics &&
    lhs.services == rhs.services &&
    lhs.actions == rhs.actions &&
    lhs.parameters == rhs.parameters;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::capabilities::GetRemappingsResponse_<ContainerAllocator1> & lhs, const ::capabilities::GetRemappingsResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace capabilities

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::capabilities::GetRemappingsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::capabilities::GetRemappingsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::capabilities::GetRemappingsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::capabilities::GetRemappingsResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::capabilities::GetRemappingsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::capabilities::GetRemappingsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::capabilities::GetRemappingsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "415cd1db0ffcce80349919d43c587ff2";
  }

  static const char* value(const ::capabilities::GetRemappingsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x415cd1db0ffcce80ULL;
  static const uint64_t static_value2 = 0x349919d43c587ff2ULL;
};

template<class ContainerAllocator>
struct DataType< ::capabilities::GetRemappingsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "capabilities/GetRemappingsResponse";
  }

  static const char* value(const ::capabilities::GetRemappingsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::capabilities::GetRemappingsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Remapping[] topics\n"
"Remapping[] services\n"
"Remapping[] actions\n"
"Remapping[] parameters\n"
"\n"
"\n"
"================================================================================\n"
"MSG: capabilities/Remapping\n"
"string key\n"
"string value\n"
;
  }

  static const char* value(const ::capabilities::GetRemappingsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::capabilities::GetRemappingsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.topics);
      stream.next(m.services);
      stream.next(m.actions);
      stream.next(m.parameters);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetRemappingsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::capabilities::GetRemappingsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::capabilities::GetRemappingsResponse_<ContainerAllocator>& v)
  {
    s << indent << "topics[]" << std::endl;
    for (size_t i = 0; i < v.topics.size(); ++i)
    {
      s << indent << "  topics[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::capabilities::Remapping_<ContainerAllocator> >::stream(s, indent + "    ", v.topics[i]);
    }
    s << indent << "services[]" << std::endl;
    for (size_t i = 0; i < v.services.size(); ++i)
    {
      s << indent << "  services[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::capabilities::Remapping_<ContainerAllocator> >::stream(s, indent + "    ", v.services[i]);
    }
    s << indent << "actions[]" << std::endl;
    for (size_t i = 0; i < v.actions.size(); ++i)
    {
      s << indent << "  actions[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::capabilities::Remapping_<ContainerAllocator> >::stream(s, indent + "    ", v.actions[i]);
    }
    s << indent << "parameters[]" << std::endl;
    for (size_t i = 0; i < v.parameters.size(); ++i)
    {
      s << indent << "  parameters[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::capabilities::Remapping_<ContainerAllocator> >::stream(s, indent + "    ", v.parameters[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAPABILITIES_MESSAGE_GETREMAPPINGSRESPONSE_H
