// Generated by gencpp from file capabilities/StartCapabilityResponse.msg
// DO NOT EDIT!


#ifndef CAPABILITIES_MESSAGE_STARTCAPABILITYRESPONSE_H
#define CAPABILITIES_MESSAGE_STARTCAPABILITYRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace capabilities
{
template <class ContainerAllocator>
struct StartCapabilityResponse_
{
  typedef StartCapabilityResponse_<ContainerAllocator> Type;

  StartCapabilityResponse_()
    : result(0)  {
    }
  StartCapabilityResponse_(const ContainerAllocator& _alloc)
    : result(0)  {
  (void)_alloc;
    }



   typedef uint8_t _result_type;
  _result_type result;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(RESULT_SUCCESS)
  #undef RESULT_SUCCESS
#endif
#if defined(_WIN32) && defined(RESULT_CURRENTLY_STARTING)
  #undef RESULT_CURRENTLY_STARTING
#endif
#if defined(_WIN32) && defined(RESULT_CURRENTLY_RUNNING)
  #undef RESULT_CURRENTLY_RUNNING
#endif
#if defined(_WIN32) && defined(RESULT_CURRENTLY_STOPPING)
  #undef RESULT_CURRENTLY_STOPPING
#endif

  enum {
    RESULT_SUCCESS = 0u,
    RESULT_CURRENTLY_STARTING = 1u,
    RESULT_CURRENTLY_RUNNING = 2u,
    RESULT_CURRENTLY_STOPPING = 3u,
  };


  typedef boost::shared_ptr< ::capabilities::StartCapabilityResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::capabilities::StartCapabilityResponse_<ContainerAllocator> const> ConstPtr;

}; // struct StartCapabilityResponse_

typedef ::capabilities::StartCapabilityResponse_<std::allocator<void> > StartCapabilityResponse;

typedef boost::shared_ptr< ::capabilities::StartCapabilityResponse > StartCapabilityResponsePtr;
typedef boost::shared_ptr< ::capabilities::StartCapabilityResponse const> StartCapabilityResponseConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::capabilities::StartCapabilityResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::capabilities::StartCapabilityResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::capabilities::StartCapabilityResponse_<ContainerAllocator1> & lhs, const ::capabilities::StartCapabilityResponse_<ContainerAllocator2> & rhs)
{
  return lhs.result == rhs.result;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::capabilities::StartCapabilityResponse_<ContainerAllocator1> & lhs, const ::capabilities::StartCapabilityResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace capabilities

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::capabilities::StartCapabilityResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::capabilities::StartCapabilityResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::capabilities::StartCapabilityResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::capabilities::StartCapabilityResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::capabilities::StartCapabilityResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::capabilities::StartCapabilityResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::capabilities::StartCapabilityResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "987bf9617f6d43621fed499e5edfc366";
  }

  static const char* value(const ::capabilities::StartCapabilityResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x987bf9617f6d4362ULL;
  static const uint64_t static_value2 = 0x1fed499e5edfc366ULL;
};

template<class ContainerAllocator>
struct DataType< ::capabilities::StartCapabilityResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "capabilities/StartCapabilityResponse";
  }

  static const char* value(const ::capabilities::StartCapabilityResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::capabilities::StartCapabilityResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 result\n"
"uint8 RESULT_SUCCESS=0\n"
"uint8 RESULT_CURRENTLY_STARTING=1 # Cannot start because capability is currently starting\n"
"uint8 RESULT_CURRENTLY_RUNNING=2 # Cannot start because capability is currently running\n"
"uint8 RESULT_CURRENTLY_STOPPING=3 # Cannot start because capability is currently stopping\n"
"\n"
"\n"
;
  }

  static const char* value(const ::capabilities::StartCapabilityResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::capabilities::StartCapabilityResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.result);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StartCapabilityResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::capabilities::StartCapabilityResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::capabilities::StartCapabilityResponse_<ContainerAllocator>& v)
  {
    s << indent << "result: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.result);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAPABILITIES_MESSAGE_STARTCAPABILITYRESPONSE_H
