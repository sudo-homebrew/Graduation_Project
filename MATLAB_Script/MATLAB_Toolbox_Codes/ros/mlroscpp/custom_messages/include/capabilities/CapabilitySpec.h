// Generated by gencpp from file capabilities/CapabilitySpec.msg
// DO NOT EDIT!


#ifndef CAPABILITIES_MESSAGE_CAPABILITYSPEC_H
#define CAPABILITIES_MESSAGE_CAPABILITYSPEC_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace capabilities
{
template <class ContainerAllocator>
struct CapabilitySpec_
{
  typedef CapabilitySpec_<ContainerAllocator> Type;

  CapabilitySpec_()
    : package()
    , type()
    , content()
    , default_provider()  {
    }
  CapabilitySpec_(const ContainerAllocator& _alloc)
    : package(_alloc)
    , type(_alloc)
    , content(_alloc)
    , default_provider(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _package_type;
  _package_type package;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _content_type;
  _content_type content;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _default_provider_type;
  _default_provider_type default_provider;





  typedef boost::shared_ptr< ::capabilities::CapabilitySpec_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::capabilities::CapabilitySpec_<ContainerAllocator> const> ConstPtr;

}; // struct CapabilitySpec_

typedef ::capabilities::CapabilitySpec_<std::allocator<void> > CapabilitySpec;

typedef boost::shared_ptr< ::capabilities::CapabilitySpec > CapabilitySpecPtr;
typedef boost::shared_ptr< ::capabilities::CapabilitySpec const> CapabilitySpecConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::capabilities::CapabilitySpec_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::capabilities::CapabilitySpec_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::capabilities::CapabilitySpec_<ContainerAllocator1> & lhs, const ::capabilities::CapabilitySpec_<ContainerAllocator2> & rhs)
{
  return lhs.package == rhs.package &&
    lhs.type == rhs.type &&
    lhs.content == rhs.content &&
    lhs.default_provider == rhs.default_provider;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::capabilities::CapabilitySpec_<ContainerAllocator1> & lhs, const ::capabilities::CapabilitySpec_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace capabilities

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::capabilities::CapabilitySpec_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::capabilities::CapabilitySpec_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::capabilities::CapabilitySpec_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::capabilities::CapabilitySpec_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::capabilities::CapabilitySpec_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::capabilities::CapabilitySpec_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::capabilities::CapabilitySpec_<ContainerAllocator> >
{
  static const char* value()
  {
    return "410c606586817322b7ad85c73e4a4c9f";
  }

  static const char* value(const ::capabilities::CapabilitySpec_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x410c606586817322ULL;
  static const uint64_t static_value2 = 0xb7ad85c73e4a4c9fULL;
};

template<class ContainerAllocator>
struct DataType< ::capabilities::CapabilitySpec_<ContainerAllocator> >
{
  static const char* value()
  {
    return "capabilities/CapabilitySpec";
  }

  static const char* value(const ::capabilities::CapabilitySpec_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::capabilities::CapabilitySpec_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Package which contains this spec file\n"
"string package\n"
"\n"
"# Type of spec file, one of:\n"
"#   'capability_interface'\n"
"#   'semantic_capability_interface'\n"
"#   'capability_provider'\n"
"string type\n"
"\n"
"# Raw string content of the spec file\n"
"string content\n"
"\n"
"# The name of the default provider (pulled from ROS param's)\n"
"# (only used for capability_interface specs)\n"
"string default_provider\n"
;
  }

  static const char* value(const ::capabilities::CapabilitySpec_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::capabilities::CapabilitySpec_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.package);
      stream.next(m.type);
      stream.next(m.content);
      stream.next(m.default_provider);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CapabilitySpec_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::capabilities::CapabilitySpec_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::capabilities::CapabilitySpec_<ContainerAllocator>& v)
  {
    s << indent << "package: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.package);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "content: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.content);
    s << indent << "default_provider: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.default_provider);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAPABILITIES_MESSAGE_CAPABILITYSPEC_H
