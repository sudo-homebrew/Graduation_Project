// Generated by gencpp from file capabilities/RunningCapability.msg
// DO NOT EDIT!


#ifndef CAPABILITIES_MESSAGE_RUNNINGCAPABILITY_H
#define CAPABILITIES_MESSAGE_RUNNINGCAPABILITY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <capabilities/Capability.h>
#include <capabilities/Capability.h>

namespace capabilities
{
template <class ContainerAllocator>
struct RunningCapability_
{
  typedef RunningCapability_<ContainerAllocator> Type;

  RunningCapability_()
    : capability()
    , dependent_capabilities()
    , started_by()
    , pid(0)  {
    }
  RunningCapability_(const ContainerAllocator& _alloc)
    : capability(_alloc)
    , dependent_capabilities(_alloc)
    , started_by(_alloc)
    , pid(0)  {
  (void)_alloc;
    }



   typedef  ::capabilities::Capability_<ContainerAllocator>  _capability_type;
  _capability_type capability;

   typedef std::vector< ::capabilities::Capability_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::capabilities::Capability_<ContainerAllocator> >::other >  _dependent_capabilities_type;
  _dependent_capabilities_type dependent_capabilities;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _started_by_type;
  _started_by_type started_by;

   typedef int32_t _pid_type;
  _pid_type pid;





  typedef boost::shared_ptr< ::capabilities::RunningCapability_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::capabilities::RunningCapability_<ContainerAllocator> const> ConstPtr;

}; // struct RunningCapability_

typedef ::capabilities::RunningCapability_<std::allocator<void> > RunningCapability;

typedef boost::shared_ptr< ::capabilities::RunningCapability > RunningCapabilityPtr;
typedef boost::shared_ptr< ::capabilities::RunningCapability const> RunningCapabilityConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::capabilities::RunningCapability_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::capabilities::RunningCapability_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::capabilities::RunningCapability_<ContainerAllocator1> & lhs, const ::capabilities::RunningCapability_<ContainerAllocator2> & rhs)
{
  return lhs.capability == rhs.capability &&
    lhs.dependent_capabilities == rhs.dependent_capabilities &&
    lhs.started_by == rhs.started_by &&
    lhs.pid == rhs.pid;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::capabilities::RunningCapability_<ContainerAllocator1> & lhs, const ::capabilities::RunningCapability_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace capabilities

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::capabilities::RunningCapability_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::capabilities::RunningCapability_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::capabilities::RunningCapability_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::capabilities::RunningCapability_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::capabilities::RunningCapability_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::capabilities::RunningCapability_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::capabilities::RunningCapability_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f97e2b23f907893008679ba2ff64fafc";
  }

  static const char* value(const ::capabilities::RunningCapability_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf97e2b23f9078930ULL;
  static const uint64_t static_value2 = 0x08679ba2ff64fafcULL;
};

template<class ContainerAllocator>
struct DataType< ::capabilities::RunningCapability_<ContainerAllocator> >
{
  static const char* value()
  {
    return "capabilities/RunningCapability";
  }

  static const char* value(const ::capabilities::RunningCapability_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::capabilities::RunningCapability_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Name and provider of this running capability\n"
"Capability capability\n"
"# Capabilities which depend on this one\n"
"Capability[] dependent_capabilities\n"
"# Message stating what started this capability\n"
"string started_by\n"
"# Process ID of the running provider\n"
"int32 pid\n"
"\n"
"================================================================================\n"
"MSG: capabilities/Capability\n"
"# Capability\n"
"string capability\n"
"# Used provider\n"
"string provider\n"
;
  }

  static const char* value(const ::capabilities::RunningCapability_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::capabilities::RunningCapability_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.capability);
      stream.next(m.dependent_capabilities);
      stream.next(m.started_by);
      stream.next(m.pid);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RunningCapability_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::capabilities::RunningCapability_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::capabilities::RunningCapability_<ContainerAllocator>& v)
  {
    s << indent << "capability: ";
    s << std::endl;
    Printer< ::capabilities::Capability_<ContainerAllocator> >::stream(s, indent + "  ", v.capability);
    s << indent << "dependent_capabilities[]" << std::endl;
    for (size_t i = 0; i < v.dependent_capabilities.size(); ++i)
    {
      s << indent << "  dependent_capabilities[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::capabilities::Capability_<ContainerAllocator> >::stream(s, indent + "    ", v.dependent_capabilities[i]);
    }
    s << indent << "started_by: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.started_by);
    s << indent << "pid: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pid);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAPABILITIES_MESSAGE_RUNNINGCAPABILITY_H
