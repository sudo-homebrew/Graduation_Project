// Generated by gencpp from file capabilities/GetRemappingsRequest.msg
// DO NOT EDIT!


#ifndef CAPABILITIES_MESSAGE_GETREMAPPINGSREQUEST_H
#define CAPABILITIES_MESSAGE_GETREMAPPINGSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace capabilities
{
template <class ContainerAllocator>
struct GetRemappingsRequest_
{
  typedef GetRemappingsRequest_<ContainerAllocator> Type;

  GetRemappingsRequest_()
    : spec()  {
    }
  GetRemappingsRequest_(const ContainerAllocator& _alloc)
    : spec(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _spec_type;
  _spec_type spec;





  typedef boost::shared_ptr< ::capabilities::GetRemappingsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::capabilities::GetRemappingsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetRemappingsRequest_

typedef ::capabilities::GetRemappingsRequest_<std::allocator<void> > GetRemappingsRequest;

typedef boost::shared_ptr< ::capabilities::GetRemappingsRequest > GetRemappingsRequestPtr;
typedef boost::shared_ptr< ::capabilities::GetRemappingsRequest const> GetRemappingsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::capabilities::GetRemappingsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::capabilities::GetRemappingsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::capabilities::GetRemappingsRequest_<ContainerAllocator1> & lhs, const ::capabilities::GetRemappingsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.spec == rhs.spec;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::capabilities::GetRemappingsRequest_<ContainerAllocator1> & lhs, const ::capabilities::GetRemappingsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace capabilities

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::capabilities::GetRemappingsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::capabilities::GetRemappingsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::capabilities::GetRemappingsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::capabilities::GetRemappingsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::capabilities::GetRemappingsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::capabilities::GetRemappingsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::capabilities::GetRemappingsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bf89a64acee91503026f8c35448cf63c";
  }

  static const char* value(const ::capabilities::GetRemappingsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbf89a64acee91503ULL;
  static const uint64_t static_value2 = 0x026f8c35448cf63cULL;
};

template<class ContainerAllocator>
struct DataType< ::capabilities::GetRemappingsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "capabilities/GetRemappingsRequest";
  }

  static const char* value(const ::capabilities::GetRemappingsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::capabilities::GetRemappingsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string spec\n"
;
  }

  static const char* value(const ::capabilities::GetRemappingsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::capabilities::GetRemappingsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.spec);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetRemappingsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::capabilities::GetRemappingsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::capabilities::GetRemappingsRequest_<ContainerAllocator>& v)
  {
    s << indent << "spec: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.spec);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAPABILITIES_MESSAGE_GETREMAPPINGSREQUEST_H
