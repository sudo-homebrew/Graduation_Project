// Generated by gencpp from file capabilities/GetCapabilitySpecResponse.msg
// DO NOT EDIT!


#ifndef CAPABILITIES_MESSAGE_GETCAPABILITYSPECRESPONSE_H
#define CAPABILITIES_MESSAGE_GETCAPABILITYSPECRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <capabilities/CapabilitySpec.h>

namespace capabilities
{
template <class ContainerAllocator>
struct GetCapabilitySpecResponse_
{
  typedef GetCapabilitySpecResponse_<ContainerAllocator> Type;

  GetCapabilitySpecResponse_()
    : capability_spec()  {
    }
  GetCapabilitySpecResponse_(const ContainerAllocator& _alloc)
    : capability_spec(_alloc)  {
  (void)_alloc;
    }



   typedef  ::capabilities::CapabilitySpec_<ContainerAllocator>  _capability_spec_type;
  _capability_spec_type capability_spec;





  typedef boost::shared_ptr< ::capabilities::GetCapabilitySpecResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::capabilities::GetCapabilitySpecResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetCapabilitySpecResponse_

typedef ::capabilities::GetCapabilitySpecResponse_<std::allocator<void> > GetCapabilitySpecResponse;

typedef boost::shared_ptr< ::capabilities::GetCapabilitySpecResponse > GetCapabilitySpecResponsePtr;
typedef boost::shared_ptr< ::capabilities::GetCapabilitySpecResponse const> GetCapabilitySpecResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::capabilities::GetCapabilitySpecResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::capabilities::GetCapabilitySpecResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::capabilities::GetCapabilitySpecResponse_<ContainerAllocator1> & lhs, const ::capabilities::GetCapabilitySpecResponse_<ContainerAllocator2> & rhs)
{
  return lhs.capability_spec == rhs.capability_spec;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::capabilities::GetCapabilitySpecResponse_<ContainerAllocator1> & lhs, const ::capabilities::GetCapabilitySpecResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace capabilities

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::capabilities::GetCapabilitySpecResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::capabilities::GetCapabilitySpecResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::capabilities::GetCapabilitySpecResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::capabilities::GetCapabilitySpecResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::capabilities::GetCapabilitySpecResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::capabilities::GetCapabilitySpecResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::capabilities::GetCapabilitySpecResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0144e716993364573443fef8a936aef2";
  }

  static const char* value(const ::capabilities::GetCapabilitySpecResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0144e71699336457ULL;
  static const uint64_t static_value2 = 0x3443fef8a936aef2ULL;
};

template<class ContainerAllocator>
struct DataType< ::capabilities::GetCapabilitySpecResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "capabilities/GetCapabilitySpecResponse";
  }

  static const char* value(const ::capabilities::GetCapabilitySpecResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::capabilities::GetCapabilitySpecResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "CapabilitySpec capability_spec\n"
"\n"
"================================================================================\n"
"MSG: capabilities/CapabilitySpec\n"
"# Package which contains this spec file\n"
"string package\n"
"\n"
"# Type of spec file, one of:\n"
"#   'capability_interface'\n"
"#   'semantic_capability_interface'\n"
"#   'capability_provider'\n"
"string type\n"
"\n"
"# Raw string content of the spec file\n"
"string content\n"
"\n"
"# The name of the default provider (pulled from ROS param's)\n"
"# (only used for capability_interface specs)\n"
"string default_provider\n"
;
  }

  static const char* value(const ::capabilities::GetCapabilitySpecResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::capabilities::GetCapabilitySpecResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.capability_spec);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetCapabilitySpecResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::capabilities::GetCapabilitySpecResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::capabilities::GetCapabilitySpecResponse_<ContainerAllocator>& v)
  {
    s << indent << "capability_spec: ";
    s << std::endl;
    Printer< ::capabilities::CapabilitySpec_<ContainerAllocator> >::stream(s, indent + "  ", v.capability_spec);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAPABILITIES_MESSAGE_GETCAPABILITYSPECRESPONSE_H
