// Generated by gencpp from file capabilities/CapabilityEvent.msg
// DO NOT EDIT!


#ifndef CAPABILITIES_MESSAGE_CAPABILITYEVENT_H
#define CAPABILITIES_MESSAGE_CAPABILITYEVENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace capabilities
{
template <class ContainerAllocator>
struct CapabilityEvent_
{
  typedef CapabilityEvent_<ContainerAllocator> Type;

  CapabilityEvent_()
    : header()
    , capability()
    , provider()
    , type()
    , pid(0)  {
    }
  CapabilityEvent_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , capability(_alloc)
    , provider(_alloc)
    , type(_alloc)
    , pid(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _capability_type;
  _capability_type capability;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _provider_type;
  _provider_type provider;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef int32_t _pid_type;
  _pid_type pid;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(LAUNCHED)
  #undef LAUNCHED
#endif
#if defined(_WIN32) && defined(STOPPED)
  #undef STOPPED
#endif
#if defined(_WIN32) && defined(TERMINATED)
  #undef TERMINATED
#endif
#if defined(_WIN32) && defined(SERVER_READY)
  #undef SERVER_READY
#endif


  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  LAUNCHED;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  STOPPED;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  TERMINATED;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  SERVER_READY;

  typedef boost::shared_ptr< ::capabilities::CapabilityEvent_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::capabilities::CapabilityEvent_<ContainerAllocator> const> ConstPtr;

}; // struct CapabilityEvent_

typedef ::capabilities::CapabilityEvent_<std::allocator<void> > CapabilityEvent;

typedef boost::shared_ptr< ::capabilities::CapabilityEvent > CapabilityEventPtr;
typedef boost::shared_ptr< ::capabilities::CapabilityEvent const> CapabilityEventConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CapabilityEvent_<ContainerAllocator>::LAUNCHED =
        
          "\"launched\""
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CapabilityEvent_<ContainerAllocator>::STOPPED =
        
          "\"stopped\""
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CapabilityEvent_<ContainerAllocator>::TERMINATED =
        
          "\"terminated\""
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      CapabilityEvent_<ContainerAllocator>::SERVER_READY =
        
          "\"server_ready\""
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::capabilities::CapabilityEvent_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::capabilities::CapabilityEvent_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::capabilities::CapabilityEvent_<ContainerAllocator1> & lhs, const ::capabilities::CapabilityEvent_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.capability == rhs.capability &&
    lhs.provider == rhs.provider &&
    lhs.type == rhs.type &&
    lhs.pid == rhs.pid;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::capabilities::CapabilityEvent_<ContainerAllocator1> & lhs, const ::capabilities::CapabilityEvent_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace capabilities

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::capabilities::CapabilityEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::capabilities::CapabilityEvent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::capabilities::CapabilityEvent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::capabilities::CapabilityEvent_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::capabilities::CapabilityEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::capabilities::CapabilityEvent_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::capabilities::CapabilityEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5a0d82ee1a8e7a5d0b058f0b20305b18";
  }

  static const char* value(const ::capabilities::CapabilityEvent_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5a0d82ee1a8e7a5dULL;
  static const uint64_t static_value2 = 0x0b058f0b20305b18ULL;
};

template<class ContainerAllocator>
struct DataType< ::capabilities::CapabilityEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "capabilities/CapabilityEvent";
  }

  static const char* value(const ::capabilities::CapabilityEvent_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::capabilities::CapabilityEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"# Capability which this event pretains to\n"
"string capability\n"
"# Capability provider which this event pretains to\n"
"string provider\n"
"\n"
"# Event types\n"
"string LAUNCHED=\"launched\"\n"
"string STOPPED=\"stopped\"\n"
"string TERMINATED=\"terminated\"\n"
"string SERVER_READY=\"server_ready\"\n"
"# Event type\n"
"string type\n"
"\n"
"# PID of the related process\n"
"int32 pid\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::capabilities::CapabilityEvent_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::capabilities::CapabilityEvent_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.capability);
      stream.next(m.provider);
      stream.next(m.type);
      stream.next(m.pid);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CapabilityEvent_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::capabilities::CapabilityEvent_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::capabilities::CapabilityEvent_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "capability: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.capability);
    s << indent << "provider: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.provider);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "pid: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pid);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAPABILITIES_MESSAGE_CAPABILITYEVENT_H
