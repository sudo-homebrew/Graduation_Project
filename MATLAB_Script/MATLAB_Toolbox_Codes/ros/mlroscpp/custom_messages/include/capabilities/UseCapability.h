// Generated by gencpp from file capabilities/UseCapability.msg
// DO NOT EDIT!


#ifndef CAPABILITIES_MESSAGE_USECAPABILITY_H
#define CAPABILITIES_MESSAGE_USECAPABILITY_H

#include <ros/service_traits.h>


#include <capabilities/UseCapabilityRequest.h>
#include <capabilities/UseCapabilityResponse.h>


namespace capabilities
{

struct UseCapability
{

typedef UseCapabilityRequest Request;
typedef UseCapabilityResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct UseCapability
} // namespace capabilities


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::capabilities::UseCapability > {
  static const char* value()
  {
    return "d12bf387dc5fcdd1fb836406b703a384";
  }

  static const char* value(const ::capabilities::UseCapability&) { return value(); }
};

template<>
struct DataType< ::capabilities::UseCapability > {
  static const char* value()
  {
    return "capabilities/UseCapability";
  }

  static const char* value(const ::capabilities::UseCapability&) { return value(); }
};


// service_traits::MD5Sum< ::capabilities::UseCapabilityRequest> should match
// service_traits::MD5Sum< ::capabilities::UseCapability >
template<>
struct MD5Sum< ::capabilities::UseCapabilityRequest>
{
  static const char* value()
  {
    return MD5Sum< ::capabilities::UseCapability >::value();
  }
  static const char* value(const ::capabilities::UseCapabilityRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::capabilities::UseCapabilityRequest> should match
// service_traits::DataType< ::capabilities::UseCapability >
template<>
struct DataType< ::capabilities::UseCapabilityRequest>
{
  static const char* value()
  {
    return DataType< ::capabilities::UseCapability >::value();
  }
  static const char* value(const ::capabilities::UseCapabilityRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::capabilities::UseCapabilityResponse> should match
// service_traits::MD5Sum< ::capabilities::UseCapability >
template<>
struct MD5Sum< ::capabilities::UseCapabilityResponse>
{
  static const char* value()
  {
    return MD5Sum< ::capabilities::UseCapability >::value();
  }
  static const char* value(const ::capabilities::UseCapabilityResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::capabilities::UseCapabilityResponse> should match
// service_traits::DataType< ::capabilities::UseCapability >
template<>
struct DataType< ::capabilities::UseCapabilityResponse>
{
  static const char* value()
  {
    return DataType< ::capabilities::UseCapability >::value();
  }
  static const char* value(const ::capabilities::UseCapabilityResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // CAPABILITIES_MESSAGE_USECAPABILITY_H
