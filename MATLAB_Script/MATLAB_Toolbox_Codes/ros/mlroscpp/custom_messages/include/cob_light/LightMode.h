// Generated by gencpp from file cob_light/LightMode.msg
// DO NOT EDIT!


#ifndef COB_LIGHT_MESSAGE_LIGHTMODE_H
#define COB_LIGHT_MESSAGE_LIGHTMODE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/ColorRGBA.h>
#include <cob_light/Sequence.h>

namespace cob_light
{
template <class ContainerAllocator>
struct LightMode_
{
  typedef LightMode_<ContainerAllocator> Type;

  LightMode_()
    : mode(0)
    , frequency(0.0)
    , timeout(0.0)
    , pulses(0)
    , priority(0)
    , colors()
    , sequences()  {
    }
  LightMode_(const ContainerAllocator& _alloc)
    : mode(0)
    , frequency(0.0)
    , timeout(0.0)
    , pulses(0)
    , priority(0)
    , colors(_alloc)
    , sequences(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _mode_type;
  _mode_type mode;

   typedef float _frequency_type;
  _frequency_type frequency;

   typedef float _timeout_type;
  _timeout_type timeout;

   typedef int32_t _pulses_type;
  _pulses_type pulses;

   typedef int8_t _priority_type;
  _priority_type priority;

   typedef std::vector< ::std_msgs::ColorRGBA_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::ColorRGBA_<ContainerAllocator> >::other >  _colors_type;
  _colors_type colors;

   typedef std::vector< ::cob_light::Sequence_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::cob_light::Sequence_<ContainerAllocator> >::other >  _sequences_type;
  _sequences_type sequences;





  typedef boost::shared_ptr< ::cob_light::LightMode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_light::LightMode_<ContainerAllocator> const> ConstPtr;

}; // struct LightMode_

typedef ::cob_light::LightMode_<std::allocator<void> > LightMode;

typedef boost::shared_ptr< ::cob_light::LightMode > LightModePtr;
typedef boost::shared_ptr< ::cob_light::LightMode const> LightModeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cob_light::LightMode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cob_light::LightMode_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cob_light::LightMode_<ContainerAllocator1> & lhs, const ::cob_light::LightMode_<ContainerAllocator2> & rhs)
{
  return lhs.mode == rhs.mode &&
    lhs.frequency == rhs.frequency &&
    lhs.timeout == rhs.timeout &&
    lhs.pulses == rhs.pulses &&
    lhs.priority == rhs.priority &&
    lhs.colors == rhs.colors &&
    lhs.sequences == rhs.sequences;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cob_light::LightMode_<ContainerAllocator1> & lhs, const ::cob_light::LightMode_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cob_light

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cob_light::LightMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cob_light::LightMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cob_light::LightMode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cob_light::LightMode_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_light::LightMode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_light::LightMode_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cob_light::LightMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7aecb45b0da2ee8d387f2bec4ee2faf9";
  }

  static const char* value(const ::cob_light::LightMode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7aecb45b0da2ee8dULL;
  static const uint64_t static_value2 = 0x387f2bec4ee2faf9ULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_light::LightMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cob_light/LightMode";
  }

  static const char* value(const ::cob_light::LightMode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cob_light::LightMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 mode                         # mode to switch on\n"
"\n"
"float32                frequency   # in Hz\n"
"float32                timeout     # in s, requested mode will be executed for max timeout s.\n"
"                                   # default is 0 and means no timeout.\n"
"int32                  pulses      # specifies the amount of pulses which will be executed.\n"
"                                   # eg: mode = flash, pulses = 2. Means the light will flash two times\n"
"int8                   priority    # priority [-20,20] default = 0. Modes with same or higher priorities will\n"
"                                   # be executed.\n"
"std_msgs/ColorRGBA[]   colors      # array of colors.\n"
"                                   # size > 1: each color represent one led (size should match the amount of leds)\n"
"                                   # size = 1: one color for all leds or color for specific mode\n"
"                                   # size = 0: undefined\n"
"cob_light/Sequence[]   sequences   # an array of sequence definitions, used only if mode is set to SEQ\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/ColorRGBA\n"
"float32 r\n"
"float32 g\n"
"float32 b\n"
"float32 a\n"
"\n"
"================================================================================\n"
"MSG: cob_light/Sequence\n"
"std_msgs/ColorRGBA   color       #sequence color\n"
"float32              hold_time   #time how long the color should be hold [s]\n"
"float32              cross_time  #time how long it take to fade to this color [s]\n"
;
  }

  static const char* value(const ::cob_light::LightMode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cob_light::LightMode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
      stream.next(m.frequency);
      stream.next(m.timeout);
      stream.next(m.pulses);
      stream.next(m.priority);
      stream.next(m.colors);
      stream.next(m.sequences);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LightMode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cob_light::LightMode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cob_light::LightMode_<ContainerAllocator>& v)
  {
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "frequency: ";
    Printer<float>::stream(s, indent + "  ", v.frequency);
    s << indent << "timeout: ";
    Printer<float>::stream(s, indent + "  ", v.timeout);
    s << indent << "pulses: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pulses);
    s << indent << "priority: ";
    Printer<int8_t>::stream(s, indent + "  ", v.priority);
    s << indent << "colors[]" << std::endl;
    for (size_t i = 0; i < v.colors.size(); ++i)
    {
      s << indent << "  colors[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::ColorRGBA_<ContainerAllocator> >::stream(s, indent + "    ", v.colors[i]);
    }
    s << indent << "sequences[]" << std::endl;
    for (size_t i = 0; i < v.sequences.size(); ++i)
    {
      s << indent << "  sequences[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::cob_light::Sequence_<ContainerAllocator> >::stream(s, indent + "    ", v.sequences[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // COB_LIGHT_MESSAGE_LIGHTMODE_H
