// Generated by gencpp from file cob_light/Sequence.msg
// DO NOT EDIT!


#ifndef COB_LIGHT_MESSAGE_SEQUENCE_H
#define COB_LIGHT_MESSAGE_SEQUENCE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/ColorRGBA.h>

namespace cob_light
{
template <class ContainerAllocator>
struct Sequence_
{
  typedef Sequence_<ContainerAllocator> Type;

  Sequence_()
    : color()
    , hold_time(0.0)
    , cross_time(0.0)  {
    }
  Sequence_(const ContainerAllocator& _alloc)
    : color(_alloc)
    , hold_time(0.0)
    , cross_time(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::ColorRGBA_<ContainerAllocator>  _color_type;
  _color_type color;

   typedef float _hold_time_type;
  _hold_time_type hold_time;

   typedef float _cross_time_type;
  _cross_time_type cross_time;





  typedef boost::shared_ptr< ::cob_light::Sequence_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_light::Sequence_<ContainerAllocator> const> ConstPtr;

}; // struct Sequence_

typedef ::cob_light::Sequence_<std::allocator<void> > Sequence;

typedef boost::shared_ptr< ::cob_light::Sequence > SequencePtr;
typedef boost::shared_ptr< ::cob_light::Sequence const> SequenceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cob_light::Sequence_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cob_light::Sequence_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cob_light::Sequence_<ContainerAllocator1> & lhs, const ::cob_light::Sequence_<ContainerAllocator2> & rhs)
{
  return lhs.color == rhs.color &&
    lhs.hold_time == rhs.hold_time &&
    lhs.cross_time == rhs.cross_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cob_light::Sequence_<ContainerAllocator1> & lhs, const ::cob_light::Sequence_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cob_light

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cob_light::Sequence_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cob_light::Sequence_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cob_light::Sequence_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cob_light::Sequence_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_light::Sequence_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_light::Sequence_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cob_light::Sequence_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7093bc102ba3b6d78256c69c48c6a43b";
  }

  static const char* value(const ::cob_light::Sequence_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7093bc102ba3b6d7ULL;
  static const uint64_t static_value2 = 0x8256c69c48c6a43bULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_light::Sequence_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cob_light/Sequence";
  }

  static const char* value(const ::cob_light::Sequence_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cob_light::Sequence_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/ColorRGBA   color       #sequence color\n"
"float32              hold_time   #time how long the color should be hold [s]\n"
"float32              cross_time  #time how long it take to fade to this color [s]\n"
"================================================================================\n"
"MSG: std_msgs/ColorRGBA\n"
"float32 r\n"
"float32 g\n"
"float32 b\n"
"float32 a\n"
;
  }

  static const char* value(const ::cob_light::Sequence_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cob_light::Sequence_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.color);
      stream.next(m.hold_time);
      stream.next(m.cross_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Sequence_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cob_light::Sequence_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cob_light::Sequence_<ContainerAllocator>& v)
  {
    s << indent << "color: ";
    s << std::endl;
    Printer< ::std_msgs::ColorRGBA_<ContainerAllocator> >::stream(s, indent + "  ", v.color);
    s << indent << "hold_time: ";
    Printer<float>::stream(s, indent + "  ", v.hold_time);
    s << indent << "cross_time: ";
    Printer<float>::stream(s, indent + "  ", v.cross_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COB_LIGHT_MESSAGE_SEQUENCE_H
