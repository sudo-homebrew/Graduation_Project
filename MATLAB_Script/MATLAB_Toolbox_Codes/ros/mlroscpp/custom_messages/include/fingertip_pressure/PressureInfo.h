// Generated by gencpp from file fingertip_pressure/PressureInfo.msg
// DO NOT EDIT!


#ifndef FINGERTIP_PRESSURE_MESSAGE_PRESSUREINFO_H
#define FINGERTIP_PRESSURE_MESSAGE_PRESSUREINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <fingertip_pressure/PressureInfoElement.h>

namespace fingertip_pressure
{
template <class ContainerAllocator>
struct PressureInfo_
{
  typedef PressureInfo_<ContainerAllocator> Type;

  PressureInfo_()
    : sensor()  {
    }
  PressureInfo_(const ContainerAllocator& _alloc)
    : sensor(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::fingertip_pressure::PressureInfoElement_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::fingertip_pressure::PressureInfoElement_<ContainerAllocator> >::other >  _sensor_type;
  _sensor_type sensor;





  typedef boost::shared_ptr< ::fingertip_pressure::PressureInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fingertip_pressure::PressureInfo_<ContainerAllocator> const> ConstPtr;

}; // struct PressureInfo_

typedef ::fingertip_pressure::PressureInfo_<std::allocator<void> > PressureInfo;

typedef boost::shared_ptr< ::fingertip_pressure::PressureInfo > PressureInfoPtr;
typedef boost::shared_ptr< ::fingertip_pressure::PressureInfo const> PressureInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fingertip_pressure::PressureInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fingertip_pressure::PressureInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace fingertip_pressure

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/geometry_msgs/msg'], 'fingertip_pressure': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/fingertip_pressure/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::fingertip_pressure::PressureInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fingertip_pressure::PressureInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fingertip_pressure::PressureInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fingertip_pressure::PressureInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fingertip_pressure::PressureInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fingertip_pressure::PressureInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fingertip_pressure::PressureInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a11fc5bae3534aa023741e378743af5b";
  }

  static const char* value(const ::fingertip_pressure::PressureInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa11fc5bae3534aa0ULL;
  static const uint64_t static_value2 = 0x23741e378743af5bULL;
};

template<class ContainerAllocator>
struct DataType< ::fingertip_pressure::PressureInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fingertip_pressure/PressureInfo";
  }

  static const char* value(const ::fingertip_pressure::PressureInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fingertip_pressure::PressureInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "PressureInfoElement[] sensor # List of pressure sensors for which information is being published\n"
"\n"
"================================================================================\n"
"MSG: fingertip_pressure/PressureInfoElement\n"
"string frame_id # Frame ID\n"
"geometry_msgs/Vector3[] center # Corner of sensor (meters)\n"
"geometry_msgs/Vector3[] halfside1 # Half of one edge of sensor (meters)\n"
"geometry_msgs/Vector3[] halfside2 # Half of perpendicular edge of sensor (meters)\n"
"# Sensor corners are at center+-halfside1+-halfside2\n"
"# Cross product of halfside1 and halfside2 points out\n"
"float64[] force_per_unit # Multiply this by the raw sensor value to get a force\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::fingertip_pressure::PressureInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fingertip_pressure::PressureInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sensor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PressureInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fingertip_pressure::PressureInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fingertip_pressure::PressureInfo_<ContainerAllocator>& v)
  {
    s << indent << "sensor[]" << std::endl;
    for (size_t i = 0; i < v.sensor.size(); ++i)
    {
      s << indent << "  sensor[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::fingertip_pressure::PressureInfoElement_<ContainerAllocator> >::stream(s, indent + "    ", v.sensor[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FINGERTIP_PRESSURE_MESSAGE_PRESSUREINFO_H
