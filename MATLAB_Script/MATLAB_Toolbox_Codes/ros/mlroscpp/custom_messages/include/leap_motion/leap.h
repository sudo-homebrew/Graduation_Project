// Generated by gencpp from file leap_motion/leap.msg
// DO NOT EDIT!


#ifndef LEAP_MOTION_MESSAGE_LEAP_H
#define LEAP_MOTION_MESSAGE_LEAP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace leap_motion
{
template <class ContainerAllocator>
struct leap_
{
  typedef leap_<ContainerAllocator> Type;

  leap_()
    : header()
    , hand_direction()
    , hand_normal()
    , hand_palm_pos()
    , hand_pitch(0.0)
    , hand_roll(0.0)
    , hand_yaw(0.0)  {
      hand_direction.assign(0.0);

      hand_normal.assign(0.0);

      hand_palm_pos.assign(0.0);
  }
  leap_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , hand_direction()
    , hand_normal()
    , hand_palm_pos()
    , hand_pitch(0.0)
    , hand_roll(0.0)
    , hand_yaw(0.0)  {
  (void)_alloc;
      hand_direction.assign(0.0);

      hand_normal.assign(0.0);

      hand_palm_pos.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef boost::array<double, 3>  _hand_direction_type;
  _hand_direction_type hand_direction;

   typedef boost::array<double, 3>  _hand_normal_type;
  _hand_normal_type hand_normal;

   typedef boost::array<double, 3>  _hand_palm_pos_type;
  _hand_palm_pos_type hand_palm_pos;

   typedef double _hand_pitch_type;
  _hand_pitch_type hand_pitch;

   typedef double _hand_roll_type;
  _hand_roll_type hand_roll;

   typedef double _hand_yaw_type;
  _hand_yaw_type hand_yaw;





  typedef boost::shared_ptr< ::leap_motion::leap_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::leap_motion::leap_<ContainerAllocator> const> ConstPtr;

}; // struct leap_

typedef ::leap_motion::leap_<std::allocator<void> > leap;

typedef boost::shared_ptr< ::leap_motion::leap > leapPtr;
typedef boost::shared_ptr< ::leap_motion::leap const> leapConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::leap_motion::leap_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::leap_motion::leap_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::leap_motion::leap_<ContainerAllocator1> & lhs, const ::leap_motion::leap_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.hand_direction == rhs.hand_direction &&
    lhs.hand_normal == rhs.hand_normal &&
    lhs.hand_palm_pos == rhs.hand_palm_pos &&
    lhs.hand_pitch == rhs.hand_pitch &&
    lhs.hand_roll == rhs.hand_roll &&
    lhs.hand_yaw == rhs.hand_yaw;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::leap_motion::leap_<ContainerAllocator1> & lhs, const ::leap_motion::leap_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace leap_motion

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::leap_motion::leap_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::leap_motion::leap_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::leap_motion::leap_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::leap_motion::leap_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::leap_motion::leap_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::leap_motion::leap_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::leap_motion::leap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3e9a0dc7fd1a98f1d7489e9011c78807";
  }

  static const char* value(const ::leap_motion::leap_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3e9a0dc7fd1a98f1ULL;
  static const uint64_t static_value2 = 0xd7489e9011c78807ULL;
};

template<class ContainerAllocator>
struct DataType< ::leap_motion::leap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "leap_motion/leap";
  }

  static const char* value(const ::leap_motion::leap_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::leap_motion::leap_<ContainerAllocator> >
{
  static const char* value()
  {
    return "##################################################\n"
"## Deprecated and will be removed in the future ##\n"
"##################################################\n"
"\n"
"Header header\n"
"\n"
"float64[3] hand_direction\n"
"float64[3] hand_normal\n"
"float64[3] hand_palm_pos\n"
"float64 hand_pitch\n"
"float64 hand_roll\n"
"float64 hand_yaw\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::leap_motion::leap_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::leap_motion::leap_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.hand_direction);
      stream.next(m.hand_normal);
      stream.next(m.hand_palm_pos);
      stream.next(m.hand_pitch);
      stream.next(m.hand_roll);
      stream.next(m.hand_yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct leap_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::leap_motion::leap_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::leap_motion::leap_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "hand_direction[]" << std::endl;
    for (size_t i = 0; i < v.hand_direction.size(); ++i)
    {
      s << indent << "  hand_direction[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.hand_direction[i]);
    }
    s << indent << "hand_normal[]" << std::endl;
    for (size_t i = 0; i < v.hand_normal.size(); ++i)
    {
      s << indent << "  hand_normal[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.hand_normal[i]);
    }
    s << indent << "hand_palm_pos[]" << std::endl;
    for (size_t i = 0; i < v.hand_palm_pos.size(); ++i)
    {
      s << indent << "  hand_palm_pos[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.hand_palm_pos[i]);
    }
    s << indent << "hand_pitch: ";
    Printer<double>::stream(s, indent + "  ", v.hand_pitch);
    s << indent << "hand_roll: ";
    Printer<double>::stream(s, indent + "  ", v.hand_roll);
    s << indent << "hand_yaw: ";
    Printer<double>::stream(s, indent + "  ", v.hand_yaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LEAP_MOTION_MESSAGE_LEAP_H
