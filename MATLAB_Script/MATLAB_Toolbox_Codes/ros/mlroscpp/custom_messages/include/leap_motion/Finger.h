// Generated by gencpp from file leap_motion/Finger.msg
// DO NOT EDIT!


#ifndef LEAP_MOTION_MESSAGE_FINGER_H
#define LEAP_MOTION_MESSAGE_FINGER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <leap_motion/Bone.h>

namespace leap_motion
{
template <class ContainerAllocator>
struct Finger_
{
  typedef Finger_<ContainerAllocator> Type;

  Finger_()
    : header()
    , lmc_finger_id(0)
    , type(0)
    , length(0.0)
    , width(0.0)
    , to_string()
    , bone_list()  {
    }
  Finger_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , lmc_finger_id(0)
    , type(0)
    , length(0.0)
    , width(0.0)
    , to_string(_alloc)
    , bone_list(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _lmc_finger_id_type;
  _lmc_finger_id_type lmc_finger_id;

   typedef uint8_t _type_type;
  _type_type type;

   typedef float _length_type;
  _length_type length;

   typedef float _width_type;
  _width_type width;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _to_string_type;
  _to_string_type to_string;

   typedef std::vector< ::leap_motion::Bone_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::leap_motion::Bone_<ContainerAllocator> >::other >  _bone_list_type;
  _bone_list_type bone_list;





  typedef boost::shared_ptr< ::leap_motion::Finger_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::leap_motion::Finger_<ContainerAllocator> const> ConstPtr;

}; // struct Finger_

typedef ::leap_motion::Finger_<std::allocator<void> > Finger;

typedef boost::shared_ptr< ::leap_motion::Finger > FingerPtr;
typedef boost::shared_ptr< ::leap_motion::Finger const> FingerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::leap_motion::Finger_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::leap_motion::Finger_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::leap_motion::Finger_<ContainerAllocator1> & lhs, const ::leap_motion::Finger_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.lmc_finger_id == rhs.lmc_finger_id &&
    lhs.type == rhs.type &&
    lhs.length == rhs.length &&
    lhs.width == rhs.width &&
    lhs.to_string == rhs.to_string &&
    lhs.bone_list == rhs.bone_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::leap_motion::Finger_<ContainerAllocator1> & lhs, const ::leap_motion::Finger_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace leap_motion

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::leap_motion::Finger_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::leap_motion::Finger_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::leap_motion::Finger_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::leap_motion::Finger_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::leap_motion::Finger_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::leap_motion::Finger_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::leap_motion::Finger_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c62c3b47717473d8242b45f476fc55c7";
  }

  static const char* value(const ::leap_motion::Finger_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc62c3b47717473d8ULL;
  static const uint64_t static_value2 = 0x242b45f476fc55c7ULL;
};

template<class ContainerAllocator>
struct DataType< ::leap_motion::Finger_<ContainerAllocator> >
{
  static const char* value()
  {
    return "leap_motion/Finger";
  }

  static const char* value(const ::leap_motion::Finger_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::leap_motion::Finger_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"# A unique id given to this finger\n"
"int32 lmc_finger_id\n"
"\n"
"# The name of this finger. \n"
"uint8 type\n"
"\n"
"# The estimated length of the finger in meters. \n"
"float32 length\n"
"\n"
"# The estimated width of the finger in meters.\n"
"float32 width\n"
"\n"
"# A string containing a brief, human readable description of the Finger object. \n"
"string to_string\n"
"\n"
"# List of bones associated with this finger\n"
"Bone[] bone_list\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: leap_motion/Bone\n"
"std_msgs/Header header\n"
"\n"
"# The name of this bone. \n"
"uint8 type\n"
"\n"
"# The estimated length of the bone in meters.\n"
"float32 length\n"
"\n"
"# The estimated with of the bone in meters.\n"
"float32 width\n"
"\n"
"# A string containing a brief, human readable description of the Bone object. \n"
"string to_string\n"
"\n"
"# The base of the bone, closest to the wrist. \n"
"geometry_msgs/Pose bone_start\n"
"\n"
"# The end of the bone, closest to the finger tip. \n"
"geometry_msgs/Pose bone_end\n"
"\n"
"# The midpoint of the bone. \n"
"float32[] center\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::leap_motion::Finger_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::leap_motion::Finger_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.lmc_finger_id);
      stream.next(m.type);
      stream.next(m.length);
      stream.next(m.width);
      stream.next(m.to_string);
      stream.next(m.bone_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Finger_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::leap_motion::Finger_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::leap_motion::Finger_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "lmc_finger_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lmc_finger_id);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "length: ";
    Printer<float>::stream(s, indent + "  ", v.length);
    s << indent << "width: ";
    Printer<float>::stream(s, indent + "  ", v.width);
    s << indent << "to_string: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.to_string);
    s << indent << "bone_list[]" << std::endl;
    for (size_t i = 0; i < v.bone_list.size(); ++i)
    {
      s << indent << "  bone_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::leap_motion::Bone_<ContainerAllocator> >::stream(s, indent + "    ", v.bone_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LEAP_MOTION_MESSAGE_FINGER_H
