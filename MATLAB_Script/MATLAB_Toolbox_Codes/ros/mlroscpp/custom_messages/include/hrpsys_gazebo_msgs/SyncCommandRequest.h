// Generated by gencpp from file hrpsys_gazebo_msgs/SyncCommandRequest.msg
// DO NOT EDIT!


#ifndef HRPSYS_GAZEBO_MSGS_MESSAGE_SYNCCOMMANDREQUEST_H
#define HRPSYS_GAZEBO_MSGS_MESSAGE_SYNCCOMMANDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <hrpsys_gazebo_msgs/JointCommand.h>

namespace hrpsys_gazebo_msgs
{
template <class ContainerAllocator>
struct SyncCommandRequest_
{
  typedef SyncCommandRequest_<ContainerAllocator> Type;

  SyncCommandRequest_()
    : joint_command()  {
    }
  SyncCommandRequest_(const ContainerAllocator& _alloc)
    : joint_command(_alloc)  {
  (void)_alloc;
    }



   typedef  ::hrpsys_gazebo_msgs::JointCommand_<ContainerAllocator>  _joint_command_type;
  _joint_command_type joint_command;





  typedef boost::shared_ptr< ::hrpsys_gazebo_msgs::SyncCommandRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hrpsys_gazebo_msgs::SyncCommandRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SyncCommandRequest_

typedef ::hrpsys_gazebo_msgs::SyncCommandRequest_<std::allocator<void> > SyncCommandRequest;

typedef boost::shared_ptr< ::hrpsys_gazebo_msgs::SyncCommandRequest > SyncCommandRequestPtr;
typedef boost::shared_ptr< ::hrpsys_gazebo_msgs::SyncCommandRequest const> SyncCommandRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hrpsys_gazebo_msgs::SyncCommandRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hrpsys_gazebo_msgs::SyncCommandRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hrpsys_gazebo_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1339814/matlab/sys/ros1/glnxa64/ros1/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1339814/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/pmurali.Brobot.j1339814/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'hrpsys_gazebo_msgs': ['/mathworks/home/pmurali/Documents/H/matlab_msg_gen_ros1/glnxa64/src/hrpsys_gazebo_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hrpsys_gazebo_msgs::SyncCommandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hrpsys_gazebo_msgs::SyncCommandRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hrpsys_gazebo_msgs::SyncCommandRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hrpsys_gazebo_msgs::SyncCommandRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hrpsys_gazebo_msgs::SyncCommandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hrpsys_gazebo_msgs::SyncCommandRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hrpsys_gazebo_msgs::SyncCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5d5a4324d44110530d7e01a9925c5c0f";
  }

  static const char* value(const ::hrpsys_gazebo_msgs::SyncCommandRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5d5a4324d4411053ULL;
  static const uint64_t static_value2 = 0x0d7e01a9925c5c0fULL;
};

template<class ContainerAllocator>
struct DataType< ::hrpsys_gazebo_msgs::SyncCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hrpsys_gazebo_msgs/SyncCommandRequest";
  }

  static const char* value(const ::hrpsys_gazebo_msgs::SyncCommandRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hrpsys_gazebo_msgs::SyncCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "JointCommand joint_command\n"
"\n"
"================================================================================\n"
"MSG: hrpsys_gazebo_msgs/JointCommand\n"
"# Joint Command Message\n"
"# This structure contains the gains to be applied to a joint.\n"
"# The controller is a PID with feedforward desired torque:\n"
"#\n"
"# This message has been carefully constructed to be less\n"
"# than 1500 in size when serialized, to accommodate transfer\n"
"# UDP.\n"
"#\n"
"#   k_effort * (\n"
"#     kp_position     * ( position - measured_position )       +\n"
"#     ki_position     * 1/s * ( position - measured_position ) +\n"
"#     kd_position     * s * ( position - measured_position ) +\n"
"#     kp_velocity     * ( velocity - measured_velocity )     +\n"
"#     effort ) +\n"
"#   (1 - k_effort)  * effort_bdi\n"
"#\n"
"#  Where effort_bdi comes from AtlasSimInterface Dynamics Behavior Library.\n"
"#\n"
"Header header\n"
"\n"
"## parameter for effort feedback control\n"
"float64[] position\n"
"float64[] velocity\n"
"float64[] effort\n"
"\n"
"float32[] kp_position\n"
"float32[] ki_position\n"
"float32[] kd_position\n"
"float32[] kp_velocity\n"
"\n"
"float32[] i_effort_min\n"
"float32[] i_effort_max\n"
"\n"
"#\n"
"# joint_velocity =\n"
"#  kpv_position * (position - measured_position)\n"
"#  kpv_velocity * (velocity - measured_velocity)\n"
"#\n"
"## parameter for velocity feedback control\n"
"float32[] kpv_position\n"
"#float32[] kiv_position ??\n"
"#float32[] kdv_position ??\n"
"float32[] kpv_velocity\n"
"\n"
"uint8 desired_controller_period_ms # max allowed controller update period in milli-seconds simulation time for controller synchronization.  See SynchronizationStatistics.msg for tracking synchronization status.\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::hrpsys_gazebo_msgs::SyncCommandRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hrpsys_gazebo_msgs::SyncCommandRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_command);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SyncCommandRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hrpsys_gazebo_msgs::SyncCommandRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hrpsys_gazebo_msgs::SyncCommandRequest_<ContainerAllocator>& v)
  {
    s << indent << "joint_command: ";
    s << std::endl;
    Printer< ::hrpsys_gazebo_msgs::JointCommand_<ContainerAllocator> >::stream(s, indent + "  ", v.joint_command);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HRPSYS_GAZEBO_MSGS_MESSAGE_SYNCCOMMANDREQUEST_H
