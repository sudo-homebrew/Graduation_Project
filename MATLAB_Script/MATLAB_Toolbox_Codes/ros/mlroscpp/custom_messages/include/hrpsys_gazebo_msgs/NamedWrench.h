// Generated by gencpp from file hrpsys_gazebo_msgs/NamedWrench.msg
// DO NOT EDIT!


#ifndef HRPSYS_GAZEBO_MSGS_MESSAGE_NAMEDWRENCH_H
#define HRPSYS_GAZEBO_MSGS_MESSAGE_NAMEDWRENCH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace hrpsys_gazebo_msgs
{
template <class ContainerAllocator>
struct NamedWrench_
{
  typedef NamedWrench_<ContainerAllocator> Type;

  NamedWrench_()
    : name()
    , frame_id()
    , force()
    , torque()  {
    }
  NamedWrench_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , frame_id(_alloc)
    , force(_alloc)
    , torque(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _frame_id_type;
  _frame_id_type frame_id;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _force_type;
  _force_type force;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _torque_type;
  _torque_type torque;





  typedef boost::shared_ptr< ::hrpsys_gazebo_msgs::NamedWrench_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hrpsys_gazebo_msgs::NamedWrench_<ContainerAllocator> const> ConstPtr;

}; // struct NamedWrench_

typedef ::hrpsys_gazebo_msgs::NamedWrench_<std::allocator<void> > NamedWrench;

typedef boost::shared_ptr< ::hrpsys_gazebo_msgs::NamedWrench > NamedWrenchPtr;
typedef boost::shared_ptr< ::hrpsys_gazebo_msgs::NamedWrench const> NamedWrenchConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hrpsys_gazebo_msgs::NamedWrench_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hrpsys_gazebo_msgs::NamedWrench_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hrpsys_gazebo_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/geometry_msgs/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'hrpsys_gazebo_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/hrpsys_gazebo_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hrpsys_gazebo_msgs::NamedWrench_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hrpsys_gazebo_msgs::NamedWrench_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hrpsys_gazebo_msgs::NamedWrench_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hrpsys_gazebo_msgs::NamedWrench_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hrpsys_gazebo_msgs::NamedWrench_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hrpsys_gazebo_msgs::NamedWrench_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hrpsys_gazebo_msgs::NamedWrench_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5d4ac116ab4286bc5cf754c9a0493f4a";
  }

  static const char* value(const ::hrpsys_gazebo_msgs::NamedWrench_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5d4ac116ab4286bcULL;
  static const uint64_t static_value2 = 0x5cf754c9a0493f4aULL;
};

template<class ContainerAllocator>
struct DataType< ::hrpsys_gazebo_msgs::NamedWrench_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hrpsys_gazebo_msgs/NamedWrench";
  }

  static const char* value(const ::hrpsys_gazebo_msgs::NamedWrench_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hrpsys_gazebo_msgs::NamedWrench_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"string frame_id\n"
"geometry_msgs/Vector3  force\n"
"geometry_msgs/Vector3  torque\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::hrpsys_gazebo_msgs::NamedWrench_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hrpsys_gazebo_msgs::NamedWrench_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.frame_id);
      stream.next(m.force);
      stream.next(m.torque);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NamedWrench_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hrpsys_gazebo_msgs::NamedWrench_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hrpsys_gazebo_msgs::NamedWrench_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.frame_id);
    s << indent << "force: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.force);
    s << indent << "torque: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.torque);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HRPSYS_GAZEBO_MSGS_MESSAGE_NAMEDWRENCH_H
