// Generated by gencpp from file calibration_msgs/DenseLaserPoint.msg
// DO NOT EDIT!


#ifndef CALIBRATION_MSGS_MESSAGE_DENSELASERPOINT_H
#define CALIBRATION_MSGS_MESSAGE_DENSELASERPOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace calibration_msgs
{
template <class ContainerAllocator>
struct DenseLaserPoint_
{
  typedef DenseLaserPoint_<ContainerAllocator> Type;

  DenseLaserPoint_()
    : scan(0.0)
    , ray(0.0)  {
    }
  DenseLaserPoint_(const ContainerAllocator& _alloc)
    : scan(0.0)
    , ray(0.0)  {
  (void)_alloc;
    }



   typedef double _scan_type;
  _scan_type scan;

   typedef double _ray_type;
  _ray_type ray;





  typedef boost::shared_ptr< ::calibration_msgs::DenseLaserPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::calibration_msgs::DenseLaserPoint_<ContainerAllocator> const> ConstPtr;

}; // struct DenseLaserPoint_

typedef ::calibration_msgs::DenseLaserPoint_<std::allocator<void> > DenseLaserPoint;

typedef boost::shared_ptr< ::calibration_msgs::DenseLaserPoint > DenseLaserPointPtr;
typedef boost::shared_ptr< ::calibration_msgs::DenseLaserPoint const> DenseLaserPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::calibration_msgs::DenseLaserPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::calibration_msgs::DenseLaserPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace calibration_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/mathworks/home/pmurali/Documents/rosjava_messages/GEN-4-6/14/matlab_msg_gen_ros1/glnxa64/src/sensor_msgs/msg'], 'geometry_msgs': ['/mathworks/home/pmurali/Documents/rosjava_messages/GEN-4-6/14/matlab_msg_gen_ros1/glnxa64/src/geometry_msgs/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1352567/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/pmurali.Brobot.j1352567/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'calibration_msgs': ['/mathworks/home/pmurali/Documents/rosjava_messages/GEN-4-6/14/matlab_msg_gen_ros1/glnxa64/src/calibration_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::calibration_msgs::DenseLaserPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::calibration_msgs::DenseLaserPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::calibration_msgs::DenseLaserPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::calibration_msgs::DenseLaserPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::calibration_msgs::DenseLaserPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::calibration_msgs::DenseLaserPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::calibration_msgs::DenseLaserPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "12821677bc3daf8fabbb485d5b0cc027";
  }

  static const char* value(const ::calibration_msgs::DenseLaserPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x12821677bc3daf8fULL;
  static const uint64_t static_value2 = 0xabbb485d5b0cc027ULL;
};

template<class ContainerAllocator>
struct DataType< ::calibration_msgs::DenseLaserPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "calibration_msgs/DenseLaserPoint";
  }

  static const char* value(const ::calibration_msgs::DenseLaserPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::calibration_msgs::DenseLaserPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Stores the xy subpixel location of a point in a DenseLaserSnapshot\n"
"float64 scan  # Which scan line we detected the feature\n"
"float64 ray   # Which ray in the specified scan we detected the feature\n"
;
  }

  static const char* value(const ::calibration_msgs::DenseLaserPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::calibration_msgs::DenseLaserPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.scan);
      stream.next(m.ray);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DenseLaserPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::calibration_msgs::DenseLaserPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::calibration_msgs::DenseLaserPoint_<ContainerAllocator>& v)
  {
    s << indent << "scan: ";
    Printer<double>::stream(s, indent + "  ", v.scan);
    s << indent << "ray: ";
    Printer<double>::stream(s, indent + "  ", v.ray);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CALIBRATION_MSGS_MESSAGE_DENSELASERPOINT_H
