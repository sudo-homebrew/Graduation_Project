// Generated by gencpp from file calibration_msgs/RobotMeasurement.msg
// DO NOT EDIT!


#ifndef CALIBRATION_MSGS_MESSAGE_ROBOTMEASUREMENT_H
#define CALIBRATION_MSGS_MESSAGE_ROBOTMEASUREMENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <calibration_msgs/CameraMeasurement.h>
#include <calibration_msgs/LaserMeasurement.h>
#include <calibration_msgs/ChainMeasurement.h>

namespace calibration_msgs
{
template <class ContainerAllocator>
struct RobotMeasurement_
{
  typedef RobotMeasurement_<ContainerAllocator> Type;

  RobotMeasurement_()
    : sample_id()
    , target_id()
    , chain_id()
    , M_cam()
    , M_laser()
    , M_chain()  {
    }
  RobotMeasurement_(const ContainerAllocator& _alloc)
    : sample_id(_alloc)
    , target_id(_alloc)
    , chain_id(_alloc)
    , M_cam(_alloc)
    , M_laser(_alloc)
    , M_chain(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _sample_id_type;
  _sample_id_type sample_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _target_id_type;
  _target_id_type target_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _chain_id_type;
  _chain_id_type chain_id;

   typedef std::vector< ::calibration_msgs::CameraMeasurement_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::calibration_msgs::CameraMeasurement_<ContainerAllocator> >::other >  _M_cam_type;
  _M_cam_type M_cam;

   typedef std::vector< ::calibration_msgs::LaserMeasurement_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::calibration_msgs::LaserMeasurement_<ContainerAllocator> >::other >  _M_laser_type;
  _M_laser_type M_laser;

   typedef std::vector< ::calibration_msgs::ChainMeasurement_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::calibration_msgs::ChainMeasurement_<ContainerAllocator> >::other >  _M_chain_type;
  _M_chain_type M_chain;





  typedef boost::shared_ptr< ::calibration_msgs::RobotMeasurement_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::calibration_msgs::RobotMeasurement_<ContainerAllocator> const> ConstPtr;

}; // struct RobotMeasurement_

typedef ::calibration_msgs::RobotMeasurement_<std::allocator<void> > RobotMeasurement;

typedef boost::shared_ptr< ::calibration_msgs::RobotMeasurement > RobotMeasurementPtr;
typedef boost::shared_ptr< ::calibration_msgs::RobotMeasurement const> RobotMeasurementConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::calibration_msgs::RobotMeasurement_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::calibration_msgs::RobotMeasurement_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace calibration_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/mathworks/devel/sbs/31/avaranas.Brobot.j1368574.april23/matlab/sys/ros1/glnxa64/ros1/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/mathworks/devel/sbs/31/avaranas.Brobot.j1368574.april23/matlab/sys/ros1/glnxa64/ros1/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/mathworks/devel/sbs/31/avaranas.Brobot.j1368574.april23/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/avaranas.Brobot.j1368574.april23/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'calibration_msgs': ['/mathworks/devel/sbs/31/avaranas.Brobot.j1368574.april23/matlab/toolbox/ros/mlroscpp/custom_messages/ROS Packages/pack_1/matlab_msg_gen_ros1/glnxa64/src/calibration_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::calibration_msgs::RobotMeasurement_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::calibration_msgs::RobotMeasurement_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::calibration_msgs::RobotMeasurement_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::calibration_msgs::RobotMeasurement_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::calibration_msgs::RobotMeasurement_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::calibration_msgs::RobotMeasurement_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::calibration_msgs::RobotMeasurement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fe22486c078efbf7892430dd0b99305c";
  }

  static const char* value(const ::calibration_msgs::RobotMeasurement_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfe22486c078efbf7ULL;
  static const uint64_t static_value2 = 0x892430dd0b99305cULL;
};

template<class ContainerAllocator>
struct DataType< ::calibration_msgs::RobotMeasurement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "calibration_msgs/RobotMeasurement";
  }

  static const char* value(const ::calibration_msgs::RobotMeasurement_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::calibration_msgs::RobotMeasurement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string sample_id    # Tag to figure out which yaml file this was generated from\n"
"\n"
"string target_id    # Defines the target that we were sensing.\n"
"string chain_id     # Defines where this target was attached\n"
"\n"
"CameraMeasurement[] M_cam\n"
"LaserMeasurement[]  M_laser\n"
"ChainMeasurement[]  M_chain\n"
"\n"
"================================================================================\n"
"MSG: calibration_msgs/CameraMeasurement\n"
"Header header\n"
"string camera_id\n"
"geometry_msgs/Point[] image_points\n"
"sensor_msgs/CameraInfo cam_info\n"
"\n"
"# True -> The extra debugging fields are populated\n"
"bool verbose\n"
"\n"
"# Extra, partially processed data. Only needed for debugging\n"
"sensor_msgs/Image image\n"
"sensor_msgs/Image image_rect\n"
"calibration_msgs/CalibrationPattern features\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/CameraInfo\n"
"# This message defines meta information for a camera. It should be in a\n"
"# camera namespace on topic \"camera_info\" and accompanied by up to five\n"
"# image topics named:\n"
"#\n"
"#   image_raw - raw data from the camera driver, possibly Bayer encoded\n"
"#   image            - monochrome, distorted\n"
"#   image_color      - color, distorted\n"
"#   image_rect       - monochrome, rectified\n"
"#   image_rect_color - color, rectified\n"
"#\n"
"# The image_pipeline contains packages (image_proc, stereo_image_proc)\n"
"# for producing the four processed image topics from image_raw and\n"
"# camera_info. The meaning of the camera parameters are described in\n"
"# detail at http://www.ros.org/wiki/image_pipeline/CameraInfo.\n"
"#\n"
"# The image_geometry package provides a user-friendly interface to\n"
"# common operations using this meta information. If you want to, e.g.,\n"
"# project a 3d point into image coordinates, we strongly recommend\n"
"# using image_geometry.\n"
"#\n"
"# If the camera is uncalibrated, the matrices D, K, R, P should be left\n"
"# zeroed out. In particular, clients may assume that K[0] == 0.0\n"
"# indicates an uncalibrated camera.\n"
"\n"
"#######################################################################\n"
"#                     Image acquisition info                          #\n"
"#######################################################################\n"
"\n"
"# Time of image acquisition, camera coordinate frame ID\n"
"Header header    # Header timestamp should be acquisition time of image\n"
"                 # Header frame_id should be optical frame of camera\n"
"                 # origin of frame should be optical center of camera\n"
"                 # +x should point to the right in the image\n"
"                 # +y should point down in the image\n"
"                 # +z should point into the plane of the image\n"
"\n"
"\n"
"#######################################################################\n"
"#                      Calibration Parameters                         #\n"
"#######################################################################\n"
"# These are fixed during camera calibration. Their values will be the #\n"
"# same in all messages until the camera is recalibrated. Note that    #\n"
"# self-calibrating systems may \"recalibrate\" frequently.              #\n"
"#                                                                     #\n"
"# The internal parameters can be used to warp a raw (distorted) image #\n"
"# to:                                                                 #\n"
"#   1. An undistorted image (requires D and K)                        #\n"
"#   2. A rectified image (requires D, K, R)                           #\n"
"# The projection matrix P projects 3D points into the rectified image.#\n"
"#######################################################################\n"
"\n"
"# The image dimensions with which the camera was calibrated. Normally\n"
"# this will be the full camera resolution in pixels.\n"
"uint32 height\n"
"uint32 width\n"
"\n"
"# The distortion model used. Supported models are listed in\n"
"# sensor_msgs/distortion_models.h. For most cameras, \"plumb_bob\" - a\n"
"# simple model of radial and tangential distortion - is sufficient.\n"
"string distortion_model\n"
"\n"
"# The distortion parameters, size depending on the distortion model.\n"
"# For \"plumb_bob\", the 5 parameters are: (k1, k2, t1, t2, k3).\n"
"float64[] D\n"
"\n"
"# Intrinsic camera matrix for the raw (distorted) images.\n"
"#     [fx  0 cx]\n"
"# K = [ 0 fy cy]\n"
"#     [ 0  0  1]\n"
"# Projects 3D points in the camera coordinate frame to 2D pixel\n"
"# coordinates using the focal lengths (fx, fy) and principal point\n"
"# (cx, cy).\n"
"float64[9]  K # 3x3 row-major matrix\n"
"\n"
"# Rectification matrix (stereo cameras only)\n"
"# A rotation matrix aligning the camera coordinate system to the ideal\n"
"# stereo image plane so that epipolar lines in both stereo images are\n"
"# parallel.\n"
"float64[9]  R # 3x3 row-major matrix\n"
"\n"
"# Projection/camera matrix\n"
"#     [fx'  0  cx' Tx]\n"
"# P = [ 0  fy' cy' Ty]\n"
"#     [ 0   0   1   0]\n"
"# By convention, this matrix specifies the intrinsic (camera) matrix\n"
"#  of the processed (rectified) image. That is, the left 3x3 portion\n"
"#  is the normal camera intrinsic matrix for the rectified image.\n"
"# It projects 3D points in the camera coordinate frame to 2D pixel\n"
"#  coordinates using the focal lengths (fx', fy') and principal point\n"
"#  (cx', cy') - these may differ from the values in K.\n"
"# For monocular cameras, Tx = Ty = 0. Normally, monocular cameras will\n"
"#  also have R = the identity and P[1:3,1:3] = K.\n"
"# For a stereo pair, the fourth column [Tx Ty 0]' is related to the\n"
"#  position of the optical center of the second camera in the first\n"
"#  camera's frame. We assume Tz = 0 so both cameras are in the same\n"
"#  stereo image plane. The first camera always has Tx = Ty = 0. For\n"
"#  the right (second) camera of a horizontal stereo pair, Ty = 0 and\n"
"#  Tx = -fx' * B, where B is the baseline between the cameras.\n"
"# Given a 3D point [X Y Z]', the projection (x, y) of the point onto\n"
"#  the rectified image is given by:\n"
"#  [u v w]' = P * [X Y Z 1]'\n"
"#         x = u / w\n"
"#         y = v / w\n"
"#  This holds for both images of a stereo pair.\n"
"float64[12] P # 3x4 row-major matrix\n"
"\n"
"\n"
"#######################################################################\n"
"#                      Operational Parameters                         #\n"
"#######################################################################\n"
"# These define the image region actually captured by the camera       #\n"
"# driver. Although they affect the geometry of the output image, they #\n"
"# may be changed freely without recalibrating the camera.             #\n"
"#######################################################################\n"
"\n"
"# Binning refers here to any camera setting which combines rectangular\n"
"#  neighborhoods of pixels into larger \"super-pixels.\" It reduces the\n"
"#  resolution of the output image to\n"
"#  (width / binning_x) x (height / binning_y).\n"
"# The default values binning_x = binning_y = 0 is considered the same\n"
"#  as binning_x = binning_y = 1 (no subsampling).\n"
"uint32 binning_x\n"
"uint32 binning_y\n"
"\n"
"# Region of interest (subwindow of full camera resolution), given in\n"
"#  full resolution (unbinned) image coordinates. A particular ROI\n"
"#  always denotes the same window of pixels on the camera sensor,\n"
"#  regardless of binning settings.\n"
"# The default setting of roi (all values 0) is considered the same as\n"
"#  full resolution (roi.width = width, roi.height = height).\n"
"RegionOfInterest roi\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/RegionOfInterest\n"
"# This message is used to specify a region of interest within an image.\n"
"#\n"
"# When used to specify the ROI setting of the camera when the image was\n"
"# taken, the height and width fields should either match the height and\n"
"# width fields for the associated image; or height = width = 0\n"
"# indicates that the full resolution image was captured.\n"
"\n"
"uint32 x_offset  # Leftmost pixel of the ROI\n"
"                 # (0 if the ROI includes the left edge of the image)\n"
"uint32 y_offset  # Topmost pixel of the ROI\n"
"                 # (0 if the ROI includes the top edge of the image)\n"
"uint32 height    # Height of ROI\n"
"uint32 width     # Width of ROI\n"
"\n"
"# True if a distinct rectified ROI should be calculated from the \"raw\"\n"
"# ROI in this message. Typically this should be False if the full image\n"
"# is captured (ROI not used), and True if a subwindow is captured (ROI\n"
"# used).\n"
"bool do_rectify\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/Image\n"
"# This message contains an uncompressed image\n"
"# (0, 0) is at top-left corner of image\n"
"#\n"
"\n"
"Header header        # Header timestamp should be acquisition time of image\n"
"                     # Header frame_id should be optical frame of camera\n"
"                     # origin of frame should be optical center of camera\n"
"                     # +x should point to the right in the image\n"
"                     # +y should point down in the image\n"
"                     # +z should point into to plane of the image\n"
"                     # If the frame_id here and the frame_id of the CameraInfo\n"
"                     # message associated with the image conflict\n"
"                     # the behavior is undefined\n"
"\n"
"uint32 height         # image height, that is, number of rows\n"
"uint32 width          # image width, that is, number of columns\n"
"\n"
"# The legal values for encoding are in file src/image_encodings.cpp\n"
"# If you want to standardize a new string format, join\n"
"# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n"
"\n"
"string encoding       # Encoding of pixels -- channel meaning, ordering, size\n"
"                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n"
"\n"
"uint8 is_bigendian    # is this data bigendian?\n"
"uint32 step           # Full row length in bytes\n"
"uint8[] data          # actual matrix data, size is (step * rows)\n"
"\n"
"================================================================================\n"
"MSG: calibration_msgs/CalibrationPattern\n"
"Header header\n"
"geometry_msgs/Point[] object_points\n"
"geometry_msgs/Point[] image_points\n"
"uint8 success\n"
"\n"
"================================================================================\n"
"MSG: calibration_msgs/LaserMeasurement\n"
"Header header\n"
"string laser_id\n"
"sensor_msgs/JointState[] joint_points\n"
"\n"
"# True -> The extra debugging fields are populated\n"
"bool verbose\n"
"\n"
"# Extra, partially processed data. Only needed for debugging\n"
"calibration_msgs/DenseLaserSnapshot snapshot\n"
"sensor_msgs/Image laser_image\n"
"calibration_msgs/CalibrationPattern image_features\n"
"calibration_msgs/JointStateCalibrationPattern joint_features\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/JointState\n"
"# This is a message that holds data to describe the state of a set of torque controlled joints. \n"
"#\n"
"# The state of each joint (revolute or prismatic) is defined by:\n"
"#  * the position of the joint (rad or m),\n"
"#  * the velocity of the joint (rad/s or m/s) and \n"
"#  * the effort that is applied in the joint (Nm or N).\n"
"#\n"
"# Each joint is uniquely identified by its name\n"
"# The header specifies the time at which the joint states were recorded. All the joint states\n"
"# in one message have to be recorded at the same time.\n"
"#\n"
"# This message consists of a multiple arrays, one for each part of the joint state. \n"
"# The goal is to make each of the fields optional. When e.g. your joints have no\n"
"# effort associated with them, you can leave the effort array empty. \n"
"#\n"
"# All arrays in this message should have the same size, or be empty.\n"
"# This is the only way to uniquely associate the joint name with the correct\n"
"# states.\n"
"\n"
"\n"
"Header header\n"
"\n"
"string[] name\n"
"float64[] position\n"
"float64[] velocity\n"
"float64[] effort\n"
"\n"
"================================================================================\n"
"MSG: calibration_msgs/DenseLaserSnapshot\n"
"# Provides all the state & sensor information for\n"
"# a single sweep of laser attached to some mechanism.\n"
"# Most likely, this will be used with PR2's tilting laser mechanism\n"
"Header header\n"
"\n"
"# Store the laser intrinsics. This is very similar to the\n"
"# intrinsics commonly stored in \n"
"float32 angle_min        # start angle of the scan [rad]\n"
"float32 angle_max        # end angle of the scan [rad]\n"
"float32 angle_increment  # angular distance between measurements [rad]\n"
"float32 time_increment   # time between measurements [seconds]\n"
"float32 range_min        # minimum range value [m]\n"
"float32 range_max        # maximum range value [m]\n"
"\n"
"# Define the size of the binary data\n"
"uint32 readings_per_scan    # (Width)\n"
"uint32 num_scans            # (Height)\n"
"\n"
"# 2D Arrays storing laser data.\n"
"# We can think of each type data as being a single channel image.\n"
"# Each row of the image has data from a single scan, and scans are\n"
"# concatenated to form the entire 'image'.\n"
"float32[] ranges            # (Image data)\n"
"float32[] intensities       # (Image data)\n"
"\n"
"# Store the start time of each scan\n"
"time[] scan_start\n"
"\n"
"================================================================================\n"
"MSG: calibration_msgs/JointStateCalibrationPattern\n"
"Header header\n"
"geometry_msgs/Point[]  object_points\n"
"sensor_msgs/JointState[] joint_points\n"
"\n"
"\n"
"================================================================================\n"
"MSG: calibration_msgs/ChainMeasurement\n"
"Header header\n"
"string chain_id\n"
"sensor_msgs/JointState chain_state\n"
;
  }

  static const char* value(const ::calibration_msgs::RobotMeasurement_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::calibration_msgs::RobotMeasurement_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sample_id);
      stream.next(m.target_id);
      stream.next(m.chain_id);
      stream.next(m.M_cam);
      stream.next(m.M_laser);
      stream.next(m.M_chain);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotMeasurement_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::calibration_msgs::RobotMeasurement_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::calibration_msgs::RobotMeasurement_<ContainerAllocator>& v)
  {
    s << indent << "sample_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.sample_id);
    s << indent << "target_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.target_id);
    s << indent << "chain_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.chain_id);
    s << indent << "M_cam[]" << std::endl;
    for (size_t i = 0; i < v.M_cam.size(); ++i)
    {
      s << indent << "  M_cam[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::calibration_msgs::CameraMeasurement_<ContainerAllocator> >::stream(s, indent + "    ", v.M_cam[i]);
    }
    s << indent << "M_laser[]" << std::endl;
    for (size_t i = 0; i < v.M_laser.size(); ++i)
    {
      s << indent << "  M_laser[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::calibration_msgs::LaserMeasurement_<ContainerAllocator> >::stream(s, indent + "    ", v.M_laser[i]);
    }
    s << indent << "M_chain[]" << std::endl;
    for (size_t i = 0; i < v.M_chain.size(); ++i)
    {
      s << indent << "  M_chain[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::calibration_msgs::ChainMeasurement_<ContainerAllocator> >::stream(s, indent + "    ", v.M_chain[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CALIBRATION_MSGS_MESSAGE_ROBOTMEASUREMENT_H
