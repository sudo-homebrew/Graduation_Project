// Generated by gencpp from file calibration_msgs/LaserMeasurement.msg
// DO NOT EDIT!


#ifndef CALIBRATION_MSGS_MESSAGE_LASERMEASUREMENT_H
#define CALIBRATION_MSGS_MESSAGE_LASERMEASUREMENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <sensor_msgs/JointState.h>
#include <calibration_msgs/DenseLaserSnapshot.h>
#include <sensor_msgs/Image.h>
#include <calibration_msgs/CalibrationPattern.h>
#include <calibration_msgs/JointStateCalibrationPattern.h>

namespace calibration_msgs
{
template <class ContainerAllocator>
struct LaserMeasurement_
{
  typedef LaserMeasurement_<ContainerAllocator> Type;

  LaserMeasurement_()
    : header()
    , laser_id()
    , joint_points()
    , verbose(false)
    , snapshot()
    , laser_image()
    , image_features()
    , joint_features()  {
    }
  LaserMeasurement_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , laser_id(_alloc)
    , joint_points(_alloc)
    , verbose(false)
    , snapshot(_alloc)
    , laser_image(_alloc)
    , image_features(_alloc)
    , joint_features(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _laser_id_type;
  _laser_id_type laser_id;

   typedef std::vector< ::sensor_msgs::JointState_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::sensor_msgs::JointState_<ContainerAllocator> >::other >  _joint_points_type;
  _joint_points_type joint_points;

   typedef uint8_t _verbose_type;
  _verbose_type verbose;

   typedef  ::calibration_msgs::DenseLaserSnapshot_<ContainerAllocator>  _snapshot_type;
  _snapshot_type snapshot;

   typedef  ::sensor_msgs::Image_<ContainerAllocator>  _laser_image_type;
  _laser_image_type laser_image;

   typedef  ::calibration_msgs::CalibrationPattern_<ContainerAllocator>  _image_features_type;
  _image_features_type image_features;

   typedef  ::calibration_msgs::JointStateCalibrationPattern_<ContainerAllocator>  _joint_features_type;
  _joint_features_type joint_features;





  typedef boost::shared_ptr< ::calibration_msgs::LaserMeasurement_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::calibration_msgs::LaserMeasurement_<ContainerAllocator> const> ConstPtr;

}; // struct LaserMeasurement_

typedef ::calibration_msgs::LaserMeasurement_<std::allocator<void> > LaserMeasurement;

typedef boost::shared_ptr< ::calibration_msgs::LaserMeasurement > LaserMeasurementPtr;
typedef boost::shared_ptr< ::calibration_msgs::LaserMeasurement const> LaserMeasurementConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::calibration_msgs::LaserMeasurement_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::calibration_msgs::LaserMeasurement_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace calibration_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sensor_msgs': ['/mathworks/devel/sbs/31/avaranas.Brobot.j1368574.april23/matlab/sys/ros1/glnxa64/ros1/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/mathworks/devel/sbs/31/avaranas.Brobot.j1368574.april23/matlab/sys/ros1/glnxa64/ros1/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/mathworks/devel/sbs/31/avaranas.Brobot.j1368574.april23/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/avaranas.Brobot.j1368574.april23/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'calibration_msgs': ['/mathworks/devel/sbs/31/avaranas.Brobot.j1368574.april23/matlab/toolbox/ros/mlroscpp/custom_messages/ROS Packages/pack_1/matlab_msg_gen_ros1/glnxa64/src/calibration_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::calibration_msgs::LaserMeasurement_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::calibration_msgs::LaserMeasurement_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::calibration_msgs::LaserMeasurement_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::calibration_msgs::LaserMeasurement_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::calibration_msgs::LaserMeasurement_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::calibration_msgs::LaserMeasurement_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::calibration_msgs::LaserMeasurement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7fa7e818b1234a443aa5d8e315175d17";
  }

  static const char* value(const ::calibration_msgs::LaserMeasurement_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7fa7e818b1234a44ULL;
  static const uint64_t static_value2 = 0x3aa5d8e315175d17ULL;
};

template<class ContainerAllocator>
struct DataType< ::calibration_msgs::LaserMeasurement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "calibration_msgs/LaserMeasurement";
  }

  static const char* value(const ::calibration_msgs::LaserMeasurement_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::calibration_msgs::LaserMeasurement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"string laser_id\n"
"sensor_msgs/JointState[] joint_points\n"
"\n"
"# True -> The extra debugging fields are populated\n"
"bool verbose\n"
"\n"
"# Extra, partially processed data. Only needed for debugging\n"
"calibration_msgs/DenseLaserSnapshot snapshot\n"
"sensor_msgs/Image laser_image\n"
"calibration_msgs/CalibrationPattern image_features\n"
"calibration_msgs/JointStateCalibrationPattern joint_features\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/JointState\n"
"# This is a message that holds data to describe the state of a set of torque controlled joints. \n"
"#\n"
"# The state of each joint (revolute or prismatic) is defined by:\n"
"#  * the position of the joint (rad or m),\n"
"#  * the velocity of the joint (rad/s or m/s) and \n"
"#  * the effort that is applied in the joint (Nm or N).\n"
"#\n"
"# Each joint is uniquely identified by its name\n"
"# The header specifies the time at which the joint states were recorded. All the joint states\n"
"# in one message have to be recorded at the same time.\n"
"#\n"
"# This message consists of a multiple arrays, one for each part of the joint state. \n"
"# The goal is to make each of the fields optional. When e.g. your joints have no\n"
"# effort associated with them, you can leave the effort array empty. \n"
"#\n"
"# All arrays in this message should have the same size, or be empty.\n"
"# This is the only way to uniquely associate the joint name with the correct\n"
"# states.\n"
"\n"
"\n"
"Header header\n"
"\n"
"string[] name\n"
"float64[] position\n"
"float64[] velocity\n"
"float64[] effort\n"
"\n"
"================================================================================\n"
"MSG: calibration_msgs/DenseLaserSnapshot\n"
"# Provides all the state & sensor information for\n"
"# a single sweep of laser attached to some mechanism.\n"
"# Most likely, this will be used with PR2's tilting laser mechanism\n"
"Header header\n"
"\n"
"# Store the laser intrinsics. This is very similar to the\n"
"# intrinsics commonly stored in \n"
"float32 angle_min        # start angle of the scan [rad]\n"
"float32 angle_max        # end angle of the scan [rad]\n"
"float32 angle_increment  # angular distance between measurements [rad]\n"
"float32 time_increment   # time between measurements [seconds]\n"
"float32 range_min        # minimum range value [m]\n"
"float32 range_max        # maximum range value [m]\n"
"\n"
"# Define the size of the binary data\n"
"uint32 readings_per_scan    # (Width)\n"
"uint32 num_scans            # (Height)\n"
"\n"
"# 2D Arrays storing laser data.\n"
"# We can think of each type data as being a single channel image.\n"
"# Each row of the image has data from a single scan, and scans are\n"
"# concatenated to form the entire 'image'.\n"
"float32[] ranges            # (Image data)\n"
"float32[] intensities       # (Image data)\n"
"\n"
"# Store the start time of each scan\n"
"time[] scan_start\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/Image\n"
"# This message contains an uncompressed image\n"
"# (0, 0) is at top-left corner of image\n"
"#\n"
"\n"
"Header header        # Header timestamp should be acquisition time of image\n"
"                     # Header frame_id should be optical frame of camera\n"
"                     # origin of frame should be optical center of camera\n"
"                     # +x should point to the right in the image\n"
"                     # +y should point down in the image\n"
"                     # +z should point into to plane of the image\n"
"                     # If the frame_id here and the frame_id of the CameraInfo\n"
"                     # message associated with the image conflict\n"
"                     # the behavior is undefined\n"
"\n"
"uint32 height         # image height, that is, number of rows\n"
"uint32 width          # image width, that is, number of columns\n"
"\n"
"# The legal values for encoding are in file src/image_encodings.cpp\n"
"# If you want to standardize a new string format, join\n"
"# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n"
"\n"
"string encoding       # Encoding of pixels -- channel meaning, ordering, size\n"
"                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n"
"\n"
"uint8 is_bigendian    # is this data bigendian?\n"
"uint32 step           # Full row length in bytes\n"
"uint8[] data          # actual matrix data, size is (step * rows)\n"
"\n"
"================================================================================\n"
"MSG: calibration_msgs/CalibrationPattern\n"
"Header header\n"
"geometry_msgs/Point[] object_points\n"
"geometry_msgs/Point[] image_points\n"
"uint8 success\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: calibration_msgs/JointStateCalibrationPattern\n"
"Header header\n"
"geometry_msgs/Point[]  object_points\n"
"sensor_msgs/JointState[] joint_points\n"
"\n"
;
  }

  static const char* value(const ::calibration_msgs::LaserMeasurement_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::calibration_msgs::LaserMeasurement_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.laser_id);
      stream.next(m.joint_points);
      stream.next(m.verbose);
      stream.next(m.snapshot);
      stream.next(m.laser_image);
      stream.next(m.image_features);
      stream.next(m.joint_features);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LaserMeasurement_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::calibration_msgs::LaserMeasurement_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::calibration_msgs::LaserMeasurement_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "laser_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.laser_id);
    s << indent << "joint_points[]" << std::endl;
    for (size_t i = 0; i < v.joint_points.size(); ++i)
    {
      s << indent << "  joint_points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::sensor_msgs::JointState_<ContainerAllocator> >::stream(s, indent + "    ", v.joint_points[i]);
    }
    s << indent << "verbose: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.verbose);
    s << indent << "snapshot: ";
    s << std::endl;
    Printer< ::calibration_msgs::DenseLaserSnapshot_<ContainerAllocator> >::stream(s, indent + "  ", v.snapshot);
    s << indent << "laser_image: ";
    s << std::endl;
    Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "  ", v.laser_image);
    s << indent << "image_features: ";
    s << std::endl;
    Printer< ::calibration_msgs::CalibrationPattern_<ContainerAllocator> >::stream(s, indent + "  ", v.image_features);
    s << indent << "joint_features: ";
    s << std::endl;
    Printer< ::calibration_msgs::JointStateCalibrationPattern_<ContainerAllocator> >::stream(s, indent + "  ", v.joint_features);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CALIBRATION_MSGS_MESSAGE_LASERMEASUREMENT_H
