// Generated by gencpp from file robotnik_msgs/MotorStatus.msg
// DO NOT EDIT!


#ifndef ROBOTNIK_MSGS_MESSAGE_MOTORSTATUS_H
#define ROBOTNIK_MSGS_MESSAGE_MOTORSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robotnik_msgs
{
template <class ContainerAllocator>
struct MotorStatus_
{
  typedef MotorStatus_<ContainerAllocator> Type;

  MotorStatus_()
    : state()
    , status()
    , communicationstatus()
    , statusword()
    , driveflags()
    , activestatusword()
    , activedriveflags()
    , digitaloutputs(0)
    , digitalinputs(0)
    , averagecurrent(0.0)
    , analoginputs()  {
    }
  MotorStatus_(const ContainerAllocator& _alloc)
    : state(_alloc)
    , status(_alloc)
    , communicationstatus(_alloc)
    , statusword(_alloc)
    , driveflags(_alloc)
    , activestatusword(_alloc)
    , activedriveflags(_alloc)
    , digitaloutputs(0)
    , digitalinputs(0)
    , averagecurrent(0.0)
    , analoginputs(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _state_type;
  _state_type state;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_type;
  _status_type status;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _communicationstatus_type;
  _communicationstatus_type communicationstatus;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _statusword_type;
  _statusword_type statusword;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _driveflags_type;
  _driveflags_type driveflags;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _activestatusword_type;
  _activestatusword_type activestatusword;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _activedriveflags_type;
  _activedriveflags_type activedriveflags;

   typedef int32_t _digitaloutputs_type;
  _digitaloutputs_type digitaloutputs;

   typedef int32_t _digitalinputs_type;
  _digitalinputs_type digitalinputs;

   typedef float _averagecurrent_type;
  _averagecurrent_type averagecurrent;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _analoginputs_type;
  _analoginputs_type analoginputs;





  typedef boost::shared_ptr< ::robotnik_msgs::MotorStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robotnik_msgs::MotorStatus_<ContainerAllocator> const> ConstPtr;

}; // struct MotorStatus_

typedef ::robotnik_msgs::MotorStatus_<std::allocator<void> > MotorStatus;

typedef boost::shared_ptr< ::robotnik_msgs::MotorStatus > MotorStatusPtr;
typedef boost::shared_ptr< ::robotnik_msgs::MotorStatus const> MotorStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robotnik_msgs::MotorStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robotnik_msgs::MotorStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robotnik_msgs::MotorStatus_<ContainerAllocator1> & lhs, const ::robotnik_msgs::MotorStatus_<ContainerAllocator2> & rhs)
{
  return lhs.state == rhs.state &&
    lhs.status == rhs.status &&
    lhs.communicationstatus == rhs.communicationstatus &&
    lhs.statusword == rhs.statusword &&
    lhs.driveflags == rhs.driveflags &&
    lhs.activestatusword == rhs.activestatusword &&
    lhs.activedriveflags == rhs.activedriveflags &&
    lhs.digitaloutputs == rhs.digitaloutputs &&
    lhs.digitalinputs == rhs.digitalinputs &&
    lhs.averagecurrent == rhs.averagecurrent &&
    lhs.analoginputs == rhs.analoginputs;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robotnik_msgs::MotorStatus_<ContainerAllocator1> & lhs, const ::robotnik_msgs::MotorStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robotnik_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robotnik_msgs::MotorStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robotnik_msgs::MotorStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_msgs::MotorStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robotnik_msgs::MotorStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_msgs::MotorStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robotnik_msgs::MotorStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robotnik_msgs::MotorStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bee7a4674a1d69703bedee2437db3d94";
  }

  static const char* value(const ::robotnik_msgs::MotorStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbee7a4674a1d6970ULL;
  static const uint64_t static_value2 = 0x3bedee2437db3d94ULL;
};

template<class ContainerAllocator>
struct DataType< ::robotnik_msgs::MotorStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robotnik_msgs/MotorStatus";
  }

  static const char* value(const ::robotnik_msgs::MotorStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robotnik_msgs::MotorStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string state\n"
"string status\n"
"string communicationstatus\n"
"string statusword\n"
"string driveflags\n"
"string[] activestatusword\n"
"string[] activedriveflags\n"
"int32 digitaloutputs\n"
"int32 digitalinputs\n"
"float32 averagecurrent\n"
"float32[] analoginputs\n"
"\n"
;
  }

  static const char* value(const ::robotnik_msgs::MotorStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robotnik_msgs::MotorStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
      stream.next(m.status);
      stream.next(m.communicationstatus);
      stream.next(m.statusword);
      stream.next(m.driveflags);
      stream.next(m.activestatusword);
      stream.next(m.activedriveflags);
      stream.next(m.digitaloutputs);
      stream.next(m.digitalinputs);
      stream.next(m.averagecurrent);
      stream.next(m.analoginputs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robotnik_msgs::MotorStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robotnik_msgs::MotorStatus_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.state);
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status);
    s << indent << "communicationstatus: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.communicationstatus);
    s << indent << "statusword: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.statusword);
    s << indent << "driveflags: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.driveflags);
    s << indent << "activestatusword[]" << std::endl;
    for (size_t i = 0; i < v.activestatusword.size(); ++i)
    {
      s << indent << "  activestatusword[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.activestatusword[i]);
    }
    s << indent << "activedriveflags[]" << std::endl;
    for (size_t i = 0; i < v.activedriveflags.size(); ++i)
    {
      s << indent << "  activedriveflags[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.activedriveflags[i]);
    }
    s << indent << "digitaloutputs: ";
    Printer<int32_t>::stream(s, indent + "  ", v.digitaloutputs);
    s << indent << "digitalinputs: ";
    Printer<int32_t>::stream(s, indent + "  ", v.digitalinputs);
    s << indent << "averagecurrent: ";
    Printer<float>::stream(s, indent + "  ", v.averagecurrent);
    s << indent << "analoginputs[]" << std::endl;
    for (size_t i = 0; i < v.analoginputs.size(); ++i)
    {
      s << indent << "  analoginputs[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.analoginputs[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTNIK_MSGS_MESSAGE_MOTORSTATUS_H
