// Generated by gencpp from file rmp_msgs/RMPCommand.msg
// DO NOT EDIT!


#ifndef RMP_MSGS_MESSAGE_RMPCOMMAND_H
#define RMP_MSGS_MESSAGE_RMPCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace rmp_msgs
{
template <class ContainerAllocator>
struct RMPCommand_
{
  typedef RMPCommand_<ContainerAllocator> Type;

  RMPCommand_()
    : header()
    , cmd_id(0)
    , arg1(0.0)
    , arg2(0.0)
    , arg3(0.0)  {
    }
  RMPCommand_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , cmd_id(0)
    , arg1(0.0)
    , arg2(0.0)
    , arg3(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _cmd_id_type;
  _cmd_id_type cmd_id;

   typedef float _arg1_type;
  _arg1_type arg1;

   typedef float _arg2_type;
  _arg2_type arg2;

   typedef float _arg3_type;
  _arg3_type arg3;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(RMP_MOTION_CMD_ID)
  #undef RMP_MOTION_CMD_ID
#endif
#if defined(_WIN32) && defined(RMP_OMNI_MOTION_CMD_ID)
  #undef RMP_OMNI_MOTION_CMD_ID
#endif
#if defined(_WIN32) && defined(RMP_CFG_CMD_ID)
  #undef RMP_CFG_CMD_ID
#endif
#if defined(_WIN32) && defined(RMP_CMD_SET_OPERATIONAL_MODE)
  #undef RMP_CMD_SET_OPERATIONAL_MODE
#endif
#if defined(_WIN32) && defined(RMP_CMD_NONE)
  #undef RMP_CMD_NONE
#endif
#if defined(_WIN32) && defined(DISABLE_REQUEST)
  #undef DISABLE_REQUEST
#endif
#if defined(_WIN32) && defined(POWERDOWN_REQUEST)
  #undef POWERDOWN_REQUEST
#endif
#if defined(_WIN32) && defined(DTZ_REQUEST)
  #undef DTZ_REQUEST
#endif
#if defined(_WIN32) && defined(STANDBY_REQUEST)
  #undef STANDBY_REQUEST
#endif
#if defined(_WIN32) && defined(TRACTOR_REQUEST)
  #undef TRACTOR_REQUEST
#endif
#if defined(_WIN32) && defined(BALANCE_REQUEST)
  #undef BALANCE_REQUEST
#endif

  enum {
    RMP_MOTION_CMD_ID = 1280u,
    RMP_OMNI_MOTION_CMD_ID = 1536u,
    RMP_CFG_CMD_ID = 1281u,
    RMP_CMD_SET_OPERATIONAL_MODE = 32u,
    RMP_CMD_NONE = 0u,
    DISABLE_REQUEST = 1u,
    POWERDOWN_REQUEST = 2u,
    DTZ_REQUEST = 3u,
    STANDBY_REQUEST = 4u,
    TRACTOR_REQUEST = 5u,
    BALANCE_REQUEST = 6u,
  };


  typedef boost::shared_ptr< ::rmp_msgs::RMPCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rmp_msgs::RMPCommand_<ContainerAllocator> const> ConstPtr;

}; // struct RMPCommand_

typedef ::rmp_msgs::RMPCommand_<std::allocator<void> > RMPCommand;

typedef boost::shared_ptr< ::rmp_msgs::RMPCommand > RMPCommandPtr;
typedef boost::shared_ptr< ::rmp_msgs::RMPCommand const> RMPCommandConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rmp_msgs::RMPCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rmp_msgs::RMPCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rmp_msgs::RMPCommand_<ContainerAllocator1> & lhs, const ::rmp_msgs::RMPCommand_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.cmd_id == rhs.cmd_id &&
    lhs.arg1 == rhs.arg1 &&
    lhs.arg2 == rhs.arg2 &&
    lhs.arg3 == rhs.arg3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rmp_msgs::RMPCommand_<ContainerAllocator1> & lhs, const ::rmp_msgs::RMPCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rmp_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rmp_msgs::RMPCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rmp_msgs::RMPCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rmp_msgs::RMPCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rmp_msgs::RMPCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rmp_msgs::RMPCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rmp_msgs::RMPCommand_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rmp_msgs::RMPCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "84cde9e1758addb56d2d271a15c091bc";
  }

  static const char* value(const ::rmp_msgs::RMPCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x84cde9e1758addb5ULL;
  static const uint64_t static_value2 = 0x6d2d271a15c091bcULL;
};

template<class ContainerAllocator>
struct DataType< ::rmp_msgs::RMPCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rmp_msgs/RMPCommand";
  }

  static const char* value(const ::rmp_msgs::RMPCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rmp_msgs::RMPCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# valid command IDs for the Segway\n"
"# [RMP_MOTION_CMD_ID, norm_vel_cmd, norm_yaw_cmd]\n"
"# [RMP_OMNI_MOTION_CMD_ID, norm_vel_cmd, norm_yaw_cmd, angle_cmd_deg]\n"
"# [RMP_CFG_CMD_ID, gp_cmd, gp_param]\n"
"uint32 RMP_MOTION_CMD_ID = 1280\n"
"uint32 RMP_OMNI_MOTION_CMD_ID = 1536\n"
"uint32 RMP_CFG_CMD_ID = 1281\n"
"\n"
"# arg1 some possible values (can also be linear velocity )\n"
"uint8 RMP_CMD_SET_OPERATIONAL_MODE = 32\n"
"uint8 RMP_CMD_NONE = 0 \n"
"\n"
"# arg2 some possible values (can also be angular velocity)\n"
"uint8 DISABLE_REQUEST   = 1\n"
"uint8 POWERDOWN_REQUEST = 2\n"
"uint8 DTZ_REQUEST       = 3\n"
"uint8 STANDBY_REQUEST   = 4\n"
"uint8 TRACTOR_REQUEST   = 5\n"
"uint8 BALANCE_REQUEST   = 6\n"
"\n"
"# Message content\n"
"Header header\n"
"uint32 cmd_id\n"
"float32 arg1\n"
"float32 arg2\n"
"float32 arg3\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::rmp_msgs::RMPCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rmp_msgs::RMPCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.cmd_id);
      stream.next(m.arg1);
      stream.next(m.arg2);
      stream.next(m.arg3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RMPCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rmp_msgs::RMPCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rmp_msgs::RMPCommand_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "cmd_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.cmd_id);
    s << indent << "arg1: ";
    Printer<float>::stream(s, indent + "  ", v.arg1);
    s << indent << "arg2: ";
    Printer<float>::stream(s, indent + "  ", v.arg2);
    s << indent << "arg3: ";
    Printer<float>::stream(s, indent + "  ", v.arg3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RMP_MSGS_MESSAGE_RMPCOMMAND_H
