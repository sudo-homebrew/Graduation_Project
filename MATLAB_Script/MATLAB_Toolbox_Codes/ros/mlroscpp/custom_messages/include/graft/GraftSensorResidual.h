// Generated by gencpp from file graft/GraftSensorResidual.msg
// DO NOT EDIT!


#ifndef GRAFT_MESSAGE_GRAFTSENSORRESIDUAL_H
#define GRAFT_MESSAGE_GRAFTSENSORRESIDUAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Vector3.h>

namespace graft
{
template <class ContainerAllocator>
struct GraftSensorResidual_
{
  typedef GraftSensorResidual_<ContainerAllocator> Type;

  GraftSensorResidual_()
    : header()
    , name()
    , pose()
    , twist()
    , accel()
    , pose_covariance()
    , twist_covariance()
    , accel_covariance()  {
      pose_covariance.assign(0.0);

      twist_covariance.assign(0.0);

      accel_covariance.assign(0.0);
  }
  GraftSensorResidual_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , name(_alloc)
    , pose(_alloc)
    , twist(_alloc)
    , accel(_alloc)
    , pose_covariance()
    , twist_covariance()
    , accel_covariance()  {
  (void)_alloc;
      pose_covariance.assign(0.0);

      twist_covariance.assign(0.0);

      accel_covariance.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _twist_type;
  _twist_type twist;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _accel_type;
  _accel_type accel;

   typedef boost::array<double, 36>  _pose_covariance_type;
  _pose_covariance_type pose_covariance;

   typedef boost::array<double, 36>  _twist_covariance_type;
  _twist_covariance_type twist_covariance;

   typedef boost::array<double, 9>  _accel_covariance_type;
  _accel_covariance_type accel_covariance;





  typedef boost::shared_ptr< ::graft::GraftSensorResidual_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::graft::GraftSensorResidual_<ContainerAllocator> const> ConstPtr;

}; // struct GraftSensorResidual_

typedef ::graft::GraftSensorResidual_<std::allocator<void> > GraftSensorResidual;

typedef boost::shared_ptr< ::graft::GraftSensorResidual > GraftSensorResidualPtr;
typedef boost::shared_ptr< ::graft::GraftSensorResidual const> GraftSensorResidualConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::graft::GraftSensorResidual_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::graft::GraftSensorResidual_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace graft

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'geometry_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/geometry_msgs/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'graft': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/graft/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::graft::GraftSensorResidual_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graft::GraftSensorResidual_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::graft::GraftSensorResidual_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::graft::GraftSensorResidual_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graft::GraftSensorResidual_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graft::GraftSensorResidual_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::graft::GraftSensorResidual_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f75937e1c71e90285875737addd2c780";
  }

  static const char* value(const ::graft::GraftSensorResidual_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf75937e1c71e9028ULL;
  static const uint64_t static_value2 = 0x5875737addd2c780ULL;
};

template<class ContainerAllocator>
struct DataType< ::graft::GraftSensorResidual_<ContainerAllocator> >
{
  static const char* value()
  {
    return "graft/GraftSensorResidual";
  }

  static const char* value(const ::graft::GraftSensorResidual_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::graft::GraftSensorResidual_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"string name\n"
"\n"
"geometry_msgs/Pose pose\n"
"geometry_msgs/Twist twist\n"
"geometry_msgs/Vector3 accel\n"
"\n"
"float64[36] pose_covariance\n"
"float64[36] twist_covariance\n"
"float64[9] accel_covariance\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of postion and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::graft::GraftSensorResidual_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::graft::GraftSensorResidual_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.name);
      stream.next(m.pose);
      stream.next(m.twist);
      stream.next(m.accel);
      stream.next(m.pose_covariance);
      stream.next(m.twist_covariance);
      stream.next(m.accel_covariance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GraftSensorResidual_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::graft::GraftSensorResidual_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::graft::GraftSensorResidual_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "twist: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.twist);
    s << indent << "accel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.accel);
    s << indent << "pose_covariance[]" << std::endl;
    for (size_t i = 0; i < v.pose_covariance.size(); ++i)
    {
      s << indent << "  pose_covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.pose_covariance[i]);
    }
    s << indent << "twist_covariance[]" << std::endl;
    for (size_t i = 0; i < v.twist_covariance.size(); ++i)
    {
      s << indent << "  twist_covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.twist_covariance[i]);
    }
    s << indent << "accel_covariance[]" << std::endl;
    for (size_t i = 0; i < v.accel_covariance.size(); ++i)
    {
      s << indent << "  accel_covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.accel_covariance[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRAFT_MESSAGE_GRAFTSENSORRESIDUAL_H
