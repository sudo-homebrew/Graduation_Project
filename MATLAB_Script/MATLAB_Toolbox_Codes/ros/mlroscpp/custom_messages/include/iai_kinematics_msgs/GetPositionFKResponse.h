// Generated by gencpp from file iai_kinematics_msgs/GetPositionFKResponse.msg
// DO NOT EDIT!


#ifndef IAI_KINEMATICS_MSGS_MESSAGE_GETPOSITIONFKRESPONSE_H
#define IAI_KINEMATICS_MSGS_MESSAGE_GETPOSITIONFKRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>
#include <iai_kinematics_msgs/ErrorCodes.h>

namespace iai_kinematics_msgs
{
template <class ContainerAllocator>
struct GetPositionFKResponse_
{
  typedef GetPositionFKResponse_<ContainerAllocator> Type;

  GetPositionFKResponse_()
    : pose_stamped()
    , fk_link_names()
    , error_code()  {
    }
  GetPositionFKResponse_(const ContainerAllocator& _alloc)
    : pose_stamped(_alloc)
    , fk_link_names(_alloc)
    , error_code(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::PoseStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::other >  _pose_stamped_type;
  _pose_stamped_type pose_stamped;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _fk_link_names_type;
  _fk_link_names_type fk_link_names;

   typedef  ::iai_kinematics_msgs::ErrorCodes_<ContainerAllocator>  _error_code_type;
  _error_code_type error_code;





  typedef boost::shared_ptr< ::iai_kinematics_msgs::GetPositionFKResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iai_kinematics_msgs::GetPositionFKResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetPositionFKResponse_

typedef ::iai_kinematics_msgs::GetPositionFKResponse_<std::allocator<void> > GetPositionFKResponse;

typedef boost::shared_ptr< ::iai_kinematics_msgs::GetPositionFKResponse > GetPositionFKResponsePtr;
typedef boost::shared_ptr< ::iai_kinematics_msgs::GetPositionFKResponse const> GetPositionFKResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::iai_kinematics_msgs::GetPositionFKResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::iai_kinematics_msgs::GetPositionFKResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace iai_kinematics_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/mathworks/home/pmurali/Documents/rosjava_messages/GEN-4-6/8/matlab_msg_gen_ros1/glnxa64/src/sensor_msgs/msg'], 'geometry_msgs': ['/mathworks/home/pmurali/Documents/rosjava_messages/GEN-4-6/8/matlab_msg_gen_ros1/glnxa64/src/geometry_msgs/msg'], 'iai_kinematics_msgs': ['/mathworks/home/pmurali/Documents/rosjava_messages/GEN-4-6/8/matlab_msg_gen_ros1/glnxa64/src/iai_kinematics_msgs/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1352567/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/pmurali.Brobot.j1352567/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::iai_kinematics_msgs::GetPositionFKResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iai_kinematics_msgs::GetPositionFKResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iai_kinematics_msgs::GetPositionFKResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iai_kinematics_msgs::GetPositionFKResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iai_kinematics_msgs::GetPositionFKResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iai_kinematics_msgs::GetPositionFKResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::iai_kinematics_msgs::GetPositionFKResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4a3efc190f6ac6f248069cfa3cd94286";
  }

  static const char* value(const ::iai_kinematics_msgs::GetPositionFKResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4a3efc190f6ac6f2ULL;
  static const uint64_t static_value2 = 0x48069cfa3cd94286ULL;
};

template<class ContainerAllocator>
struct DataType< ::iai_kinematics_msgs::GetPositionFKResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "iai_kinematics_msgs/GetPositionFKResponse";
  }

  static const char* value(const ::iai_kinematics_msgs::GetPositionFKResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::iai_kinematics_msgs::GetPositionFKResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"geometry_msgs/PoseStamped[] pose_stamped\n"
"\n"
"\n"
"string[] fk_link_names\n"
"\n"
"iai_kinematics_msgs/ErrorCodes error_code\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of postion and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: iai_kinematics_msgs/ErrorCodes\n"
"int32 val\n"
"\n"
"# overall behavior\n"
"int32 PLANNING_FAILED=-1\n"
"int32 SUCCESS=1\n"
"int32 TIMED_OUT=-2\n"
"\n"
"# start state errors\n"
"int32 START_STATE_IN_COLLISION=-3\n"
"int32 START_STATE_VIOLATES_PATH_CONSTRAINTS=-4\n"
"\n"
"# goal errors\n"
"int32 GOAL_IN_COLLISION=-5\n"
"int32 GOAL_VIOLATES_PATH_CONSTRAINTS=-6\n"
"\n"
"# robot state\n"
"int32 INVALID_ROBOT_STATE=-7\n"
"int32 INCOMPLETE_ROBOT_STATE=-8\n"
"\n"
"# planning request errors\n"
"int32 INVALID_PLANNER_ID=-9\n"
"int32 INVALID_NUM_PLANNING_ATTEMPTS=-10\n"
"int32 INVALID_ALLOWED_PLANNING_TIME=-11\n"
"int32 INVALID_GROUP_NAME=-12\n"
"int32 INVALID_GOAL_JOINT_CONSTRAINTS=-13\n"
"int32 INVALID_GOAL_POSITION_CONSTRAINTS=-14\n"
"int32 INVALID_GOAL_ORIENTATION_CONSTRAINTS=-15\n"
"int32 INVALID_PATH_JOINT_CONSTRAINTS=-16\n"
"int32 INVALID_PATH_POSITION_CONSTRAINTS=-17\n"
"int32 INVALID_PATH_ORIENTATION_CONSTRAINTS=-18\n"
"\n"
"# state/trajectory monitor errors\n"
"int32 INVALID_TRAJECTORY=-19\n"
"int32 INVALID_INDEX=-20\n"
"int32 JOINT_LIMITS_VIOLATED=-21\n"
"int32 PATH_CONSTRAINTS_VIOLATED=-22\n"
"int32 COLLISION_CONSTRAINTS_VIOLATED=-23\n"
"int32 GOAL_CONSTRAINTS_VIOLATED=-24\n"
"int32 JOINTS_NOT_MOVING=-25\n"
"int32 TRAJECTORY_CONTROLLER_FAILED=-26\n"
"\n"
"# system errors\n"
"int32 FRAME_TRANSFORM_FAILURE=-27\n"
"int32 COLLISION_CHECKING_UNAVAILABLE=-28\n"
"int32 ROBOT_STATE_STALE=-29\n"
"int32 SENSOR_INFO_STALE=-30\n"
"\n"
"# kinematics errors\n"
"int32 NO_IK_SOLUTION=-31\n"
"int32 INVALID_LINK_NAME=-32\n"
"int32 IK_LINK_IN_COLLISION=-33\n"
"int32 NO_FK_SOLUTION=-34\n"
"int32 KINEMATICS_STATE_IN_COLLISION=-35\n"
"\n"
"# general errors\n"
"int32 INVALID_TIMEOUT=-36\n"
"\n"
;
  }

  static const char* value(const ::iai_kinematics_msgs::GetPositionFKResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::iai_kinematics_msgs::GetPositionFKResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose_stamped);
      stream.next(m.fk_link_names);
      stream.next(m.error_code);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetPositionFKResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iai_kinematics_msgs::GetPositionFKResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::iai_kinematics_msgs::GetPositionFKResponse_<ContainerAllocator>& v)
  {
    s << indent << "pose_stamped[]" << std::endl;
    for (size_t i = 0; i < v.pose_stamped.size(); ++i)
    {
      s << indent << "  pose_stamped[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "    ", v.pose_stamped[i]);
    }
    s << indent << "fk_link_names[]" << std::endl;
    for (size_t i = 0; i < v.fk_link_names.size(); ++i)
    {
      s << indent << "  fk_link_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.fk_link_names[i]);
    }
    s << indent << "error_code: ";
    s << std::endl;
    Printer< ::iai_kinematics_msgs::ErrorCodes_<ContainerAllocator> >::stream(s, indent + "  ", v.error_code);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IAI_KINEMATICS_MSGS_MESSAGE_GETPOSITIONFKRESPONSE_H
