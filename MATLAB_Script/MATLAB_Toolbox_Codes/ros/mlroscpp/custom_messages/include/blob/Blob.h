// Generated by gencpp from file blob/Blob.msg
// DO NOT EDIT!


#ifndef BLOB_MESSAGE_BLOB_H
#define BLOB_MESSAGE_BLOB_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace blob
{
template <class ContainerAllocator>
struct Blob_
{
  typedef Blob_<ContainerAllocator> Type;

  Blob_()
    : compressed(false)
    , data()  {
    }
  Blob_(const ContainerAllocator& _alloc)
    : compressed(false)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _compressed_type;
  _compressed_type compressed;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::blob::Blob_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::blob::Blob_<ContainerAllocator> const> ConstPtr;

}; // struct Blob_

typedef ::blob::Blob_<std::allocator<void> > Blob;

typedef boost::shared_ptr< ::blob::Blob > BlobPtr;
typedef boost::shared_ptr< ::blob::Blob const> BlobConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::blob::Blob_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::blob::Blob_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace blob

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'blob': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/blob/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::blob::Blob_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::blob::Blob_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::blob::Blob_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::blob::Blob_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::blob::Blob_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::blob::Blob_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::blob::Blob_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8115c3ed9d7b2e23c47c6ecaff2d4b13";
  }

  static const char* value(const ::blob::Blob_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8115c3ed9d7b2e23ULL;
  static const uint64_t static_value2 = 0xc47c6ecaff2d4b13ULL;
};

template<class ContainerAllocator>
struct DataType< ::blob::Blob_<ContainerAllocator> >
{
  static const char* value()
  {
    return "blob/Blob";
  }

  static const char* value(const ::blob::Blob_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::blob::Blob_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool compressed\n"
"uint8[] data\n"
;
  }

  static const char* value(const ::blob::Blob_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::blob::Blob_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.compressed);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Blob_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::blob::Blob_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::blob::Blob_<ContainerAllocator>& v)
  {
    s << indent << "compressed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.compressed);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BLOB_MESSAGE_BLOB_H
