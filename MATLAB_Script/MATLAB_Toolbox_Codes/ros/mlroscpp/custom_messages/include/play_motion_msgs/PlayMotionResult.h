// Generated by gencpp from file play_motion_msgs/PlayMotionResult.msg
// DO NOT EDIT!


#ifndef PLAY_MOTION_MSGS_MESSAGE_PLAYMOTIONRESULT_H
#define PLAY_MOTION_MSGS_MESSAGE_PLAYMOTIONRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace play_motion_msgs
{
template <class ContainerAllocator>
struct PlayMotionResult_
{
  typedef PlayMotionResult_<ContainerAllocator> Type;

  PlayMotionResult_()
    : error_code(0)
    , error_string()  {
    }
  PlayMotionResult_(const ContainerAllocator& _alloc)
    : error_code(0)
    , error_string(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _error_code_type;
  _error_code_type error_code;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _error_string_type;
  _error_string_type error_string;



  enum {
 
    SUCCEEDED = 1,
 
    MOTION_NOT_FOUND = -1,
 
    CONTROLLER_BUSY = -3,
 
    MISSING_CONTROLLER = -4,
 
    TRAJECTORY_ERROR = -5,
 
    GOAL_NOT_REACHED = -6,
 
    PLANNER_OFFLINE = -7,
 
    NO_PLAN_FOUND = -8,
 
    OTHER_ERROR = -42,
  };


  typedef boost::shared_ptr< ::play_motion_msgs::PlayMotionResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::play_motion_msgs::PlayMotionResult_<ContainerAllocator> const> ConstPtr;

}; // struct PlayMotionResult_

typedef ::play_motion_msgs::PlayMotionResult_<std::allocator<void> > PlayMotionResult;

typedef boost::shared_ptr< ::play_motion_msgs::PlayMotionResult > PlayMotionResultPtr;
typedef boost::shared_ptr< ::play_motion_msgs::PlayMotionResult const> PlayMotionResultConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::play_motion_msgs::PlayMotionResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::play_motion_msgs::PlayMotionResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace play_motion_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'play_motion_msgs': ['/local-ssd1/All_Custom_Msgs/PendingActionPackages/matlab_msg_gen_ros1/glnxa64/src/play_motion_msgs/msg', '/local-ssd1/All_Custom_Msgs/PendingActionPackages/matlab_msg_gen_ros1/glnxa64/devel/share/play_motion_msgs/msg'], 'actionlib': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/actionlib/cmake/../msg'], 'std_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::play_motion_msgs::PlayMotionResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::play_motion_msgs::PlayMotionResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::play_motion_msgs::PlayMotionResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::play_motion_msgs::PlayMotionResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::play_motion_msgs::PlayMotionResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::play_motion_msgs::PlayMotionResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::play_motion_msgs::PlayMotionResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5560cb9a7211cb4b5a730f6f07ec124b";
  }

  static const char* value(const ::play_motion_msgs::PlayMotionResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5560cb9a7211cb4bULL;
  static const uint64_t static_value2 = 0x5a730f6f07ec124bULL;
};

template<class ContainerAllocator>
struct DataType< ::play_motion_msgs::PlayMotionResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "play_motion_msgs/PlayMotionResult";
  }

  static const char* value(const ::play_motion_msgs::PlayMotionResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::play_motion_msgs::PlayMotionResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"int32 error_code\n"
"int32 SUCCEEDED             = 1\n"
"int32 MOTION_NOT_FOUND      = -1\n"
"# controller error codes\n"
"int32 CONTROLLER_BUSY       = -3\n"
"int32 MISSING_CONTROLLER    = -4\n"
"int32 TRAJECTORY_ERROR      = -5\n"
"int32 GOAL_NOT_REACHED      = -6\n"
"# planner error codes\n"
"int32 PLANNER_OFFLINE       = -7\n"
"int32 NO_PLAN_FOUND         = -8\n"
"#other\n"
"int32 OTHER_ERROR           = -42\n"
"\n"
"string error_string\n"
;
  }

  static const char* value(const ::play_motion_msgs::PlayMotionResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::play_motion_msgs::PlayMotionResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.error_code);
      stream.next(m.error_string);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlayMotionResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::play_motion_msgs::PlayMotionResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::play_motion_msgs::PlayMotionResult_<ContainerAllocator>& v)
  {
    s << indent << "error_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.error_code);
    s << indent << "error_string: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.error_string);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLAY_MOTION_MSGS_MESSAGE_PLAYMOTIONRESULT_H
