// Generated by gencpp from file r2_msgs/PoseCommandStatus.msg
// DO NOT EDIT!


#ifndef R2_MSGS_MESSAGE_POSECOMMANDSTATUS_H
#define R2_MSGS_MESSAGE_POSECOMMANDSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace r2_msgs
{
template <class ContainerAllocator>
struct PoseCommandStatus_
{
  typedef PoseCommandStatus_<ContainerAllocator> Type;

  PoseCommandStatus_()
    : stamp()
    , commandId()
    , status(0)
    , statusMessage()  {
    }
  PoseCommandStatus_(const ContainerAllocator& _alloc)
    : stamp()
    , commandId(_alloc)
    , status(0)
    , statusMessage(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _commandId_type;
  _commandId_type commandId;

   typedef uint8_t _status_type;
  _status_type status;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _statusMessage_type;
  _statusMessage_type statusMessage;



  enum {
    PENDING = 0u,
    ACTIVE = 1u,
    REJECTED = 2u,
    SUCCEEDED = 3u,
    FAILED = 4u,
  };


  typedef boost::shared_ptr< ::r2_msgs::PoseCommandStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::r2_msgs::PoseCommandStatus_<ContainerAllocator> const> ConstPtr;

}; // struct PoseCommandStatus_

typedef ::r2_msgs::PoseCommandStatus_<std::allocator<void> > PoseCommandStatus;

typedef boost::shared_ptr< ::r2_msgs::PoseCommandStatus > PoseCommandStatusPtr;
typedef boost::shared_ptr< ::r2_msgs::PoseCommandStatus const> PoseCommandStatusConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::r2_msgs::PoseCommandStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::r2_msgs::PoseCommandStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace r2_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/geometry_msgs/msg'], 'r2_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/r2_msgs/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::r2_msgs::PoseCommandStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::r2_msgs::PoseCommandStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::r2_msgs::PoseCommandStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::r2_msgs::PoseCommandStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::r2_msgs::PoseCommandStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::r2_msgs::PoseCommandStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::r2_msgs::PoseCommandStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "82493b7735e3fe414b93381d96bfd1ee";
  }

  static const char* value(const ::r2_msgs::PoseCommandStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x82493b7735e3fe41ULL;
  static const uint64_t static_value2 = 0x4b93381d96bfd1eeULL;
};

template<class ContainerAllocator>
struct DataType< ::r2_msgs::PoseCommandStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "r2_msgs/PoseCommandStatus";
  }

  static const char* value(const ::r2_msgs::PoseCommandStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::r2_msgs::PoseCommandStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n"
"string commandId\n"
"uint8 PENDING=0\n"
"uint8 ACTIVE=1\n"
"uint8 REJECTED=2\n"
"uint8 SUCCEEDED=3\n"
"uint8 FAILED=4\n"
"uint8 status\n"
"string statusMessage\n"
;
  }

  static const char* value(const ::r2_msgs::PoseCommandStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::r2_msgs::PoseCommandStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.commandId);
      stream.next(m.status);
      stream.next(m.statusMessage);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PoseCommandStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::r2_msgs::PoseCommandStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::r2_msgs::PoseCommandStatus_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "commandId: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.commandId);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "statusMessage: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.statusMessage);
  }
};

} // namespace message_operations
} // namespace ros

#endif // R2_MSGS_MESSAGE_POSECOMMANDSTATUS_H
