// Generated by gencpp from file wireless_msgs/Quality.msg
// DO NOT EDIT!


#ifndef WIRELESS_MSGS_MESSAGE_QUALITY_H
#define WIRELESS_MSGS_MESSAGE_QUALITY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace wireless_msgs
{
template <class ContainerAllocator>
struct Quality_
{
  typedef Quality_<ContainerAllocator> Type;

  Quality_()
    : header()
    , messages_received(0)
    , messages_missed(0)
    , total_length(0)
    , message_lengths()
    , latency_avg(0.0)
    , latency_measurements()  {
    }
  Quality_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , messages_received(0)
    , messages_missed(0)
    , total_length(0)
    , message_lengths(_alloc)
    , latency_avg(0.0)
    , latency_measurements(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint16_t _messages_received_type;
  _messages_received_type messages_received;

   typedef uint16_t _messages_missed_type;
  _messages_missed_type messages_missed;

   typedef uint32_t _total_length_type;
  _total_length_type total_length;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _message_lengths_type;
  _message_lengths_type message_lengths;

   typedef float _latency_avg_type;
  _latency_avg_type latency_avg;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _latency_measurements_type;
  _latency_measurements_type latency_measurements;





  typedef boost::shared_ptr< ::wireless_msgs::Quality_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wireless_msgs::Quality_<ContainerAllocator> const> ConstPtr;

}; // struct Quality_

typedef ::wireless_msgs::Quality_<std::allocator<void> > Quality;

typedef boost::shared_ptr< ::wireless_msgs::Quality > QualityPtr;
typedef boost::shared_ptr< ::wireless_msgs::Quality const> QualityConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::wireless_msgs::Quality_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::wireless_msgs::Quality_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::wireless_msgs::Quality_<ContainerAllocator1> & lhs, const ::wireless_msgs::Quality_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.messages_received == rhs.messages_received &&
    lhs.messages_missed == rhs.messages_missed &&
    lhs.total_length == rhs.total_length &&
    lhs.message_lengths == rhs.message_lengths &&
    lhs.latency_avg == rhs.latency_avg &&
    lhs.latency_measurements == rhs.latency_measurements;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::wireless_msgs::Quality_<ContainerAllocator1> & lhs, const ::wireless_msgs::Quality_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace wireless_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::wireless_msgs::Quality_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wireless_msgs::Quality_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wireless_msgs::Quality_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wireless_msgs::Quality_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wireless_msgs::Quality_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wireless_msgs::Quality_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::wireless_msgs::Quality_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5362dac71ff196cfe73d1dc68d4c58ed";
  }

  static const char* value(const ::wireless_msgs::Quality_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5362dac71ff196cfULL;
  static const uint64_t static_value2 = 0xe73d1dc68d4c58edULL;
};

template<class ContainerAllocator>
struct DataType< ::wireless_msgs::Quality_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wireless_msgs/Quality";
  }

  static const char* value(const ::wireless_msgs::Quality_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::wireless_msgs::Quality_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"uint16 messages_received\n"
"uint16 messages_missed\n"
"\n"
"uint32 total_length\n"
"uint32[] message_lengths\n"
"\n"
"float32 latency_avg\n"
"float32[] latency_measurements\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::wireless_msgs::Quality_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::wireless_msgs::Quality_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.messages_received);
      stream.next(m.messages_missed);
      stream.next(m.total_length);
      stream.next(m.message_lengths);
      stream.next(m.latency_avg);
      stream.next(m.latency_measurements);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Quality_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wireless_msgs::Quality_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::wireless_msgs::Quality_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "messages_received: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.messages_received);
    s << indent << "messages_missed: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.messages_missed);
    s << indent << "total_length: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.total_length);
    s << indent << "message_lengths[]" << std::endl;
    for (size_t i = 0; i < v.message_lengths.size(); ++i)
    {
      s << indent << "  message_lengths[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.message_lengths[i]);
    }
    s << indent << "latency_avg: ";
    Printer<float>::stream(s, indent + "  ", v.latency_avg);
    s << indent << "latency_measurements[]" << std::endl;
    for (size_t i = 0; i < v.latency_measurements.size(); ++i)
    {
      s << indent << "  latency_measurements[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.latency_measurements[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // WIRELESS_MSGS_MESSAGE_QUALITY_H
