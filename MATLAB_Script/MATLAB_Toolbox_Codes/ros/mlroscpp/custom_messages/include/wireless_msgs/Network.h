// Generated by gencpp from file wireless_msgs/Network.msg
// DO NOT EDIT!


#ifndef WIRELESS_MSGS_MESSAGE_NETWORK_H
#define WIRELESS_MSGS_MESSAGE_NETWORK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace wireless_msgs
{
template <class ContainerAllocator>
struct Network_
{
  typedef Network_<ContainerAllocator> Type;

  Network_()
    : type()
    , essid()
    , mac()
    , mode()
    , frequency()
    , encryption(false)  {
    }
  Network_(const ContainerAllocator& _alloc)
    : type(_alloc)
    , essid(_alloc)
    , mac(_alloc)
    , mode(_alloc)
    , frequency(_alloc)
    , encryption(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _essid_type;
  _essid_type essid;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mac_type;
  _mac_type mac;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mode_type;
  _mode_type mode;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _frequency_type;
  _frequency_type frequency;

   typedef uint8_t _encryption_type;
  _encryption_type encryption;





  typedef boost::shared_ptr< ::wireless_msgs::Network_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wireless_msgs::Network_<ContainerAllocator> const> ConstPtr;

}; // struct Network_

typedef ::wireless_msgs::Network_<std::allocator<void> > Network;

typedef boost::shared_ptr< ::wireless_msgs::Network > NetworkPtr;
typedef boost::shared_ptr< ::wireless_msgs::Network const> NetworkConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::wireless_msgs::Network_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::wireless_msgs::Network_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::wireless_msgs::Network_<ContainerAllocator1> & lhs, const ::wireless_msgs::Network_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.essid == rhs.essid &&
    lhs.mac == rhs.mac &&
    lhs.mode == rhs.mode &&
    lhs.frequency == rhs.frequency &&
    lhs.encryption == rhs.encryption;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::wireless_msgs::Network_<ContainerAllocator1> & lhs, const ::wireless_msgs::Network_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace wireless_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::wireless_msgs::Network_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wireless_msgs::Network_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wireless_msgs::Network_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wireless_msgs::Network_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wireless_msgs::Network_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wireless_msgs::Network_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::wireless_msgs::Network_<ContainerAllocator> >
{
  static const char* value()
  {
    return "24b3a97e0e3dc13fb92e036725f91d11";
  }

  static const char* value(const ::wireless_msgs::Network_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x24b3a97e0e3dc13fULL;
  static const uint64_t static_value2 = 0xb92e036725f91d11ULL;
};

template<class ContainerAllocator>
struct DataType< ::wireless_msgs::Network_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wireless_msgs/Network";
  }

  static const char* value(const ::wireless_msgs::Network_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::wireless_msgs::Network_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string type\n"
"string essid\n"
"string mac\n"
"string mode\n"
"string frequency\n"
"bool encryption\n"
;
  }

  static const char* value(const ::wireless_msgs::Network_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::wireless_msgs::Network_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.essid);
      stream.next(m.mac);
      stream.next(m.mode);
      stream.next(m.frequency);
      stream.next(m.encryption);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Network_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wireless_msgs::Network_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::wireless_msgs::Network_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "essid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.essid);
    s << indent << "mac: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mac);
    s << indent << "mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mode);
    s << indent << "frequency: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.frequency);
    s << indent << "encryption: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.encryption);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WIRELESS_MSGS_MESSAGE_NETWORK_H
