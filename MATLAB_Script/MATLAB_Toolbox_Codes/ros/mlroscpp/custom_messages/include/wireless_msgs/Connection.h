// Generated by gencpp from file wireless_msgs/Connection.msg
// DO NOT EDIT!


#ifndef WIRELESS_MSGS_MESSAGE_CONNECTION_H
#define WIRELESS_MSGS_MESSAGE_CONNECTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace wireless_msgs
{
template <class ContainerAllocator>
struct Connection_
{
  typedef Connection_<ContainerAllocator> Type;

  Connection_()
    : bitrate(0.0)
    , txpower(0)
    , link_quality_raw()
    , link_quality(0.0)
    , signal_level(0)
    , noise_level(0)
    , essid()
    , bssid()  {
    }
  Connection_(const ContainerAllocator& _alloc)
    : bitrate(0.0)
    , txpower(0)
    , link_quality_raw(_alloc)
    , link_quality(0.0)
    , signal_level(0)
    , noise_level(0)
    , essid(_alloc)
    , bssid(_alloc)  {
  (void)_alloc;
    }



   typedef float _bitrate_type;
  _bitrate_type bitrate;

   typedef int16_t _txpower_type;
  _txpower_type txpower;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _link_quality_raw_type;
  _link_quality_raw_type link_quality_raw;

   typedef float _link_quality_type;
  _link_quality_type link_quality;

   typedef int16_t _signal_level_type;
  _signal_level_type signal_level;

   typedef int16_t _noise_level_type;
  _noise_level_type noise_level;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _essid_type;
  _essid_type essid;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _bssid_type;
  _bssid_type bssid;





  typedef boost::shared_ptr< ::wireless_msgs::Connection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wireless_msgs::Connection_<ContainerAllocator> const> ConstPtr;

}; // struct Connection_

typedef ::wireless_msgs::Connection_<std::allocator<void> > Connection;

typedef boost::shared_ptr< ::wireless_msgs::Connection > ConnectionPtr;
typedef boost::shared_ptr< ::wireless_msgs::Connection const> ConnectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::wireless_msgs::Connection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::wireless_msgs::Connection_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::wireless_msgs::Connection_<ContainerAllocator1> & lhs, const ::wireless_msgs::Connection_<ContainerAllocator2> & rhs)
{
  return lhs.bitrate == rhs.bitrate &&
    lhs.txpower == rhs.txpower &&
    lhs.link_quality_raw == rhs.link_quality_raw &&
    lhs.link_quality == rhs.link_quality &&
    lhs.signal_level == rhs.signal_level &&
    lhs.noise_level == rhs.noise_level &&
    lhs.essid == rhs.essid &&
    lhs.bssid == rhs.bssid;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::wireless_msgs::Connection_<ContainerAllocator1> & lhs, const ::wireless_msgs::Connection_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace wireless_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::wireless_msgs::Connection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::wireless_msgs::Connection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wireless_msgs::Connection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::wireless_msgs::Connection_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wireless_msgs::Connection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::wireless_msgs::Connection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::wireless_msgs::Connection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5d1c374df3f804bce13d0e5d9bb76c6d";
  }

  static const char* value(const ::wireless_msgs::Connection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5d1c374df3f804bcULL;
  static const uint64_t static_value2 = 0xe13d0e5d9bb76c6dULL;
};

template<class ContainerAllocator>
struct DataType< ::wireless_msgs::Connection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "wireless_msgs/Connection";
  }

  static const char* value(const ::wireless_msgs::Connection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::wireless_msgs::Connection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 bitrate  # Mb/s\n"
"int16 txpower  # dBm\n"
"\n"
"# Fractional link quality number preserved in raw\n"
"# field, resolved to decimal for link_quality field.\n"
"string link_quality_raw\n"
"float32 link_quality\n"
"\n"
"int16 signal_level  # dBm\n"
"int16 noise_level  # dBm\n"
"\n"
"string essid\n"
"string bssid\n"
;
  }

  static const char* value(const ::wireless_msgs::Connection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::wireless_msgs::Connection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.bitrate);
      stream.next(m.txpower);
      stream.next(m.link_quality_raw);
      stream.next(m.link_quality);
      stream.next(m.signal_level);
      stream.next(m.noise_level);
      stream.next(m.essid);
      stream.next(m.bssid);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Connection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wireless_msgs::Connection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::wireless_msgs::Connection_<ContainerAllocator>& v)
  {
    s << indent << "bitrate: ";
    Printer<float>::stream(s, indent + "  ", v.bitrate);
    s << indent << "txpower: ";
    Printer<int16_t>::stream(s, indent + "  ", v.txpower);
    s << indent << "link_quality_raw: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.link_quality_raw);
    s << indent << "link_quality: ";
    Printer<float>::stream(s, indent + "  ", v.link_quality);
    s << indent << "signal_level: ";
    Printer<int16_t>::stream(s, indent + "  ", v.signal_level);
    s << indent << "noise_level: ";
    Printer<int16_t>::stream(s, indent + "  ", v.noise_level);
    s << indent << "essid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.essid);
    s << indent << "bssid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.bssid);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WIRELESS_MSGS_MESSAGE_CONNECTION_H
