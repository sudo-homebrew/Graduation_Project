// Generated by gencpp from file underwater_sensor_msgs/DVL.msg
// DO NOT EDIT!


#ifndef UNDERWATER_SENSOR_MSGS_MESSAGE_DVL_H
#define UNDERWATER_SENSOR_MSGS_MESSAGE_DVL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace underwater_sensor_msgs
{
template <class ContainerAllocator>
struct DVL_
{
  typedef DVL_<ContainerAllocator> Type;

  DVL_()
    : header()
    , header_dvl()
    , date()
    , salinity(0.0)
    , temperature(0.0)
    , depth(0.0)
    , sound_speed(0.0)
    , test(0)
    , wi_x_axis(0.0)
    , wi_y_axis(0.0)
    , wi_z_axis(0.0)
    , wi_error(0.0)
    , wi_status()
    , bi_x_axis(0.0)
    , bi_y_axis(0.0)
    , bi_z_axis(0.0)
    , bi_error(0.0)
    , bi_status()
    , ws_transverse(0.0)
    , ws_longitudinal(0.0)
    , ws_normal(0.0)
    , ws_status()
    , bs_transverse(0.0)
    , bs_longitudinal(0.0)
    , bs_normal(0.0)
    , bs_status()
    , we_east(0.0)
    , we_north(0.0)
    , we_upwards(0.0)
    , we_status()
    , be_east(0.0)
    , be_north(0.0)
    , be_upwards(0.0)
    , be_status()
    , wd_east(0.0)
    , wd_north(0.0)
    , wd_upwards(0.0)
    , wd_range(0.0)
    , wd_time(0.0)
    , bd_east(0.0)
    , bd_north(0.0)
    , bd_upwards(0.0)
    , bd_range(0.0)
    , bd_time(0.0)
    , raw_data()  {
    }
  DVL_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , header_dvl(_alloc)
    , date(_alloc)
    , salinity(0.0)
    , temperature(0.0)
    , depth(0.0)
    , sound_speed(0.0)
    , test(0)
    , wi_x_axis(0.0)
    , wi_y_axis(0.0)
    , wi_z_axis(0.0)
    , wi_error(0.0)
    , wi_status(_alloc)
    , bi_x_axis(0.0)
    , bi_y_axis(0.0)
    , bi_z_axis(0.0)
    , bi_error(0.0)
    , bi_status(_alloc)
    , ws_transverse(0.0)
    , ws_longitudinal(0.0)
    , ws_normal(0.0)
    , ws_status(_alloc)
    , bs_transverse(0.0)
    , bs_longitudinal(0.0)
    , bs_normal(0.0)
    , bs_status(_alloc)
    , we_east(0.0)
    , we_north(0.0)
    , we_upwards(0.0)
    , we_status(_alloc)
    , be_east(0.0)
    , be_north(0.0)
    , be_upwards(0.0)
    , be_status(_alloc)
    , wd_east(0.0)
    , wd_north(0.0)
    , wd_upwards(0.0)
    , wd_range(0.0)
    , wd_time(0.0)
    , bd_east(0.0)
    , bd_north(0.0)
    , bd_upwards(0.0)
    , bd_range(0.0)
    , bd_time(0.0)
    , raw_data(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _header_dvl_type;
  _header_dvl_type header_dvl;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _date_type;
  _date_type date;

   typedef double _salinity_type;
  _salinity_type salinity;

   typedef double _temperature_type;
  _temperature_type temperature;

   typedef double _depth_type;
  _depth_type depth;

   typedef double _sound_speed_type;
  _sound_speed_type sound_speed;

   typedef int32_t _test_type;
  _test_type test;

   typedef double _wi_x_axis_type;
  _wi_x_axis_type wi_x_axis;

   typedef double _wi_y_axis_type;
  _wi_y_axis_type wi_y_axis;

   typedef double _wi_z_axis_type;
  _wi_z_axis_type wi_z_axis;

   typedef double _wi_error_type;
  _wi_error_type wi_error;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _wi_status_type;
  _wi_status_type wi_status;

   typedef double _bi_x_axis_type;
  _bi_x_axis_type bi_x_axis;

   typedef double _bi_y_axis_type;
  _bi_y_axis_type bi_y_axis;

   typedef double _bi_z_axis_type;
  _bi_z_axis_type bi_z_axis;

   typedef double _bi_error_type;
  _bi_error_type bi_error;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _bi_status_type;
  _bi_status_type bi_status;

   typedef double _ws_transverse_type;
  _ws_transverse_type ws_transverse;

   typedef double _ws_longitudinal_type;
  _ws_longitudinal_type ws_longitudinal;

   typedef double _ws_normal_type;
  _ws_normal_type ws_normal;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ws_status_type;
  _ws_status_type ws_status;

   typedef double _bs_transverse_type;
  _bs_transverse_type bs_transverse;

   typedef double _bs_longitudinal_type;
  _bs_longitudinal_type bs_longitudinal;

   typedef double _bs_normal_type;
  _bs_normal_type bs_normal;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _bs_status_type;
  _bs_status_type bs_status;

   typedef double _we_east_type;
  _we_east_type we_east;

   typedef double _we_north_type;
  _we_north_type we_north;

   typedef double _we_upwards_type;
  _we_upwards_type we_upwards;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _we_status_type;
  _we_status_type we_status;

   typedef double _be_east_type;
  _be_east_type be_east;

   typedef double _be_north_type;
  _be_north_type be_north;

   typedef double _be_upwards_type;
  _be_upwards_type be_upwards;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _be_status_type;
  _be_status_type be_status;

   typedef double _wd_east_type;
  _wd_east_type wd_east;

   typedef double _wd_north_type;
  _wd_north_type wd_north;

   typedef double _wd_upwards_type;
  _wd_upwards_type wd_upwards;

   typedef double _wd_range_type;
  _wd_range_type wd_range;

   typedef double _wd_time_type;
  _wd_time_type wd_time;

   typedef double _bd_east_type;
  _bd_east_type bd_east;

   typedef double _bd_north_type;
  _bd_north_type bd_north;

   typedef double _bd_upwards_type;
  _bd_upwards_type bd_upwards;

   typedef double _bd_range_type;
  _bd_range_type bd_range;

   typedef double _bd_time_type;
  _bd_time_type bd_time;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _raw_data_type;
  _raw_data_type raw_data;





  typedef boost::shared_ptr< ::underwater_sensor_msgs::DVL_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::underwater_sensor_msgs::DVL_<ContainerAllocator> const> ConstPtr;

}; // struct DVL_

typedef ::underwater_sensor_msgs::DVL_<std::allocator<void> > DVL;

typedef boost::shared_ptr< ::underwater_sensor_msgs::DVL > DVLPtr;
typedef boost::shared_ptr< ::underwater_sensor_msgs::DVL const> DVLConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::underwater_sensor_msgs::DVL_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::underwater_sensor_msgs::DVL_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace underwater_sensor_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'underwater_sensor_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/underwater_sensor_msgs/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::underwater_sensor_msgs::DVL_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::underwater_sensor_msgs::DVL_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::underwater_sensor_msgs::DVL_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::underwater_sensor_msgs::DVL_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::underwater_sensor_msgs::DVL_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::underwater_sensor_msgs::DVL_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::underwater_sensor_msgs::DVL_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c455f331872552e620e26fc7caad335d";
  }

  static const char* value(const ::underwater_sensor_msgs::DVL_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc455f331872552e6ULL;
  static const uint64_t static_value2 = 0x20e26fc7caad335dULL;
};

template<class ContainerAllocator>
struct DataType< ::underwater_sensor_msgs::DVL_<ContainerAllocator> >
{
  static const char* value()
  {
    return "underwater_sensor_msgs/DVL";
  }

  static const char* value(const ::underwater_sensor_msgs::DVL_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::underwater_sensor_msgs::DVL_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"string header_dvl\n"
"string date \n"
"float64 salinity \n"
"float64 temperature   	# TODO::ARNAU ha de ser generic ?\n"
"float64 depth  		# TODO::ARNAU ha de ser generic\n"
"float64 sound_speed \n"
"int32 test\n"
"#WATER-MASS, INSTRUMENT-REFERENCED VELOCITY DATA\n"
"float64 wi_x_axis \n"
"float64 wi_y_axis \n"
"float64 wi_z_axis \n"
"float64 wi_error \n"
"string wi_status \n"
"#BOTTOM-TRACK, INSTRUMENT-REFERENCED VELOCITY DATA\n"
"float64 bi_x_axis \n"
"float64 bi_y_axis \n"
"float64 bi_z_axis \n"
"float64 bi_error \n"
"string bi_status \n"
"#WATER-MASS, SHIP-REFERENCED VELOCITY DATA\n"
"float64 ws_transverse \n"
"float64 ws_longitudinal \n"
"float64 ws_normal \n"
"string ws_status \n"
"#BOTTOM-TRACK, SHIP-REFERENCED VELOCITY DATA\n"
"float64 bs_transverse \n"
"float64 bs_longitudinal \n"
"float64 bs_normal \n"
"string bs_status \n"
"#WATER-MASS, EARTH-REFERENCED VELOCITY DATA\n"
"float64 we_east \n"
"float64 we_north \n"
"float64 we_upwards \n"
"string  we_status \n"
"#BOTTOM-TRACK, EARTH-REFERENCED VELOCITY DATA\n"
"float64 be_east \n"
"float64 be_north \n"
"float64 be_upwards \n"
"string  be_status \n"
"#  WATER-MASS, EARTH-REFERENCED DISTANCE DATA\n"
"float64 wd_east \n"
"float64 wd_north \n"
"float64 wd_upwards \n"
"float64 wd_range \n"
"float64 wd_time \n"
"#BOTTOM-TRACK, EARTH-REFERENCED DISTANCE DATA\n"
"float64 bd_east \n"
"float64 bd_north \n"
"float64 bd_upwards \n"
"float64 bd_range \n"
"float64 bd_time\n"
"#RAW DATA \n"
"string raw_data\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::underwater_sensor_msgs::DVL_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::underwater_sensor_msgs::DVL_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.header_dvl);
      stream.next(m.date);
      stream.next(m.salinity);
      stream.next(m.temperature);
      stream.next(m.depth);
      stream.next(m.sound_speed);
      stream.next(m.test);
      stream.next(m.wi_x_axis);
      stream.next(m.wi_y_axis);
      stream.next(m.wi_z_axis);
      stream.next(m.wi_error);
      stream.next(m.wi_status);
      stream.next(m.bi_x_axis);
      stream.next(m.bi_y_axis);
      stream.next(m.bi_z_axis);
      stream.next(m.bi_error);
      stream.next(m.bi_status);
      stream.next(m.ws_transverse);
      stream.next(m.ws_longitudinal);
      stream.next(m.ws_normal);
      stream.next(m.ws_status);
      stream.next(m.bs_transverse);
      stream.next(m.bs_longitudinal);
      stream.next(m.bs_normal);
      stream.next(m.bs_status);
      stream.next(m.we_east);
      stream.next(m.we_north);
      stream.next(m.we_upwards);
      stream.next(m.we_status);
      stream.next(m.be_east);
      stream.next(m.be_north);
      stream.next(m.be_upwards);
      stream.next(m.be_status);
      stream.next(m.wd_east);
      stream.next(m.wd_north);
      stream.next(m.wd_upwards);
      stream.next(m.wd_range);
      stream.next(m.wd_time);
      stream.next(m.bd_east);
      stream.next(m.bd_north);
      stream.next(m.bd_upwards);
      stream.next(m.bd_range);
      stream.next(m.bd_time);
      stream.next(m.raw_data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DVL_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::underwater_sensor_msgs::DVL_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::underwater_sensor_msgs::DVL_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "header_dvl: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.header_dvl);
    s << indent << "date: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.date);
    s << indent << "salinity: ";
    Printer<double>::stream(s, indent + "  ", v.salinity);
    s << indent << "temperature: ";
    Printer<double>::stream(s, indent + "  ", v.temperature);
    s << indent << "depth: ";
    Printer<double>::stream(s, indent + "  ", v.depth);
    s << indent << "sound_speed: ";
    Printer<double>::stream(s, indent + "  ", v.sound_speed);
    s << indent << "test: ";
    Printer<int32_t>::stream(s, indent + "  ", v.test);
    s << indent << "wi_x_axis: ";
    Printer<double>::stream(s, indent + "  ", v.wi_x_axis);
    s << indent << "wi_y_axis: ";
    Printer<double>::stream(s, indent + "  ", v.wi_y_axis);
    s << indent << "wi_z_axis: ";
    Printer<double>::stream(s, indent + "  ", v.wi_z_axis);
    s << indent << "wi_error: ";
    Printer<double>::stream(s, indent + "  ", v.wi_error);
    s << indent << "wi_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.wi_status);
    s << indent << "bi_x_axis: ";
    Printer<double>::stream(s, indent + "  ", v.bi_x_axis);
    s << indent << "bi_y_axis: ";
    Printer<double>::stream(s, indent + "  ", v.bi_y_axis);
    s << indent << "bi_z_axis: ";
    Printer<double>::stream(s, indent + "  ", v.bi_z_axis);
    s << indent << "bi_error: ";
    Printer<double>::stream(s, indent + "  ", v.bi_error);
    s << indent << "bi_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.bi_status);
    s << indent << "ws_transverse: ";
    Printer<double>::stream(s, indent + "  ", v.ws_transverse);
    s << indent << "ws_longitudinal: ";
    Printer<double>::stream(s, indent + "  ", v.ws_longitudinal);
    s << indent << "ws_normal: ";
    Printer<double>::stream(s, indent + "  ", v.ws_normal);
    s << indent << "ws_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ws_status);
    s << indent << "bs_transverse: ";
    Printer<double>::stream(s, indent + "  ", v.bs_transverse);
    s << indent << "bs_longitudinal: ";
    Printer<double>::stream(s, indent + "  ", v.bs_longitudinal);
    s << indent << "bs_normal: ";
    Printer<double>::stream(s, indent + "  ", v.bs_normal);
    s << indent << "bs_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.bs_status);
    s << indent << "we_east: ";
    Printer<double>::stream(s, indent + "  ", v.we_east);
    s << indent << "we_north: ";
    Printer<double>::stream(s, indent + "  ", v.we_north);
    s << indent << "we_upwards: ";
    Printer<double>::stream(s, indent + "  ", v.we_upwards);
    s << indent << "we_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.we_status);
    s << indent << "be_east: ";
    Printer<double>::stream(s, indent + "  ", v.be_east);
    s << indent << "be_north: ";
    Printer<double>::stream(s, indent + "  ", v.be_north);
    s << indent << "be_upwards: ";
    Printer<double>::stream(s, indent + "  ", v.be_upwards);
    s << indent << "be_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.be_status);
    s << indent << "wd_east: ";
    Printer<double>::stream(s, indent + "  ", v.wd_east);
    s << indent << "wd_north: ";
    Printer<double>::stream(s, indent + "  ", v.wd_north);
    s << indent << "wd_upwards: ";
    Printer<double>::stream(s, indent + "  ", v.wd_upwards);
    s << indent << "wd_range: ";
    Printer<double>::stream(s, indent + "  ", v.wd_range);
    s << indent << "wd_time: ";
    Printer<double>::stream(s, indent + "  ", v.wd_time);
    s << indent << "bd_east: ";
    Printer<double>::stream(s, indent + "  ", v.bd_east);
    s << indent << "bd_north: ";
    Printer<double>::stream(s, indent + "  ", v.bd_north);
    s << indent << "bd_upwards: ";
    Printer<double>::stream(s, indent + "  ", v.bd_upwards);
    s << indent << "bd_range: ";
    Printer<double>::stream(s, indent + "  ", v.bd_range);
    s << indent << "bd_time: ";
    Printer<double>::stream(s, indent + "  ", v.bd_time);
    s << indent << "raw_data: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.raw_data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UNDERWATER_SENSOR_MSGS_MESSAGE_DVL_H
