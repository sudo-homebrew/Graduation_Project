// Generated by gencpp from file pddl_msgs/PDDLPlannerGoal.msg
// DO NOT EDIT!


#ifndef PDDL_MSGS_MESSAGE_PDDLPLANNERGOAL_H
#define PDDL_MSGS_MESSAGE_PDDLPLANNERGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <pddl_msgs/PDDLDomain.h>
#include <pddl_msgs/PDDLProblem.h>

namespace pddl_msgs
{
template <class ContainerAllocator>
struct PDDLPlannerGoal_
{
  typedef PDDLPlannerGoal_<ContainerAllocator> Type;

  PDDLPlannerGoal_()
    : domain()
    , problem()
    , max_planning_time()  {
    }
  PDDLPlannerGoal_(const ContainerAllocator& _alloc)
    : domain(_alloc)
    , problem(_alloc)
    , max_planning_time()  {
  (void)_alloc;
    }



   typedef  ::pddl_msgs::PDDLDomain_<ContainerAllocator>  _domain_type;
  _domain_type domain;

   typedef  ::pddl_msgs::PDDLProblem_<ContainerAllocator>  _problem_type;
  _problem_type problem;

   typedef ros::Duration _max_planning_time_type;
  _max_planning_time_type max_planning_time;





  typedef boost::shared_ptr< ::pddl_msgs::PDDLPlannerGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pddl_msgs::PDDLPlannerGoal_<ContainerAllocator> const> ConstPtr;

}; // struct PDDLPlannerGoal_

typedef ::pddl_msgs::PDDLPlannerGoal_<std::allocator<void> > PDDLPlannerGoal;

typedef boost::shared_ptr< ::pddl_msgs::PDDLPlannerGoal > PDDLPlannerGoalPtr;
typedef boost::shared_ptr< ::pddl_msgs::PDDLPlannerGoal const> PDDLPlannerGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pddl_msgs::PDDLPlannerGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pddl_msgs::PDDLPlannerGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pddl_msgs::PDDLPlannerGoal_<ContainerAllocator1> & lhs, const ::pddl_msgs::PDDLPlannerGoal_<ContainerAllocator2> & rhs)
{
  return lhs.domain == rhs.domain &&
    lhs.problem == rhs.problem &&
    lhs.max_planning_time == rhs.max_planning_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pddl_msgs::PDDLPlannerGoal_<ContainerAllocator1> & lhs, const ::pddl_msgs::PDDLPlannerGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pddl_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pddl_msgs::PDDLPlannerGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pddl_msgs::PDDLPlannerGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pddl_msgs::PDDLPlannerGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pddl_msgs::PDDLPlannerGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pddl_msgs::PDDLPlannerGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pddl_msgs::PDDLPlannerGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pddl_msgs::PDDLPlannerGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "edde570a56f98a3f657b9fa6fcd5af2b";
  }

  static const char* value(const ::pddl_msgs::PDDLPlannerGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xedde570a56f98a3fULL;
  static const uint64_t static_value2 = 0x657b9fa6fcd5af2bULL;
};

template<class ContainerAllocator>
struct DataType< ::pddl_msgs::PDDLPlannerGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pddl_msgs/PDDLPlannerGoal";
  }

  static const char* value(const ::pddl_msgs::PDDLPlannerGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pddl_msgs::PDDLPlannerGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# goal\n"
"pddl_msgs/PDDLDomain domain\n"
"pddl_msgs/PDDLProblem problem\n"
"duration max_planning_time\n"
"\n"
"================================================================================\n"
"MSG: pddl_msgs/PDDLDomain\n"
"string name\n"
"string requirements\n"
"string[] types\n"
"string[] constants\n"
"string[] predicates\n"
"pddl_msgs/PDDLAction[] actions\n"
"string[] functions\n"
"\n"
"================================================================================\n"
"MSG: pddl_msgs/PDDLAction\n"
"string name\n"
"# write String in S expression like \"(and foo var)\"\n"
"string parameters\n"
"string precondition\n"
"string effect\n"
"string on_condition\n"
"# we can't use duration name\n"
"string action_duration\n"
"================================================================================\n"
"MSG: pddl_msgs/PDDLProblem\n"
"string name          # name of problem\n"
"string domain        # name of domain to use\n"
"pddl_msgs/PDDLObject[] objects # how to represent type?\n"
"string[] initial     # initial condition\n"
"string goal          # goal conjunction\n"
"string metric        # metric\n"
"\n"
"\n"
"================================================================================\n"
"MSG: pddl_msgs/PDDLObject\n"
"# definition of PDDLObject\n"
"string name\n"
"string type\n"
;
  }

  static const char* value(const ::pddl_msgs::PDDLPlannerGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pddl_msgs::PDDLPlannerGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.domain);
      stream.next(m.problem);
      stream.next(m.max_planning_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PDDLPlannerGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pddl_msgs::PDDLPlannerGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pddl_msgs::PDDLPlannerGoal_<ContainerAllocator>& v)
  {
    s << indent << "domain: ";
    s << std::endl;
    Printer< ::pddl_msgs::PDDLDomain_<ContainerAllocator> >::stream(s, indent + "  ", v.domain);
    s << indent << "problem: ";
    s << std::endl;
    Printer< ::pddl_msgs::PDDLProblem_<ContainerAllocator> >::stream(s, indent + "  ", v.problem);
    s << indent << "max_planning_time: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.max_planning_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PDDL_MSGS_MESSAGE_PDDLPLANNERGOAL_H
