// Generated by gencpp from file pddl_msgs/PDDLPlannerResult.msg
// DO NOT EDIT!


#ifndef PDDL_MSGS_MESSAGE_PDDLPLANNERRESULT_H
#define PDDL_MSGS_MESSAGE_PDDLPLANNERRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <pddl_msgs/PDDLStep.h>

namespace pddl_msgs
{
template <class ContainerAllocator>
struct PDDLPlannerResult_
{
  typedef PDDLPlannerResult_<ContainerAllocator> Type;

  PDDLPlannerResult_()
    : data()
    , use_durative_action(false)
    , sequence()  {
    }
  PDDLPlannerResult_(const ContainerAllocator& _alloc)
    : data(_alloc)
    , use_durative_action(false)
    , sequence(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _data_type;
  _data_type data;

   typedef uint8_t _use_durative_action_type;
  _use_durative_action_type use_durative_action;

   typedef std::vector< ::pddl_msgs::PDDLStep_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::pddl_msgs::PDDLStep_<ContainerAllocator> >::other >  _sequence_type;
  _sequence_type sequence;





  typedef boost::shared_ptr< ::pddl_msgs::PDDLPlannerResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pddl_msgs::PDDLPlannerResult_<ContainerAllocator> const> ConstPtr;

}; // struct PDDLPlannerResult_

typedef ::pddl_msgs::PDDLPlannerResult_<std::allocator<void> > PDDLPlannerResult;

typedef boost::shared_ptr< ::pddl_msgs::PDDLPlannerResult > PDDLPlannerResultPtr;
typedef boost::shared_ptr< ::pddl_msgs::PDDLPlannerResult const> PDDLPlannerResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pddl_msgs::PDDLPlannerResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pddl_msgs::PDDLPlannerResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pddl_msgs::PDDLPlannerResult_<ContainerAllocator1> & lhs, const ::pddl_msgs::PDDLPlannerResult_<ContainerAllocator2> & rhs)
{
  return lhs.data == rhs.data &&
    lhs.use_durative_action == rhs.use_durative_action &&
    lhs.sequence == rhs.sequence;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pddl_msgs::PDDLPlannerResult_<ContainerAllocator1> & lhs, const ::pddl_msgs::PDDLPlannerResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pddl_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pddl_msgs::PDDLPlannerResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pddl_msgs::PDDLPlannerResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pddl_msgs::PDDLPlannerResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pddl_msgs::PDDLPlannerResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pddl_msgs::PDDLPlannerResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pddl_msgs::PDDLPlannerResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pddl_msgs::PDDLPlannerResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9220276db431d308099ea5d53fef9a9b";
  }

  static const char* value(const ::pddl_msgs::PDDLPlannerResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9220276db431d308ULL;
  static const uint64_t static_value2 = 0x099ea5d53fef9a9bULL;
};

template<class ContainerAllocator>
struct DataType< ::pddl_msgs::PDDLPlannerResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pddl_msgs/PDDLPlannerResult";
  }

  static const char* value(const ::pddl_msgs::PDDLPlannerResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pddl_msgs::PDDLPlannerResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#result\n"
"string[] data\n"
"bool use_durative_action\n"
"pddl_msgs/PDDLStep[] sequence\n"
"\n"
"================================================================================\n"
"MSG: pddl_msgs/PDDLStep\n"
"string action\n"
"string[] args\n"
"string start_time\n"
"# we can't use duration name\n"
"string action_duration\n"
;
  }

  static const char* value(const ::pddl_msgs::PDDLPlannerResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pddl_msgs::PDDLPlannerResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
      stream.next(m.use_durative_action);
      stream.next(m.sequence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PDDLPlannerResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pddl_msgs::PDDLPlannerResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pddl_msgs::PDDLPlannerResult_<ContainerAllocator>& v)
  {
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.data[i]);
    }
    s << indent << "use_durative_action: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.use_durative_action);
    s << indent << "sequence[]" << std::endl;
    for (size_t i = 0; i < v.sequence.size(); ++i)
    {
      s << indent << "  sequence[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::pddl_msgs::PDDLStep_<ContainerAllocator> >::stream(s, indent + "    ", v.sequence[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PDDL_MSGS_MESSAGE_PDDLPLANNERRESULT_H
