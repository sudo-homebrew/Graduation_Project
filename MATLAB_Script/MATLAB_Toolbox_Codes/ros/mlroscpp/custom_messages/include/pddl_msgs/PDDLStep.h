// Generated by gencpp from file pddl_msgs/PDDLStep.msg
// DO NOT EDIT!


#ifndef PDDL_MSGS_MESSAGE_PDDLSTEP_H
#define PDDL_MSGS_MESSAGE_PDDLSTEP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pddl_msgs
{
template <class ContainerAllocator>
struct PDDLStep_
{
  typedef PDDLStep_<ContainerAllocator> Type;

  PDDLStep_()
    : action()
    , args()
    , start_time()
    , action_duration()  {
    }
  PDDLStep_(const ContainerAllocator& _alloc)
    : action(_alloc)
    , args(_alloc)
    , start_time(_alloc)
    , action_duration(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _action_type;
  _action_type action;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _args_type;
  _args_type args;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _start_time_type;
  _start_time_type start_time;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _action_duration_type;
  _action_duration_type action_duration;





  typedef boost::shared_ptr< ::pddl_msgs::PDDLStep_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pddl_msgs::PDDLStep_<ContainerAllocator> const> ConstPtr;

}; // struct PDDLStep_

typedef ::pddl_msgs::PDDLStep_<std::allocator<void> > PDDLStep;

typedef boost::shared_ptr< ::pddl_msgs::PDDLStep > PDDLStepPtr;
typedef boost::shared_ptr< ::pddl_msgs::PDDLStep const> PDDLStepConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pddl_msgs::PDDLStep_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pddl_msgs::PDDLStep_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pddl_msgs::PDDLStep_<ContainerAllocator1> & lhs, const ::pddl_msgs::PDDLStep_<ContainerAllocator2> & rhs)
{
  return lhs.action == rhs.action &&
    lhs.args == rhs.args &&
    lhs.start_time == rhs.start_time &&
    lhs.action_duration == rhs.action_duration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pddl_msgs::PDDLStep_<ContainerAllocator1> & lhs, const ::pddl_msgs::PDDLStep_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pddl_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pddl_msgs::PDDLStep_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pddl_msgs::PDDLStep_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pddl_msgs::PDDLStep_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pddl_msgs::PDDLStep_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pddl_msgs::PDDLStep_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pddl_msgs::PDDLStep_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pddl_msgs::PDDLStep_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d79a0663dfa206e7ac7a0755c6d1e154";
  }

  static const char* value(const ::pddl_msgs::PDDLStep_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd79a0663dfa206e7ULL;
  static const uint64_t static_value2 = 0xac7a0755c6d1e154ULL;
};

template<class ContainerAllocator>
struct DataType< ::pddl_msgs::PDDLStep_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pddl_msgs/PDDLStep";
  }

  static const char* value(const ::pddl_msgs::PDDLStep_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pddl_msgs::PDDLStep_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string action\n"
"string[] args\n"
"string start_time\n"
"# we can't use duration name\n"
"string action_duration\n"
;
  }

  static const char* value(const ::pddl_msgs::PDDLStep_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pddl_msgs::PDDLStep_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action);
      stream.next(m.args);
      stream.next(m.start_time);
      stream.next(m.action_duration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PDDLStep_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pddl_msgs::PDDLStep_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pddl_msgs::PDDLStep_<ContainerAllocator>& v)
  {
    s << indent << "action: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.action);
    s << indent << "args[]" << std::endl;
    for (size_t i = 0; i < v.args.size(); ++i)
    {
      s << indent << "  args[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.args[i]);
    }
    s << indent << "start_time: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.start_time);
    s << indent << "action_duration: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.action_duration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PDDL_MSGS_MESSAGE_PDDLSTEP_H
