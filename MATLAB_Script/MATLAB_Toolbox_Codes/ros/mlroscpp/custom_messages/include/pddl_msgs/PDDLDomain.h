// Generated by gencpp from file pddl_msgs/PDDLDomain.msg
// DO NOT EDIT!


#ifndef PDDL_MSGS_MESSAGE_PDDLDOMAIN_H
#define PDDL_MSGS_MESSAGE_PDDLDOMAIN_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <pddl_msgs/PDDLAction.h>

namespace pddl_msgs
{
template <class ContainerAllocator>
struct PDDLDomain_
{
  typedef PDDLDomain_<ContainerAllocator> Type;

  PDDLDomain_()
    : name()
    , requirements()
    , types()
    , constants()
    , predicates()
    , actions()
    , functions()  {
    }
  PDDLDomain_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , requirements(_alloc)
    , types(_alloc)
    , constants(_alloc)
    , predicates(_alloc)
    , actions(_alloc)
    , functions(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _requirements_type;
  _requirements_type requirements;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _types_type;
  _types_type types;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _constants_type;
  _constants_type constants;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _predicates_type;
  _predicates_type predicates;

   typedef std::vector< ::pddl_msgs::PDDLAction_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::pddl_msgs::PDDLAction_<ContainerAllocator> >::other >  _actions_type;
  _actions_type actions;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _functions_type;
  _functions_type functions;





  typedef boost::shared_ptr< ::pddl_msgs::PDDLDomain_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pddl_msgs::PDDLDomain_<ContainerAllocator> const> ConstPtr;

}; // struct PDDLDomain_

typedef ::pddl_msgs::PDDLDomain_<std::allocator<void> > PDDLDomain;

typedef boost::shared_ptr< ::pddl_msgs::PDDLDomain > PDDLDomainPtr;
typedef boost::shared_ptr< ::pddl_msgs::PDDLDomain const> PDDLDomainConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pddl_msgs::PDDLDomain_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pddl_msgs::PDDLDomain_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pddl_msgs::PDDLDomain_<ContainerAllocator1> & lhs, const ::pddl_msgs::PDDLDomain_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.requirements == rhs.requirements &&
    lhs.types == rhs.types &&
    lhs.constants == rhs.constants &&
    lhs.predicates == rhs.predicates &&
    lhs.actions == rhs.actions &&
    lhs.functions == rhs.functions;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pddl_msgs::PDDLDomain_<ContainerAllocator1> & lhs, const ::pddl_msgs::PDDLDomain_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pddl_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pddl_msgs::PDDLDomain_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pddl_msgs::PDDLDomain_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pddl_msgs::PDDLDomain_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pddl_msgs::PDDLDomain_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pddl_msgs::PDDLDomain_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pddl_msgs::PDDLDomain_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pddl_msgs::PDDLDomain_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1db1abf7dbdf3e62fc55c75c4b365253";
  }

  static const char* value(const ::pddl_msgs::PDDLDomain_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1db1abf7dbdf3e62ULL;
  static const uint64_t static_value2 = 0xfc55c75c4b365253ULL;
};

template<class ContainerAllocator>
struct DataType< ::pddl_msgs::PDDLDomain_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pddl_msgs/PDDLDomain";
  }

  static const char* value(const ::pddl_msgs::PDDLDomain_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pddl_msgs::PDDLDomain_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"string requirements\n"
"string[] types\n"
"string[] constants\n"
"string[] predicates\n"
"pddl_msgs/PDDLAction[] actions\n"
"string[] functions\n"
"\n"
"================================================================================\n"
"MSG: pddl_msgs/PDDLAction\n"
"string name\n"
"# write String in S expression like \"(and foo var)\"\n"
"string parameters\n"
"string precondition\n"
"string effect\n"
"string on_condition\n"
"# we can't use duration name\n"
"string action_duration\n"
;
  }

  static const char* value(const ::pddl_msgs::PDDLDomain_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pddl_msgs::PDDLDomain_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.requirements);
      stream.next(m.types);
      stream.next(m.constants);
      stream.next(m.predicates);
      stream.next(m.actions);
      stream.next(m.functions);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PDDLDomain_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pddl_msgs::PDDLDomain_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pddl_msgs::PDDLDomain_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "requirements: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.requirements);
    s << indent << "types[]" << std::endl;
    for (size_t i = 0; i < v.types.size(); ++i)
    {
      s << indent << "  types[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.types[i]);
    }
    s << indent << "constants[]" << std::endl;
    for (size_t i = 0; i < v.constants.size(); ++i)
    {
      s << indent << "  constants[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.constants[i]);
    }
    s << indent << "predicates[]" << std::endl;
    for (size_t i = 0; i < v.predicates.size(); ++i)
    {
      s << indent << "  predicates[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.predicates[i]);
    }
    s << indent << "actions[]" << std::endl;
    for (size_t i = 0; i < v.actions.size(); ++i)
    {
      s << indent << "  actions[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::pddl_msgs::PDDLAction_<ContainerAllocator> >::stream(s, indent + "    ", v.actions[i]);
    }
    s << indent << "functions[]" << std::endl;
    for (size_t i = 0; i < v.functions.size(); ++i)
    {
      s << indent << "  functions[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.functions[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PDDL_MSGS_MESSAGE_PDDLDOMAIN_H
