// Generated by gencpp from file pddl_msgs/PDDLProblem.msg
// DO NOT EDIT!


#ifndef PDDL_MSGS_MESSAGE_PDDLPROBLEM_H
#define PDDL_MSGS_MESSAGE_PDDLPROBLEM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <pddl_msgs/PDDLObject.h>

namespace pddl_msgs
{
template <class ContainerAllocator>
struct PDDLProblem_
{
  typedef PDDLProblem_<ContainerAllocator> Type;

  PDDLProblem_()
    : name()
    , domain()
    , objects()
    , initial()
    , goal()
    , metric()  {
    }
  PDDLProblem_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , domain(_alloc)
    , objects(_alloc)
    , initial(_alloc)
    , goal(_alloc)
    , metric(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _domain_type;
  _domain_type domain;

   typedef std::vector< ::pddl_msgs::PDDLObject_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::pddl_msgs::PDDLObject_<ContainerAllocator> >::other >  _objects_type;
  _objects_type objects;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _initial_type;
  _initial_type initial;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _goal_type;
  _goal_type goal;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _metric_type;
  _metric_type metric;





  typedef boost::shared_ptr< ::pddl_msgs::PDDLProblem_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pddl_msgs::PDDLProblem_<ContainerAllocator> const> ConstPtr;

}; // struct PDDLProblem_

typedef ::pddl_msgs::PDDLProblem_<std::allocator<void> > PDDLProblem;

typedef boost::shared_ptr< ::pddl_msgs::PDDLProblem > PDDLProblemPtr;
typedef boost::shared_ptr< ::pddl_msgs::PDDLProblem const> PDDLProblemConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pddl_msgs::PDDLProblem_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pddl_msgs::PDDLProblem_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pddl_msgs::PDDLProblem_<ContainerAllocator1> & lhs, const ::pddl_msgs::PDDLProblem_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.domain == rhs.domain &&
    lhs.objects == rhs.objects &&
    lhs.initial == rhs.initial &&
    lhs.goal == rhs.goal &&
    lhs.metric == rhs.metric;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pddl_msgs::PDDLProblem_<ContainerAllocator1> & lhs, const ::pddl_msgs::PDDLProblem_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pddl_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pddl_msgs::PDDLProblem_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pddl_msgs::PDDLProblem_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pddl_msgs::PDDLProblem_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pddl_msgs::PDDLProblem_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pddl_msgs::PDDLProblem_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pddl_msgs::PDDLProblem_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pddl_msgs::PDDLProblem_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dfd9bdd094d91245128f960694763882";
  }

  static const char* value(const ::pddl_msgs::PDDLProblem_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdfd9bdd094d91245ULL;
  static const uint64_t static_value2 = 0x128f960694763882ULL;
};

template<class ContainerAllocator>
struct DataType< ::pddl_msgs::PDDLProblem_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pddl_msgs/PDDLProblem";
  }

  static const char* value(const ::pddl_msgs::PDDLProblem_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pddl_msgs::PDDLProblem_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name          # name of problem\n"
"string domain        # name of domain to use\n"
"pddl_msgs/PDDLObject[] objects # how to represent type?\n"
"string[] initial     # initial condition\n"
"string goal          # goal conjunction\n"
"string metric        # metric\n"
"\n"
"\n"
"================================================================================\n"
"MSG: pddl_msgs/PDDLObject\n"
"# definition of PDDLObject\n"
"string name\n"
"string type\n"
;
  }

  static const char* value(const ::pddl_msgs::PDDLProblem_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pddl_msgs::PDDLProblem_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.domain);
      stream.next(m.objects);
      stream.next(m.initial);
      stream.next(m.goal);
      stream.next(m.metric);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PDDLProblem_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pddl_msgs::PDDLProblem_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pddl_msgs::PDDLProblem_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "domain: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.domain);
    s << indent << "objects[]" << std::endl;
    for (size_t i = 0; i < v.objects.size(); ++i)
    {
      s << indent << "  objects[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::pddl_msgs::PDDLObject_<ContainerAllocator> >::stream(s, indent + "    ", v.objects[i]);
    }
    s << indent << "initial[]" << std::endl;
    for (size_t i = 0; i < v.initial.size(); ++i)
    {
      s << indent << "  initial[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.initial[i]);
    }
    s << indent << "goal: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.goal);
    s << indent << "metric: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.metric);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PDDL_MSGS_MESSAGE_PDDLPROBLEM_H
