// Generated by gencpp from file visp_tracker/TrackerSettings.msg
// DO NOT EDIT!


#ifndef VISP_TRACKER_MESSAGE_TRACKERSETTINGS_H
#define VISP_TRACKER_MESSAGE_TRACKERSETTINGS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace visp_tracker
{
template <class ContainerAllocator>
struct TrackerSettings_
{
  typedef TrackerSettings_<ContainerAllocator> Type;

  TrackerSettings_()
    : angle_appear(0.0)
    , angle_disappear(0.0)  {
    }
  TrackerSettings_(const ContainerAllocator& _alloc)
    : angle_appear(0.0)
    , angle_disappear(0.0)  {
  (void)_alloc;
    }



   typedef double _angle_appear_type;
  _angle_appear_type angle_appear;

   typedef double _angle_disappear_type;
  _angle_disappear_type angle_disappear;





  typedef boost::shared_ptr< ::visp_tracker::TrackerSettings_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::visp_tracker::TrackerSettings_<ContainerAllocator> const> ConstPtr;

}; // struct TrackerSettings_

typedef ::visp_tracker::TrackerSettings_<std::allocator<void> > TrackerSettings;

typedef boost::shared_ptr< ::visp_tracker::TrackerSettings > TrackerSettingsPtr;
typedef boost::shared_ptr< ::visp_tracker::TrackerSettings const> TrackerSettingsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::visp_tracker::TrackerSettings_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::visp_tracker::TrackerSettings_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::visp_tracker::TrackerSettings_<ContainerAllocator1> & lhs, const ::visp_tracker::TrackerSettings_<ContainerAllocator2> & rhs)
{
  return lhs.angle_appear == rhs.angle_appear &&
    lhs.angle_disappear == rhs.angle_disappear;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::visp_tracker::TrackerSettings_<ContainerAllocator1> & lhs, const ::visp_tracker::TrackerSettings_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace visp_tracker

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::visp_tracker::TrackerSettings_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::visp_tracker::TrackerSettings_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::visp_tracker::TrackerSettings_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::visp_tracker::TrackerSettings_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::visp_tracker::TrackerSettings_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::visp_tracker::TrackerSettings_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::visp_tracker::TrackerSettings_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3af7f3dad594635cfe340be2c0b60a68";
  }

  static const char* value(const ::visp_tracker::TrackerSettings_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3af7f3dad594635cULL;
  static const uint64_t static_value2 = 0xfe340be2c0b60a68ULL;
};

template<class ContainerAllocator>
struct DataType< ::visp_tracker::TrackerSettings_<ContainerAllocator> >
{
  static const char* value()
  {
    return "visp_tracker/TrackerSettings";
  }

  static const char* value(const ::visp_tracker::TrackerSettings_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::visp_tracker::TrackerSettings_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message contains tracking parameters.\n"
"#\n"
"# These parameters determine how precise, how fast and how\n"
"# reliable will be the tracking.\n"
"#\n"
"# It should be tuned carefully and can be changed dynamically.\n"
"#\n"
"# For more details, see the ViSP documentation:\n"
"# http://www.irisa.fr/lagadic/visp/publication.html\n"
"\n"
"# Common Tracker Parameters.\n"
"float64 angle_appear    # Angle to test faces apparition\n"
"float64 angle_disappear # Angle to test faces disparition\n"
"\n"
;
  }

  static const char* value(const ::visp_tracker::TrackerSettings_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::visp_tracker::TrackerSettings_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.angle_appear);
      stream.next(m.angle_disappear);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrackerSettings_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::visp_tracker::TrackerSettings_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::visp_tracker::TrackerSettings_<ContainerAllocator>& v)
  {
    s << indent << "angle_appear: ";
    Printer<double>::stream(s, indent + "  ", v.angle_appear);
    s << indent << "angle_disappear: ";
    Printer<double>::stream(s, indent + "  ", v.angle_disappear);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISP_TRACKER_MESSAGE_TRACKERSETTINGS_H
