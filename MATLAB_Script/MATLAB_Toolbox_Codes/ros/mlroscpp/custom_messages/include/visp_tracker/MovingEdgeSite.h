// Generated by gencpp from file visp_tracker/MovingEdgeSite.msg
// DO NOT EDIT!


#ifndef VISP_TRACKER_MESSAGE_MOVINGEDGESITE_H
#define VISP_TRACKER_MESSAGE_MOVINGEDGESITE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace visp_tracker
{
template <class ContainerAllocator>
struct MovingEdgeSite_
{
  typedef MovingEdgeSite_<ContainerAllocator> Type;

  MovingEdgeSite_()
    : x(0.0)
    , y(0.0)
    , suppress(0)  {
    }
  MovingEdgeSite_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , suppress(0)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef int32_t _suppress_type;
  _suppress_type suppress;





  typedef boost::shared_ptr< ::visp_tracker::MovingEdgeSite_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::visp_tracker::MovingEdgeSite_<ContainerAllocator> const> ConstPtr;

}; // struct MovingEdgeSite_

typedef ::visp_tracker::MovingEdgeSite_<std::allocator<void> > MovingEdgeSite;

typedef boost::shared_ptr< ::visp_tracker::MovingEdgeSite > MovingEdgeSitePtr;
typedef boost::shared_ptr< ::visp_tracker::MovingEdgeSite const> MovingEdgeSiteConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::visp_tracker::MovingEdgeSite_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::visp_tracker::MovingEdgeSite_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::visp_tracker::MovingEdgeSite_<ContainerAllocator1> & lhs, const ::visp_tracker::MovingEdgeSite_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.suppress == rhs.suppress;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::visp_tracker::MovingEdgeSite_<ContainerAllocator1> & lhs, const ::visp_tracker::MovingEdgeSite_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace visp_tracker

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::visp_tracker::MovingEdgeSite_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::visp_tracker::MovingEdgeSite_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::visp_tracker::MovingEdgeSite_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::visp_tracker::MovingEdgeSite_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::visp_tracker::MovingEdgeSite_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::visp_tracker::MovingEdgeSite_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::visp_tracker::MovingEdgeSite_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d67448def98304944978d0ca12803af8";
  }

  static const char* value(const ::visp_tracker::MovingEdgeSite_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd67448def9830494ULL;
  static const uint64_t static_value2 = 0x4978d0ca12803af8ULL;
};

template<class ContainerAllocator>
struct DataType< ::visp_tracker::MovingEdgeSite_<ContainerAllocator> >
{
  static const char* value()
  {
    return "visp_tracker/MovingEdgeSite";
  }

  static const char* value(const ::visp_tracker::MovingEdgeSite_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::visp_tracker::MovingEdgeSite_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Moving edge position.\n"
"\n"
"float64 x      # X position in the image\n"
"float64 y      # Y position in the image\n"
"int32 suppress # Is the moving edge valid?\n"
"               # - 0:   yes\n"
"	       # - 1:   no, constrast check has failed.\n"
"	       # - 2:   no, threshold check has failed.\n"
"	       # - 3:   no, M-estimator check has failed.\n"
"	       # - >=4: no, undocumented reason.\n"
;
  }

  static const char* value(const ::visp_tracker::MovingEdgeSite_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::visp_tracker::MovingEdgeSite_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.suppress);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MovingEdgeSite_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::visp_tracker::MovingEdgeSite_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::visp_tracker::MovingEdgeSite_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "suppress: ";
    Printer<int32_t>::stream(s, indent + "  ", v.suppress);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISP_TRACKER_MESSAGE_MOVINGEDGESITE_H
