// Generated by gencpp from file scheduler_msgs/SchedulerRequests.msg
// DO NOT EDIT!


#ifndef SCHEDULER_MSGS_MESSAGE_SCHEDULERREQUESTS_H
#define SCHEDULER_MSGS_MESSAGE_SCHEDULERREQUESTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <uuid_msgs/UniqueID.h>
#include <scheduler_msgs/Request.h>

namespace scheduler_msgs
{
template <class ContainerAllocator>
struct SchedulerRequests_
{
  typedef SchedulerRequests_<ContainerAllocator> Type;

  SchedulerRequests_()
    : header()
    , requester()
    , requests()  {
    }
  SchedulerRequests_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , requester(_alloc)
    , requests(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::uuid_msgs::UniqueID_<ContainerAllocator>  _requester_type;
  _requester_type requester;

   typedef std::vector< ::scheduler_msgs::Request_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::scheduler_msgs::Request_<ContainerAllocator> >::other >  _requests_type;
  _requests_type requests;





  typedef boost::shared_ptr< ::scheduler_msgs::SchedulerRequests_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scheduler_msgs::SchedulerRequests_<ContainerAllocator> const> ConstPtr;

}; // struct SchedulerRequests_

typedef ::scheduler_msgs::SchedulerRequests_<std::allocator<void> > SchedulerRequests;

typedef boost::shared_ptr< ::scheduler_msgs::SchedulerRequests > SchedulerRequestsPtr;
typedef boost::shared_ptr< ::scheduler_msgs::SchedulerRequests const> SchedulerRequestsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::scheduler_msgs::SchedulerRequests_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::scheduler_msgs::SchedulerRequests_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::scheduler_msgs::SchedulerRequests_<ContainerAllocator1> & lhs, const ::scheduler_msgs::SchedulerRequests_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.requester == rhs.requester &&
    lhs.requests == rhs.requests;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::scheduler_msgs::SchedulerRequests_<ContainerAllocator1> & lhs, const ::scheduler_msgs::SchedulerRequests_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace scheduler_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::scheduler_msgs::SchedulerRequests_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scheduler_msgs::SchedulerRequests_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scheduler_msgs::SchedulerRequests_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scheduler_msgs::SchedulerRequests_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scheduler_msgs::SchedulerRequests_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scheduler_msgs::SchedulerRequests_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::scheduler_msgs::SchedulerRequests_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d0adc2f83296939c4b208a3e0619e86f";
  }

  static const char* value(const ::scheduler_msgs::SchedulerRequests_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd0adc2f83296939cULL;
  static const uint64_t static_value2 = 0x4b208a3e0619e86fULL;
};

template<class ContainerAllocator>
struct DataType< ::scheduler_msgs::SchedulerRequests_<ContainerAllocator> >
{
  static const char* value()
  {
    return "scheduler_msgs/SchedulerRequests";
  }

  static const char* value(const ::scheduler_msgs::SchedulerRequests_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::scheduler_msgs::SchedulerRequests_<ContainerAllocator> >
{
  static const char* value()
  {
    return "### Scheduler Requests\n"
"#\n"
"#   Rocon services send this message on the scheduler's input topic to\n"
"#   make or update their resource requests.  All resources they\n"
"#   currently have or desire should be included.\n"
"#\n"
"#   If not all of the requested resources are immediately available,\n"
"#   the scheduler will queue those requests and provide feedback using\n"
"#   a message of the same type.  The requester should wait until\n"
"#   feedback indicates the associated resources are available.  It may\n"
"#   cancel some requests at any time via an new allocation message.\n"
"#\n"
"Header header                   # Time of this status, frame_id irrelevant\n"
"uuid_msgs/UniqueID requester    # Requester identifier\n"
"Request[] requests              # Status of every currently-known request\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: uuid_msgs/UniqueID\n"
"# A universally unique identifier (UUID).\n"
"#\n"
"#  http://en.wikipedia.org/wiki/Universally_unique_identifier\n"
"#  http://tools.ietf.org/html/rfc4122.html\n"
"\n"
"uint8[16] uuid\n"
"\n"
"================================================================================\n"
"MSG: scheduler_msgs/Request\n"
"### Resource request description\n"
"#\n"
"#   This tracks the progress of a single requested resource group.\n"
"#   All these resources will be granted, preempted or canceled\n"
"#   together as a unit.\n"
"\n"
"##############################################################################\n"
"# Resource Identification\n"
"##############################################################################\n"
"\n"
"uuid_msgs/UniqueID id   # Requester-assigned universally unique identifier\n"
"Resource[] resources    # List of requested rapps and platforms\n"
"\n"
"##############################################################################\n"
"# State\n"
"##############################################################################\n"
"\n"
"uint8 status            # Current status of this request\n"
"uint8 reason            # Reason for this status\n"
"string problem          # Convenience message for introspecting on the reason \n"
"\n"
"#  Status value labels:\n"
"uint8 NEW         = 0   # New request for the scheduler\n"
"uint8 RESERVED    = 1   # Request for a reservation at some future time\n"
"uint8 WAITING     = 2   # Request has been queued by the scheduler\n"
"uint8 GRANTED     = 3   # Request was granted by the scheduler\n"
"uint8 PREEMPTING  = 4   # The scheduler wants to preempt this\n"
"                        #   previously-granted request, but the\n"
"                        #   requester has not yet canceled it\n"
"uint8 CANCELING   = 5   # The requester wishes to cancel this\n"
"                        #   request, but the scheduler has not yet\n"
"                        #   confirmed that it is closed\n"
"uint8 CLOSED      = 6   # Request is now closed (terminal state)\n"
"\n"
"# Reason labels:\n"
"uint8 NONE        = 0   # No reason provided\n"
"uint8 PREEMPTED   = 1   # Preempted for higher-priority task\n"
"uint8 BUSY        = 2   # Requested resource busy elsewhere\n"
"uint8 UNAVAILABLE = 3   # Requested resource not available\n"
"uint8 TIMEOUT     = 4   # Lost contact with requester\n"
"uint8 INVALID     = 5   # Ill-formed request: see problem string for details\n"
"\n"
"##############################################################################\n"
"# Scheduling Variables\n"
"##############################################################################\n"
"\n"
"time     availability   # Estimated time of availability (zero if unknown)\n"
"duration hold_time      # Estimated hold time once allocated (zero if unknown)\n"
"int16    priority       # Current priority of this request\n"
"\n"
"# Priority labels:\n"
"int16 BACKGROUND_PRIORITY = -20000      # When nothing else to do\n"
"int16 LOW_PRIORITY = -10000             # Low-priority task\n"
"int16 DEFAULT_PRIORITY = 0              # Sane default priority\n"
"int16 HIGH_PRIORITY = 10000             # High-priority task\n"
"int16 CRITICAL_PRIORITY = 20000         # Mission-critical task\n"
"\n"
"================================================================================\n"
"MSG: scheduler_msgs/Resource\n"
"### ROCON resource request or response.\n"
"#\n"
"#   A scheduler_msgs/Request message includes one Resource message for\n"
"#   each desired resource.  The scheduler responds using this same\n"
"#   message to identify exactly what corresponding resource it has\n"
"#   granted.\n"
"\n"
"# This is usually a uniquely identifying ros_package/rapp name\n"
"# identifier, which is unique because ros packages are unique.\n"
"string rapp\n"
"\n"
"# Unique identifier assigned by the requester to track resources\n"
"# assigned in the scheduler feedback.\n"
"uuid_msgs/UniqueID id\n"
"\n"
"# Uniform Resource Identifier for the platform.  ROCON defines two\n"
"# kinds of URI strings:\n"
"#\n"
"# 1) A \"resource description URI\" is a canonical string for a specific\n"
"#    device.  All components are fully resolved to their most specific\n"
"#    values, like:\n"
"#\n"
"#      \"rocon:/turtlebot/dude3/hydro/precise\"\n"
"#\n"
"#    The scheduler provides fully resolved resource description URIs\n"
"#    in its feedback for requests that have been granted.\n"
"#\n"
"# 2) A \"request URI\" may provide a similar descriptive representation,\n"
"#    or may include patterns for matching multiple alternative\n"
"#    platforms.  Omitted or '*' patterns match any valid value:\n"
"#\n"
"#      \"\"                               # (empty string): any platform\n"
"#      \"rocon:/turtlebot\"               # any turtlebot\n"
"#      \"rocon:/(turtlebot|segbot)\"      # any robot of either type\n"
"#      \"rocon:/*/dude3\"                 # any device named dude3\n"
"#      \"rocon:/*/*/ros/ubuntu\"          # any ROS Ubuntu platform\n"
"#\n"
"string uri\n"
"\n"
"# Remappings which get passed on for starting the rapps. Also potentially for\n"
"# more esoteric use cases such as checking whether an app is sharable.\n"
"rocon_std_msgs/Remapping[] remappings\n"
"rocon_std_msgs/KeyValue[] parameters\n"
"\n"
"================================================================================\n"
"MSG: rocon_std_msgs/Remapping\n"
"# Describes your typical ros remapping\n"
"\n"
"string remap_from\n"
"string remap_to\n"
"\n"
"================================================================================\n"
"MSG: rocon_std_msgs/KeyValue\n"
"string key\n"
"string value\n"
;
  }

  static const char* value(const ::scheduler_msgs::SchedulerRequests_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::scheduler_msgs::SchedulerRequests_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.requester);
      stream.next(m.requests);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SchedulerRequests_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scheduler_msgs::SchedulerRequests_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::scheduler_msgs::SchedulerRequests_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "requester: ";
    s << std::endl;
    Printer< ::uuid_msgs::UniqueID_<ContainerAllocator> >::stream(s, indent + "  ", v.requester);
    s << indent << "requests[]" << std::endl;
    for (size_t i = 0; i < v.requests.size(); ++i)
    {
      s << indent << "  requests[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::scheduler_msgs::Request_<ContainerAllocator> >::stream(s, indent + "    ", v.requests[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCHEDULER_MSGS_MESSAGE_SCHEDULERREQUESTS_H
