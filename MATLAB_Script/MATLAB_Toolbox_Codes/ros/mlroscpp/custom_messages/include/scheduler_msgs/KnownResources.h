// Generated by gencpp from file scheduler_msgs/KnownResources.msg
// DO NOT EDIT!


#ifndef SCHEDULER_MSGS_MESSAGE_KNOWNRESOURCES_H
#define SCHEDULER_MSGS_MESSAGE_KNOWNRESOURCES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <scheduler_msgs/CurrentStatus.h>

namespace scheduler_msgs
{
template <class ContainerAllocator>
struct KnownResources_
{
  typedef KnownResources_<ContainerAllocator> Type;

  KnownResources_()
    : header()
    , resources()  {
    }
  KnownResources_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , resources(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::scheduler_msgs::CurrentStatus_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::scheduler_msgs::CurrentStatus_<ContainerAllocator> >::other >  _resources_type;
  _resources_type resources;





  typedef boost::shared_ptr< ::scheduler_msgs::KnownResources_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scheduler_msgs::KnownResources_<ContainerAllocator> const> ConstPtr;

}; // struct KnownResources_

typedef ::scheduler_msgs::KnownResources_<std::allocator<void> > KnownResources;

typedef boost::shared_ptr< ::scheduler_msgs::KnownResources > KnownResourcesPtr;
typedef boost::shared_ptr< ::scheduler_msgs::KnownResources const> KnownResourcesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::scheduler_msgs::KnownResources_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::scheduler_msgs::KnownResources_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::scheduler_msgs::KnownResources_<ContainerAllocator1> & lhs, const ::scheduler_msgs::KnownResources_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.resources == rhs.resources;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::scheduler_msgs::KnownResources_<ContainerAllocator1> & lhs, const ::scheduler_msgs::KnownResources_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace scheduler_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::scheduler_msgs::KnownResources_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scheduler_msgs::KnownResources_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scheduler_msgs::KnownResources_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scheduler_msgs::KnownResources_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scheduler_msgs::KnownResources_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scheduler_msgs::KnownResources_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::scheduler_msgs::KnownResources_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d3e12e9eddf5fe98089b8d550ce49151";
  }

  static const char* value(const ::scheduler_msgs::KnownResources_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd3e12e9eddf5fe98ULL;
  static const uint64_t static_value2 = 0x089b8d550ce49151ULL;
};

template<class ContainerAllocator>
struct DataType< ::scheduler_msgs::KnownResources_<ContainerAllocator> >
{
  static const char* value()
  {
    return "scheduler_msgs/KnownResources";
  }

  static const char* value(const ::scheduler_msgs::KnownResources_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::scheduler_msgs::KnownResources_<ContainerAllocator> >
{
  static const char* value()
  {
    return "### Known resources.\n"
"#\n"
"#   A ROCON scheduler uses this message to report the status of all\n"
"#   the resources it knows about and manages.\n"
"#\n"
"Header header                   # Time of this status, frame_id irrelevant\n"
"CurrentStatus[] resources       # Status of every currently-known resource\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: scheduler_msgs/CurrentStatus\n"
"### ROCON resource current status.\n"
"#\n"
"#   A ROCON scheduler uses this message to report the status of each\n"
"#   resource it manages.\n"
"#\n"
"\n"
"##############################################################################\n"
"# Resource Identification\n"
"##############################################################################\n"
"\n"
"#   A canonical ROCON Uniform Resource Identifier describing this\n"
"#   resource, a fully-resolved character string in the form:\n"
"#\n"
"#      rocon:/platform/name/framework/os\n"
"#\n"
"string uri\n"
"\n"
"##############################################################################\n"
"# Status\n"
"##############################################################################\n"
"\n"
"uint8 status            # Current status of this resource\n"
"\n"
"#  Status value labels:\n"
"uint8 AVAILABLE   = 0   # Available for use\n"
"uint8 ALLOCATED   = 1   # Allocated to some ROCON request\n"
"uint8 MISSING     = 2   # Not currently responding\n"
"uint8 GONE        = 3   # Has left the concert (cleanly)\n"
"\n"
"#   The owner is the unique identifier of the Request message to which\n"
"#   this resource is currently assigned, or a zero UUID if it is not\n"
"#   assigned.  An AVAILABLE resource never has an owner, but a MISSING\n"
"#   one might.\n"
"uuid_msgs/UniqueID owner\n"
"\n"
"#   The priority of an ALLOCATED resource is the priority of its\n"
"#   owning request.  An AVAILABLE resource never has a non-zero\n"
"#   priority, but a MISSING one might.\n"
"int16 priority\n"
"\n"
"#   List of ROCON application names currently available with this\n"
"#   resource. The name string is usually a ROS \"package/node\"\n"
"#   identifier, unique because ROS package names are unique.  The\n"
"#   contents of this list could change over time due to the device's\n"
"#   own activities.\n"
"string[] rapps\n"
"\n"
"================================================================================\n"
"MSG: uuid_msgs/UniqueID\n"
"# A universally unique identifier (UUID).\n"
"#\n"
"#  http://en.wikipedia.org/wiki/Universally_unique_identifier\n"
"#  http://tools.ietf.org/html/rfc4122.html\n"
"\n"
"uint8[16] uuid\n"
;
  }

  static const char* value(const ::scheduler_msgs::KnownResources_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::scheduler_msgs::KnownResources_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.resources);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct KnownResources_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scheduler_msgs::KnownResources_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::scheduler_msgs::KnownResources_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "resources[]" << std::endl;
    for (size_t i = 0; i < v.resources.size(); ++i)
    {
      s << indent << "  resources[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::scheduler_msgs::CurrentStatus_<ContainerAllocator> >::stream(s, indent + "    ", v.resources[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCHEDULER_MSGS_MESSAGE_KNOWNRESOURCES_H
