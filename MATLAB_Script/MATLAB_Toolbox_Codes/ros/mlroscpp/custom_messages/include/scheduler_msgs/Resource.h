// Generated by gencpp from file scheduler_msgs/Resource.msg
// DO NOT EDIT!


#ifndef SCHEDULER_MSGS_MESSAGE_RESOURCE_H
#define SCHEDULER_MSGS_MESSAGE_RESOURCE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <uuid_msgs/UniqueID.h>
#include <rocon_std_msgs/Remapping.h>
#include <rocon_std_msgs/KeyValue.h>

namespace scheduler_msgs
{
template <class ContainerAllocator>
struct Resource_
{
  typedef Resource_<ContainerAllocator> Type;

  Resource_()
    : rapp()
    , id()
    , uri()
    , remappings()
    , parameters()  {
    }
  Resource_(const ContainerAllocator& _alloc)
    : rapp(_alloc)
    , id(_alloc)
    , uri(_alloc)
    , remappings(_alloc)
    , parameters(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _rapp_type;
  _rapp_type rapp;

   typedef  ::uuid_msgs::UniqueID_<ContainerAllocator>  _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _uri_type;
  _uri_type uri;

   typedef std::vector< ::rocon_std_msgs::Remapping_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rocon_std_msgs::Remapping_<ContainerAllocator> >::other >  _remappings_type;
  _remappings_type remappings;

   typedef std::vector< ::rocon_std_msgs::KeyValue_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rocon_std_msgs::KeyValue_<ContainerAllocator> >::other >  _parameters_type;
  _parameters_type parameters;





  typedef boost::shared_ptr< ::scheduler_msgs::Resource_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scheduler_msgs::Resource_<ContainerAllocator> const> ConstPtr;

}; // struct Resource_

typedef ::scheduler_msgs::Resource_<std::allocator<void> > Resource;

typedef boost::shared_ptr< ::scheduler_msgs::Resource > ResourcePtr;
typedef boost::shared_ptr< ::scheduler_msgs::Resource const> ResourceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::scheduler_msgs::Resource_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::scheduler_msgs::Resource_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::scheduler_msgs::Resource_<ContainerAllocator1> & lhs, const ::scheduler_msgs::Resource_<ContainerAllocator2> & rhs)
{
  return lhs.rapp == rhs.rapp &&
    lhs.id == rhs.id &&
    lhs.uri == rhs.uri &&
    lhs.remappings == rhs.remappings &&
    lhs.parameters == rhs.parameters;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::scheduler_msgs::Resource_<ContainerAllocator1> & lhs, const ::scheduler_msgs::Resource_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace scheduler_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::scheduler_msgs::Resource_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scheduler_msgs::Resource_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scheduler_msgs::Resource_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scheduler_msgs::Resource_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scheduler_msgs::Resource_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scheduler_msgs::Resource_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::scheduler_msgs::Resource_<ContainerAllocator> >
{
  static const char* value()
  {
    return "754fd8dd757d06fa1564264b85a21995";
  }

  static const char* value(const ::scheduler_msgs::Resource_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x754fd8dd757d06faULL;
  static const uint64_t static_value2 = 0x1564264b85a21995ULL;
};

template<class ContainerAllocator>
struct DataType< ::scheduler_msgs::Resource_<ContainerAllocator> >
{
  static const char* value()
  {
    return "scheduler_msgs/Resource";
  }

  static const char* value(const ::scheduler_msgs::Resource_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::scheduler_msgs::Resource_<ContainerAllocator> >
{
  static const char* value()
  {
    return "### ROCON resource request or response.\n"
"#\n"
"#   A scheduler_msgs/Request message includes one Resource message for\n"
"#   each desired resource.  The scheduler responds using this same\n"
"#   message to identify exactly what corresponding resource it has\n"
"#   granted.\n"
"\n"
"# This is usually a uniquely identifying ros_package/rapp name\n"
"# identifier, which is unique because ros packages are unique.\n"
"string rapp\n"
"\n"
"# Unique identifier assigned by the requester to track resources\n"
"# assigned in the scheduler feedback.\n"
"uuid_msgs/UniqueID id\n"
"\n"
"# Uniform Resource Identifier for the platform.  ROCON defines two\n"
"# kinds of URI strings:\n"
"#\n"
"# 1) A \"resource description URI\" is a canonical string for a specific\n"
"#    device.  All components are fully resolved to their most specific\n"
"#    values, like:\n"
"#\n"
"#      \"rocon:/turtlebot/dude3/hydro/precise\"\n"
"#\n"
"#    The scheduler provides fully resolved resource description URIs\n"
"#    in its feedback for requests that have been granted.\n"
"#\n"
"# 2) A \"request URI\" may provide a similar descriptive representation,\n"
"#    or may include patterns for matching multiple alternative\n"
"#    platforms.  Omitted or '*' patterns match any valid value:\n"
"#\n"
"#      \"\"                               # (empty string): any platform\n"
"#      \"rocon:/turtlebot\"               # any turtlebot\n"
"#      \"rocon:/(turtlebot|segbot)\"      # any robot of either type\n"
"#      \"rocon:/*/dude3\"                 # any device named dude3\n"
"#      \"rocon:/*/*/ros/ubuntu\"          # any ROS Ubuntu platform\n"
"#\n"
"string uri\n"
"\n"
"# Remappings which get passed on for starting the rapps. Also potentially for\n"
"# more esoteric use cases such as checking whether an app is sharable.\n"
"rocon_std_msgs/Remapping[] remappings\n"
"rocon_std_msgs/KeyValue[] parameters\n"
"\n"
"================================================================================\n"
"MSG: uuid_msgs/UniqueID\n"
"# A universally unique identifier (UUID).\n"
"#\n"
"#  http://en.wikipedia.org/wiki/Universally_unique_identifier\n"
"#  http://tools.ietf.org/html/rfc4122.html\n"
"\n"
"uint8[16] uuid\n"
"\n"
"================================================================================\n"
"MSG: rocon_std_msgs/Remapping\n"
"# Describes your typical ros remapping\n"
"\n"
"string remap_from\n"
"string remap_to\n"
"\n"
"================================================================================\n"
"MSG: rocon_std_msgs/KeyValue\n"
"string key\n"
"string value\n"
;
  }

  static const char* value(const ::scheduler_msgs::Resource_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::scheduler_msgs::Resource_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rapp);
      stream.next(m.id);
      stream.next(m.uri);
      stream.next(m.remappings);
      stream.next(m.parameters);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Resource_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scheduler_msgs::Resource_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::scheduler_msgs::Resource_<ContainerAllocator>& v)
  {
    s << indent << "rapp: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.rapp);
    s << indent << "id: ";
    s << std::endl;
    Printer< ::uuid_msgs::UniqueID_<ContainerAllocator> >::stream(s, indent + "  ", v.id);
    s << indent << "uri: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.uri);
    s << indent << "remappings[]" << std::endl;
    for (size_t i = 0; i < v.remappings.size(); ++i)
    {
      s << indent << "  remappings[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rocon_std_msgs::Remapping_<ContainerAllocator> >::stream(s, indent + "    ", v.remappings[i]);
    }
    s << indent << "parameters[]" << std::endl;
    for (size_t i = 0; i < v.parameters.size(); ++i)
    {
      s << indent << "  parameters[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rocon_std_msgs::KeyValue_<ContainerAllocator> >::stream(s, indent + "    ", v.parameters[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCHEDULER_MSGS_MESSAGE_RESOURCE_H
