// Generated by gencpp from file mln_robosherlock_msgs/MLNAtoms.msg
// DO NOT EDIT!


#ifndef MLN_ROBOSHERLOCK_MSGS_MESSAGE_MLNATOMS_H
#define MLN_ROBOSHERLOCK_MSGS_MESSAGE_MLNATOMS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mln_robosherlock_msgs
{
template <class ContainerAllocator>
struct MLNAtoms_
{
  typedef MLNAtoms_<ContainerAllocator> Type;

  MLNAtoms_()
    : mln_atom()
    , source()  {
    }
  MLNAtoms_(const ContainerAllocator& _alloc)
    : mln_atom(_alloc)
    , source(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mln_atom_type;
  _mln_atom_type mln_atom;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _source_type;
  _source_type source;





  typedef boost::shared_ptr< ::mln_robosherlock_msgs::MLNAtoms_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mln_robosherlock_msgs::MLNAtoms_<ContainerAllocator> const> ConstPtr;

}; // struct MLNAtoms_

typedef ::mln_robosherlock_msgs::MLNAtoms_<std::allocator<void> > MLNAtoms;

typedef boost::shared_ptr< ::mln_robosherlock_msgs::MLNAtoms > MLNAtomsPtr;
typedef boost::shared_ptr< ::mln_robosherlock_msgs::MLNAtoms const> MLNAtomsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mln_robosherlock_msgs::MLNAtoms_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mln_robosherlock_msgs::MLNAtoms_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mln_robosherlock_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'mln_robosherlock_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/mln_robosherlock_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mln_robosherlock_msgs::MLNAtoms_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mln_robosherlock_msgs::MLNAtoms_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mln_robosherlock_msgs::MLNAtoms_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mln_robosherlock_msgs::MLNAtoms_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mln_robosherlock_msgs::MLNAtoms_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mln_robosherlock_msgs::MLNAtoms_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mln_robosherlock_msgs::MLNAtoms_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f2d65da9c776b880a3c56becfafac749";
  }

  static const char* value(const ::mln_robosherlock_msgs::MLNAtoms_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf2d65da9c776b880ULL;
  static const uint64_t static_value2 = 0xa3c56becfafac749ULL;
};

template<class ContainerAllocator>
struct DataType< ::mln_robosherlock_msgs::MLNAtoms_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mln_robosherlock_msgs/MLNAtoms";
  }

  static const char* value(const ::mln_robosherlock_msgs::MLNAtoms_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mln_robosherlock_msgs::MLNAtoms_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string mln_atom\n"
"string source\n"
;
  }

  static const char* value(const ::mln_robosherlock_msgs::MLNAtoms_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mln_robosherlock_msgs::MLNAtoms_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mln_atom);
      stream.next(m.source);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MLNAtoms_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mln_robosherlock_msgs::MLNAtoms_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mln_robosherlock_msgs::MLNAtoms_<ContainerAllocator>& v)
  {
    s << indent << "mln_atom: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mln_atom);
    s << indent << "source: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.source);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MLN_ROBOSHERLOCK_MSGS_MESSAGE_MLNATOMS_H
