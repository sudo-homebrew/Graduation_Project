// Generated by gencpp from file image_view2/MouseEvent.msg
// DO NOT EDIT!


#ifndef IMAGE_VIEW2_MESSAGE_MOUSEEVENT_H
#define IMAGE_VIEW2_MESSAGE_MOUSEEVENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace image_view2
{
template <class ContainerAllocator>
struct MouseEvent_
{
  typedef MouseEvent_<ContainerAllocator> Type;

  MouseEvent_()
    : header()
    , type(0)
    , key(0)
    , x(0)
    , y(0)
    , width(0)
    , height(0)  {
    }
  MouseEvent_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , type(0)
    , key(0)
    , x(0)
    , y(0)
    , width(0)
    , height(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _type_type;
  _type_type type;

   typedef int32_t _key_type;
  _key_type key;

   typedef int32_t _x_type;
  _x_type x;

   typedef int32_t _y_type;
  _y_type y;

   typedef int32_t _width_type;
  _width_type width;

   typedef int32_t _height_type;
  _height_type height;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(KEY_PRESSED)
  #undef KEY_PRESSED
#endif
#if defined(_WIN32) && defined(MOUSE_LEFT_UP)
  #undef MOUSE_LEFT_UP
#endif
#if defined(_WIN32) && defined(MOUSE_LEFT_DOWN)
  #undef MOUSE_LEFT_DOWN
#endif
#if defined(_WIN32) && defined(MOUSE_MOVE)
  #undef MOUSE_MOVE
#endif
#if defined(_WIN32) && defined(MOUSE_RIGHT_DOWN)
  #undef MOUSE_RIGHT_DOWN
#endif

  enum {
    KEY_PRESSED = 1,
    MOUSE_LEFT_UP = 2,
    MOUSE_LEFT_DOWN = 3,
    MOUSE_MOVE = 4,
    MOUSE_RIGHT_DOWN = 5,
  };


  typedef boost::shared_ptr< ::image_view2::MouseEvent_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::image_view2::MouseEvent_<ContainerAllocator> const> ConstPtr;

}; // struct MouseEvent_

typedef ::image_view2::MouseEvent_<std::allocator<void> > MouseEvent;

typedef boost::shared_ptr< ::image_view2::MouseEvent > MouseEventPtr;
typedef boost::shared_ptr< ::image_view2::MouseEvent const> MouseEventConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::image_view2::MouseEvent_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::image_view2::MouseEvent_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::image_view2::MouseEvent_<ContainerAllocator1> & lhs, const ::image_view2::MouseEvent_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.type == rhs.type &&
    lhs.key == rhs.key &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.width == rhs.width &&
    lhs.height == rhs.height;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::image_view2::MouseEvent_<ContainerAllocator1> & lhs, const ::image_view2::MouseEvent_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace image_view2

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::image_view2::MouseEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::image_view2::MouseEvent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::image_view2::MouseEvent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::image_view2::MouseEvent_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::image_view2::MouseEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::image_view2::MouseEvent_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::image_view2::MouseEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7ffa73624c1be385169a9e6e23460224";
  }

  static const char* value(const ::image_view2::MouseEvent_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7ffa73624c1be385ULL;
  static const uint64_t static_value2 = 0x169a9e6e23460224ULL;
};

template<class ContainerAllocator>
struct DataType< ::image_view2::MouseEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "image_view2/MouseEvent";
  }

  static const char* value(const ::image_view2::MouseEvent_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::image_view2::MouseEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"# event type\n"
"int32 KEY_PRESSED=1\n"
"int32 MOUSE_LEFT_UP=2\n"
"int32 MOUSE_LEFT_DOWN=3\n"
"int32 MOUSE_MOVE=4\n"
"int32 MOUSE_RIGHT_DOWN=5\n"
"int32 type\n"
"\n"
"int32 key\n"
"\n"
"# location of mouse\n"
"int32 x\n"
"int32 y\n"
"\n"
"# size of image\n"
"int32 width\n"
"int32 height\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::image_view2::MouseEvent_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::image_view2::MouseEvent_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.type);
      stream.next(m.key);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.width);
      stream.next(m.height);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MouseEvent_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::image_view2::MouseEvent_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::image_view2::MouseEvent_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "key: ";
    Printer<int32_t>::stream(s, indent + "  ", v.key);
    s << indent << "x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y);
    s << indent << "width: ";
    Printer<int32_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.height);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IMAGE_VIEW2_MESSAGE_MOUSEEVENT_H
