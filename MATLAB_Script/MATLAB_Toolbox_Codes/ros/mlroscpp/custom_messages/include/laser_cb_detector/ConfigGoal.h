// Generated by gencpp from file laser_cb_detector/ConfigGoal.msg
// DO NOT EDIT!


#ifndef LASER_CB_DETECTOR_MESSAGE_CONFIGGOAL_H
#define LASER_CB_DETECTOR_MESSAGE_CONFIGGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace laser_cb_detector
{
template <class ContainerAllocator>
struct ConfigGoal_
{
  typedef ConfigGoal_<ContainerAllocator> Type;

  ConfigGoal_()
    : num_x(0)
    , num_y(0)
    , spacing_x(0.0)
    , spacing_y(0.0)
    , width_scaling(0.0)
    , height_scaling(0.0)
    , min_intensity(0.0)
    , max_intensity(0.0)
    , subpixel_window(0)
    , subpixel_zero_zone(0)
    , flip_horizontal(0)  {
    }
  ConfigGoal_(const ContainerAllocator& _alloc)
    : num_x(0)
    , num_y(0)
    , spacing_x(0.0)
    , spacing_y(0.0)
    , width_scaling(0.0)
    , height_scaling(0.0)
    , min_intensity(0.0)
    , max_intensity(0.0)
    , subpixel_window(0)
    , subpixel_zero_zone(0)
    , flip_horizontal(0)  {
  (void)_alloc;
    }



   typedef uint32_t _num_x_type;
  _num_x_type num_x;

   typedef uint32_t _num_y_type;
  _num_y_type num_y;

   typedef float _spacing_x_type;
  _spacing_x_type spacing_x;

   typedef float _spacing_y_type;
  _spacing_y_type spacing_y;

   typedef float _width_scaling_type;
  _width_scaling_type width_scaling;

   typedef float _height_scaling_type;
  _height_scaling_type height_scaling;

   typedef float _min_intensity_type;
  _min_intensity_type min_intensity;

   typedef float _max_intensity_type;
  _max_intensity_type max_intensity;

   typedef uint32_t _subpixel_window_type;
  _subpixel_window_type subpixel_window;

   typedef int32_t _subpixel_zero_zone_type;
  _subpixel_zero_zone_type subpixel_zero_zone;

   typedef uint8_t _flip_horizontal_type;
  _flip_horizontal_type flip_horizontal;





  typedef boost::shared_ptr< ::laser_cb_detector::ConfigGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::laser_cb_detector::ConfigGoal_<ContainerAllocator> const> ConstPtr;

}; // struct ConfigGoal_

typedef ::laser_cb_detector::ConfigGoal_<std::allocator<void> > ConfigGoal;

typedef boost::shared_ptr< ::laser_cb_detector::ConfigGoal > ConfigGoalPtr;
typedef boost::shared_ptr< ::laser_cb_detector::ConfigGoal const> ConfigGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::laser_cb_detector::ConfigGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::laser_cb_detector::ConfigGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace laser_cb_detector

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'laser_cb_detector': ['/local-ssd1/All_Custom_Msgs/PendingPackagesInitial/matlab_msg_gen_ros1/glnxa64/devel/share/laser_cb_detector/msg'], 'actionlib': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/actionlib/cmake/../msg'], 'std_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::laser_cb_detector::ConfigGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::laser_cb_detector::ConfigGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::laser_cb_detector::ConfigGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::laser_cb_detector::ConfigGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::laser_cb_detector::ConfigGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::laser_cb_detector::ConfigGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::laser_cb_detector::ConfigGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d592564bc71ebb8458e3d0d3a079d731";
  }

  static const char* value(const ::laser_cb_detector::ConfigGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd592564bc71ebb84ULL;
  static const uint64_t static_value2 = 0x58e3d0d3a079d731ULL;
};

template<class ContainerAllocator>
struct DataType< ::laser_cb_detector::ConfigGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "laser_cb_detector/ConfigGoal";
  }

  static const char* value(const ::laser_cb_detector::ConfigGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::laser_cb_detector::ConfigGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"uint32 num_x     # Number of checkerboard corners in the X direction\n"
"uint32 num_y     # Number of corners in the Y direction\n"
"float32 spacing_x  # Spacing between corners in the X direction (meters)\n"
"float32 spacing_y  # Spacing between corners in the Y direction (meters)\n"
"\n"
"# Specify how many times we want to upsample the image.\n"
"#  This is often useful for detecting small checkerboards far away\n"
"float32 width_scaling\n"
"float32 height_scaling\n"
"\n"
"# Specifiy how intensity maps into a uint8. A specified window of\n"
"#   intensities is linearly scaled to 0-255\n"
"float32 min_intensity\n"
"float32 max_intensity\n"
"\n"
"# Configure openCV's subpixel corner detector\n"
"uint32 subpixel_window\n"
"int32  subpixel_zero_zone\n"
"\n"
"# Specify if we need to flip snapshot image model. This is usually necessary\n"
"# when the laser scans from right to left, since this is the opposite of images,\n"
"# which are normally indexed left to right\n"
"uint8 flip_horizontal\n"
"\n"
;
  }

  static const char* value(const ::laser_cb_detector::ConfigGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::laser_cb_detector::ConfigGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.num_x);
      stream.next(m.num_y);
      stream.next(m.spacing_x);
      stream.next(m.spacing_y);
      stream.next(m.width_scaling);
      stream.next(m.height_scaling);
      stream.next(m.min_intensity);
      stream.next(m.max_intensity);
      stream.next(m.subpixel_window);
      stream.next(m.subpixel_zero_zone);
      stream.next(m.flip_horizontal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ConfigGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::laser_cb_detector::ConfigGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::laser_cb_detector::ConfigGoal_<ContainerAllocator>& v)
  {
    s << indent << "num_x: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.num_x);
    s << indent << "num_y: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.num_y);
    s << indent << "spacing_x: ";
    Printer<float>::stream(s, indent + "  ", v.spacing_x);
    s << indent << "spacing_y: ";
    Printer<float>::stream(s, indent + "  ", v.spacing_y);
    s << indent << "width_scaling: ";
    Printer<float>::stream(s, indent + "  ", v.width_scaling);
    s << indent << "height_scaling: ";
    Printer<float>::stream(s, indent + "  ", v.height_scaling);
    s << indent << "min_intensity: ";
    Printer<float>::stream(s, indent + "  ", v.min_intensity);
    s << indent << "max_intensity: ";
    Printer<float>::stream(s, indent + "  ", v.max_intensity);
    s << indent << "subpixel_window: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.subpixel_window);
    s << indent << "subpixel_zero_zone: ";
    Printer<int32_t>::stream(s, indent + "  ", v.subpixel_zero_zone);
    s << indent << "flip_horizontal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flip_horizontal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LASER_CB_DETECTOR_MESSAGE_CONFIGGOAL_H
