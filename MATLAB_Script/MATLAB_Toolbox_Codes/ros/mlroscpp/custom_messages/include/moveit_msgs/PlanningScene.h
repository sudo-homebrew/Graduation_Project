// Generated by gencpp from file moveit_msgs/PlanningScene.msg
// DO NOT EDIT!


#ifndef MOVEIT_MSGS_MESSAGE_PLANNINGSCENE_H
#define MOVEIT_MSGS_MESSAGE_PLANNINGSCENE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <moveit_msgs/RobotState.h>
#include <geometry_msgs/TransformStamped.h>
#include <moveit_msgs/AllowedCollisionMatrix.h>
#include <moveit_msgs/LinkPadding.h>
#include <moveit_msgs/LinkScale.h>
#include <moveit_msgs/ObjectColor.h>
#include <moveit_msgs/PlanningSceneWorld.h>

namespace moveit_msgs
{
template <class ContainerAllocator>
struct PlanningScene_
{
  typedef PlanningScene_<ContainerAllocator> Type;

  PlanningScene_()
    : name()
    , robot_state()
    , robot_model_name()
    , fixed_frame_transforms()
    , allowed_collision_matrix()
    , link_padding()
    , link_scale()
    , object_colors()
    , world()
    , is_diff(false)  {
    }
  PlanningScene_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , robot_state(_alloc)
    , robot_model_name(_alloc)
    , fixed_frame_transforms(_alloc)
    , allowed_collision_matrix(_alloc)
    , link_padding(_alloc)
    , link_scale(_alloc)
    , object_colors(_alloc)
    , world(_alloc)
    , is_diff(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef  ::moveit_msgs::RobotState_<ContainerAllocator>  _robot_state_type;
  _robot_state_type robot_state;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _robot_model_name_type;
  _robot_model_name_type robot_model_name;

   typedef std::vector< ::geometry_msgs::TransformStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::TransformStamped_<ContainerAllocator> >::other >  _fixed_frame_transforms_type;
  _fixed_frame_transforms_type fixed_frame_transforms;

   typedef  ::moveit_msgs::AllowedCollisionMatrix_<ContainerAllocator>  _allowed_collision_matrix_type;
  _allowed_collision_matrix_type allowed_collision_matrix;

   typedef std::vector< ::moveit_msgs::LinkPadding_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::LinkPadding_<ContainerAllocator> >::other >  _link_padding_type;
  _link_padding_type link_padding;

   typedef std::vector< ::moveit_msgs::LinkScale_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::LinkScale_<ContainerAllocator> >::other >  _link_scale_type;
  _link_scale_type link_scale;

   typedef std::vector< ::moveit_msgs::ObjectColor_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_msgs::ObjectColor_<ContainerAllocator> >::other >  _object_colors_type;
  _object_colors_type object_colors;

   typedef  ::moveit_msgs::PlanningSceneWorld_<ContainerAllocator>  _world_type;
  _world_type world;

   typedef uint8_t _is_diff_type;
  _is_diff_type is_diff;





  typedef boost::shared_ptr< ::moveit_msgs::PlanningScene_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::moveit_msgs::PlanningScene_<ContainerAllocator> const> ConstPtr;

}; // struct PlanningScene_

typedef ::moveit_msgs::PlanningScene_<std::allocator<void> > PlanningScene;

typedef boost::shared_ptr< ::moveit_msgs::PlanningScene > PlanningScenePtr;
typedef boost::shared_ptr< ::moveit_msgs::PlanningScene const> PlanningSceneConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::moveit_msgs::PlanningScene_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::moveit_msgs::PlanningScene_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::moveit_msgs::PlanningScene_<ContainerAllocator1> & lhs, const ::moveit_msgs::PlanningScene_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.robot_state == rhs.robot_state &&
    lhs.robot_model_name == rhs.robot_model_name &&
    lhs.fixed_frame_transforms == rhs.fixed_frame_transforms &&
    lhs.allowed_collision_matrix == rhs.allowed_collision_matrix &&
    lhs.link_padding == rhs.link_padding &&
    lhs.link_scale == rhs.link_scale &&
    lhs.object_colors == rhs.object_colors &&
    lhs.world == rhs.world &&
    lhs.is_diff == rhs.is_diff;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::moveit_msgs::PlanningScene_<ContainerAllocator1> & lhs, const ::moveit_msgs::PlanningScene_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace moveit_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::moveit_msgs::PlanningScene_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::moveit_msgs::PlanningScene_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::moveit_msgs::PlanningScene_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::moveit_msgs::PlanningScene_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::moveit_msgs::PlanningScene_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::moveit_msgs::PlanningScene_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::moveit_msgs::PlanningScene_<ContainerAllocator> >
{
  static const char* value()
  {
    return "acfc50bcfd6c7b978066bfa7c786002c";
  }

  static const char* value(const ::moveit_msgs::PlanningScene_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xacfc50bcfd6c7b97ULL;
  static const uint64_t static_value2 = 0x8066bfa7c786002cULL;
};

template<class ContainerAllocator>
struct DataType< ::moveit_msgs::PlanningScene_<ContainerAllocator> >
{
  static const char* value()
  {
    return "moveit_msgs/PlanningScene";
  }

  static const char* value(const ::moveit_msgs::PlanningScene_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::moveit_msgs::PlanningScene_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# name of planning scene\n"
"string name\n"
"\n"
"# full robot state\n"
"RobotState robot_state\n"
"\n"
"# The name of the robot model this scene is for\n"
"string robot_model_name\n"
"\n"
"#additional frames for duplicating tf (with respect to the planning frame)\n"
"geometry_msgs/TransformStamped[] fixed_frame_transforms\n"
"\n"
"#full allowed collision matrix\n"
"AllowedCollisionMatrix allowed_collision_matrix\n"
"\n"
"# all link paddings\n"
"LinkPadding[] link_padding\n"
"\n"
"# all link scales\n"
"LinkScale[] link_scale\n"
"\n"
"# Attached objects, collision objects, even the octomap or collision map can have \n"
"# colors associated to them. This array specifies them.\n"
"ObjectColor[] object_colors\n"
"\n"
"# the collision map\n"
"PlanningSceneWorld world\n"
"\n"
"# Flag indicating whether this scene is to be interpreted as a diff with respect to some other scene\n"
"bool is_diff\n"
"\n"
"================================================================================\n"
"MSG: moveit_msgs/RobotState\n"
"# This message contains information about the robot state, i.e. the positions of its joints and links\n"
"sensor_msgs/JointState joint_state\n"
"\n"
"# Joints that may have multiple DOF are specified here\n"
"sensor_msgs/MultiDOFJointState multi_dof_joint_state\n"
"\n"
"# Attached collision objects (attached to some link on the robot)\n"
"AttachedCollisionObject[] attached_collision_objects\n"
"\n"
"# Flag indicating whether this scene is to be interpreted as a diff with respect to some other scene\n"
"# This is mostly important for handling the attached bodies (whether or not to clear the attached bodies\n"
"# of a moveit::core::RobotState before updating it with this message)\n"
"bool is_diff\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/JointState\n"
"# This is a message that holds data to describe the state of a set of torque controlled joints. \n"
"#\n"
"# The state of each joint (revolute or prismatic) is defined by:\n"
"#  * the position of the joint (rad or m),\n"
"#  * the velocity of the joint (rad/s or m/s) and \n"
"#  * the effort that is applied in the joint (Nm or N).\n"
"#\n"
"# Each joint is uniquely identified by its name\n"
"# The header specifies the time at which the joint states were recorded. All the joint states\n"
"# in one message have to be recorded at the same time.\n"
"#\n"
"# This message consists of a multiple arrays, one for each part of the joint state. \n"
"# The goal is to make each of the fields optional. When e.g. your joints have no\n"
"# effort associated with them, you can leave the effort array empty. \n"
"#\n"
"# All arrays in this message should have the same size, or be empty.\n"
"# This is the only way to uniquely associate the joint name with the correct\n"
"# states.\n"
"\n"
"\n"
"Header header\n"
"\n"
"string[] name\n"
"float64[] position\n"
"float64[] velocity\n"
"float64[] effort\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/MultiDOFJointState\n"
"# Representation of state for joints with multiple degrees of freedom, \n"
"# following the structure of JointState.\n"
"#\n"
"# It is assumed that a joint in a system corresponds to a transform that gets applied \n"
"# along the kinematic chain. For example, a planar joint (as in URDF) is 3DOF (x, y, yaw)\n"
"# and those 3DOF can be expressed as a transformation matrix, and that transformation\n"
"# matrix can be converted back to (x, y, yaw)\n"
"#\n"
"# Each joint is uniquely identified by its name\n"
"# The header specifies the time at which the joint states were recorded. All the joint states\n"
"# in one message have to be recorded at the same time.\n"
"#\n"
"# This message consists of a multiple arrays, one for each part of the joint state. \n"
"# The goal is to make each of the fields optional. When e.g. your joints have no\n"
"# wrench associated with them, you can leave the wrench array empty. \n"
"#\n"
"# All arrays in this message should have the same size, or be empty.\n"
"# This is the only way to uniquely associate the joint name with the correct\n"
"# states.\n"
"\n"
"Header header\n"
"\n"
"string[] joint_names\n"
"geometry_msgs/Transform[] transforms\n"
"geometry_msgs/Twist[] twist\n"
"geometry_msgs/Wrench[] wrench\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Transform\n"
"# This represents the transform between two coordinate frames in free space.\n"
"\n"
"Vector3 translation\n"
"Quaternion rotation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Wrench\n"
"# This represents force in free space, separated into\n"
"# its linear and angular parts.\n"
"Vector3  force\n"
"Vector3  torque\n"
"\n"
"================================================================================\n"
"MSG: moveit_msgs/AttachedCollisionObject\n"
"# The CollisionObject will be attached with a fixed joint to this link\n"
"string link_name\n"
"\n"
"#This contains the actual shapes and poses for the CollisionObject\n"
"#to be attached to the link\n"
"#If action is remove and no object.id is set, all objects\n"
"#attached to the link indicated by link_name will be removed\n"
"CollisionObject object\n"
"\n"
"# The set of links that the attached objects are allowed to touch\n"
"# by default - the link_name is already considered by default\n"
"string[] touch_links\n"
"\n"
"# If certain links were placed in a particular posture for this object to remain attached \n"
"# (e.g., an end effector closing around an object), the posture necessary for releasing\n"
"# the object is stored here\n"
"trajectory_msgs/JointTrajectory detach_posture\n"
"\n"
"# The weight of the attached object, if known\n"
"float64 weight\n"
"\n"
"================================================================================\n"
"MSG: moveit_msgs/CollisionObject\n"
"# A header, used for interpreting the poses\n"
"Header header\n"
"\n"
"# DISCLAIMER: This field is not in use yet and all other poses\n"
"# are still interpreted in the header frame.\n"
"# https://github.com/ros-planning/moveit/pull/2037\n"
"# implements the actual logic for this field.\n"
"# ---\n"
"# The object's pose relative to the header frame.\n"
"# The shapes and subframe poses are defined relative to this pose.\n"
"geometry_msgs/Pose pose\n"
"\n"
"# The id of the object (name used in MoveIt)\n"
"string id\n"
"\n"
"# The object type in a database of known objects\n"
"object_recognition_msgs/ObjectType type\n"
"\n"
"# The collision geometries associated with the object.\n"
"# Their poses are with respect to the object's pose\n"
"\n"
"# Solid geometric primitives\n"
"shape_msgs/SolidPrimitive[] primitives\n"
"geometry_msgs/Pose[] primitive_poses\n"
"\n"
"# Meshes\n"
"shape_msgs/Mesh[] meshes\n"
"geometry_msgs/Pose[] mesh_poses\n"
"\n"
"# Bounding planes (equation is specified, but the plane can be oriented using an additional pose)\n"
"shape_msgs/Plane[] planes\n"
"geometry_msgs/Pose[] plane_poses\n"
"\n"
"# Named subframes on the object. Use these to define points of interest on the object that you want\n"
"# to plan with (e.g. \"tip\", \"spout\", \"handle\"). The id of the object will be prepended to the subframe.\n"
"# If an object with the id \"screwdriver\" and a subframe \"tip\" is in the scene, you can use the frame\n"
"# \"screwdriver/tip\" for planning.\n"
"# The length of the subframe_names and subframe_poses has to be identical.\n"
"string[] subframe_names\n"
"geometry_msgs/Pose[] subframe_poses\n"
"\n"
"# Adds the object to the planning scene. If the object previously existed, it is replaced.\n"
"byte ADD=0\n"
"\n"
"# Removes the object from the environment entirely (everything that matches the specified id)\n"
"byte REMOVE=1\n"
"\n"
"# Append to an object that already exists in the planning scene. If the object does not exist, it is added.\n"
"byte APPEND=2\n"
"\n"
"# If an object already exists in the scene, new poses can be sent (the geometry arrays must be left empty)\n"
"# if solely moving the object is desired\n"
"byte MOVE=3\n"
"\n"
"# Operation to be performed\n"
"byte operation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: object_recognition_msgs/ObjectType\n"
"################################################## OBJECT ID #########################################################\n"
"\n"
"# Contains information about the type of a found object. Those two sets of parameters together uniquely define an\n"
"# object\n"
"\n"
"# The key of the found object: the unique identifier in the given db\n"
"string key\n"
"\n"
"# The db parameters stored as a JSON/compressed YAML string. An object id does not make sense without the corresponding\n"
"# database. E.g., in object_recognition, it can look like: \"{'type':'CouchDB', 'root':'http://localhost'}\"\n"
"# There is no conventional format for those parameters and it's nice to keep that flexibility.\n"
"# The object_recognition_core as a generic DB type that can read those fields\n"
"# Current examples:\n"
"# For CouchDB:\n"
"#   type: 'CouchDB'\n"
"#   root: 'http://localhost:5984'\n"
"#   collection: 'object_recognition'\n"
"# For SQL household database:\n"
"#   type: 'SqlHousehold'\n"
"#   host: 'wgs36'\n"
"#   port: 5432\n"
"#   user: 'willow'\n"
"#   password: 'willow'\n"
"#   name: 'household_objects'\n"
"#   module: 'tabletop'\n"
"string db\n"
"\n"
"================================================================================\n"
"MSG: shape_msgs/SolidPrimitive\n"
"# Define box, sphere, cylinder, cone \n"
"# All shapes are defined to have their bounding boxes centered around 0,0,0.\n"
"\n"
"uint8 BOX=1\n"
"uint8 SPHERE=2\n"
"uint8 CYLINDER=3\n"
"uint8 CONE=4\n"
"\n"
"# The type of the shape\n"
"uint8 type\n"
"\n"
"\n"
"# The dimensions of the shape\n"
"float64[] dimensions\n"
"\n"
"# The meaning of the shape dimensions: each constant defines the index in the 'dimensions' array\n"
"\n"
"# For the BOX type, the X, Y, and Z dimensions are the length of the corresponding\n"
"# sides of the box.\n"
"uint8 BOX_X=0\n"
"uint8 BOX_Y=1\n"
"uint8 BOX_Z=2\n"
"\n"
"\n"
"# For the SPHERE type, only one component is used, and it gives the radius of\n"
"# the sphere.\n"
"uint8 SPHERE_RADIUS=0\n"
"\n"
"\n"
"# For the CYLINDER and CONE types, the center line is oriented along\n"
"# the Z axis.  Therefore the CYLINDER_HEIGHT (CONE_HEIGHT) component\n"
"# of dimensions gives the height of the cylinder (cone).  The\n"
"# CYLINDER_RADIUS (CONE_RADIUS) component of dimensions gives the\n"
"# radius of the base of the cylinder (cone).  Cone and cylinder\n"
"# primitives are defined to be circular. The tip of the cone is\n"
"# pointing up, along +Z axis.\n"
"\n"
"uint8 CYLINDER_HEIGHT=0\n"
"uint8 CYLINDER_RADIUS=1\n"
"\n"
"uint8 CONE_HEIGHT=0\n"
"uint8 CONE_RADIUS=1\n"
"\n"
"================================================================================\n"
"MSG: shape_msgs/Mesh\n"
"# Definition of a mesh\n"
"\n"
"# list of triangles; the index values refer to positions in vertices[]\n"
"MeshTriangle[] triangles\n"
"\n"
"# the actual vertices that make up the mesh\n"
"geometry_msgs/Point[] vertices\n"
"\n"
"================================================================================\n"
"MSG: shape_msgs/MeshTriangle\n"
"# Definition of a triangle's vertices\n"
"uint32[3] vertex_indices\n"
"\n"
"================================================================================\n"
"MSG: shape_msgs/Plane\n"
"# Representation of a plane, using the plane equation ax + by + cz + d = 0\n"
"\n"
"# a := coef[0]\n"
"# b := coef[1]\n"
"# c := coef[2]\n"
"# d := coef[3]\n"
"\n"
"float64[4] coef\n"
"\n"
"================================================================================\n"
"MSG: trajectory_msgs/JointTrajectory\n"
"Header header\n"
"string[] joint_names\n"
"JointTrajectoryPoint[] points\n"
"\n"
"================================================================================\n"
"MSG: trajectory_msgs/JointTrajectoryPoint\n"
"# Each trajectory point specifies either positions[, velocities[, accelerations]]\n"
"# or positions[, effort] for the trajectory to be executed.\n"
"# All specified values are in the same order as the joint names in JointTrajectory.msg\n"
"\n"
"float64[] positions\n"
"float64[] velocities\n"
"float64[] accelerations\n"
"float64[] effort\n"
"duration time_from_start\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/TransformStamped\n"
"# This expresses a transform from coordinate frame header.frame_id\n"
"# to the coordinate frame child_frame_id\n"
"#\n"
"# This message is mostly used by the \n"
"# <a href=\"http://wiki.ros.org/tf\">tf</a> package. \n"
"# See its documentation for more information.\n"
"\n"
"Header header\n"
"string child_frame_id # the frame id of the child frame\n"
"Transform transform\n"
"\n"
"================================================================================\n"
"MSG: moveit_msgs/AllowedCollisionMatrix\n"
"# The list of entry names in the matrix\n"
"string[] entry_names\n"
"\n"
"# The individual entries in the allowed collision matrix\n"
"# square, symmetric, with same order as entry_names\n"
"AllowedCollisionEntry[] entry_values\n"
"\n"
"# In addition to the collision matrix itself, we also have \n"
"# the default entry value for each entry name.\n"
"\n"
"# If the allowed collision flag is queried for a pair of names (n1, n2)\n"
"# that is not found in the collision matrix itself, the value of\n"
"# the collision flag is considered to be that of the entry (n1 or n2)\n"
"# specified in the list below. If both n1 and n2 are found in the list \n"
"# of defaults, the result is computed with an AND operation\n"
"\n"
"string[] default_entry_names\n"
"bool[] default_entry_values\n"
"\n"
"================================================================================\n"
"MSG: moveit_msgs/AllowedCollisionEntry\n"
"# whether or not collision checking is enabled\n"
"bool[] enabled\n"
"\n"
"================================================================================\n"
"MSG: moveit_msgs/LinkPadding\n"
"#name for the link\n"
"string link_name\n"
"\n"
"# padding to apply to the link\n"
"float64 padding\n"
"\n"
"================================================================================\n"
"MSG: moveit_msgs/LinkScale\n"
"#name for the link\n"
"string link_name\n"
"\n"
"# scaling to apply to the link\n"
"float64 scale\n"
"\n"
"================================================================================\n"
"MSG: moveit_msgs/ObjectColor\n"
"# The object id for which we specify color\n"
"string id\n"
"\n"
"# The value of the color\n"
"std_msgs/ColorRGBA color\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/ColorRGBA\n"
"float32 r\n"
"float32 g\n"
"float32 b\n"
"float32 a\n"
"\n"
"================================================================================\n"
"MSG: moveit_msgs/PlanningSceneWorld\n"
"# collision objects\n"
"CollisionObject[] collision_objects\n"
"\n"
"# The octomap that represents additional collision data\n"
"octomap_msgs/OctomapWithPose octomap\n"
"\n"
"================================================================================\n"
"MSG: octomap_msgs/OctomapWithPose\n"
"# A 3D map in binary format, as Octree\n"
"Header header\n"
"\n"
"# The pose of the octree with respect to the header frame \n"
"geometry_msgs/Pose origin\n"
"\n"
"# The actual octree msg\n"
"octomap_msgs/Octomap octomap\n"
"\n"
"================================================================================\n"
"MSG: octomap_msgs/Octomap\n"
"# A 3D map in binary format, as Octree\n"
"Header header\n"
"\n"
"# Flag to denote a binary (only free/occupied) or full occupancy octree (.bt/.ot file)\n"
"bool binary\n"
"\n"
"# Class id of the contained octree \n"
"string id\n"
"\n"
"# Resolution (in m) of the smallest octree nodes\n"
"float64 resolution\n"
"\n"
"# binary serialization of octree, use conversions.h to read and write octrees\n"
"int8[] data\n"
;
  }

  static const char* value(const ::moveit_msgs::PlanningScene_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::moveit_msgs::PlanningScene_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.robot_state);
      stream.next(m.robot_model_name);
      stream.next(m.fixed_frame_transforms);
      stream.next(m.allowed_collision_matrix);
      stream.next(m.link_padding);
      stream.next(m.link_scale);
      stream.next(m.object_colors);
      stream.next(m.world);
      stream.next(m.is_diff);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlanningScene_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::moveit_msgs::PlanningScene_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::moveit_msgs::PlanningScene_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "robot_state: ";
    s << std::endl;
    Printer< ::moveit_msgs::RobotState_<ContainerAllocator> >::stream(s, indent + "  ", v.robot_state);
    s << indent << "robot_model_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.robot_model_name);
    s << indent << "fixed_frame_transforms[]" << std::endl;
    for (size_t i = 0; i < v.fixed_frame_transforms.size(); ++i)
    {
      s << indent << "  fixed_frame_transforms[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::TransformStamped_<ContainerAllocator> >::stream(s, indent + "    ", v.fixed_frame_transforms[i]);
    }
    s << indent << "allowed_collision_matrix: ";
    s << std::endl;
    Printer< ::moveit_msgs::AllowedCollisionMatrix_<ContainerAllocator> >::stream(s, indent + "  ", v.allowed_collision_matrix);
    s << indent << "link_padding[]" << std::endl;
    for (size_t i = 0; i < v.link_padding.size(); ++i)
    {
      s << indent << "  link_padding[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::LinkPadding_<ContainerAllocator> >::stream(s, indent + "    ", v.link_padding[i]);
    }
    s << indent << "link_scale[]" << std::endl;
    for (size_t i = 0; i < v.link_scale.size(); ++i)
    {
      s << indent << "  link_scale[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::LinkScale_<ContainerAllocator> >::stream(s, indent + "    ", v.link_scale[i]);
    }
    s << indent << "object_colors[]" << std::endl;
    for (size_t i = 0; i < v.object_colors.size(); ++i)
    {
      s << indent << "  object_colors[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_msgs::ObjectColor_<ContainerAllocator> >::stream(s, indent + "    ", v.object_colors[i]);
    }
    s << indent << "world: ";
    s << std::endl;
    Printer< ::moveit_msgs::PlanningSceneWorld_<ContainerAllocator> >::stream(s, indent + "  ", v.world);
    s << indent << "is_diff: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_diff);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEIT_MSGS_MESSAGE_PLANNINGSCENE_H
