// Generated by gencpp from file cob_pick_place_action/CobPlaceResult.msg
// DO NOT EDIT!


#ifndef COB_PICK_PLACE_ACTION_MESSAGE_COBPLACERESULT_H
#define COB_PICK_PLACE_ACTION_MESSAGE_COBPLACERESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Bool.h>

namespace cob_pick_place_action
{
template <class ContainerAllocator>
struct CobPlaceResult_
{
  typedef CobPlaceResult_<ContainerAllocator> Type;

  CobPlaceResult_()
    : success()
    , cob_pick_error_string()  {
    }
  CobPlaceResult_(const ContainerAllocator& _alloc)
    : success(_alloc)
    , cob_pick_error_string(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Bool_<ContainerAllocator>  _success_type;
  _success_type success;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _cob_pick_error_string_type;
  _cob_pick_error_string_type cob_pick_error_string;





  typedef boost::shared_ptr< ::cob_pick_place_action::CobPlaceResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_pick_place_action::CobPlaceResult_<ContainerAllocator> const> ConstPtr;

}; // struct CobPlaceResult_

typedef ::cob_pick_place_action::CobPlaceResult_<std::allocator<void> > CobPlaceResult;

typedef boost::shared_ptr< ::cob_pick_place_action::CobPlaceResult > CobPlaceResultPtr;
typedef boost::shared_ptr< ::cob_pick_place_action::CobPlaceResult const> CobPlaceResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cob_pick_place_action::CobPlaceResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cob_pick_place_action::CobPlaceResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cob_pick_place_action::CobPlaceResult_<ContainerAllocator1> & lhs, const ::cob_pick_place_action::CobPlaceResult_<ContainerAllocator2> & rhs)
{
  return lhs.success == rhs.success &&
    lhs.cob_pick_error_string == rhs.cob_pick_error_string;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cob_pick_place_action::CobPlaceResult_<ContainerAllocator1> & lhs, const ::cob_pick_place_action::CobPlaceResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cob_pick_place_action

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cob_pick_place_action::CobPlaceResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cob_pick_place_action::CobPlaceResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cob_pick_place_action::CobPlaceResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cob_pick_place_action::CobPlaceResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_pick_place_action::CobPlaceResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_pick_place_action::CobPlaceResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cob_pick_place_action::CobPlaceResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "678952546c084eaf4429dc029560eb90";
  }

  static const char* value(const ::cob_pick_place_action::CobPlaceResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x678952546c084eafULL;
  static const uint64_t static_value2 = 0x4429dc029560eb90ULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_pick_place_action::CobPlaceResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cob_pick_place_action/CobPlaceResult";
  }

  static const char* value(const ::cob_pick_place_action::CobPlaceResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cob_pick_place_action::CobPlaceResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"##########################################################\n"
"##########     Pickup Result (result)   ######################\n"
"\n"
"std_msgs/Bool success\n"
"\n"
"string cob_pick_error_string\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Bool\n"
"bool data\n"
;
  }

  static const char* value(const ::cob_pick_place_action::CobPlaceResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cob_pick_place_action::CobPlaceResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
      stream.next(m.cob_pick_error_string);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CobPlaceResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cob_pick_place_action::CobPlaceResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cob_pick_place_action::CobPlaceResult_<ContainerAllocator>& v)
  {
    s << indent << "success: ";
    s << std::endl;
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.success);
    s << indent << "cob_pick_error_string: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.cob_pick_error_string);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COB_PICK_PLACE_ACTION_MESSAGE_COBPLACERESULT_H
