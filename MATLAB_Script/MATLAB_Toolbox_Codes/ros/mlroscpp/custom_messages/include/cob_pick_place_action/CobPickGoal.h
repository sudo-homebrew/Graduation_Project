// Generated by gencpp from file cob_pick_place_action/CobPickGoal.msg
// DO NOT EDIT!


#ifndef COB_PICK_PLACE_ACTION_MESSAGE_COBPICKGOAL_H
#define COB_PICK_PLACE_ACTION_MESSAGE_COBPICKGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>

namespace cob_pick_place_action
{
template <class ContainerAllocator>
struct CobPickGoal_
{
  typedef CobPickGoal_<ContainerAllocator> Type;

  CobPickGoal_()
    : object_class(0)
    , object_name()
    , object_pose()
    , gripper_type()
    , gripper_side()
    , grasp_database()
    , grasp_id(0)
    , support_surface()  {
    }
  CobPickGoal_(const ContainerAllocator& _alloc)
    : object_class(0)
    , object_name(_alloc)
    , object_pose(_alloc)
    , gripper_type(_alloc)
    , gripper_side(_alloc)
    , grasp_database(_alloc)
    , grasp_id(0)
    , support_surface(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _object_class_type;
  _object_class_type object_class;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _object_name_type;
  _object_name_type object_name;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _object_pose_type;
  _object_pose_type object_pose;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gripper_type_type;
  _gripper_type_type gripper_type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gripper_side_type;
  _gripper_side_type gripper_side;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _grasp_database_type;
  _grasp_database_type grasp_database;

   typedef uint32_t _grasp_id_type;
  _grasp_id_type grasp_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _support_surface_type;
  _support_surface_type support_surface;





  typedef boost::shared_ptr< ::cob_pick_place_action::CobPickGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_pick_place_action::CobPickGoal_<ContainerAllocator> const> ConstPtr;

}; // struct CobPickGoal_

typedef ::cob_pick_place_action::CobPickGoal_<std::allocator<void> > CobPickGoal;

typedef boost::shared_ptr< ::cob_pick_place_action::CobPickGoal > CobPickGoalPtr;
typedef boost::shared_ptr< ::cob_pick_place_action::CobPickGoal const> CobPickGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cob_pick_place_action::CobPickGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cob_pick_place_action::CobPickGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cob_pick_place_action::CobPickGoal_<ContainerAllocator1> & lhs, const ::cob_pick_place_action::CobPickGoal_<ContainerAllocator2> & rhs)
{
  return lhs.object_class == rhs.object_class &&
    lhs.object_name == rhs.object_name &&
    lhs.object_pose == rhs.object_pose &&
    lhs.gripper_type == rhs.gripper_type &&
    lhs.gripper_side == rhs.gripper_side &&
    lhs.grasp_database == rhs.grasp_database &&
    lhs.grasp_id == rhs.grasp_id &&
    lhs.support_surface == rhs.support_surface;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cob_pick_place_action::CobPickGoal_<ContainerAllocator1> & lhs, const ::cob_pick_place_action::CobPickGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cob_pick_place_action

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cob_pick_place_action::CobPickGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cob_pick_place_action::CobPickGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cob_pick_place_action::CobPickGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cob_pick_place_action::CobPickGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_pick_place_action::CobPickGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_pick_place_action::CobPickGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cob_pick_place_action::CobPickGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cbe0acd483d6d8f33ac28537b18c7b71";
  }

  static const char* value(const ::cob_pick_place_action::CobPickGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcbe0acd483d6d8f3ULL;
  static const uint64_t static_value2 = 0x3ac28537b18c7b71ULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_pick_place_action::CobPickGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cob_pick_place_action/CobPickGoal";
  }

  static const char* value(const ::cob_pick_place_action::CobPickGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cob_pick_place_action::CobPickGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"##########################################################\n"
"##########     Object Information(goal)   ######################\n"
"\n"
"uint32 object_class\n"
"string object_name\n"
"\n"
"geometry_msgs/PoseStamped object_pose\n"
"\n"
"string gripper_type\n"
"string gripper_side\n"
"\n"
"string grasp_database\n"
"uint32 grasp_id\n"
"\n"
"string support_surface\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::cob_pick_place_action::CobPickGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cob_pick_place_action::CobPickGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.object_class);
      stream.next(m.object_name);
      stream.next(m.object_pose);
      stream.next(m.gripper_type);
      stream.next(m.gripper_side);
      stream.next(m.grasp_database);
      stream.next(m.grasp_id);
      stream.next(m.support_surface);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CobPickGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cob_pick_place_action::CobPickGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cob_pick_place_action::CobPickGoal_<ContainerAllocator>& v)
  {
    s << indent << "object_class: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.object_class);
    s << indent << "object_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.object_name);
    s << indent << "object_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.object_pose);
    s << indent << "gripper_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gripper_type);
    s << indent << "gripper_side: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gripper_side);
    s << indent << "grasp_database: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.grasp_database);
    s << indent << "grasp_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.grasp_id);
    s << indent << "support_surface: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.support_surface);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COB_PICK_PLACE_ACTION_MESSAGE_COBPICKGOAL_H
