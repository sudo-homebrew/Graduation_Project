// Generated by gencpp from file ptu_control/PtuSetVelGoal.msg
// DO NOT EDIT!


#ifndef PTU_CONTROL_MESSAGE_PTUSETVELGOAL_H
#define PTU_CONTROL_MESSAGE_PTUSETVELGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ptu_control
{
template <class ContainerAllocator>
struct PtuSetVelGoal_
{
  typedef PtuSetVelGoal_<ContainerAllocator> Type;

  PtuSetVelGoal_()
    : pan_vel(0.0)
    , tilt_vel(0.0)  {
    }
  PtuSetVelGoal_(const ContainerAllocator& _alloc)
    : pan_vel(0.0)
    , tilt_vel(0.0)  {
  (void)_alloc;
    }



   typedef float _pan_vel_type;
  _pan_vel_type pan_vel;

   typedef float _tilt_vel_type;
  _tilt_vel_type tilt_vel;





  typedef boost::shared_ptr< ::ptu_control::PtuSetVelGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ptu_control::PtuSetVelGoal_<ContainerAllocator> const> ConstPtr;

}; // struct PtuSetVelGoal_

typedef ::ptu_control::PtuSetVelGoal_<std::allocator<void> > PtuSetVelGoal;

typedef boost::shared_ptr< ::ptu_control::PtuSetVelGoal > PtuSetVelGoalPtr;
typedef boost::shared_ptr< ::ptu_control::PtuSetVelGoal const> PtuSetVelGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ptu_control::PtuSetVelGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ptu_control::PtuSetVelGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ptu_control

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1368129/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'actionlib': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1368129/matlab/sys/ros1/glnxa64/ros1/share/actionlib/cmake/../msg'], 'sensor_msgs': ['/local-ssd1/All_Custom_Msgs/packages_in_cluster/matlab_msg_gen_ros1/glnxa64/src/sensor_msgs/msg'], 'ptu_control': ['/local-ssd1/All_Custom_Msgs/packages_in_cluster/matlab_msg_gen_ros1/glnxa64/devel/share/ptu_control/msg'], 'geometry_msgs': ['/local-ssd1/All_Custom_Msgs/packages_in_cluster/matlab_msg_gen_ros1/glnxa64/src/geometry_msgs/msg'], 'actionlib_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1368129/matlab/sys/ros1/glnxa64/ros1/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ptu_control::PtuSetVelGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ptu_control::PtuSetVelGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ptu_control::PtuSetVelGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ptu_control::PtuSetVelGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ptu_control::PtuSetVelGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ptu_control::PtuSetVelGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ptu_control::PtuSetVelGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b7cd6f56e9f8de7ca60102f67cb2581f";
  }

  static const char* value(const ::ptu_control::PtuSetVelGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb7cd6f56e9f8de7cULL;
  static const uint64_t static_value2 = 0xa60102f67cb2581fULL;
};

template<class ContainerAllocator>
struct DataType< ::ptu_control::PtuSetVelGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ptu_control/PtuSetVelGoal";
  }

  static const char* value(const ::ptu_control::PtuSetVelGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ptu_control::PtuSetVelGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# goal\n"
"float32 pan_vel\n"
"float32 tilt_vel\n"
;
  }

  static const char* value(const ::ptu_control::PtuSetVelGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ptu_control::PtuSetVelGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pan_vel);
      stream.next(m.tilt_vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PtuSetVelGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ptu_control::PtuSetVelGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ptu_control::PtuSetVelGoal_<ContainerAllocator>& v)
  {
    s << indent << "pan_vel: ";
    Printer<float>::stream(s, indent + "  ", v.pan_vel);
    s << indent << "tilt_vel: ";
    Printer<float>::stream(s, indent + "  ", v.tilt_vel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PTU_CONTROL_MESSAGE_PTUSETVELGOAL_H
