// Generated by gencpp from file custom_msg/Msg_primitives_fixed_length.msg
// DO NOT EDIT!


#ifndef CUSTOM_MSG_MESSAGE_MSG_PRIMITIVES_FIXED_LENGTH_H
#define CUSTOM_MSG_MESSAGE_MSG_PRIMITIVES_FIXED_LENGTH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace custom_msg
{
template <class ContainerAllocator>
struct Msg_primitives_fixed_length_
{
  typedef Msg_primitives_fixed_length_<ContainerAllocator> Type;

  Msg_primitives_fixed_length_()
    : int_value(0)
    , uint_value(0)
    , t()
    , d()
    , header()  {
    }
  Msg_primitives_fixed_length_(const ContainerAllocator& _alloc)
    : int_value(0)
    , uint_value(0)
    , t()
    , d()
    , header(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _int_value_type;
  _int_value_type int_value;

   typedef uint32_t _uint_value_type;
  _uint_value_type uint_value;

   typedef ros::Time _t_type;
  _t_type t;

   typedef ros::Duration _d_type;
  _d_type d;

   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;



  enum {
    BYTECONST = 5,
    INT8CONST = 125,
    INT16CONST = 1000,
    INT32CONST = -1234,
    INT64CONST = 1000000,
    CHARCONST = 100,
    UINT8CONST = 250u,
    UINT16CONST = 1000u,
    UINT32CONST = 1234u,
    UINT64CONST = 1000000u,
  };

  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  STRCONST1;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  STRCONST2;
  static const uint8_t BOOLCONST1;
  static const uint8_t BOOLCONST2;
  static const float FLOAT32CONST;
  static const double FLOAT64CONST;

  typedef boost::shared_ptr< ::custom_msg::Msg_primitives_fixed_length_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msg::Msg_primitives_fixed_length_<ContainerAllocator> const> ConstPtr;

}; // struct Msg_primitives_fixed_length_

typedef ::custom_msg::Msg_primitives_fixed_length_<std::allocator<void> > Msg_primitives_fixed_length;

typedef boost::shared_ptr< ::custom_msg::Msg_primitives_fixed_length > Msg_primitives_fixed_lengthPtr;
typedef boost::shared_ptr< ::custom_msg::Msg_primitives_fixed_length const> Msg_primitives_fixed_lengthConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Msg_primitives_fixed_length_<ContainerAllocator>::STRCONST1 =
        
          "test"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Msg_primitives_fixed_length_<ContainerAllocator>::STRCONST2 =
        
          "'%d\\ntest'"
        
        ;
   

   
   template<typename ContainerAllocator> const uint8_t
      Msg_primitives_fixed_length_<ContainerAllocator>::BOOLCONST1 =
        
           1
        
        ;
   

   
   template<typename ContainerAllocator> const uint8_t
      Msg_primitives_fixed_length_<ContainerAllocator>::BOOLCONST2 =
        
           0
        
        ;
   

   

   

   

   

   

   

   

   

   

   

   
   template<typename ContainerAllocator> const float
      Msg_primitives_fixed_length_<ContainerAllocator>::FLOAT32CONST =
        
          3.141592
        
        ;
   

   
   template<typename ContainerAllocator> const double
      Msg_primitives_fixed_length_<ContainerAllocator>::FLOAT64CONST =
        
          2.71828
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_msg::Msg_primitives_fixed_length_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_msg::Msg_primitives_fixed_length_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace custom_msg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1330835/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/hakakarl.Brobot.j1330835/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'custom_msg': ['/local-ssd1/ros1_custommsg_generation/folder12/matlab_msg_gen_ros1/glnxa64/src/custom_msg/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg::Msg_primitives_fixed_length_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msg::Msg_primitives_fixed_length_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msg::Msg_primitives_fixed_length_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msg::Msg_primitives_fixed_length_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg::Msg_primitives_fixed_length_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msg::Msg_primitives_fixed_length_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_msg::Msg_primitives_fixed_length_<ContainerAllocator> >
{
  static const char* value()
  {
    return "97338f3c6816d941887f3ce594b56c9a";
  }

  static const char* value(const ::custom_msg::Msg_primitives_fixed_length_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x97338f3c6816d941ULL;
  static const uint64_t static_value2 = 0x887f3ce594b56c9aULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msg::Msg_primitives_fixed_length_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msg/Msg_primitives_fixed_length";
  }

  static const char* value(const ::custom_msg::Msg_primitives_fixed_length_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_msg::Msg_primitives_fixed_length_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 int_value\n"
"uint32 uint_value\n"
"time t\n"
"duration d\n"
"Header header\n"
"\n"
"string STRCONST1 = test\n"
"\n"
"# String constant with special characters\n"
"string STRCONST2 = '%d\\ntest'\n"
"\n"
"bool BOOLCONST1 = 1\n"
"bool BOOLCONST2 = 0\n"
"byte BYTECONST = 5\n"
"int8 INT8CONST = 125\n"
"int16 INT16CONST = 1000\n"
"int32 INT32CONST = -1234\n"
"int64 INT64CONST = 1000000\n"
"char CHARCONST = 100\n"
"uint8 UINT8CONST = 250\n"
"uint16 UINT16CONST = 1000\n"
"uint32 UINT32CONST = 1234\n"
"uint64 UINT64CONST = 1000000\n"
"float32 FLOAT32CONST = 3.141592\n"
"float64 FLOAT64CONST = 2.71828\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::custom_msg::Msg_primitives_fixed_length_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_msg::Msg_primitives_fixed_length_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.int_value);
      stream.next(m.uint_value);
      stream.next(m.t);
      stream.next(m.d);
      stream.next(m.header);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Msg_primitives_fixed_length_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msg::Msg_primitives_fixed_length_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_msg::Msg_primitives_fixed_length_<ContainerAllocator>& v)
  {
    s << indent << "int_value: ";
    Printer<int32_t>::stream(s, indent + "  ", v.int_value);
    s << indent << "uint_value: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.uint_value);
    s << indent << "t: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.t);
    s << indent << "d: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.d);
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSG_MESSAGE_MSG_PRIMITIVES_FIXED_LENGTH_H
