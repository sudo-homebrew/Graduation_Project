// Generated by gencpp from file adhoc_communication/MmControl.msg
// DO NOT EDIT!


#ifndef ADHOC_COMMUNICATION_MESSAGE_MMCONTROL_H
#define ADHOC_COMMUNICATION_MESSAGE_MMCONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace adhoc_communication
{
template <class ContainerAllocator>
struct MmControl_
{
  typedef MmControl_<ContainerAllocator> Type;

  MmControl_()
    : src_robot()
    , update_numbers()  {
    }
  MmControl_(const ContainerAllocator& _alloc)
    : src_robot(_alloc)
    , update_numbers(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _src_robot_type;
  _src_robot_type src_robot;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _update_numbers_type;
  _update_numbers_type update_numbers;





  typedef boost::shared_ptr< ::adhoc_communication::MmControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::adhoc_communication::MmControl_<ContainerAllocator> const> ConstPtr;

}; // struct MmControl_

typedef ::adhoc_communication::MmControl_<std::allocator<void> > MmControl;

typedef boost::shared_ptr< ::adhoc_communication::MmControl > MmControlPtr;
typedef boost::shared_ptr< ::adhoc_communication::MmControl const> MmControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::adhoc_communication::MmControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::adhoc_communication::MmControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::adhoc_communication::MmControl_<ContainerAllocator1> & lhs, const ::adhoc_communication::MmControl_<ContainerAllocator2> & rhs)
{
  return lhs.src_robot == rhs.src_robot &&
    lhs.update_numbers == rhs.update_numbers;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::adhoc_communication::MmControl_<ContainerAllocator1> & lhs, const ::adhoc_communication::MmControl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace adhoc_communication

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::adhoc_communication::MmControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::adhoc_communication::MmControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::adhoc_communication::MmControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::adhoc_communication::MmControl_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::adhoc_communication::MmControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::adhoc_communication::MmControl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::adhoc_communication::MmControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3d223057e1839a50fdaaef262568a5a7";
  }

  static const char* value(const ::adhoc_communication::MmControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3d223057e1839a50ULL;
  static const uint64_t static_value2 = 0xfdaaef262568a5a7ULL;
};

template<class ContainerAllocator>
struct DataType< ::adhoc_communication::MmControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "adhoc_communication/MmControl";
  }

  static const char* value(const ::adhoc_communication::MmControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::adhoc_communication::MmControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string src_robot\n"
"int32[] update_numbers\n"
;
  }

  static const char* value(const ::adhoc_communication::MmControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::adhoc_communication::MmControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.src_robot);
      stream.next(m.update_numbers);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MmControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::adhoc_communication::MmControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::adhoc_communication::MmControl_<ContainerAllocator>& v)
  {
    s << indent << "src_robot: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.src_robot);
    s << indent << "update_numbers[]" << std::endl;
    for (size_t i = 0; i < v.update_numbers.size(); ++i)
    {
      s << indent << "  update_numbers[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.update_numbers[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ADHOC_COMMUNICATION_MESSAGE_MMCONTROL_H
