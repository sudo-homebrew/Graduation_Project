// Generated by gencpp from file sr_robot_msgs/contrlr.msg
// DO NOT EDIT!


#ifndef SR_ROBOT_MSGS_MESSAGE_CONTRLR_H
#define SR_ROBOT_MSGS_MESSAGE_CONTRLR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sr_robot_msgs
{
template <class ContainerAllocator>
struct contrlr_
{
  typedef contrlr_<ContainerAllocator> Type;

  contrlr_()
    : contrlr_name()
    , list_of_parameters()
    , length_of_list(0)  {
    }
  contrlr_(const ContainerAllocator& _alloc)
    : contrlr_name(_alloc)
    , list_of_parameters(_alloc)
    , length_of_list(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _contrlr_name_type;
  _contrlr_name_type contrlr_name;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _list_of_parameters_type;
  _list_of_parameters_type list_of_parameters;

   typedef uint8_t _length_of_list_type;
  _length_of_list_type length_of_list;





  typedef boost::shared_ptr< ::sr_robot_msgs::contrlr_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sr_robot_msgs::contrlr_<ContainerAllocator> const> ConstPtr;

}; // struct contrlr_

typedef ::sr_robot_msgs::contrlr_<std::allocator<void> > contrlr;

typedef boost::shared_ptr< ::sr_robot_msgs::contrlr > contrlrPtr;
typedef boost::shared_ptr< ::sr_robot_msgs::contrlr const> contrlrConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sr_robot_msgs::contrlr_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sr_robot_msgs::contrlr_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sr_robot_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sr_robot_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/sr_robot_msgs/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sr_robot_msgs::contrlr_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sr_robot_msgs::contrlr_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sr_robot_msgs::contrlr_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sr_robot_msgs::contrlr_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sr_robot_msgs::contrlr_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sr_robot_msgs::contrlr_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sr_robot_msgs::contrlr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7b2aa60305c5a9ab0ff05803e4d2ab85";
  }

  static const char* value(const ::sr_robot_msgs::contrlr_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7b2aa60305c5a9abULL;
  static const uint64_t static_value2 = 0x0ff05803e4d2ab85ULL;
};

template<class ContainerAllocator>
struct DataType< ::sr_robot_msgs::contrlr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sr_robot_msgs/contrlr";
  }

  static const char* value(const ::sr_robot_msgs::contrlr_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sr_robot_msgs::contrlr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# the contrlr name (e.g. smart_motor_ff2)\n"
"string   contrlr_name\n"
"\n"
"# specify here a list of parameter_name:value\n"
"# e.g. p:10 sets the p value of the controller to 10\n"
"# the possible parameters are:\n"
"#int16  p\n"
"#int16  i\n"
"#int16  d\n"
"#int16  imax\n"
"#int16  target\n"
"#int16  sensor\n"
"#int16  valve \n"
"#int16  deadband\n"
"#int16  offset\n"
"#int16  shift\n"
"#int16  max\n"
"#\n"
"## parameters for the motors\n"
"#int16  motor_maxforce\n"
"#int16  motor_safeforce\n"
"#int16  force_p\n"
"#int16  force_i\n"
"#int16  force_d\n"
"#int16  force_imax\n"
"#int16  force_out_shift\n"
"#int16  force_deadband\n"
"#int16  force_offset\n"
"#int16  sensor_imax\n"
"#int16  sensor_deadband\n"
"#int16  sensor_offset\n"
"#int16  max_temperature\n"
"#int16  max_current\n"
"\n"
"string[] list_of_parameters\n"
"\n"
"# the size of the list_of_parameters you are sending\n"
"uint8 	 length_of_list\n"
"\n"
"\n"
;
  }

  static const char* value(const ::sr_robot_msgs::contrlr_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sr_robot_msgs::contrlr_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.contrlr_name);
      stream.next(m.list_of_parameters);
      stream.next(m.length_of_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct contrlr_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sr_robot_msgs::contrlr_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sr_robot_msgs::contrlr_<ContainerAllocator>& v)
  {
    s << indent << "contrlr_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.contrlr_name);
    s << indent << "list_of_parameters[]" << std::endl;
    for (size_t i = 0; i < v.list_of_parameters.size(); ++i)
    {
      s << indent << "  list_of_parameters[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.list_of_parameters[i]);
    }
    s << indent << "length_of_list: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.length_of_list);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SR_ROBOT_MSGS_MESSAGE_CONTRLR_H
