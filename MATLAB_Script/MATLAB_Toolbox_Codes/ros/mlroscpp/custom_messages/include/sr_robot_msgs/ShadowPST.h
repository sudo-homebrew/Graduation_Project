// Generated by gencpp from file sr_robot_msgs/ShadowPST.msg
// DO NOT EDIT!


#ifndef SR_ROBOT_MSGS_MESSAGE_SHADOWPST_H
#define SR_ROBOT_MSGS_MESSAGE_SHADOWPST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace sr_robot_msgs
{
template <class ContainerAllocator>
struct ShadowPST_
{
  typedef ShadowPST_<ContainerAllocator> Type;

  ShadowPST_()
    : header()
    , pressure()
    , temperature()  {
    }
  ShadowPST_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , pressure(_alloc)
    , temperature(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _pressure_type;
  _pressure_type pressure;

   typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _temperature_type;
  _temperature_type temperature;





  typedef boost::shared_ptr< ::sr_robot_msgs::ShadowPST_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sr_robot_msgs::ShadowPST_<ContainerAllocator> const> ConstPtr;

}; // struct ShadowPST_

typedef ::sr_robot_msgs::ShadowPST_<std::allocator<void> > ShadowPST;

typedef boost::shared_ptr< ::sr_robot_msgs::ShadowPST > ShadowPSTPtr;
typedef boost::shared_ptr< ::sr_robot_msgs::ShadowPST const> ShadowPSTConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sr_robot_msgs::ShadowPST_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sr_robot_msgs::ShadowPST_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sr_robot_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sr_robot_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/sr_robot_msgs/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sr_robot_msgs::ShadowPST_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sr_robot_msgs::ShadowPST_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sr_robot_msgs::ShadowPST_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sr_robot_msgs::ShadowPST_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sr_robot_msgs::ShadowPST_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sr_robot_msgs::ShadowPST_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sr_robot_msgs::ShadowPST_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ab86b3368a7316c12291b90583e1910e";
  }

  static const char* value(const ::sr_robot_msgs::ShadowPST_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xab86b3368a7316c1ULL;
  static const uint64_t static_value2 = 0x2291b90583e1910eULL;
};

template<class ContainerAllocator>
struct DataType< ::sr_robot_msgs::ShadowPST_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sr_robot_msgs/ShadowPST";
  }

  static const char* value(const ::sr_robot_msgs::ShadowPST_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sr_robot_msgs::ShadowPST_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"int16[] pressure\n"
"int16[] temperature\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::sr_robot_msgs::ShadowPST_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sr_robot_msgs::ShadowPST_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.pressure);
      stream.next(m.temperature);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ShadowPST_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sr_robot_msgs::ShadowPST_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sr_robot_msgs::ShadowPST_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "pressure[]" << std::endl;
    for (size_t i = 0; i < v.pressure.size(); ++i)
    {
      s << indent << "  pressure[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.pressure[i]);
    }
    s << indent << "temperature[]" << std::endl;
    for (size_t i = 0; i < v.temperature.size(); ++i)
    {
      s << indent << "  temperature[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.temperature[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SR_ROBOT_MSGS_MESSAGE_SHADOWPST_H
