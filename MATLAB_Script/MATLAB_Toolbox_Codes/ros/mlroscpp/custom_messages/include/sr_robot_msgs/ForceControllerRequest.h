// Generated by gencpp from file sr_robot_msgs/ForceControllerRequest.msg
// DO NOT EDIT!


#ifndef SR_ROBOT_MSGS_MESSAGE_FORCECONTROLLERREQUEST_H
#define SR_ROBOT_MSGS_MESSAGE_FORCECONTROLLERREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sr_robot_msgs
{
template <class ContainerAllocator>
struct ForceControllerRequest_
{
  typedef ForceControllerRequest_<ContainerAllocator> Type;

  ForceControllerRequest_()
    : maxpwm(0)
    , sgleftref(0)
    , sgrightref(0)
    , f(0)
    , p(0)
    , i(0)
    , d(0)
    , imax(0)
    , deadband(0)
    , sign(0)  {
    }
  ForceControllerRequest_(const ContainerAllocator& _alloc)
    : maxpwm(0)
    , sgleftref(0)
    , sgrightref(0)
    , f(0)
    , p(0)
    , i(0)
    , d(0)
    , imax(0)
    , deadband(0)
    , sign(0)  {
  (void)_alloc;
    }



   typedef int16_t _maxpwm_type;
  _maxpwm_type maxpwm;

   typedef int16_t _sgleftref_type;
  _sgleftref_type sgleftref;

   typedef int16_t _sgrightref_type;
  _sgrightref_type sgrightref;

   typedef int16_t _f_type;
  _f_type f;

   typedef int16_t _p_type;
  _p_type p;

   typedef int16_t _i_type;
  _i_type i;

   typedef int16_t _d_type;
  _d_type d;

   typedef int16_t _imax_type;
  _imax_type imax;

   typedef int16_t _deadband_type;
  _deadband_type deadband;

   typedef int16_t _sign_type;
  _sign_type sign;





  typedef boost::shared_ptr< ::sr_robot_msgs::ForceControllerRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sr_robot_msgs::ForceControllerRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ForceControllerRequest_

typedef ::sr_robot_msgs::ForceControllerRequest_<std::allocator<void> > ForceControllerRequest;

typedef boost::shared_ptr< ::sr_robot_msgs::ForceControllerRequest > ForceControllerRequestPtr;
typedef boost::shared_ptr< ::sr_robot_msgs::ForceControllerRequest const> ForceControllerRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sr_robot_msgs::ForceControllerRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sr_robot_msgs::ForceControllerRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sr_robot_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/mathworks/home/pmurali/Documents/S/matlab_msg_gen_ros1/glnxa64/src/sensor_msgs/msg'], 'sr_robot_msgs': ['/mathworks/home/pmurali/Documents/S/matlab_msg_gen_ros1/glnxa64/src/sr_robot_msgs/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1339814/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/pmurali.Brobot.j1339814/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1339814/matlab/sys/ros1/glnxa64/ros1/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sr_robot_msgs::ForceControllerRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sr_robot_msgs::ForceControllerRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sr_robot_msgs::ForceControllerRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sr_robot_msgs::ForceControllerRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sr_robot_msgs::ForceControllerRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sr_robot_msgs::ForceControllerRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sr_robot_msgs::ForceControllerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8bb059ffa85c4df492f2694e40ee3541";
  }

  static const char* value(const ::sr_robot_msgs::ForceControllerRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8bb059ffa85c4df4ULL;
  static const uint64_t static_value2 = 0x92f2694e40ee3541ULL;
};

template<class ContainerAllocator>
struct DataType< ::sr_robot_msgs::ForceControllerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sr_robot_msgs/ForceControllerRequest";
  }

  static const char* value(const ::sr_robot_msgs::ForceControllerRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sr_robot_msgs::ForceControllerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 maxpwm\n"
"int16 sgleftref\n"
"int16 sgrightref\n"
"int16 f\n"
"int16 p\n"
"int16 i\n"
"int16 d\n"
"int16 imax\n"
"int16 deadband\n"
"int16 sign\n"
;
  }

  static const char* value(const ::sr_robot_msgs::ForceControllerRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sr_robot_msgs::ForceControllerRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.maxpwm);
      stream.next(m.sgleftref);
      stream.next(m.sgrightref);
      stream.next(m.f);
      stream.next(m.p);
      stream.next(m.i);
      stream.next(m.d);
      stream.next(m.imax);
      stream.next(m.deadband);
      stream.next(m.sign);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ForceControllerRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sr_robot_msgs::ForceControllerRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sr_robot_msgs::ForceControllerRequest_<ContainerAllocator>& v)
  {
    s << indent << "maxpwm: ";
    Printer<int16_t>::stream(s, indent + "  ", v.maxpwm);
    s << indent << "sgleftref: ";
    Printer<int16_t>::stream(s, indent + "  ", v.sgleftref);
    s << indent << "sgrightref: ";
    Printer<int16_t>::stream(s, indent + "  ", v.sgrightref);
    s << indent << "f: ";
    Printer<int16_t>::stream(s, indent + "  ", v.f);
    s << indent << "p: ";
    Printer<int16_t>::stream(s, indent + "  ", v.p);
    s << indent << "i: ";
    Printer<int16_t>::stream(s, indent + "  ", v.i);
    s << indent << "d: ";
    Printer<int16_t>::stream(s, indent + "  ", v.d);
    s << indent << "imax: ";
    Printer<int16_t>::stream(s, indent + "  ", v.imax);
    s << indent << "deadband: ";
    Printer<int16_t>::stream(s, indent + "  ", v.deadband);
    s << indent << "sign: ";
    Printer<int16_t>::stream(s, indent + "  ", v.sign);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SR_ROBOT_MSGS_MESSAGE_FORCECONTROLLERREQUEST_H
