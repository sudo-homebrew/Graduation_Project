// Generated by gencpp from file sr_robot_msgs/cartesian_position.msg
// DO NOT EDIT!


#ifndef SR_ROBOT_MSGS_MESSAGE_CARTESIAN_POSITION_H
#define SR_ROBOT_MSGS_MESSAGE_CARTESIAN_POSITION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sr_robot_msgs
{
template <class ContainerAllocator>
struct cartesian_position_
{
  typedef cartesian_position_<ContainerAllocator> Type;

  cartesian_position_()
    : tip_name()
    , tip_pos_x(0.0)
    , tip_pos_y(0.0)
    , tip_pos_z(0.0)
    , tip_orientation_rho(0.0)
    , tip_orientation_theta(0.0)
    , tip_orientation_sigma(0.0)  {
    }
  cartesian_position_(const ContainerAllocator& _alloc)
    : tip_name(_alloc)
    , tip_pos_x(0.0)
    , tip_pos_y(0.0)
    , tip_pos_z(0.0)
    , tip_orientation_rho(0.0)
    , tip_orientation_theta(0.0)
    , tip_orientation_sigma(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _tip_name_type;
  _tip_name_type tip_name;

   typedef float _tip_pos_x_type;
  _tip_pos_x_type tip_pos_x;

   typedef float _tip_pos_y_type;
  _tip_pos_y_type tip_pos_y;

   typedef float _tip_pos_z_type;
  _tip_pos_z_type tip_pos_z;

   typedef float _tip_orientation_rho_type;
  _tip_orientation_rho_type tip_orientation_rho;

   typedef float _tip_orientation_theta_type;
  _tip_orientation_theta_type tip_orientation_theta;

   typedef float _tip_orientation_sigma_type;
  _tip_orientation_sigma_type tip_orientation_sigma;





  typedef boost::shared_ptr< ::sr_robot_msgs::cartesian_position_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sr_robot_msgs::cartesian_position_<ContainerAllocator> const> ConstPtr;

}; // struct cartesian_position_

typedef ::sr_robot_msgs::cartesian_position_<std::allocator<void> > cartesian_position;

typedef boost::shared_ptr< ::sr_robot_msgs::cartesian_position > cartesian_positionPtr;
typedef boost::shared_ptr< ::sr_robot_msgs::cartesian_position const> cartesian_positionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sr_robot_msgs::cartesian_position_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sr_robot_msgs::cartesian_position_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sr_robot_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sr_robot_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/sr_robot_msgs/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sr_robot_msgs::cartesian_position_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sr_robot_msgs::cartesian_position_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sr_robot_msgs::cartesian_position_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sr_robot_msgs::cartesian_position_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sr_robot_msgs::cartesian_position_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sr_robot_msgs::cartesian_position_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sr_robot_msgs::cartesian_position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cfc3f1750a36a668eb93288ed1128f42";
  }

  static const char* value(const ::sr_robot_msgs::cartesian_position_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcfc3f1750a36a668ULL;
  static const uint64_t static_value2 = 0xeb93288ed1128f42ULL;
};

template<class ContainerAllocator>
struct DataType< ::sr_robot_msgs::cartesian_position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sr_robot_msgs/cartesian_position";
  }

  static const char* value(const ::sr_robot_msgs::cartesian_position_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sr_robot_msgs::cartesian_position_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string  tip_name\n"
"float32 tip_pos_x\n"
"float32 tip_pos_y\n"
"float32 tip_pos_z\n"
"float32 tip_orientation_rho\n"
"float32 tip_orientation_theta\n"
"float32 tip_orientation_sigma\n"
"\n"
;
  }

  static const char* value(const ::sr_robot_msgs::cartesian_position_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sr_robot_msgs::cartesian_position_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tip_name);
      stream.next(m.tip_pos_x);
      stream.next(m.tip_pos_y);
      stream.next(m.tip_pos_z);
      stream.next(m.tip_orientation_rho);
      stream.next(m.tip_orientation_theta);
      stream.next(m.tip_orientation_sigma);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cartesian_position_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sr_robot_msgs::cartesian_position_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sr_robot_msgs::cartesian_position_<ContainerAllocator>& v)
  {
    s << indent << "tip_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.tip_name);
    s << indent << "tip_pos_x: ";
    Printer<float>::stream(s, indent + "  ", v.tip_pos_x);
    s << indent << "tip_pos_y: ";
    Printer<float>::stream(s, indent + "  ", v.tip_pos_y);
    s << indent << "tip_pos_z: ";
    Printer<float>::stream(s, indent + "  ", v.tip_pos_z);
    s << indent << "tip_orientation_rho: ";
    Printer<float>::stream(s, indent + "  ", v.tip_orientation_rho);
    s << indent << "tip_orientation_theta: ";
    Printer<float>::stream(s, indent + "  ", v.tip_orientation_theta);
    s << indent << "tip_orientation_sigma: ";
    Printer<float>::stream(s, indent + "  ", v.tip_orientation_sigma);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SR_ROBOT_MSGS_MESSAGE_CARTESIAN_POSITION_H
