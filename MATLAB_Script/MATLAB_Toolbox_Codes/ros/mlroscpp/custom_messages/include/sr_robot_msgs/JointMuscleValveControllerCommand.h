// Generated by gencpp from file sr_robot_msgs/JointMuscleValveControllerCommand.msg
// DO NOT EDIT!


#ifndef SR_ROBOT_MSGS_MESSAGE_JOINTMUSCLEVALVECONTROLLERCOMMAND_H
#define SR_ROBOT_MSGS_MESSAGE_JOINTMUSCLEVALVECONTROLLERCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sr_robot_msgs
{
template <class ContainerAllocator>
struct JointMuscleValveControllerCommand_
{
  typedef JointMuscleValveControllerCommand_<ContainerAllocator> Type;

  JointMuscleValveControllerCommand_()
    : cmd_valve_muscle()
    , cmd_duration_ms()  {
      cmd_valve_muscle.assign(0);

      cmd_duration_ms.assign(0);
  }
  JointMuscleValveControllerCommand_(const ContainerAllocator& _alloc)
    : cmd_valve_muscle()
    , cmd_duration_ms()  {
  (void)_alloc;
      cmd_valve_muscle.assign(0);

      cmd_duration_ms.assign(0);
  }



   typedef boost::array<int8_t, 2>  _cmd_valve_muscle_type;
  _cmd_valve_muscle_type cmd_valve_muscle;

   typedef boost::array<uint64_t, 2>  _cmd_duration_ms_type;
  _cmd_duration_ms_type cmd_duration_ms;





  typedef boost::shared_ptr< ::sr_robot_msgs::JointMuscleValveControllerCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sr_robot_msgs::JointMuscleValveControllerCommand_<ContainerAllocator> const> ConstPtr;

}; // struct JointMuscleValveControllerCommand_

typedef ::sr_robot_msgs::JointMuscleValveControllerCommand_<std::allocator<void> > JointMuscleValveControllerCommand;

typedef boost::shared_ptr< ::sr_robot_msgs::JointMuscleValveControllerCommand > JointMuscleValveControllerCommandPtr;
typedef boost::shared_ptr< ::sr_robot_msgs::JointMuscleValveControllerCommand const> JointMuscleValveControllerCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sr_robot_msgs::JointMuscleValveControllerCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sr_robot_msgs::JointMuscleValveControllerCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sr_robot_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sr_robot_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/sr_robot_msgs/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sr_robot_msgs::JointMuscleValveControllerCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sr_robot_msgs::JointMuscleValveControllerCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sr_robot_msgs::JointMuscleValveControllerCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sr_robot_msgs::JointMuscleValveControllerCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sr_robot_msgs::JointMuscleValveControllerCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sr_robot_msgs::JointMuscleValveControllerCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sr_robot_msgs::JointMuscleValveControllerCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1a35a9f185150fc2bca2640471eeb55f";
  }

  static const char* value(const ::sr_robot_msgs::JointMuscleValveControllerCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1a35a9f185150fc2ULL;
  static const uint64_t static_value2 = 0xbca2640471eeb55fULL;
};

template<class ContainerAllocator>
struct DataType< ::sr_robot_msgs::JointMuscleValveControllerCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sr_robot_msgs/JointMuscleValveControllerCommand";
  }

  static const char* value(const ::sr_robot_msgs::JointMuscleValveControllerCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sr_robot_msgs::JointMuscleValveControllerCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This command will allow the user to specify a separate command for each of the two muscles that control the joint.\n"
"# The user will also specify a duration in ms for that command. During this duration the command will be sent to the hand\n"
"# every ms. \n"
"# Once this duration period has elapsed, a command of 0 will be sent to the muscle (meaning both the filling and emptying valves for that \n"
"# muscle remain closed), until a new command is received\n"
"# A duration of 0 means that there is no timeout, so the valve command will be sent to the muscle until a different valve command is received.\n"
"# BE CAREFUL WHEN USING A DURATION OF 0 AS THIS COULD EVENTUALLY DAMAGE THE MUSCLE\n"
"\n"
"# Allowed values for the cmd_valve_muscle are integers from -4 to +4.\n"
"# +4 the filling valve is open during a full ms cycle. Emptying valve is closed\n"
"# +3 the filling valve is open during 0.75 ms and closed during 0.25 ms in a 1 ms cycle. Emptying valve is closed\n"
"# +2 the filling valve is open during 0.5 ms and closed during 0.5 ms in a 1 ms cycle. Emptying valve is closed\n"
"# +1 the filling valve is open during 0.25 ms and closed during 0.75 ms in a 1 ms cycle. Emptying valve is closed\n"
"# 0 both valves (filling and emptying) remain closed in a 1 ms cycle\n"
"# ...\n"
"# -3 the emptying valve is open during 0.75 ms and closed during 0.25 ms in a 1 ms cycle. Filling valve is closed\n"
"# -4 the emptying valve is open during a full ms cycle. Filling valve is closed\n"
"\n"
"int8[2] cmd_valve_muscle\n"
"uint64[2] cmd_duration_ms\n"
"\n"
"\n"
"\n"
;
  }

  static const char* value(const ::sr_robot_msgs::JointMuscleValveControllerCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sr_robot_msgs::JointMuscleValveControllerCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmd_valve_muscle);
      stream.next(m.cmd_duration_ms);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointMuscleValveControllerCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sr_robot_msgs::JointMuscleValveControllerCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sr_robot_msgs::JointMuscleValveControllerCommand_<ContainerAllocator>& v)
  {
    s << indent << "cmd_valve_muscle[]" << std::endl;
    for (size_t i = 0; i < v.cmd_valve_muscle.size(); ++i)
    {
      s << indent << "  cmd_valve_muscle[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.cmd_valve_muscle[i]);
    }
    s << indent << "cmd_duration_ms[]" << std::endl;
    for (size_t i = 0; i < v.cmd_duration_ms.size(); ++i)
    {
      s << indent << "  cmd_duration_ms[" << i << "]: ";
      Printer<uint64_t>::stream(s, indent + "  ", v.cmd_duration_ms[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SR_ROBOT_MSGS_MESSAGE_JOINTMUSCLEVALVECONTROLLERCOMMAND_H
