// Generated by gencpp from file sr_robot_msgs/joint.msg
// DO NOT EDIT!


#ifndef SR_ROBOT_MSGS_MESSAGE_JOINT_H
#define SR_ROBOT_MSGS_MESSAGE_JOINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sr_robot_msgs
{
template <class ContainerAllocator>
struct joint_
{
  typedef joint_<ContainerAllocator> Type;

  joint_()
    : joint_name()
    , joint_position(0.0)
    , joint_target(0.0)
    , joint_torque(0.0)
    , joint_temperature(0.0)
    , joint_current(0.0)
    , error_flag()  {
    }
  joint_(const ContainerAllocator& _alloc)
    : joint_name(_alloc)
    , joint_position(0.0)
    , joint_target(0.0)
    , joint_torque(0.0)
    , joint_temperature(0.0)
    , joint_current(0.0)
    , error_flag(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _joint_name_type;
  _joint_name_type joint_name;

   typedef double _joint_position_type;
  _joint_position_type joint_position;

   typedef double _joint_target_type;
  _joint_target_type joint_target;

   typedef double _joint_torque_type;
  _joint_torque_type joint_torque;

   typedef double _joint_temperature_type;
  _joint_temperature_type joint_temperature;

   typedef double _joint_current_type;
  _joint_current_type joint_current;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _error_flag_type;
  _error_flag_type error_flag;





  typedef boost::shared_ptr< ::sr_robot_msgs::joint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sr_robot_msgs::joint_<ContainerAllocator> const> ConstPtr;

}; // struct joint_

typedef ::sr_robot_msgs::joint_<std::allocator<void> > joint;

typedef boost::shared_ptr< ::sr_robot_msgs::joint > jointPtr;
typedef boost::shared_ptr< ::sr_robot_msgs::joint const> jointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sr_robot_msgs::joint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sr_robot_msgs::joint_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sr_robot_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sr_robot_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/sr_robot_msgs/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sr_robot_msgs::joint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sr_robot_msgs::joint_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sr_robot_msgs::joint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sr_robot_msgs::joint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sr_robot_msgs::joint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sr_robot_msgs::joint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sr_robot_msgs::joint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4f0c5e71dfc214020935c3116ed47d6f";
  }

  static const char* value(const ::sr_robot_msgs::joint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4f0c5e71dfc21402ULL;
  static const uint64_t static_value2 = 0x0935c3116ed47d6fULL;
};

template<class ContainerAllocator>
struct DataType< ::sr_robot_msgs::joint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sr_robot_msgs/joint";
  }

  static const char* value(const ::sr_robot_msgs::joint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sr_robot_msgs::joint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string  joint_name\n"
"float64 joint_position\n"
"float64 joint_target\n"
"float64 joint_torque\n"
"float64 joint_temperature\n"
"float64 joint_current\n"
"string  error_flag\n"
;
  }

  static const char* value(const ::sr_robot_msgs::joint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sr_robot_msgs::joint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_name);
      stream.next(m.joint_position);
      stream.next(m.joint_target);
      stream.next(m.joint_torque);
      stream.next(m.joint_temperature);
      stream.next(m.joint_current);
      stream.next(m.error_flag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct joint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sr_robot_msgs::joint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sr_robot_msgs::joint_<ContainerAllocator>& v)
  {
    s << indent << "joint_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.joint_name);
    s << indent << "joint_position: ";
    Printer<double>::stream(s, indent + "  ", v.joint_position);
    s << indent << "joint_target: ";
    Printer<double>::stream(s, indent + "  ", v.joint_target);
    s << indent << "joint_torque: ";
    Printer<double>::stream(s, indent + "  ", v.joint_torque);
    s << indent << "joint_temperature: ";
    Printer<double>::stream(s, indent + "  ", v.joint_temperature);
    s << indent << "joint_current: ";
    Printer<double>::stream(s, indent + "  ", v.joint_current);
    s << indent << "error_flag: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.error_flag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SR_ROBOT_MSGS_MESSAGE_JOINT_H
