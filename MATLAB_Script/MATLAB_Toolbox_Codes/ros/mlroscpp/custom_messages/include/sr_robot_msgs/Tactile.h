// Generated by gencpp from file sr_robot_msgs/Tactile.msg
// DO NOT EDIT!


#ifndef SR_ROBOT_MSGS_MESSAGE_TACTILE_H
#define SR_ROBOT_MSGS_MESSAGE_TACTILE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Int16.h>

namespace sr_robot_msgs
{
template <class ContainerAllocator>
struct Tactile_
{
  typedef Tactile_<ContainerAllocator> Type;

  Tactile_()
    : data()  {
    }
  Tactile_(const ContainerAllocator& _alloc)
    : data(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::std_msgs::Int16_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::Int16_<ContainerAllocator> >::other >  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::sr_robot_msgs::Tactile_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sr_robot_msgs::Tactile_<ContainerAllocator> const> ConstPtr;

}; // struct Tactile_

typedef ::sr_robot_msgs::Tactile_<std::allocator<void> > Tactile;

typedef boost::shared_ptr< ::sr_robot_msgs::Tactile > TactilePtr;
typedef boost::shared_ptr< ::sr_robot_msgs::Tactile const> TactileConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sr_robot_msgs::Tactile_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sr_robot_msgs::Tactile_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sr_robot_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sr_robot_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/sr_robot_msgs/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sr_robot_msgs::Tactile_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sr_robot_msgs::Tactile_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sr_robot_msgs::Tactile_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sr_robot_msgs::Tactile_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sr_robot_msgs::Tactile_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sr_robot_msgs::Tactile_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sr_robot_msgs::Tactile_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0f9585f47779b9607f760bef85a254c0";
  }

  static const char* value(const ::sr_robot_msgs::Tactile_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0f9585f47779b960ULL;
  static const uint64_t static_value2 = 0x7f760bef85a254c0ULL;
};

template<class ContainerAllocator>
struct DataType< ::sr_robot_msgs::Tactile_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sr_robot_msgs/Tactile";
  }

  static const char* value(const ::sr_robot_msgs::Tactile_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sr_robot_msgs::Tactile_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Int16[] data\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Int16\n"
"int16 data\n"
;
  }

  static const char* value(const ::sr_robot_msgs::Tactile_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sr_robot_msgs::Tactile_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Tactile_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sr_robot_msgs::Tactile_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sr_robot_msgs::Tactile_<ContainerAllocator>& v)
  {
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::Int16_<ContainerAllocator> >::stream(s, indent + "    ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SR_ROBOT_MSGS_MESSAGE_TACTILE_H
