// Generated by gencpp from file sr_robot_msgs/cartesian_data.msg
// DO NOT EDIT!


#ifndef SR_ROBOT_MSGS_MESSAGE_CARTESIAN_DATA_H
#define SR_ROBOT_MSGS_MESSAGE_CARTESIAN_DATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sr_robot_msgs/cartesian_position.h>

namespace sr_robot_msgs
{
template <class ContainerAllocator>
struct cartesian_data_
{
  typedef cartesian_data_<ContainerAllocator> Type;

  cartesian_data_()
    : cartesian_positions_length(0)
    , cartesian_positions()  {
    }
  cartesian_data_(const ContainerAllocator& _alloc)
    : cartesian_positions_length(0)
    , cartesian_positions(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _cartesian_positions_length_type;
  _cartesian_positions_length_type cartesian_positions_length;

   typedef std::vector< ::sr_robot_msgs::cartesian_position_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::sr_robot_msgs::cartesian_position_<ContainerAllocator> >::other >  _cartesian_positions_type;
  _cartesian_positions_type cartesian_positions;





  typedef boost::shared_ptr< ::sr_robot_msgs::cartesian_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sr_robot_msgs::cartesian_data_<ContainerAllocator> const> ConstPtr;

}; // struct cartesian_data_

typedef ::sr_robot_msgs::cartesian_data_<std::allocator<void> > cartesian_data;

typedef boost::shared_ptr< ::sr_robot_msgs::cartesian_data > cartesian_dataPtr;
typedef boost::shared_ptr< ::sr_robot_msgs::cartesian_data const> cartesian_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sr_robot_msgs::cartesian_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sr_robot_msgs::cartesian_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sr_robot_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sr_robot_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/sr_robot_msgs/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sr_robot_msgs::cartesian_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sr_robot_msgs::cartesian_data_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sr_robot_msgs::cartesian_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sr_robot_msgs::cartesian_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sr_robot_msgs::cartesian_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sr_robot_msgs::cartesian_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sr_robot_msgs::cartesian_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0efe699b2863e30a84ffabfdca8dfb19";
  }

  static const char* value(const ::sr_robot_msgs::cartesian_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0efe699b2863e30aULL;
  static const uint64_t static_value2 = 0x84ffabfdca8dfb19ULL;
};

template<class ContainerAllocator>
struct DataType< ::sr_robot_msgs::cartesian_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sr_robot_msgs/cartesian_data";
  }

  static const char* value(const ::sr_robot_msgs::cartesian_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sr_robot_msgs::cartesian_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8                 cartesian_positions_length\n"
"cartesian_position[] cartesian_positions\n"
"\n"
"================================================================================\n"
"MSG: sr_robot_msgs/cartesian_position\n"
"string  tip_name\n"
"float32 tip_pos_x\n"
"float32 tip_pos_y\n"
"float32 tip_pos_z\n"
"float32 tip_orientation_rho\n"
"float32 tip_orientation_theta\n"
"float32 tip_orientation_sigma\n"
"\n"
;
  }

  static const char* value(const ::sr_robot_msgs::cartesian_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sr_robot_msgs::cartesian_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cartesian_positions_length);
      stream.next(m.cartesian_positions);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cartesian_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sr_robot_msgs::cartesian_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sr_robot_msgs::cartesian_data_<ContainerAllocator>& v)
  {
    s << indent << "cartesian_positions_length: ";
    Printer<int8_t>::stream(s, indent + "  ", v.cartesian_positions_length);
    s << indent << "cartesian_positions[]" << std::endl;
    for (size_t i = 0; i < v.cartesian_positions.size(); ++i)
    {
      s << indent << "  cartesian_positions[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::sr_robot_msgs::cartesian_position_<ContainerAllocator> >::stream(s, indent + "    ", v.cartesian_positions[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SR_ROBOT_MSGS_MESSAGE_CARTESIAN_DATA_H
