// Generated by gencpp from file sr_robot_msgs/MotorSystemControls.msg
// DO NOT EDIT!


#ifndef SR_ROBOT_MSGS_MESSAGE_MOTORSYSTEMCONTROLS_H
#define SR_ROBOT_MSGS_MESSAGE_MOTORSYSTEMCONTROLS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sr_robot_msgs
{
template <class ContainerAllocator>
struct MotorSystemControls_
{
  typedef MotorSystemControls_<ContainerAllocator> Type;

  MotorSystemControls_()
    : motor_id(0)
    , enable_backlash_compensation(false)
    , increase_sgl_tracking(false)
    , decrease_sgl_tracking(false)
    , increase_sgr_tracking(false)
    , decrease_sgr_tracking(false)
    , initiate_jiggling(false)
    , write_config_to_eeprom(false)  {
    }
  MotorSystemControls_(const ContainerAllocator& _alloc)
    : motor_id(0)
    , enable_backlash_compensation(false)
    , increase_sgl_tracking(false)
    , decrease_sgl_tracking(false)
    , increase_sgr_tracking(false)
    , decrease_sgr_tracking(false)
    , initiate_jiggling(false)
    , write_config_to_eeprom(false)  {
  (void)_alloc;
    }



   typedef int8_t _motor_id_type;
  _motor_id_type motor_id;

   typedef uint8_t _enable_backlash_compensation_type;
  _enable_backlash_compensation_type enable_backlash_compensation;

   typedef uint8_t _increase_sgl_tracking_type;
  _increase_sgl_tracking_type increase_sgl_tracking;

   typedef uint8_t _decrease_sgl_tracking_type;
  _decrease_sgl_tracking_type decrease_sgl_tracking;

   typedef uint8_t _increase_sgr_tracking_type;
  _increase_sgr_tracking_type increase_sgr_tracking;

   typedef uint8_t _decrease_sgr_tracking_type;
  _decrease_sgr_tracking_type decrease_sgr_tracking;

   typedef uint8_t _initiate_jiggling_type;
  _initiate_jiggling_type initiate_jiggling;

   typedef uint8_t _write_config_to_eeprom_type;
  _write_config_to_eeprom_type write_config_to_eeprom;





  typedef boost::shared_ptr< ::sr_robot_msgs::MotorSystemControls_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sr_robot_msgs::MotorSystemControls_<ContainerAllocator> const> ConstPtr;

}; // struct MotorSystemControls_

typedef ::sr_robot_msgs::MotorSystemControls_<std::allocator<void> > MotorSystemControls;

typedef boost::shared_ptr< ::sr_robot_msgs::MotorSystemControls > MotorSystemControlsPtr;
typedef boost::shared_ptr< ::sr_robot_msgs::MotorSystemControls const> MotorSystemControlsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sr_robot_msgs::MotorSystemControls_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sr_robot_msgs::MotorSystemControls_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sr_robot_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sr_robot_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/sr_robot_msgs/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sr_robot_msgs::MotorSystemControls_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sr_robot_msgs::MotorSystemControls_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sr_robot_msgs::MotorSystemControls_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sr_robot_msgs::MotorSystemControls_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sr_robot_msgs::MotorSystemControls_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sr_robot_msgs::MotorSystemControls_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sr_robot_msgs::MotorSystemControls_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0686822f46acfde0133711bd613a20f1";
  }

  static const char* value(const ::sr_robot_msgs::MotorSystemControls_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0686822f46acfde0ULL;
  static const uint64_t static_value2 = 0x133711bd613a20f1ULL;
};

template<class ContainerAllocator>
struct DataType< ::sr_robot_msgs::MotorSystemControls_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sr_robot_msgs/MotorSystemControls";
  }

  static const char* value(const ::sr_robot_msgs::MotorSystemControls_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sr_robot_msgs::MotorSystemControls_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 motor_id                     # the id of the motor you want to control\n"
"\n"
"bool enable_backlash_compensation # switch on/off backlash compensation at the motor level\n"
"bool increase_sgl_tracking        # increment the tracking value for the left gauge\n"
"bool decrease_sgl_tracking        # decrement the tracking value for the left gauge\n"
"bool increase_sgr_tracking        # increment the tracking value for the right gauge\n"
"bool decrease_sgr_tracking        # decrement the tracking value for the right gauge\n"
"bool initiate_jiggling            # starts jiggling the given motor\n"
"bool write_config_to_eeprom       # write the current configuration to the eeprom\n"
;
  }

  static const char* value(const ::sr_robot_msgs::MotorSystemControls_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sr_robot_msgs::MotorSystemControls_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motor_id);
      stream.next(m.enable_backlash_compensation);
      stream.next(m.increase_sgl_tracking);
      stream.next(m.decrease_sgl_tracking);
      stream.next(m.increase_sgr_tracking);
      stream.next(m.decrease_sgr_tracking);
      stream.next(m.initiate_jiggling);
      stream.next(m.write_config_to_eeprom);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorSystemControls_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sr_robot_msgs::MotorSystemControls_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sr_robot_msgs::MotorSystemControls_<ContainerAllocator>& v)
  {
    s << indent << "motor_id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.motor_id);
    s << indent << "enable_backlash_compensation: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enable_backlash_compensation);
    s << indent << "increase_sgl_tracking: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.increase_sgl_tracking);
    s << indent << "decrease_sgl_tracking: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.decrease_sgl_tracking);
    s << indent << "increase_sgr_tracking: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.increase_sgr_tracking);
    s << indent << "decrease_sgr_tracking: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.decrease_sgr_tracking);
    s << indent << "initiate_jiggling: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.initiate_jiggling);
    s << indent << "write_config_to_eeprom: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.write_config_to_eeprom);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SR_ROBOT_MSGS_MESSAGE_MOTORSYSTEMCONTROLS_H
