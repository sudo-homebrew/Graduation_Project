// Generated by gencpp from file sr_robot_msgs/command.msg
// DO NOT EDIT!


#ifndef SR_ROBOT_MSGS_MESSAGE_COMMAND_H
#define SR_ROBOT_MSGS_MESSAGE_COMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sr_robot_msgs/sendupdate.h>
#include <sr_robot_msgs/contrlr.h>

namespace sr_robot_msgs
{
template <class ContainerAllocator>
struct command_
{
  typedef command_<ContainerAllocator> Type;

  command_()
    : command_type(0)
    , sendupdate_command()
    , contrlr_command()  {
    }
  command_(const ContainerAllocator& _alloc)
    : command_type(0)
    , sendupdate_command(_alloc)
    , contrlr_command(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _command_type_type;
  _command_type_type command_type;

   typedef  ::sr_robot_msgs::sendupdate_<ContainerAllocator>  _sendupdate_command_type;
  _sendupdate_command_type sendupdate_command;

   typedef  ::sr_robot_msgs::contrlr_<ContainerAllocator>  _contrlr_command_type;
  _contrlr_command_type contrlr_command;





  typedef boost::shared_ptr< ::sr_robot_msgs::command_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sr_robot_msgs::command_<ContainerAllocator> const> ConstPtr;

}; // struct command_

typedef ::sr_robot_msgs::command_<std::allocator<void> > command;

typedef boost::shared_ptr< ::sr_robot_msgs::command > commandPtr;
typedef boost::shared_ptr< ::sr_robot_msgs::command const> commandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sr_robot_msgs::command_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sr_robot_msgs::command_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sr_robot_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sr_robot_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/sr_robot_msgs/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sr_robot_msgs::command_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sr_robot_msgs::command_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sr_robot_msgs::command_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sr_robot_msgs::command_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sr_robot_msgs::command_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sr_robot_msgs::command_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sr_robot_msgs::command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2c927cc3decc25060b43219a05beb823";
  }

  static const char* value(const ::sr_robot_msgs::command_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2c927cc3decc2506ULL;
  static const uint64_t static_value2 = 0x0b43219a05beb823ULL;
};

template<class ContainerAllocator>
struct DataType< ::sr_robot_msgs::command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sr_robot_msgs/command";
  }

  static const char* value(const ::sr_robot_msgs::command_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sr_robot_msgs::command_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# sendupdate is 1\n"
"# contrlr is 2\n"
"int8 command_type\n"
"\n"
"sendupdate sendupdate_command\n"
"contrlr contrlr_command\n"
"\n"
"================================================================================\n"
"MSG: sr_robot_msgs/sendupdate\n"
"int8 sendupdate_length\n"
"joint[] sendupdate_list\n"
"\n"
"\n"
"================================================================================\n"
"MSG: sr_robot_msgs/joint\n"
"string  joint_name\n"
"float64 joint_position\n"
"float64 joint_target\n"
"float64 joint_torque\n"
"float64 joint_temperature\n"
"float64 joint_current\n"
"string  error_flag\n"
"\n"
"================================================================================\n"
"MSG: sr_robot_msgs/contrlr\n"
"# the contrlr name (e.g. smart_motor_ff2)\n"
"string   contrlr_name\n"
"\n"
"# specify here a list of parameter_name:value\n"
"# e.g. p:10 sets the p value of the controller to 10\n"
"# the possible parameters are:\n"
"#int16  p\n"
"#int16  i\n"
"#int16  d\n"
"#int16  imax\n"
"#int16  target\n"
"#int16  sensor\n"
"#int16  valve \n"
"#int16  deadband\n"
"#int16  offset\n"
"#int16  shift\n"
"#int16  max\n"
"#\n"
"## parameters for the motors\n"
"#int16  motor_maxforce\n"
"#int16  motor_safeforce\n"
"#int16  force_p\n"
"#int16  force_i\n"
"#int16  force_d\n"
"#int16  force_imax\n"
"#int16  force_out_shift\n"
"#int16  force_deadband\n"
"#int16  force_offset\n"
"#int16  sensor_imax\n"
"#int16  sensor_deadband\n"
"#int16  sensor_offset\n"
"#int16  max_temperature\n"
"#int16  max_current\n"
"\n"
"string[] list_of_parameters\n"
"\n"
"# the size of the list_of_parameters you are sending\n"
"uint8 	 length_of_list\n"
"\n"
"\n"
;
  }

  static const char* value(const ::sr_robot_msgs::command_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sr_robot_msgs::command_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.command_type);
      stream.next(m.sendupdate_command);
      stream.next(m.contrlr_command);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct command_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sr_robot_msgs::command_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sr_robot_msgs::command_<ContainerAllocator>& v)
  {
    s << indent << "command_type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.command_type);
    s << indent << "sendupdate_command: ";
    s << std::endl;
    Printer< ::sr_robot_msgs::sendupdate_<ContainerAllocator> >::stream(s, indent + "  ", v.sendupdate_command);
    s << indent << "contrlr_command: ";
    s << std::endl;
    Printer< ::sr_robot_msgs::contrlr_<ContainerAllocator> >::stream(s, indent + "  ", v.contrlr_command);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SR_ROBOT_MSGS_MESSAGE_COMMAND_H
