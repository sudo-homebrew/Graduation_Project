// Generated by gencpp from file sr_robot_msgs/which_fingers_are_touchingResponse.msg
// DO NOT EDIT!


#ifndef SR_ROBOT_MSGS_MESSAGE_WHICH_FINGERS_ARE_TOUCHINGRESPONSE_H
#define SR_ROBOT_MSGS_MESSAGE_WHICH_FINGERS_ARE_TOUCHINGRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sr_robot_msgs
{
template <class ContainerAllocator>
struct which_fingers_are_touchingResponse_
{
  typedef which_fingers_are_touchingResponse_<ContainerAllocator> Type;

  which_fingers_are_touchingResponse_()
    : touch_forces()  {
    }
  which_fingers_are_touchingResponse_(const ContainerAllocator& _alloc)
    : touch_forces(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _touch_forces_type;
  _touch_forces_type touch_forces;





  typedef boost::shared_ptr< ::sr_robot_msgs::which_fingers_are_touchingResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sr_robot_msgs::which_fingers_are_touchingResponse_<ContainerAllocator> const> ConstPtr;

}; // struct which_fingers_are_touchingResponse_

typedef ::sr_robot_msgs::which_fingers_are_touchingResponse_<std::allocator<void> > which_fingers_are_touchingResponse;

typedef boost::shared_ptr< ::sr_robot_msgs::which_fingers_are_touchingResponse > which_fingers_are_touchingResponsePtr;
typedef boost::shared_ptr< ::sr_robot_msgs::which_fingers_are_touchingResponse const> which_fingers_are_touchingResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sr_robot_msgs::which_fingers_are_touchingResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sr_robot_msgs::which_fingers_are_touchingResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sr_robot_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/mathworks/home/pmurali/Documents/S/matlab_msg_gen_ros1/glnxa64/src/sensor_msgs/msg'], 'sr_robot_msgs': ['/mathworks/home/pmurali/Documents/S/matlab_msg_gen_ros1/glnxa64/src/sr_robot_msgs/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1339814/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/pmurali.Brobot.j1339814/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1339814/matlab/sys/ros1/glnxa64/ros1/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sr_robot_msgs::which_fingers_are_touchingResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sr_robot_msgs::which_fingers_are_touchingResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sr_robot_msgs::which_fingers_are_touchingResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sr_robot_msgs::which_fingers_are_touchingResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sr_robot_msgs::which_fingers_are_touchingResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sr_robot_msgs::which_fingers_are_touchingResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sr_robot_msgs::which_fingers_are_touchingResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f9d8b7193733b8133389d5ada08e713d";
  }

  static const char* value(const ::sr_robot_msgs::which_fingers_are_touchingResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf9d8b7193733b813ULL;
  static const uint64_t static_value2 = 0x3389d5ada08e713dULL;
};

template<class ContainerAllocator>
struct DataType< ::sr_robot_msgs::which_fingers_are_touchingResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sr_robot_msgs/which_fingers_are_touchingResponse";
  }

  static const char* value(const ::sr_robot_msgs::which_fingers_are_touchingResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sr_robot_msgs::which_fingers_are_touchingResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] touch_forces\n"
"\n"
"\n"
"\n"
"\n"
;
  }

  static const char* value(const ::sr_robot_msgs::which_fingers_are_touchingResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sr_robot_msgs::which_fingers_are_touchingResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.touch_forces);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct which_fingers_are_touchingResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sr_robot_msgs::which_fingers_are_touchingResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sr_robot_msgs::which_fingers_are_touchingResponse_<ContainerAllocator>& v)
  {
    s << indent << "touch_forces[]" << std::endl;
    for (size_t i = 0; i < v.touch_forces.size(); ++i)
    {
      s << indent << "  touch_forces[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.touch_forces[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SR_ROBOT_MSGS_MESSAGE_WHICH_FINGERS_ARE_TOUCHINGRESPONSE_H
