// Generated by gencpp from file bayesian_belief_networks/QueryRequest.msg
// DO NOT EDIT!


#ifndef BAYESIAN_BELIEF_NETWORKS_MESSAGE_QUERYREQUEST_H
#define BAYESIAN_BELIEF_NETWORKS_MESSAGE_QUERYREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <bayesian_belief_networks/Observation.h>

namespace bayesian_belief_networks
{
template <class ContainerAllocator>
struct QueryRequest_
{
  typedef QueryRequest_<ContainerAllocator> Type;

  QueryRequest_()
    : query()  {
    }
  QueryRequest_(const ContainerAllocator& _alloc)
    : query(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::bayesian_belief_networks::Observation_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::bayesian_belief_networks::Observation_<ContainerAllocator> >::other >  _query_type;
  _query_type query;





  typedef boost::shared_ptr< ::bayesian_belief_networks::QueryRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bayesian_belief_networks::QueryRequest_<ContainerAllocator> const> ConstPtr;

}; // struct QueryRequest_

typedef ::bayesian_belief_networks::QueryRequest_<std::allocator<void> > QueryRequest;

typedef boost::shared_ptr< ::bayesian_belief_networks::QueryRequest > QueryRequestPtr;
typedef boost::shared_ptr< ::bayesian_belief_networks::QueryRequest const> QueryRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bayesian_belief_networks::QueryRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bayesian_belief_networks::QueryRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace bayesian_belief_networks

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1339814/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'bayesian_belief_networks': ['/mathworks/home/pmurali/Documents/Test 3/matlab_msg_gen_ros1/glnxa64/src/bayesian_belief_networks/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::bayesian_belief_networks::QueryRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bayesian_belief_networks::QueryRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bayesian_belief_networks::QueryRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bayesian_belief_networks::QueryRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bayesian_belief_networks::QueryRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bayesian_belief_networks::QueryRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bayesian_belief_networks::QueryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c82ad1bda0500c7fa7fed33d8deb2a3f";
  }

  static const char* value(const ::bayesian_belief_networks::QueryRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc82ad1bda0500c7fULL;
  static const uint64_t static_value2 = 0xa7fed33d8deb2a3fULL;
};

template<class ContainerAllocator>
struct DataType< ::bayesian_belief_networks::QueryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bayesian_belief_networks/QueryRequest";
  }

  static const char* value(const ::bayesian_belief_networks::QueryRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bayesian_belief_networks::QueryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Observation[] query\n"
"\n"
"================================================================================\n"
"MSG: bayesian_belief_networks/Observation\n"
"string node\n"
"string evidence\n"
;
  }

  static const char* value(const ::bayesian_belief_networks::QueryRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bayesian_belief_networks::QueryRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.query);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct QueryRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bayesian_belief_networks::QueryRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bayesian_belief_networks::QueryRequest_<ContainerAllocator>& v)
  {
    s << indent << "query[]" << std::endl;
    for (size_t i = 0; i < v.query.size(); ++i)
    {
      s << indent << "  query[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::bayesian_belief_networks::Observation_<ContainerAllocator> >::stream(s, indent + "    ", v.query[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BAYESIAN_BELIEF_NETWORKS_MESSAGE_QUERYREQUEST_H
