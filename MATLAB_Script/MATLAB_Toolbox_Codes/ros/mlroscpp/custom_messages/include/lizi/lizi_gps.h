// Generated by gencpp from file lizi/lizi_gps.msg
// DO NOT EDIT!


#ifndef LIZI_MESSAGE_LIZI_GPS_H
#define LIZI_MESSAGE_LIZI_GPS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lizi
{
template <class ContainerAllocator>
struct lizi_gps_
{
  typedef lizi_gps_<ContainerAllocator> Type;

  lizi_gps_()
    : Lat(0.0)
    , Lon(0.0)
    , Alt(0.0)
    , Sats(0)
    , HDOP(0)
    , Status(0)  {
    }
  lizi_gps_(const ContainerAllocator& _alloc)
    : Lat(0.0)
    , Lon(0.0)
    , Alt(0.0)
    , Sats(0)
    , HDOP(0)
    , Status(0)  {
  (void)_alloc;
    }



   typedef double _Lat_type;
  _Lat_type Lat;

   typedef double _Lon_type;
  _Lon_type Lon;

   typedef float _Alt_type;
  _Alt_type Alt;

   typedef int16_t _Sats_type;
  _Sats_type Sats;

   typedef int16_t _HDOP_type;
  _HDOP_type HDOP;

   typedef int16_t _Status_type;
  _Status_type Status;





  typedef boost::shared_ptr< ::lizi::lizi_gps_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lizi::lizi_gps_<ContainerAllocator> const> ConstPtr;

}; // struct lizi_gps_

typedef ::lizi::lizi_gps_<std::allocator<void> > lizi_gps;

typedef boost::shared_ptr< ::lizi::lizi_gps > lizi_gpsPtr;
typedef boost::shared_ptr< ::lizi::lizi_gps const> lizi_gpsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lizi::lizi_gps_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lizi::lizi_gps_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lizi

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'lizi': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/lizi/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lizi::lizi_gps_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lizi::lizi_gps_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lizi::lizi_gps_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lizi::lizi_gps_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lizi::lizi_gps_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lizi::lizi_gps_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lizi::lizi_gps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b6b3576ebfcb04caffd96f3cf662f564";
  }

  static const char* value(const ::lizi::lizi_gps_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb6b3576ebfcb04caULL;
  static const uint64_t static_value2 = 0xffd96f3cf662f564ULL;
};

template<class ContainerAllocator>
struct DataType< ::lizi::lizi_gps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lizi/lizi_gps";
  }

  static const char* value(const ::lizi::lizi_gps_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lizi::lizi_gps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 Lat\n"
"float64 Lon\n"
"float32 Alt\n"
"int16 Sats\n"
"int16 HDOP\n"
"int16 Status\n"
"\n"
;
  }

  static const char* value(const ::lizi::lizi_gps_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lizi::lizi_gps_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Lat);
      stream.next(m.Lon);
      stream.next(m.Alt);
      stream.next(m.Sats);
      stream.next(m.HDOP);
      stream.next(m.Status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct lizi_gps_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lizi::lizi_gps_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lizi::lizi_gps_<ContainerAllocator>& v)
  {
    s << indent << "Lat: ";
    Printer<double>::stream(s, indent + "  ", v.Lat);
    s << indent << "Lon: ";
    Printer<double>::stream(s, indent + "  ", v.Lon);
    s << indent << "Alt: ";
    Printer<float>::stream(s, indent + "  ", v.Alt);
    s << indent << "Sats: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Sats);
    s << indent << "HDOP: ";
    Printer<int16_t>::stream(s, indent + "  ", v.HDOP);
    s << indent << "Status: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LIZI_MESSAGE_LIZI_GPS_H
