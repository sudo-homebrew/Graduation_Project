// Generated by gencpp from file lizi/lizi_raw.msg
// DO NOT EDIT!


#ifndef LIZI_MESSAGE_LIZI_RAW_H
#define LIZI_MESSAGE_LIZI_RAW_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lizi
{
template <class ContainerAllocator>
struct lizi_raw_
{
  typedef lizi_raw_<ContainerAllocator> Type;

  lizi_raw_()
    : qw(0.0)
    , qx(0.0)
    , qy(0.0)
    , qz(0.0)
    , left_ticks(0)
    , right_ticks(0)
    , left_urf(0.0)
    , rear_urf(0.0)
    , right_urf(0.0)  {
    }
  lizi_raw_(const ContainerAllocator& _alloc)
    : qw(0.0)
    , qx(0.0)
    , qy(0.0)
    , qz(0.0)
    , left_ticks(0)
    , right_ticks(0)
    , left_urf(0.0)
    , rear_urf(0.0)
    , right_urf(0.0)  {
  (void)_alloc;
    }



   typedef float _qw_type;
  _qw_type qw;

   typedef float _qx_type;
  _qx_type qx;

   typedef float _qy_type;
  _qy_type qy;

   typedef float _qz_type;
  _qz_type qz;

   typedef int32_t _left_ticks_type;
  _left_ticks_type left_ticks;

   typedef int32_t _right_ticks_type;
  _right_ticks_type right_ticks;

   typedef float _left_urf_type;
  _left_urf_type left_urf;

   typedef float _rear_urf_type;
  _rear_urf_type rear_urf;

   typedef float _right_urf_type;
  _right_urf_type right_urf;





  typedef boost::shared_ptr< ::lizi::lizi_raw_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lizi::lizi_raw_<ContainerAllocator> const> ConstPtr;

}; // struct lizi_raw_

typedef ::lizi::lizi_raw_<std::allocator<void> > lizi_raw;

typedef boost::shared_ptr< ::lizi::lizi_raw > lizi_rawPtr;
typedef boost::shared_ptr< ::lizi::lizi_raw const> lizi_rawConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lizi::lizi_raw_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lizi::lizi_raw_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lizi

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'lizi': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/lizi/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lizi::lizi_raw_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lizi::lizi_raw_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lizi::lizi_raw_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lizi::lizi_raw_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lizi::lizi_raw_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lizi::lizi_raw_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lizi::lizi_raw_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d3fede5537f79f19050f2e81db4deb6d";
  }

  static const char* value(const ::lizi::lizi_raw_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd3fede5537f79f19ULL;
  static const uint64_t static_value2 = 0x050f2e81db4deb6dULL;
};

template<class ContainerAllocator>
struct DataType< ::lizi::lizi_raw_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lizi/lizi_raw";
  }

  static const char* value(const ::lizi::lizi_raw_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lizi::lizi_raw_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 qw\n"
"float32 qx\n"
"float32 qy\n"
"float32 qz\n"
"int32 left_ticks\n"
"int32 right_ticks\n"
"float32 left_urf\n"
"float32 rear_urf\n"
"float32 right_urf\n"
"\n"
;
  }

  static const char* value(const ::lizi::lizi_raw_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lizi::lizi_raw_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.qw);
      stream.next(m.qx);
      stream.next(m.qy);
      stream.next(m.qz);
      stream.next(m.left_ticks);
      stream.next(m.right_ticks);
      stream.next(m.left_urf);
      stream.next(m.rear_urf);
      stream.next(m.right_urf);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct lizi_raw_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lizi::lizi_raw_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lizi::lizi_raw_<ContainerAllocator>& v)
  {
    s << indent << "qw: ";
    Printer<float>::stream(s, indent + "  ", v.qw);
    s << indent << "qx: ";
    Printer<float>::stream(s, indent + "  ", v.qx);
    s << indent << "qy: ";
    Printer<float>::stream(s, indent + "  ", v.qy);
    s << indent << "qz: ";
    Printer<float>::stream(s, indent + "  ", v.qz);
    s << indent << "left_ticks: ";
    Printer<int32_t>::stream(s, indent + "  ", v.left_ticks);
    s << indent << "right_ticks: ";
    Printer<int32_t>::stream(s, indent + "  ", v.right_ticks);
    s << indent << "left_urf: ";
    Printer<float>::stream(s, indent + "  ", v.left_urf);
    s << indent << "rear_urf: ";
    Printer<float>::stream(s, indent + "  ", v.rear_urf);
    s << indent << "right_urf: ";
    Printer<float>::stream(s, indent + "  ", v.right_urf);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LIZI_MESSAGE_LIZI_RAW_H
