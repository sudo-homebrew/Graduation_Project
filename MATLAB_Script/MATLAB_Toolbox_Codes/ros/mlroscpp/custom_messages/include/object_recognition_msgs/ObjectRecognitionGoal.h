// Generated by gencpp from file object_recognition_msgs/ObjectRecognitionGoal.msg
// DO NOT EDIT!


#ifndef OBJECT_RECOGNITION_MSGS_MESSAGE_OBJECTRECOGNITIONGOAL_H
#define OBJECT_RECOGNITION_MSGS_MESSAGE_OBJECTRECOGNITIONGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace object_recognition_msgs
{
template <class ContainerAllocator>
struct ObjectRecognitionGoal_
{
  typedef ObjectRecognitionGoal_<ContainerAllocator> Type;

  ObjectRecognitionGoal_()
    : use_roi(false)
    , filter_limits()  {
    }
  ObjectRecognitionGoal_(const ContainerAllocator& _alloc)
    : use_roi(false)
    , filter_limits(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _use_roi_type;
  _use_roi_type use_roi;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _filter_limits_type;
  _filter_limits_type filter_limits;





  typedef boost::shared_ptr< ::object_recognition_msgs::ObjectRecognitionGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::object_recognition_msgs::ObjectRecognitionGoal_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectRecognitionGoal_

typedef ::object_recognition_msgs::ObjectRecognitionGoal_<std::allocator<void> > ObjectRecognitionGoal;

typedef boost::shared_ptr< ::object_recognition_msgs::ObjectRecognitionGoal > ObjectRecognitionGoalPtr;
typedef boost::shared_ptr< ::object_recognition_msgs::ObjectRecognitionGoal const> ObjectRecognitionGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::object_recognition_msgs::ObjectRecognitionGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::object_recognition_msgs::ObjectRecognitionGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace object_recognition_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'shape_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/shape_msgs/cmake/../msg'], 'std_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'actionlib': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/actionlib/cmake/../msg'], 'sensor_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/sensor_msgs/cmake/../msg'], 'object_recognition_msgs': ['/local-ssd1/All_Custom_Msgs/PendingActionPackages/matlab_msg_gen_ros1/glnxa64/src/object_recognition_msgs/msg', '/local-ssd1/All_Custom_Msgs/PendingActionPackages/matlab_msg_gen_ros1/glnxa64/devel/share/object_recognition_msgs/msg'], 'geometry_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::object_recognition_msgs::ObjectRecognitionGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_recognition_msgs::ObjectRecognitionGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_recognition_msgs::ObjectRecognitionGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_recognition_msgs::ObjectRecognitionGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_recognition_msgs::ObjectRecognitionGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_recognition_msgs::ObjectRecognitionGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::object_recognition_msgs::ObjectRecognitionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "49bea2f03a1bba0ad05926e01e3525fa";
  }

  static const char* value(const ::object_recognition_msgs::ObjectRecognitionGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x49bea2f03a1bba0aULL;
  static const uint64_t static_value2 = 0xd05926e01e3525faULL;
};

template<class ContainerAllocator>
struct DataType< ::object_recognition_msgs::ObjectRecognitionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "object_recognition_msgs/ObjectRecognitionGoal";
  }

  static const char* value(const ::object_recognition_msgs::ObjectRecognitionGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::object_recognition_msgs::ObjectRecognitionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Optional ROI to use for the object detection\n"
"bool use_roi\n"
"float32[] filter_limits\n"
;
  }

  static const char* value(const ::object_recognition_msgs::ObjectRecognitionGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::object_recognition_msgs::ObjectRecognitionGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.use_roi);
      stream.next(m.filter_limits);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectRecognitionGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::object_recognition_msgs::ObjectRecognitionGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::object_recognition_msgs::ObjectRecognitionGoal_<ContainerAllocator>& v)
  {
    s << indent << "use_roi: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.use_roi);
    s << indent << "filter_limits[]" << std::endl;
    for (size_t i = 0; i < v.filter_limits.size(); ++i)
    {
      s << indent << "  filter_limits[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.filter_limits[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBJECT_RECOGNITION_MSGS_MESSAGE_OBJECTRECOGNITIONGOAL_H
