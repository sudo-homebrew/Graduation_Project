// Generated by gencpp from file rocon_std_msgs/MasterInfo.msg
// DO NOT EDIT!


#ifndef ROCON_STD_MSGS_MESSAGE_MASTERINFO_H
#define ROCON_STD_MSGS_MESSAGE_MASTERINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <rocon_std_msgs/Icon.h>

namespace rocon_std_msgs
{
template <class ContainerAllocator>
struct MasterInfo_
{
  typedef MasterInfo_<ContainerAllocator> Type;

  MasterInfo_()
    : name()
    , rocon_uri()
    , description()
    , icon()
    , version()  {
    }
  MasterInfo_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , rocon_uri(_alloc)
    , description(_alloc)
    , icon(_alloc)
    , version(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _rocon_uri_type;
  _rocon_uri_type rocon_uri;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _description_type;
  _description_type description;

   typedef  ::rocon_std_msgs::Icon_<ContainerAllocator>  _icon_type;
  _icon_type icon;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _version_type;
  _version_type version;





  typedef boost::shared_ptr< ::rocon_std_msgs::MasterInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rocon_std_msgs::MasterInfo_<ContainerAllocator> const> ConstPtr;

}; // struct MasterInfo_

typedef ::rocon_std_msgs::MasterInfo_<std::allocator<void> > MasterInfo;

typedef boost::shared_ptr< ::rocon_std_msgs::MasterInfo > MasterInfoPtr;
typedef boost::shared_ptr< ::rocon_std_msgs::MasterInfo const> MasterInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rocon_std_msgs::MasterInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rocon_std_msgs::MasterInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rocon_std_msgs::MasterInfo_<ContainerAllocator1> & lhs, const ::rocon_std_msgs::MasterInfo_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.rocon_uri == rhs.rocon_uri &&
    lhs.description == rhs.description &&
    lhs.icon == rhs.icon &&
    lhs.version == rhs.version;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rocon_std_msgs::MasterInfo_<ContainerAllocator1> & lhs, const ::rocon_std_msgs::MasterInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rocon_std_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rocon_std_msgs::MasterInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rocon_std_msgs::MasterInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rocon_std_msgs::MasterInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rocon_std_msgs::MasterInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rocon_std_msgs::MasterInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rocon_std_msgs::MasterInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rocon_std_msgs::MasterInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e85613ae2e3faade6b77d94b4e0bf4bf";
  }

  static const char* value(const ::rocon_std_msgs::MasterInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe85613ae2e3faadeULL;
  static const uint64_t static_value2 = 0x6b77d94b4e0bf4bfULL;
};

template<class ContainerAllocator>
struct DataType< ::rocon_std_msgs::MasterInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rocon_std_msgs/MasterInfo";
  }

  static const char* value(const ::rocon_std_msgs::MasterInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rocon_std_msgs::MasterInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Publish basic information about this master.\n"
"\n"
"string name\n"
"string rocon_uri\n"
"string description\n"
"rocon_std_msgs/Icon icon\n"
"string version\n"
"================================================================================\n"
"MSG: rocon_std_msgs/Icon\n"
"# Used to idenfity the original package/filename resource this icon was/is to be loaded from\n"
"# This typically doesn't have to be set, but can be very useful when loading icons from yaml definitions.\n"
"string resource_name\n"
"\n"
"# Image data format.  \"jpeg\" or \"png\"\n"
"string format\n"
"\n"
"# Image data.\n"
"uint8[] data\n"
;
  }

  static const char* value(const ::rocon_std_msgs::MasterInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rocon_std_msgs::MasterInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.rocon_uri);
      stream.next(m.description);
      stream.next(m.icon);
      stream.next(m.version);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MasterInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rocon_std_msgs::MasterInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rocon_std_msgs::MasterInfo_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "rocon_uri: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.rocon_uri);
    s << indent << "description: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.description);
    s << indent << "icon: ";
    s << std::endl;
    Printer< ::rocon_std_msgs::Icon_<ContainerAllocator> >::stream(s, indent + "  ", v.icon);
    s << indent << "version: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.version);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROCON_STD_MSGS_MESSAGE_MASTERINFO_H
