// Generated by gencpp from file rocon_std_msgs/Strings.msg
// DO NOT EDIT!


#ifndef ROCON_STD_MSGS_MESSAGE_STRINGS_H
#define ROCON_STD_MSGS_MESSAGE_STRINGS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rocon_std_msgs
{
template <class ContainerAllocator>
struct Strings_
{
  typedef Strings_<ContainerAllocator> Type;

  Strings_()
    {
    }
  Strings_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }





// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ROCON_VERSION)
  #undef ROCON_VERSION
#endif
#if defined(_WIN32) && defined(URI_WILDCARD)
  #undef URI_WILDCARD
#endif
#if defined(_WIN32) && defined(HW_PC)
  #undef HW_PC
#endif
#if defined(_WIN32) && defined(HW_TURTLEBOT2)
  #undef HW_TURTLEBOT2
#endif
#if defined(_WIN32) && defined(HW_PR2)
  #undef HW_PR2
#endif
#if defined(_WIN32) && defined(HW_WAITERBOT)
  #undef HW_WAITERBOT
#endif
#if defined(_WIN32) && defined(HW_ROBOT_OTHER)
  #undef HW_ROBOT_OTHER
#endif
#if defined(_WIN32) && defined(HW_GALAXY)
  #undef HW_GALAXY
#endif
#if defined(_WIN32) && defined(HW_MEGA)
  #undef HW_MEGA
#endif
#if defined(_WIN32) && defined(HW_NOTE3)
  #undef HW_NOTE3
#endif
#if defined(_WIN32) && defined(HW_PHONE_OTHER)
  #undef HW_PHONE_OTHER
#endif
#if defined(_WIN32) && defined(HW_XOOM)
  #undef HW_XOOM
#endif
#if defined(_WIN32) && defined(HW_NOTE10)
  #undef HW_NOTE10
#endif
#if defined(_WIN32) && defined(HW_TABLET_OTHER)
  #undef HW_TABLET_OTHER
#endif
#if defined(_WIN32) && defined(APPLICATION_FRAMEWORK_OTHER)
  #undef APPLICATION_FRAMEWORK_OTHER
#endif
#if defined(_WIN32) && defined(APPLICATION_FRAMEWORK_OPROS)
  #undef APPLICATION_FRAMEWORK_OPROS
#endif
#if defined(_WIN32) && defined(APPLICATION_FRAMEWORK_GROOVY)
  #undef APPLICATION_FRAMEWORK_GROOVY
#endif
#if defined(_WIN32) && defined(APPLICATION_FRAMEWORK_HYDRO)
  #undef APPLICATION_FRAMEWORK_HYDRO
#endif
#if defined(_WIN32) && defined(APPLICATION_FRAMEWORK_INDIGO)
  #undef APPLICATION_FRAMEWORK_INDIGO
#endif
#if defined(_WIN32) && defined(APPLICATION_FRAMEWORK_ROS_OTHER)
  #undef APPLICATION_FRAMEWORK_ROS_OTHER
#endif
#if defined(_WIN32) && defined(OS_OSX)
  #undef OS_OSX
#endif
#if defined(_WIN32) && defined(OS_FREEBSD)
  #undef OS_FREEBSD
#endif
#if defined(_WIN32) && defined(OS_WINXP)
  #undef OS_WINXP
#endif
#if defined(_WIN32) && defined(OS_WINDOWS7)
  #undef OS_WINDOWS7
#endif
#if defined(_WIN32) && defined(OS_ARCH)
  #undef OS_ARCH
#endif
#if defined(_WIN32) && defined(OS_DEBIAN)
  #undef OS_DEBIAN
#endif
#if defined(_WIN32) && defined(OS_FEDORA)
  #undef OS_FEDORA
#endif
#if defined(_WIN32) && defined(OS_GENTOO)
  #undef OS_GENTOO
#endif
#if defined(_WIN32) && defined(OS_PRECISE)
  #undef OS_PRECISE
#endif
#if defined(_WIN32) && defined(OS_QUANTAL)
  #undef OS_QUANTAL
#endif
#if defined(_WIN32) && defined(OS_RARING)
  #undef OS_RARING
#endif
#if defined(_WIN32) && defined(OS_SAUCY)
  #undef OS_SAUCY
#endif
#if defined(_WIN32) && defined(OS_HONEYCOMB)
  #undef OS_HONEYCOMB
#endif
#if defined(_WIN32) && defined(OS_ICE_CREAM_SANDWICH)
  #undef OS_ICE_CREAM_SANDWICH
#endif
#if defined(_WIN32) && defined(OS_JELLYBEAN)
  #undef OS_JELLYBEAN
#endif
#if defined(_WIN32) && defined(OS_KITKAT)
  #undef OS_KITKAT
#endif
#if defined(_WIN32) && defined(OS_CHROME)
  #undef OS_CHROME
#endif
#if defined(_WIN32) && defined(OS_FIREFOX)
  #undef OS_FIREFOX
#endif
#if defined(_WIN32) && defined(OS_INTERNET_EXPLORER)
  #undef OS_INTERNET_EXPLORER
#endif
#if defined(_WIN32) && defined(OS_SAFARI)
  #undef OS_SAFARI
#endif
#if defined(_WIN32) && defined(OS_OPERA)
  #undef OS_OPERA
#endif
#if defined(_WIN32) && defined(TAG_SERVICE)
  #undef TAG_SERVICE
#endif
#if defined(_WIN32) && defined(TAG_RAPP)
  #undef TAG_RAPP
#endif
#if defined(_WIN32) && defined(TAG_GAZEBO_ROBOT_TYPE)
  #undef TAG_GAZEBO_ROBOT_TYPE
#endif
#if defined(_WIN32) && defined(TAG_SOFTWARE)
  #undef TAG_SOFTWARE
#endif


  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  ROCON_VERSION;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  URI_WILDCARD;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  HW_PC;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  HW_TURTLEBOT2;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  HW_PR2;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  HW_WAITERBOT;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  HW_ROBOT_OTHER;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  HW_GALAXY;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  HW_MEGA;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  HW_NOTE3;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  HW_PHONE_OTHER;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  HW_XOOM;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  HW_NOTE10;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  HW_TABLET_OTHER;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  APPLICATION_FRAMEWORK_OTHER;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  APPLICATION_FRAMEWORK_OPROS;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  APPLICATION_FRAMEWORK_GROOVY;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  APPLICATION_FRAMEWORK_HYDRO;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  APPLICATION_FRAMEWORK_INDIGO;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  APPLICATION_FRAMEWORK_ROS_OTHER;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  OS_OSX;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  OS_FREEBSD;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  OS_WINXP;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  OS_WINDOWS7;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  OS_ARCH;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  OS_DEBIAN;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  OS_FEDORA;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  OS_GENTOO;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  OS_PRECISE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  OS_QUANTAL;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  OS_RARING;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  OS_SAUCY;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  OS_HONEYCOMB;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  OS_ICE_CREAM_SANDWICH;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  OS_JELLYBEAN;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  OS_KITKAT;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  OS_CHROME;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  OS_FIREFOX;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  OS_INTERNET_EXPLORER;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  OS_SAFARI;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  OS_OPERA;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  TAG_SERVICE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  TAG_RAPP;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  TAG_GAZEBO_ROBOT_TYPE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  TAG_SOFTWARE;

  typedef boost::shared_ptr< ::rocon_std_msgs::Strings_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rocon_std_msgs::Strings_<ContainerAllocator> const> ConstPtr;

}; // struct Strings_

typedef ::rocon_std_msgs::Strings_<std::allocator<void> > Strings;

typedef boost::shared_ptr< ::rocon_std_msgs::Strings > StringsPtr;
typedef boost::shared_ptr< ::rocon_std_msgs::Strings const> StringsConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Strings_<ContainerAllocator>::ROCON_VERSION =
        
          "acdc"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Strings_<ContainerAllocator>::URI_WILDCARD =
        
          "*"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Strings_<ContainerAllocator>::HW_PC =
        
          "pc"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Strings_<ContainerAllocator>::HW_TURTLEBOT2 =
        
          "turtlebot2"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Strings_<ContainerAllocator>::HW_PR2 =
        
          "pr2"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Strings_<ContainerAllocator>::HW_WAITERBOT =
        
          "waiterbot"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Strings_<ContainerAllocator>::HW_ROBOT_OTHER =
        
          "robot_other"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Strings_<ContainerAllocator>::HW_GALAXY =
        
          "galaxy"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Strings_<ContainerAllocator>::HW_MEGA =
        
          "mega"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Strings_<ContainerAllocator>::HW_NOTE3 =
        
          "note3"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Strings_<ContainerAllocator>::HW_PHONE_OTHER =
        
          "phone_other"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Strings_<ContainerAllocator>::HW_XOOM =
        
          "xoom"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Strings_<ContainerAllocator>::HW_NOTE10 =
        
          "note10"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Strings_<ContainerAllocator>::HW_TABLET_OTHER =
        
          "tablet_other"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Strings_<ContainerAllocator>::APPLICATION_FRAMEWORK_OTHER =
        
          "application_framework_other"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Strings_<ContainerAllocator>::APPLICATION_FRAMEWORK_OPROS =
        
          "opros"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Strings_<ContainerAllocator>::APPLICATION_FRAMEWORK_GROOVY =
        
          "groovy"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Strings_<ContainerAllocator>::APPLICATION_FRAMEWORK_HYDRO =
        
          "hydro"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Strings_<ContainerAllocator>::APPLICATION_FRAMEWORK_INDIGO =
        
          "indigo"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Strings_<ContainerAllocator>::APPLICATION_FRAMEWORK_ROS_OTHER =
        
          "ros_other"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Strings_<ContainerAllocator>::OS_OSX =
        
          "osx"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Strings_<ContainerAllocator>::OS_FREEBSD =
        
          "freebsd"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Strings_<ContainerAllocator>::OS_WINXP =
        
          "winxp"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Strings_<ContainerAllocator>::OS_WINDOWS7 =
        
          "windows7"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Strings_<ContainerAllocator>::OS_ARCH =
        
          "arch"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Strings_<ContainerAllocator>::OS_DEBIAN =
        
          "debian"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Strings_<ContainerAllocator>::OS_FEDORA =
        
          "fedora"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Strings_<ContainerAllocator>::OS_GENTOO =
        
          "gentoo"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Strings_<ContainerAllocator>::OS_PRECISE =
        
          "precise"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Strings_<ContainerAllocator>::OS_QUANTAL =
        
          "quantal"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Strings_<ContainerAllocator>::OS_RARING =
        
          "raring"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Strings_<ContainerAllocator>::OS_SAUCY =
        
          "saucy"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Strings_<ContainerAllocator>::OS_HONEYCOMB =
        
          "honeycomb"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Strings_<ContainerAllocator>::OS_ICE_CREAM_SANDWICH =
        
          "ice_cream_sandwich"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Strings_<ContainerAllocator>::OS_JELLYBEAN =
        
          "jellybean"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Strings_<ContainerAllocator>::OS_KITKAT =
        
          "kitkat"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Strings_<ContainerAllocator>::OS_CHROME =
        
          "chrome"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Strings_<ContainerAllocator>::OS_FIREFOX =
        
          "firefox"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Strings_<ContainerAllocator>::OS_INTERNET_EXPLORER =
        
          "internet_explorer"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Strings_<ContainerAllocator>::OS_SAFARI =
        
          "safari"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Strings_<ContainerAllocator>::OS_OPERA =
        
          "opera"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Strings_<ContainerAllocator>::TAG_SERVICE =
        
          "concert_service"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Strings_<ContainerAllocator>::TAG_RAPP =
        
          "rocon_app"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Strings_<ContainerAllocator>::TAG_GAZEBO_ROBOT_TYPE =
        
          "concert_gazebo"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Strings_<ContainerAllocator>::TAG_SOFTWARE =
        
          "software_farm"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rocon_std_msgs::Strings_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rocon_std_msgs::Strings_<ContainerAllocator> >::stream(s, "", v);
return s;
}


} // namespace rocon_std_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rocon_std_msgs::Strings_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rocon_std_msgs::Strings_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rocon_std_msgs::Strings_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rocon_std_msgs::Strings_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rocon_std_msgs::Strings_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rocon_std_msgs::Strings_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rocon_std_msgs::Strings_<ContainerAllocator> >
{
  static const char* value()
  {
    return "58fa1e54e6c0338b3faebae82a13e892";
  }

  static const char* value(const ::rocon_std_msgs::Strings_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x58fa1e54e6c0338bULL;
  static const uint64_t static_value2 = 0x3faebae82a13e892ULL;
};

template<class ContainerAllocator>
struct DataType< ::rocon_std_msgs::Strings_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rocon_std_msgs/Strings";
  }

  static const char* value(const ::rocon_std_msgs::Strings_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rocon_std_msgs::Strings_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Strings used in the rocon framework.\n"
"\n"
"################################ Versions ####################################\n"
"\n"
"# Rocon versions come from the names of classical composers.\n"
"#\n"
"# ACDC - http://en.wikipedia.org/?title=AC/DC\n"
"#     Australian, awesome and on a highway to hell.\n"
"\n"
"string ROCON_VERSION=acdc\n"
"\n"
"######################## Rocon URIS ###########################################\n"
"\n"
"# These are a convenience to help avoid typos and make easy lookups whatever\n"
"# language you are in. The real deal is in rocon_uri/yaml/rules.yaml - make\n"
"# sure these stay up to date with respect to each other (TODO: perhaps an\n"
"# autogenerator of this msg file?).\n"
"\n"
"###### GENERAL IDENTIFIERS ######\n"
"\n"
"string URI_WILDCARD=*\n"
"\n"
"###### HARDWARE_PLATFORMS ######\n"
"string HW_PC=pc\n"
"string HW_TURTLEBOT2=turtlebot2\n"
"string HW_PR2=pr2\n"
"string HW_WAITERBOT=waiterbot\n"
"string HW_ROBOT_OTHER=robot_other\n"
"# Phones\n"
"string HW_GALAXY=galaxy\n"
"string HW_MEGA=mega\n"
"string HW_NOTE3=note3\n"
"string HW_PHONE_OTHER=phone_other\n"
"# Tablets\n"
"string HW_XOOM=xoom\n"
"string HW_NOTE10=note10\n"
"string HW_TABLET_OTHER=tablet_other\n"
"\n"
"###### APPLICATION_FRAMEWORKS ######\n"
"string APPLICATION_FRAMEWORK_OTHER=application_framework_other\n"
"string APPLICATION_FRAMEWORK_OPROS=opros\n"
"# Ros\n"
"string APPLICATION_FRAMEWORK_GROOVY=groovy\n"
"string APPLICATION_FRAMEWORK_HYDRO=hydro\n"
"string APPLICATION_FRAMEWORK_INDIGO=indigo\n"
"string APPLICATION_FRAMEWORK_ROS_OTHER=ros_other\n"
"\n"
"###### OPERATING SYSTEMS ######\n"
"string OS_OSX=osx\n"
"string OS_FREEBSD=freebsd\n"
"# Windows\n"
"string OS_WINXP=winxp\n"
"string OS_WINDOWS7=windows7\n"
"# linux\n"
"string OS_ARCH=arch\n"
"string OS_DEBIAN=debian\n"
"string OS_FEDORA=fedora\n"
"string OS_GENTOO=gentoo\n"
"# linux/ubuntu \n"
"string OS_PRECISE=precise\n"
"string OS_QUANTAL=quantal\n"
"string OS_RARING=raring\n"
"string OS_SAUCY=saucy\n"
"# Android\n"
"string OS_HONEYCOMB=honeycomb\n"
"string OS_ICE_CREAM_SANDWICH=ice_cream_sandwich\n"
"string OS_JELLYBEAN=jellybean\n"
"string OS_KITKAT=kitkat\n"
"# Web\n"
"string OS_CHROME=chrome\n"
"string OS_FIREFOX=firefox\n"
"string OS_INTERNET_EXPLORER=internet_explorer\n"
"string OS_SAFARI=safari\n"
"string OS_OPERA=opera\n"
"\n"
"######################## Rocon Export Tags################################\n"
"\n"
"# Package exports used in concert_service_manager and rocon_app_utilities\n"
"string TAG_SERVICE=concert_service\n"
"string TAG_RAPP=rocon_app\n"
"string TAG_GAZEBO_ROBOT_TYPE=concert_gazebo\n"
"string TAG_SOFTWARE=software_farm\n"
;
  }

  static const char* value(const ::rocon_std_msgs::Strings_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rocon_std_msgs::Strings_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Strings_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rocon_std_msgs::Strings_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::rocon_std_msgs::Strings_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // ROCON_STD_MSGS_MESSAGE_STRINGS_H
