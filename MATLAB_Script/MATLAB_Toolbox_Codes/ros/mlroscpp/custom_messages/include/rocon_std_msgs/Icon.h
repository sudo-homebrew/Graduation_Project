// Generated by gencpp from file rocon_std_msgs/Icon.msg
// DO NOT EDIT!


#ifndef ROCON_STD_MSGS_MESSAGE_ICON_H
#define ROCON_STD_MSGS_MESSAGE_ICON_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rocon_std_msgs
{
template <class ContainerAllocator>
struct Icon_
{
  typedef Icon_<ContainerAllocator> Type;

  Icon_()
    : resource_name()
    , format()
    , data()  {
    }
  Icon_(const ContainerAllocator& _alloc)
    : resource_name(_alloc)
    , format(_alloc)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _resource_name_type;
  _resource_name_type resource_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _format_type;
  _format_type format;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::rocon_std_msgs::Icon_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rocon_std_msgs::Icon_<ContainerAllocator> const> ConstPtr;

}; // struct Icon_

typedef ::rocon_std_msgs::Icon_<std::allocator<void> > Icon;

typedef boost::shared_ptr< ::rocon_std_msgs::Icon > IconPtr;
typedef boost::shared_ptr< ::rocon_std_msgs::Icon const> IconConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rocon_std_msgs::Icon_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rocon_std_msgs::Icon_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rocon_std_msgs::Icon_<ContainerAllocator1> & lhs, const ::rocon_std_msgs::Icon_<ContainerAllocator2> & rhs)
{
  return lhs.resource_name == rhs.resource_name &&
    lhs.format == rhs.format &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rocon_std_msgs::Icon_<ContainerAllocator1> & lhs, const ::rocon_std_msgs::Icon_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rocon_std_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rocon_std_msgs::Icon_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rocon_std_msgs::Icon_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rocon_std_msgs::Icon_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rocon_std_msgs::Icon_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rocon_std_msgs::Icon_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rocon_std_msgs::Icon_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rocon_std_msgs::Icon_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2ddacfedd31b6da3f723794afbd3b9de";
  }

  static const char* value(const ::rocon_std_msgs::Icon_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2ddacfedd31b6da3ULL;
  static const uint64_t static_value2 = 0xf723794afbd3b9deULL;
};

template<class ContainerAllocator>
struct DataType< ::rocon_std_msgs::Icon_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rocon_std_msgs/Icon";
  }

  static const char* value(const ::rocon_std_msgs::Icon_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rocon_std_msgs::Icon_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Used to idenfity the original package/filename resource this icon was/is to be loaded from\n"
"# This typically doesn't have to be set, but can be very useful when loading icons from yaml definitions.\n"
"string resource_name\n"
"\n"
"# Image data format.  \"jpeg\" or \"png\"\n"
"string format\n"
"\n"
"# Image data.\n"
"uint8[] data\n"
;
  }

  static const char* value(const ::rocon_std_msgs::Icon_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rocon_std_msgs::Icon_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.resource_name);
      stream.next(m.format);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Icon_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rocon_std_msgs::Icon_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rocon_std_msgs::Icon_<ContainerAllocator>& v)
  {
    s << indent << "resource_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.resource_name);
    s << indent << "format: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.format);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROCON_STD_MSGS_MESSAGE_ICON_H
