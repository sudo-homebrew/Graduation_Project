// Generated by gencpp from file rocon_std_msgs/Connection.msg
// DO NOT EDIT!


#ifndef ROCON_STD_MSGS_MESSAGE_CONNECTION_H
#define ROCON_STD_MSGS_MESSAGE_CONNECTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rocon_std_msgs
{
template <class ContainerAllocator>
struct Connection_
{
  typedef Connection_<ContainerAllocator> Type;

  Connection_()
    : type()
    , name()
    , node()
    , type_msg()
    , type_info()
    , xmlrpc_uri()  {
    }
  Connection_(const ContainerAllocator& _alloc)
    : type(_alloc)
    , name(_alloc)
    , node(_alloc)
    , type_msg(_alloc)
    , type_info(_alloc)
    , xmlrpc_uri(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _node_type;
  _node_type node;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_msg_type;
  _type_msg_type type_msg;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_info_type;
  _type_info_type type_info;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _xmlrpc_uri_type;
  _xmlrpc_uri_type xmlrpc_uri;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(PUBLISHER)
  #undef PUBLISHER
#endif
#if defined(_WIN32) && defined(SUBSCRIBER)
  #undef SUBSCRIBER
#endif
#if defined(_WIN32) && defined(SERVICE)
  #undef SERVICE
#endif
#if defined(_WIN32) && defined(ACTION_CLIENT)
  #undef ACTION_CLIENT
#endif
#if defined(_WIN32) && defined(ACTION_SERVER)
  #undef ACTION_SERVER
#endif
#if defined(_WIN32) && defined(INVALID)
  #undef INVALID
#endif


  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PUBLISHER;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  SUBSCRIBER;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  SERVICE;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  ACTION_CLIENT;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  ACTION_SERVER;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  INVALID;

  typedef boost::shared_ptr< ::rocon_std_msgs::Connection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rocon_std_msgs::Connection_<ContainerAllocator> const> ConstPtr;

}; // struct Connection_

typedef ::rocon_std_msgs::Connection_<std::allocator<void> > Connection;

typedef boost::shared_ptr< ::rocon_std_msgs::Connection > ConnectionPtr;
typedef boost::shared_ptr< ::rocon_std_msgs::Connection const> ConnectionConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Connection_<ContainerAllocator>::PUBLISHER =
        
          "publisher"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Connection_<ContainerAllocator>::SUBSCRIBER =
        
          "subscriber"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Connection_<ContainerAllocator>::SERVICE =
        
          "service"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Connection_<ContainerAllocator>::ACTION_CLIENT =
        
          "action_client"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Connection_<ContainerAllocator>::ACTION_SERVER =
        
          "action_server"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      Connection_<ContainerAllocator>::INVALID =
        
          "invalid"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rocon_std_msgs::Connection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rocon_std_msgs::Connection_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rocon_std_msgs::Connection_<ContainerAllocator1> & lhs, const ::rocon_std_msgs::Connection_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.name == rhs.name &&
    lhs.node == rhs.node &&
    lhs.type_msg == rhs.type_msg &&
    lhs.type_info == rhs.type_info &&
    lhs.xmlrpc_uri == rhs.xmlrpc_uri;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rocon_std_msgs::Connection_<ContainerAllocator1> & lhs, const ::rocon_std_msgs::Connection_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rocon_std_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rocon_std_msgs::Connection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rocon_std_msgs::Connection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rocon_std_msgs::Connection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rocon_std_msgs::Connection_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rocon_std_msgs::Connection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rocon_std_msgs::Connection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rocon_std_msgs::Connection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0dee991006513320090e2ee648136101";
  }

  static const char* value(const ::rocon_std_msgs::Connection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0dee991006513320ULL;
  static const uint64_t static_value2 = 0x090e2ee648136101ULL;
};

template<class ContainerAllocator>
struct DataType< ::rocon_std_msgs::Connection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rocon_std_msgs/Connection";
  }

  static const char* value(const ::rocon_std_msgs::Connection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rocon_std_msgs::Connection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# A connection can be 1 of 5 types\n"
"string PUBLISHER = publisher\n"
"string SUBSCRIBER = subscriber\n"
"string SERVICE = service\n"
"string ACTION_CLIENT = action_client\n"
"string ACTION_SERVER = action_server\n"
"string INVALID = invalid\n"
"\n"
"# type of connection (from string constants above)\n"
"string type\n"
"\n"
"# this is the topic/service name or the action base name\n"
"string name \n"
"\n"
"# the name of the node establishing this connection\n"
"string node\n"
"\n"
"# topic, service or action type, e.g. std_msgs/String\n"
"string type_msg\n"
"\n"
"# topic, service or action extra type info ( uri for service )\n"
"string type_info\n"
"\n"
"# xmlrpc node uri for managing the connection\n"
"string xmlrpc_uri\n"
;
  }

  static const char* value(const ::rocon_std_msgs::Connection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rocon_std_msgs::Connection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.name);
      stream.next(m.node);
      stream.next(m.type_msg);
      stream.next(m.type_info);
      stream.next(m.xmlrpc_uri);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Connection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rocon_std_msgs::Connection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rocon_std_msgs::Connection_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "node: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.node);
    s << indent << "type_msg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type_msg);
    s << indent << "type_info: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type_info);
    s << indent << "xmlrpc_uri: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.xmlrpc_uri);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROCON_STD_MSGS_MESSAGE_CONNECTION_H
