// Generated by gencpp from file rocon_std_msgs/ConnectionCacheSpin.msg
// DO NOT EDIT!


#ifndef ROCON_STD_MSGS_MESSAGE_CONNECTIONCACHESPIN_H
#define ROCON_STD_MSGS_MESSAGE_CONNECTIONCACHESPIN_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rocon_std_msgs
{
template <class ContainerAllocator>
struct ConnectionCacheSpin_
{
  typedef ConnectionCacheSpin_<ContainerAllocator> Type;

  ConnectionCacheSpin_()
    : spin_freq(0.0)
    , spin_timer(0.0)  {
    }
  ConnectionCacheSpin_(const ContainerAllocator& _alloc)
    : spin_freq(0.0)
    , spin_timer(0.0)  {
  (void)_alloc;
    }



   typedef float _spin_freq_type;
  _spin_freq_type spin_freq;

   typedef float _spin_timer_type;
  _spin_timer_type spin_timer;





  typedef boost::shared_ptr< ::rocon_std_msgs::ConnectionCacheSpin_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rocon_std_msgs::ConnectionCacheSpin_<ContainerAllocator> const> ConstPtr;

}; // struct ConnectionCacheSpin_

typedef ::rocon_std_msgs::ConnectionCacheSpin_<std::allocator<void> > ConnectionCacheSpin;

typedef boost::shared_ptr< ::rocon_std_msgs::ConnectionCacheSpin > ConnectionCacheSpinPtr;
typedef boost::shared_ptr< ::rocon_std_msgs::ConnectionCacheSpin const> ConnectionCacheSpinConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rocon_std_msgs::ConnectionCacheSpin_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rocon_std_msgs::ConnectionCacheSpin_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rocon_std_msgs::ConnectionCacheSpin_<ContainerAllocator1> & lhs, const ::rocon_std_msgs::ConnectionCacheSpin_<ContainerAllocator2> & rhs)
{
  return lhs.spin_freq == rhs.spin_freq &&
    lhs.spin_timer == rhs.spin_timer;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rocon_std_msgs::ConnectionCacheSpin_<ContainerAllocator1> & lhs, const ::rocon_std_msgs::ConnectionCacheSpin_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rocon_std_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rocon_std_msgs::ConnectionCacheSpin_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rocon_std_msgs::ConnectionCacheSpin_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rocon_std_msgs::ConnectionCacheSpin_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rocon_std_msgs::ConnectionCacheSpin_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rocon_std_msgs::ConnectionCacheSpin_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rocon_std_msgs::ConnectionCacheSpin_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rocon_std_msgs::ConnectionCacheSpin_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b6c0b0ddb1d2a2de9918dc5f6d87680a";
  }

  static const char* value(const ::rocon_std_msgs::ConnectionCacheSpin_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb6c0b0ddb1d2a2deULL;
  static const uint64_t static_value2 = 0x9918dc5f6d87680aULL;
};

template<class ContainerAllocator>
struct DataType< ::rocon_std_msgs::ConnectionCacheSpin_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rocon_std_msgs/ConnectionCacheSpin";
  }

  static const char* value(const ::rocon_std_msgs::ConnectionCacheSpin_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rocon_std_msgs::ConnectionCacheSpin_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 spin_freq  # Hz\n"
"float32 spin_timer  # > 0 means spin_freq is a temporary spin up. ==0 means spin_freq is the base spin frequency\n"
;
  }

  static const char* value(const ::rocon_std_msgs::ConnectionCacheSpin_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rocon_std_msgs::ConnectionCacheSpin_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.spin_freq);
      stream.next(m.spin_timer);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ConnectionCacheSpin_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rocon_std_msgs::ConnectionCacheSpin_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rocon_std_msgs::ConnectionCacheSpin_<ContainerAllocator>& v)
  {
    s << indent << "spin_freq: ";
    Printer<float>::stream(s, indent + "  ", v.spin_freq);
    s << indent << "spin_timer: ";
    Printer<float>::stream(s, indent + "  ", v.spin_timer);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROCON_STD_MSGS_MESSAGE_CONNECTIONCACHESPIN_H
