// Generated by gencpp from file rocon_std_msgs/Remapping.msg
// DO NOT EDIT!


#ifndef ROCON_STD_MSGS_MESSAGE_REMAPPING_H
#define ROCON_STD_MSGS_MESSAGE_REMAPPING_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rocon_std_msgs
{
template <class ContainerAllocator>
struct Remapping_
{
  typedef Remapping_<ContainerAllocator> Type;

  Remapping_()
    : remap_from()
    , remap_to()  {
    }
  Remapping_(const ContainerAllocator& _alloc)
    : remap_from(_alloc)
    , remap_to(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _remap_from_type;
  _remap_from_type remap_from;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _remap_to_type;
  _remap_to_type remap_to;





  typedef boost::shared_ptr< ::rocon_std_msgs::Remapping_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rocon_std_msgs::Remapping_<ContainerAllocator> const> ConstPtr;

}; // struct Remapping_

typedef ::rocon_std_msgs::Remapping_<std::allocator<void> > Remapping;

typedef boost::shared_ptr< ::rocon_std_msgs::Remapping > RemappingPtr;
typedef boost::shared_ptr< ::rocon_std_msgs::Remapping const> RemappingConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rocon_std_msgs::Remapping_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rocon_std_msgs::Remapping_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rocon_std_msgs::Remapping_<ContainerAllocator1> & lhs, const ::rocon_std_msgs::Remapping_<ContainerAllocator2> & rhs)
{
  return lhs.remap_from == rhs.remap_from &&
    lhs.remap_to == rhs.remap_to;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rocon_std_msgs::Remapping_<ContainerAllocator1> & lhs, const ::rocon_std_msgs::Remapping_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rocon_std_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rocon_std_msgs::Remapping_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rocon_std_msgs::Remapping_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rocon_std_msgs::Remapping_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rocon_std_msgs::Remapping_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rocon_std_msgs::Remapping_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rocon_std_msgs::Remapping_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rocon_std_msgs::Remapping_<ContainerAllocator> >
{
  static const char* value()
  {
    return "26f16c667d483280bc5d040bf2c0cd8d";
  }

  static const char* value(const ::rocon_std_msgs::Remapping_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x26f16c667d483280ULL;
  static const uint64_t static_value2 = 0xbc5d040bf2c0cd8dULL;
};

template<class ContainerAllocator>
struct DataType< ::rocon_std_msgs::Remapping_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rocon_std_msgs/Remapping";
  }

  static const char* value(const ::rocon_std_msgs::Remapping_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rocon_std_msgs::Remapping_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Describes your typical ros remapping\n"
"\n"
"string remap_from\n"
"string remap_to\n"
;
  }

  static const char* value(const ::rocon_std_msgs::Remapping_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rocon_std_msgs::Remapping_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.remap_from);
      stream.next(m.remap_to);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Remapping_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rocon_std_msgs::Remapping_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rocon_std_msgs::Remapping_<ContainerAllocator>& v)
  {
    s << indent << "remap_from: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.remap_from);
    s << indent << "remap_to: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.remap_to);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROCON_STD_MSGS_MESSAGE_REMAPPING_H
