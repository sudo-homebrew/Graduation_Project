// Generated by gencpp from file fkie_multimaster_msgs/LinkState.msg
// DO NOT EDIT!


#ifndef FKIE_MULTIMASTER_MSGS_MESSAGE_LINKSTATE_H
#define FKIE_MULTIMASTER_MSGS_MESSAGE_LINKSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fkie_multimaster_msgs
{
template <class ContainerAllocator>
struct LinkState_
{
  typedef LinkState_<ContainerAllocator> Type;

  LinkState_()
    : destination()
    , quality(0.0)
    , last_heartbeat()  {
    }
  LinkState_(const ContainerAllocator& _alloc)
    : destination(_alloc)
    , quality(0.0)
    , last_heartbeat()  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _destination_type;
  _destination_type destination;

   typedef float _quality_type;
  _quality_type quality;

   typedef ros::Time _last_heartbeat_type;
  _last_heartbeat_type last_heartbeat;





  typedef boost::shared_ptr< ::fkie_multimaster_msgs::LinkState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fkie_multimaster_msgs::LinkState_<ContainerAllocator> const> ConstPtr;

}; // struct LinkState_

typedef ::fkie_multimaster_msgs::LinkState_<std::allocator<void> > LinkState;

typedef boost::shared_ptr< ::fkie_multimaster_msgs::LinkState > LinkStatePtr;
typedef boost::shared_ptr< ::fkie_multimaster_msgs::LinkState const> LinkStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fkie_multimaster_msgs::LinkState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fkie_multimaster_msgs::LinkState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fkie_multimaster_msgs::LinkState_<ContainerAllocator1> & lhs, const ::fkie_multimaster_msgs::LinkState_<ContainerAllocator2> & rhs)
{
  return lhs.destination == rhs.destination &&
    lhs.quality == rhs.quality &&
    lhs.last_heartbeat == rhs.last_heartbeat;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fkie_multimaster_msgs::LinkState_<ContainerAllocator1> & lhs, const ::fkie_multimaster_msgs::LinkState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fkie_multimaster_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fkie_multimaster_msgs::LinkState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fkie_multimaster_msgs::LinkState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fkie_multimaster_msgs::LinkState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fkie_multimaster_msgs::LinkState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fkie_multimaster_msgs::LinkState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fkie_multimaster_msgs::LinkState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fkie_multimaster_msgs::LinkState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fd2554dabc9a5d69f4842dd42dd3e0f3";
  }

  static const char* value(const ::fkie_multimaster_msgs::LinkState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfd2554dabc9a5d69ULL;
  static const uint64_t static_value2 = 0xf4842dd42dd3e0f3ULL;
};

template<class ContainerAllocator>
struct DataType< ::fkie_multimaster_msgs::LinkState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fkie_multimaster_msgs/LinkState";
  }

  static const char* value(const ::fkie_multimaster_msgs::LinkState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fkie_multimaster_msgs::LinkState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string destination\n"
"float32 quality\n"
"# The timestamp of the last received heartbeat message\n"
"time last_heartbeat\n"
;
  }

  static const char* value(const ::fkie_multimaster_msgs::LinkState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fkie_multimaster_msgs::LinkState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.destination);
      stream.next(m.quality);
      stream.next(m.last_heartbeat);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LinkState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fkie_multimaster_msgs::LinkState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fkie_multimaster_msgs::LinkState_<ContainerAllocator>& v)
  {
    s << indent << "destination: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.destination);
    s << indent << "quality: ";
    Printer<float>::stream(s, indent + "  ", v.quality);
    s << indent << "last_heartbeat: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.last_heartbeat);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FKIE_MULTIMASTER_MSGS_MESSAGE_LINKSTATE_H
