// Generated by gencpp from file rospy_message_converter/NestedUint8ArrayTestServiceRequest.msg
// DO NOT EDIT!


#ifndef ROSPY_MESSAGE_CONVERTER_MESSAGE_NESTEDUINT8ARRAYTESTSERVICEREQUEST_H
#define ROSPY_MESSAGE_CONVERTER_MESSAGE_NESTEDUINT8ARRAYTESTSERVICEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <rospy_message_converter/NestedUint8ArrayTestMessage.h>

namespace rospy_message_converter
{
template <class ContainerAllocator>
struct NestedUint8ArrayTestServiceRequest_
{
  typedef NestedUint8ArrayTestServiceRequest_<ContainerAllocator> Type;

  NestedUint8ArrayTestServiceRequest_()
    : input()  {
    }
  NestedUint8ArrayTestServiceRequest_(const ContainerAllocator& _alloc)
    : input(_alloc)  {
  (void)_alloc;
    }



   typedef  ::rospy_message_converter::NestedUint8ArrayTestMessage_<ContainerAllocator>  _input_type;
  _input_type input;





  typedef boost::shared_ptr< ::rospy_message_converter::NestedUint8ArrayTestServiceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rospy_message_converter::NestedUint8ArrayTestServiceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct NestedUint8ArrayTestServiceRequest_

typedef ::rospy_message_converter::NestedUint8ArrayTestServiceRequest_<std::allocator<void> > NestedUint8ArrayTestServiceRequest;

typedef boost::shared_ptr< ::rospy_message_converter::NestedUint8ArrayTestServiceRequest > NestedUint8ArrayTestServiceRequestPtr;
typedef boost::shared_ptr< ::rospy_message_converter::NestedUint8ArrayTestServiceRequest const> NestedUint8ArrayTestServiceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rospy_message_converter::NestedUint8ArrayTestServiceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rospy_message_converter::NestedUint8ArrayTestServiceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rospy_message_converter::NestedUint8ArrayTestServiceRequest_<ContainerAllocator1> & lhs, const ::rospy_message_converter::NestedUint8ArrayTestServiceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.input == rhs.input;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rospy_message_converter::NestedUint8ArrayTestServiceRequest_<ContainerAllocator1> & lhs, const ::rospy_message_converter::NestedUint8ArrayTestServiceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rospy_message_converter

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rospy_message_converter::NestedUint8ArrayTestServiceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rospy_message_converter::NestedUint8ArrayTestServiceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rospy_message_converter::NestedUint8ArrayTestServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rospy_message_converter::NestedUint8ArrayTestServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rospy_message_converter::NestedUint8ArrayTestServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rospy_message_converter::NestedUint8ArrayTestServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rospy_message_converter::NestedUint8ArrayTestServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "287c5504f335b2f83a6aee90e3b61986";
  }

  static const char* value(const ::rospy_message_converter::NestedUint8ArrayTestServiceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x287c5504f335b2f8ULL;
  static const uint64_t static_value2 = 0x3a6aee90e3b61986ULL;
};

template<class ContainerAllocator>
struct DataType< ::rospy_message_converter::NestedUint8ArrayTestServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rospy_message_converter/NestedUint8ArrayTestServiceRequest";
  }

  static const char* value(const ::rospy_message_converter::NestedUint8ArrayTestServiceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rospy_message_converter::NestedUint8ArrayTestServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# service with nested types for testing purposes\n"
"NestedUint8ArrayTestMessage input\n"
"\n"
"\n"
"================================================================================\n"
"MSG: rospy_message_converter/NestedUint8ArrayTestMessage\n"
"# array of arrays for testing purposes\n"
"Uint8ArrayTestMessage[] arrays\n"
"\n"
"================================================================================\n"
"MSG: rospy_message_converter/Uint8ArrayTestMessage\n"
"# Size-agnostic uint8 array for testing purposes\n"
"uint8[] data\n"
;
  }

  static const char* value(const ::rospy_message_converter::NestedUint8ArrayTestServiceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rospy_message_converter::NestedUint8ArrayTestServiceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.input);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NestedUint8ArrayTestServiceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rospy_message_converter::NestedUint8ArrayTestServiceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rospy_message_converter::NestedUint8ArrayTestServiceRequest_<ContainerAllocator>& v)
  {
    s << indent << "input: ";
    s << std::endl;
    Printer< ::rospy_message_converter::NestedUint8ArrayTestMessage_<ContainerAllocator> >::stream(s, indent + "  ", v.input);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSPY_MESSAGE_CONVERTER_MESSAGE_NESTEDUINT8ARRAYTESTSERVICEREQUEST_H
