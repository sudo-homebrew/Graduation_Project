// Generated by gencpp from file posedetection_msgs/Feature1DDetectResponse.msg
// DO NOT EDIT!


#ifndef POSEDETECTION_MSGS_MESSAGE_FEATURE1DDETECTRESPONSE_H
#define POSEDETECTION_MSGS_MESSAGE_FEATURE1DDETECTRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <posedetection_msgs/Feature1D.h>

namespace posedetection_msgs
{
template <class ContainerAllocator>
struct Feature1DDetectResponse_
{
  typedef Feature1DDetectResponse_<ContainerAllocator> Type;

  Feature1DDetectResponse_()
    : features()  {
    }
  Feature1DDetectResponse_(const ContainerAllocator& _alloc)
    : features(_alloc)  {
  (void)_alloc;
    }



   typedef  ::posedetection_msgs::Feature1D_<ContainerAllocator>  _features_type;
  _features_type features;





  typedef boost::shared_ptr< ::posedetection_msgs::Feature1DDetectResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::posedetection_msgs::Feature1DDetectResponse_<ContainerAllocator> const> ConstPtr;

}; // struct Feature1DDetectResponse_

typedef ::posedetection_msgs::Feature1DDetectResponse_<std::allocator<void> > Feature1DDetectResponse;

typedef boost::shared_ptr< ::posedetection_msgs::Feature1DDetectResponse > Feature1DDetectResponsePtr;
typedef boost::shared_ptr< ::posedetection_msgs::Feature1DDetectResponse const> Feature1DDetectResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::posedetection_msgs::Feature1DDetectResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::posedetection_msgs::Feature1DDetectResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::posedetection_msgs::Feature1DDetectResponse_<ContainerAllocator1> & lhs, const ::posedetection_msgs::Feature1DDetectResponse_<ContainerAllocator2> & rhs)
{
  return lhs.features == rhs.features;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::posedetection_msgs::Feature1DDetectResponse_<ContainerAllocator1> & lhs, const ::posedetection_msgs::Feature1DDetectResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace posedetection_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::posedetection_msgs::Feature1DDetectResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::posedetection_msgs::Feature1DDetectResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::posedetection_msgs::Feature1DDetectResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::posedetection_msgs::Feature1DDetectResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::posedetection_msgs::Feature1DDetectResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::posedetection_msgs::Feature1DDetectResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::posedetection_msgs::Feature1DDetectResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "37f67775de1cbab99b78b350a3d63479";
  }

  static const char* value(const ::posedetection_msgs::Feature1DDetectResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x37f67775de1cbab9ULL;
  static const uint64_t static_value2 = 0x9b78b350a3d63479ULL;
};

template<class ContainerAllocator>
struct DataType< ::posedetection_msgs::Feature1DDetectResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "posedetection_msgs/Feature1DDetectResponse";
  }

  static const char* value(const ::posedetection_msgs::Feature1DDetectResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::posedetection_msgs::Feature1DDetectResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "posedetection_msgs/Feature1D features\n"
"\n"
"\n"
"================================================================================\n"
"MSG: posedetection_msgs/Feature1D\n"
"Header header\n"
"Curve1D[] lines # N, 0-indexed\n"
"float32[] descriptors # N*descriptor_dim\n"
"float32[] confidences # optional\n"
"int32 descriptor_dim\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: posedetection_msgs/Curve1D\n"
"float32[] pts # 2xN points in the image\n"
;
  }

  static const char* value(const ::posedetection_msgs::Feature1DDetectResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::posedetection_msgs::Feature1DDetectResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.features);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Feature1DDetectResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::posedetection_msgs::Feature1DDetectResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::posedetection_msgs::Feature1DDetectResponse_<ContainerAllocator>& v)
  {
    s << indent << "features: ";
    s << std::endl;
    Printer< ::posedetection_msgs::Feature1D_<ContainerAllocator> >::stream(s, indent + "  ", v.features);
  }
};

} // namespace message_operations
} // namespace ros

#endif // POSEDETECTION_MSGS_MESSAGE_FEATURE1DDETECTRESPONSE_H
