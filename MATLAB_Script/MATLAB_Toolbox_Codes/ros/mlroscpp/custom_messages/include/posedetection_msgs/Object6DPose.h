// Generated by gencpp from file posedetection_msgs/Object6DPose.msg
// DO NOT EDIT!


#ifndef POSEDETECTION_MSGS_MESSAGE_OBJECT6DPOSE_H
#define POSEDETECTION_MSGS_MESSAGE_OBJECT6DPOSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace posedetection_msgs
{
template <class ContainerAllocator>
struct Object6DPose_
{
  typedef Object6DPose_<ContainerAllocator> Type;

  Object6DPose_()
    : pose()
    , reliability(0.0)
    , type()  {
    }
  Object6DPose_(const ContainerAllocator& _alloc)
    : pose(_alloc)
    , reliability(0.0)
    , type(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef float _reliability_type;
  _reliability_type reliability;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;





  typedef boost::shared_ptr< ::posedetection_msgs::Object6DPose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::posedetection_msgs::Object6DPose_<ContainerAllocator> const> ConstPtr;

}; // struct Object6DPose_

typedef ::posedetection_msgs::Object6DPose_<std::allocator<void> > Object6DPose;

typedef boost::shared_ptr< ::posedetection_msgs::Object6DPose > Object6DPosePtr;
typedef boost::shared_ptr< ::posedetection_msgs::Object6DPose const> Object6DPoseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::posedetection_msgs::Object6DPose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::posedetection_msgs::Object6DPose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::posedetection_msgs::Object6DPose_<ContainerAllocator1> & lhs, const ::posedetection_msgs::Object6DPose_<ContainerAllocator2> & rhs)
{
  return lhs.pose == rhs.pose &&
    lhs.reliability == rhs.reliability &&
    lhs.type == rhs.type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::posedetection_msgs::Object6DPose_<ContainerAllocator1> & lhs, const ::posedetection_msgs::Object6DPose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace posedetection_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::posedetection_msgs::Object6DPose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::posedetection_msgs::Object6DPose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::posedetection_msgs::Object6DPose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::posedetection_msgs::Object6DPose_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::posedetection_msgs::Object6DPose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::posedetection_msgs::Object6DPose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::posedetection_msgs::Object6DPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "68aad97d55c4f9555772eee1814bb3c7";
  }

  static const char* value(const ::posedetection_msgs::Object6DPose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x68aad97d55c4f955ULL;
  static const uint64_t static_value2 = 0x5772eee1814bb3c7ULL;
};

template<class ContainerAllocator>
struct DataType< ::posedetection_msgs::Object6DPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "posedetection_msgs/Object6DPose";
  }

  static const char* value(const ::posedetection_msgs::Object6DPose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::posedetection_msgs::Object6DPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 6D pose of object\n"
"geometry_msgs/Pose pose\n"
"# reliability\n"
"float32 reliability\n"
"\n"
"# type of object, usually contains the filename of the object that allows the receiving side to visualize it\n"
"# can also be used as a unique type id\n"
"string type \n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::posedetection_msgs::Object6DPose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::posedetection_msgs::Object6DPose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose);
      stream.next(m.reliability);
      stream.next(m.type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Object6DPose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::posedetection_msgs::Object6DPose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::posedetection_msgs::Object6DPose_<ContainerAllocator>& v)
  {
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "reliability: ";
    Printer<float>::stream(s, indent + "  ", v.reliability);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // POSEDETECTION_MSGS_MESSAGE_OBJECT6DPOSE_H
