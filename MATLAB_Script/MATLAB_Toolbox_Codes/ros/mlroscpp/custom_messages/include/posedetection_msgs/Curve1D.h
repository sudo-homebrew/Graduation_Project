// Generated by gencpp from file posedetection_msgs/Curve1D.msg
// DO NOT EDIT!


#ifndef POSEDETECTION_MSGS_MESSAGE_CURVE1D_H
#define POSEDETECTION_MSGS_MESSAGE_CURVE1D_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace posedetection_msgs
{
template <class ContainerAllocator>
struct Curve1D_
{
  typedef Curve1D_<ContainerAllocator> Type;

  Curve1D_()
    : pts()  {
    }
  Curve1D_(const ContainerAllocator& _alloc)
    : pts(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _pts_type;
  _pts_type pts;





  typedef boost::shared_ptr< ::posedetection_msgs::Curve1D_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::posedetection_msgs::Curve1D_<ContainerAllocator> const> ConstPtr;

}; // struct Curve1D_

typedef ::posedetection_msgs::Curve1D_<std::allocator<void> > Curve1D;

typedef boost::shared_ptr< ::posedetection_msgs::Curve1D > Curve1DPtr;
typedef boost::shared_ptr< ::posedetection_msgs::Curve1D const> Curve1DConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::posedetection_msgs::Curve1D_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::posedetection_msgs::Curve1D_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::posedetection_msgs::Curve1D_<ContainerAllocator1> & lhs, const ::posedetection_msgs::Curve1D_<ContainerAllocator2> & rhs)
{
  return lhs.pts == rhs.pts;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::posedetection_msgs::Curve1D_<ContainerAllocator1> & lhs, const ::posedetection_msgs::Curve1D_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace posedetection_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::posedetection_msgs::Curve1D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::posedetection_msgs::Curve1D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::posedetection_msgs::Curve1D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::posedetection_msgs::Curve1D_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::posedetection_msgs::Curve1D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::posedetection_msgs::Curve1D_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::posedetection_msgs::Curve1D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e5367ca89dc9a58670f8f288e2c52f5d";
  }

  static const char* value(const ::posedetection_msgs::Curve1D_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe5367ca89dc9a586ULL;
  static const uint64_t static_value2 = 0x70f8f288e2c52f5dULL;
};

template<class ContainerAllocator>
struct DataType< ::posedetection_msgs::Curve1D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "posedetection_msgs/Curve1D";
  }

  static const char* value(const ::posedetection_msgs::Curve1D_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::posedetection_msgs::Curve1D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] pts # 2xN points in the image\n"
;
  }

  static const char* value(const ::posedetection_msgs::Curve1D_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::posedetection_msgs::Curve1D_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pts);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Curve1D_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::posedetection_msgs::Curve1D_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::posedetection_msgs::Curve1D_<ContainerAllocator>& v)
  {
    s << indent << "pts[]" << std::endl;
    for (size_t i = 0; i < v.pts.size(); ++i)
    {
      s << indent << "  pts[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pts[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // POSEDETECTION_MSGS_MESSAGE_CURVE1D_H
