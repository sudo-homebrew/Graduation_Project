// Generated by gencpp from file roboteq_msgs/Feedback.msg
// DO NOT EDIT!


#ifndef ROBOTEQ_MSGS_MESSAGE_FEEDBACK_H
#define ROBOTEQ_MSGS_MESSAGE_FEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace roboteq_msgs
{
template <class ContainerAllocator>
struct Feedback_
{
  typedef Feedback_<ContainerAllocator> Type;

  Feedback_()
    : header()
    , motor_current(0.0)
    , motor_power(0.0)
    , commanded_velocity(0.0)
    , measured_velocity(0.0)
    , measured_position(0.0)
    , supply_voltage(0.0)
    , supply_current(0.0)
    , motor_temperature(0.0)
    , channel_temperature(0.0)  {
    }
  Feedback_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , motor_current(0.0)
    , motor_power(0.0)
    , commanded_velocity(0.0)
    , measured_velocity(0.0)
    , measured_position(0.0)
    , supply_voltage(0.0)
    , supply_current(0.0)
    , motor_temperature(0.0)
    , channel_temperature(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _motor_current_type;
  _motor_current_type motor_current;

   typedef float _motor_power_type;
  _motor_power_type motor_power;

   typedef float _commanded_velocity_type;
  _commanded_velocity_type commanded_velocity;

   typedef float _measured_velocity_type;
  _measured_velocity_type measured_velocity;

   typedef float _measured_position_type;
  _measured_position_type measured_position;

   typedef float _supply_voltage_type;
  _supply_voltage_type supply_voltage;

   typedef float _supply_current_type;
  _supply_current_type supply_current;

   typedef float _motor_temperature_type;
  _motor_temperature_type motor_temperature;

   typedef float _channel_temperature_type;
  _channel_temperature_type channel_temperature;





  typedef boost::shared_ptr< ::roboteq_msgs::Feedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboteq_msgs::Feedback_<ContainerAllocator> const> ConstPtr;

}; // struct Feedback_

typedef ::roboteq_msgs::Feedback_<std::allocator<void> > Feedback;

typedef boost::shared_ptr< ::roboteq_msgs::Feedback > FeedbackPtr;
typedef boost::shared_ptr< ::roboteq_msgs::Feedback const> FeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboteq_msgs::Feedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboteq_msgs::Feedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roboteq_msgs::Feedback_<ContainerAllocator1> & lhs, const ::roboteq_msgs::Feedback_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.motor_current == rhs.motor_current &&
    lhs.motor_power == rhs.motor_power &&
    lhs.commanded_velocity == rhs.commanded_velocity &&
    lhs.measured_velocity == rhs.measured_velocity &&
    lhs.measured_position == rhs.measured_position &&
    lhs.supply_voltage == rhs.supply_voltage &&
    lhs.supply_current == rhs.supply_current &&
    lhs.motor_temperature == rhs.motor_temperature &&
    lhs.channel_temperature == rhs.channel_temperature;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roboteq_msgs::Feedback_<ContainerAllocator1> & lhs, const ::roboteq_msgs::Feedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roboteq_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::roboteq_msgs::Feedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboteq_msgs::Feedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboteq_msgs::Feedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboteq_msgs::Feedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboteq_msgs::Feedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboteq_msgs::Feedback_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboteq_msgs::Feedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2b31653367731d6254182bb2f9dbb81a";
  }

  static const char* value(const ::roboteq_msgs::Feedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2b31653367731d62ULL;
  static const uint64_t static_value2 = 0x54182bb2f9dbb81aULL;
};

template<class ContainerAllocator>
struct DataType< ::roboteq_msgs::Feedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboteq_msgs/Feedback";
  }

  static const char* value(const ::roboteq_msgs::Feedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboteq_msgs::Feedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 50Hz feedback message for controls purposes\n"
"Header header\n"
"\n"
"# Current flowing in the motors (A)\n"
"float32 motor_current\n"
"\n"
"# Output stage, as a proportion of full (-1..1)\n"
"float32 motor_power\n"
"\n"
"# Commanded and measured speed of the motors (rad/s)\n"
"# Position is reported in rads, and wraps around +-6M\n"
"float32 commanded_velocity\n"
"float32 measured_velocity\n"
"float32 measured_position\n"
"\n"
"# Electrical power supply to the driver (V, A)\n"
"float32 supply_voltage\n"
"float32 supply_current\n"
"\n"
"# Measured temperatures (C)\n"
"# Motor temp is processed from a thermal sensor connected to analog input 1.\n"
"float32 motor_temperature\n"
"# Channel temp is the temperature of the FETs. This is reported by the controller.\n"
"float32 channel_temperature\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::roboteq_msgs::Feedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboteq_msgs::Feedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.motor_current);
      stream.next(m.motor_power);
      stream.next(m.commanded_velocity);
      stream.next(m.measured_velocity);
      stream.next(m.measured_position);
      stream.next(m.supply_voltage);
      stream.next(m.supply_current);
      stream.next(m.motor_temperature);
      stream.next(m.channel_temperature);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Feedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboteq_msgs::Feedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboteq_msgs::Feedback_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "motor_current: ";
    Printer<float>::stream(s, indent + "  ", v.motor_current);
    s << indent << "motor_power: ";
    Printer<float>::stream(s, indent + "  ", v.motor_power);
    s << indent << "commanded_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.commanded_velocity);
    s << indent << "measured_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.measured_velocity);
    s << indent << "measured_position: ";
    Printer<float>::stream(s, indent + "  ", v.measured_position);
    s << indent << "supply_voltage: ";
    Printer<float>::stream(s, indent + "  ", v.supply_voltage);
    s << indent << "supply_current: ";
    Printer<float>::stream(s, indent + "  ", v.supply_current);
    s << indent << "motor_temperature: ";
    Printer<float>::stream(s, indent + "  ", v.motor_temperature);
    s << indent << "channel_temperature: ";
    Printer<float>::stream(s, indent + "  ", v.channel_temperature);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOTEQ_MSGS_MESSAGE_FEEDBACK_H
