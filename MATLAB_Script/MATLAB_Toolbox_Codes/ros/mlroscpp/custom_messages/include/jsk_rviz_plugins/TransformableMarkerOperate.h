// Generated by gencpp from file jsk_rviz_plugins/TransformableMarkerOperate.msg
// DO NOT EDIT!


#ifndef JSK_RVIZ_PLUGINS_MESSAGE_TRANSFORMABLEMARKEROPERATE_H
#define JSK_RVIZ_PLUGINS_MESSAGE_TRANSFORMABLEMARKEROPERATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace jsk_rviz_plugins
{
template <class ContainerAllocator>
struct TransformableMarkerOperate_
{
  typedef TransformableMarkerOperate_<ContainerAllocator> Type;

  TransformableMarkerOperate_()
    : type(0)
    , action(0)
    , frame_id()
    , name()
    , description()
    , mesh_resource()
    , mesh_use_embedded_materials(false)  {
    }
  TransformableMarkerOperate_(const ContainerAllocator& _alloc)
    : type(0)
    , action(0)
    , frame_id(_alloc)
    , name(_alloc)
    , description(_alloc)
    , mesh_resource(_alloc)
    , mesh_use_embedded_materials(false)  {
  (void)_alloc;
    }



   typedef int32_t _type_type;
  _type_type type;

   typedef int32_t _action_type;
  _action_type action;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _frame_id_type;
  _frame_id_type frame_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _description_type;
  _description_type description;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mesh_resource_type;
  _mesh_resource_type mesh_resource;

   typedef uint8_t _mesh_use_embedded_materials_type;
  _mesh_use_embedded_materials_type mesh_use_embedded_materials;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(BOX)
  #undef BOX
#endif
#if defined(_WIN32) && defined(CYLINDER)
  #undef CYLINDER
#endif
#if defined(_WIN32) && defined(TORUS)
  #undef TORUS
#endif
#if defined(_WIN32) && defined(MESH_RESOURCE)
  #undef MESH_RESOURCE
#endif
#if defined(_WIN32) && defined(INSERT)
  #undef INSERT
#endif
#if defined(_WIN32) && defined(ERASE)
  #undef ERASE
#endif
#if defined(_WIN32) && defined(ERASEALL)
  #undef ERASEALL
#endif
#if defined(_WIN32) && defined(ERASEFOCUS)
  #undef ERASEFOCUS
#endif
#if defined(_WIN32) && defined(COPY)
  #undef COPY
#endif

  enum {
    BOX = 0u,
    CYLINDER = 1u,
    TORUS = 2u,
    MESH_RESOURCE = 3u,
    INSERT = 0u,
    ERASE = 1u,
    ERASEALL = 2u,
    ERASEFOCUS = 3u,
    COPY = 4u,
  };


  typedef boost::shared_ptr< ::jsk_rviz_plugins::TransformableMarkerOperate_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jsk_rviz_plugins::TransformableMarkerOperate_<ContainerAllocator> const> ConstPtr;

}; // struct TransformableMarkerOperate_

typedef ::jsk_rviz_plugins::TransformableMarkerOperate_<std::allocator<void> > TransformableMarkerOperate;

typedef boost::shared_ptr< ::jsk_rviz_plugins::TransformableMarkerOperate > TransformableMarkerOperatePtr;
typedef boost::shared_ptr< ::jsk_rviz_plugins::TransformableMarkerOperate const> TransformableMarkerOperateConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jsk_rviz_plugins::TransformableMarkerOperate_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jsk_rviz_plugins::TransformableMarkerOperate_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jsk_rviz_plugins::TransformableMarkerOperate_<ContainerAllocator1> & lhs, const ::jsk_rviz_plugins::TransformableMarkerOperate_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.action == rhs.action &&
    lhs.frame_id == rhs.frame_id &&
    lhs.name == rhs.name &&
    lhs.description == rhs.description &&
    lhs.mesh_resource == rhs.mesh_resource &&
    lhs.mesh_use_embedded_materials == rhs.mesh_use_embedded_materials;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jsk_rviz_plugins::TransformableMarkerOperate_<ContainerAllocator1> & lhs, const ::jsk_rviz_plugins::TransformableMarkerOperate_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jsk_rviz_plugins

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::jsk_rviz_plugins::TransformableMarkerOperate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jsk_rviz_plugins::TransformableMarkerOperate_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jsk_rviz_plugins::TransformableMarkerOperate_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jsk_rviz_plugins::TransformableMarkerOperate_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_rviz_plugins::TransformableMarkerOperate_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_rviz_plugins::TransformableMarkerOperate_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jsk_rviz_plugins::TransformableMarkerOperate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3f5042567d7e11634fa94e4b5452169c";
  }

  static const char* value(const ::jsk_rviz_plugins::TransformableMarkerOperate_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3f5042567d7e1163ULL;
  static const uint64_t static_value2 = 0x4fa94e4b5452169cULL;
};

template<class ContainerAllocator>
struct DataType< ::jsk_rviz_plugins::TransformableMarkerOperate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jsk_rviz_plugins/TransformableMarkerOperate";
  }

  static const char* value(const ::jsk_rviz_plugins::TransformableMarkerOperate_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jsk_rviz_plugins::TransformableMarkerOperate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 BOX=0\n"
"uint8 CYLINDER=1\n"
"uint8 TORUS=2\n"
"uint8 MESH_RESOURCE=3\n"
"\n"
"uint8 INSERT=0\n"
"uint8 ERASE=1\n"
"uint8 ERASEALL=2\n"
"uint8 ERASEFOCUS=3\n"
"uint8 COPY=4\n"
"\n"
"int32 type\n"
"int32 action\n"
"string frame_id\n"
"string name\n"
"string description\n"
"string mesh_resource\n"
"bool mesh_use_embedded_materials\n"
;
  }

  static const char* value(const ::jsk_rviz_plugins::TransformableMarkerOperate_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jsk_rviz_plugins::TransformableMarkerOperate_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.action);
      stream.next(m.frame_id);
      stream.next(m.name);
      stream.next(m.description);
      stream.next(m.mesh_resource);
      stream.next(m.mesh_use_embedded_materials);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TransformableMarkerOperate_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jsk_rviz_plugins::TransformableMarkerOperate_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jsk_rviz_plugins::TransformableMarkerOperate_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "action: ";
    Printer<int32_t>::stream(s, indent + "  ", v.action);
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.frame_id);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "description: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.description);
    s << indent << "mesh_resource: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mesh_resource);
    s << indent << "mesh_use_embedded_materials: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mesh_use_embedded_materials);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JSK_RVIZ_PLUGINS_MESSAGE_TRANSFORMABLEMARKEROPERATE_H
