// Generated by gencpp from file jsk_rviz_plugins/OverlayMenu.msg
// DO NOT EDIT!


#ifndef JSK_RVIZ_PLUGINS_MESSAGE_OVERLAYMENU_H
#define JSK_RVIZ_PLUGINS_MESSAGE_OVERLAYMENU_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/ColorRGBA.h>
#include <std_msgs/ColorRGBA.h>

namespace jsk_rviz_plugins
{
template <class ContainerAllocator>
struct OverlayMenu_
{
  typedef OverlayMenu_<ContainerAllocator> Type;

  OverlayMenu_()
    : action(0)
    , current_index(0)
    , menus()
    , title()
    , bg_color()
    , fg_color()  {
    }
  OverlayMenu_(const ContainerAllocator& _alloc)
    : action(0)
    , current_index(0)
    , menus(_alloc)
    , title(_alloc)
    , bg_color(_alloc)
    , fg_color(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _action_type;
  _action_type action;

   typedef uint32_t _current_index_type;
  _current_index_type current_index;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _menus_type;
  _menus_type menus;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _title_type;
  _title_type title;

   typedef  ::std_msgs::ColorRGBA_<ContainerAllocator>  _bg_color_type;
  _bg_color_type bg_color;

   typedef  ::std_msgs::ColorRGBA_<ContainerAllocator>  _fg_color_type;
  _fg_color_type fg_color;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ACTION_SELECT)
  #undef ACTION_SELECT
#endif
#if defined(_WIN32) && defined(ACTION_CLOSE)
  #undef ACTION_CLOSE
#endif

  enum {
    ACTION_SELECT = 0,
    ACTION_CLOSE = 1,
  };


  typedef boost::shared_ptr< ::jsk_rviz_plugins::OverlayMenu_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jsk_rviz_plugins::OverlayMenu_<ContainerAllocator> const> ConstPtr;

}; // struct OverlayMenu_

typedef ::jsk_rviz_plugins::OverlayMenu_<std::allocator<void> > OverlayMenu;

typedef boost::shared_ptr< ::jsk_rviz_plugins::OverlayMenu > OverlayMenuPtr;
typedef boost::shared_ptr< ::jsk_rviz_plugins::OverlayMenu const> OverlayMenuConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jsk_rviz_plugins::OverlayMenu_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jsk_rviz_plugins::OverlayMenu_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jsk_rviz_plugins::OverlayMenu_<ContainerAllocator1> & lhs, const ::jsk_rviz_plugins::OverlayMenu_<ContainerAllocator2> & rhs)
{
  return lhs.action == rhs.action &&
    lhs.current_index == rhs.current_index &&
    lhs.menus == rhs.menus &&
    lhs.title == rhs.title &&
    lhs.bg_color == rhs.bg_color &&
    lhs.fg_color == rhs.fg_color;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jsk_rviz_plugins::OverlayMenu_<ContainerAllocator1> & lhs, const ::jsk_rviz_plugins::OverlayMenu_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jsk_rviz_plugins

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::jsk_rviz_plugins::OverlayMenu_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jsk_rviz_plugins::OverlayMenu_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jsk_rviz_plugins::OverlayMenu_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jsk_rviz_plugins::OverlayMenu_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_rviz_plugins::OverlayMenu_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_rviz_plugins::OverlayMenu_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jsk_rviz_plugins::OverlayMenu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "517426ba068ca022d86cf2c56c98889f";
  }

  static const char* value(const ::jsk_rviz_plugins::OverlayMenu_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x517426ba068ca022ULL;
  static const uint64_t static_value2 = 0xd86cf2c56c98889fULL;
};

template<class ContainerAllocator>
struct DataType< ::jsk_rviz_plugins::OverlayMenu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jsk_rviz_plugins/OverlayMenu";
  }

  static const char* value(const ::jsk_rviz_plugins::OverlayMenu_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jsk_rviz_plugins::OverlayMenu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 ACTION_SELECT=0\n"
"int32 ACTION_CLOSE=1\n"
"int32 action\n"
"uint32 current_index\n"
"string[] menus\n"
"string title\n"
"std_msgs/ColorRGBA bg_color\n"
"std_msgs/ColorRGBA fg_color\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/ColorRGBA\n"
"float32 r\n"
"float32 g\n"
"float32 b\n"
"float32 a\n"
;
  }

  static const char* value(const ::jsk_rviz_plugins::OverlayMenu_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jsk_rviz_plugins::OverlayMenu_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action);
      stream.next(m.current_index);
      stream.next(m.menus);
      stream.next(m.title);
      stream.next(m.bg_color);
      stream.next(m.fg_color);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OverlayMenu_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jsk_rviz_plugins::OverlayMenu_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jsk_rviz_plugins::OverlayMenu_<ContainerAllocator>& v)
  {
    s << indent << "action: ";
    Printer<int32_t>::stream(s, indent + "  ", v.action);
    s << indent << "current_index: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.current_index);
    s << indent << "menus[]" << std::endl;
    for (size_t i = 0; i < v.menus.size(); ++i)
    {
      s << indent << "  menus[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.menus[i]);
    }
    s << indent << "title: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.title);
    s << indent << "bg_color: ";
    s << std::endl;
    Printer< ::std_msgs::ColorRGBA_<ContainerAllocator> >::stream(s, indent + "  ", v.bg_color);
    s << indent << "fg_color: ";
    s << std::endl;
    Printer< ::std_msgs::ColorRGBA_<ContainerAllocator> >::stream(s, indent + "  ", v.fg_color);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JSK_RVIZ_PLUGINS_MESSAGE_OVERLAYMENU_H
