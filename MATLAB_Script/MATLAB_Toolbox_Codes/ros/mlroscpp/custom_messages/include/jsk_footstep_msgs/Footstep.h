// Generated by gencpp from file jsk_footstep_msgs/Footstep.msg
// DO NOT EDIT!


#ifndef JSK_FOOTSTEP_MSGS_MESSAGE_FOOTSTEP_H
#define JSK_FOOTSTEP_MSGS_MESSAGE_FOOTSTEP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace jsk_footstep_msgs
{
template <class ContainerAllocator>
struct Footstep_
{
  typedef Footstep_<ContainerAllocator> Type;

  Footstep_()
    : leg(0)
    , pose()
    , duration()  {
    }
  Footstep_(const ContainerAllocator& _alloc)
    : leg(0)
    , pose(_alloc)
    , duration()  {
  (void)_alloc;
    }



   typedef uint8_t _leg_type;
  _leg_type leg;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef ros::Duration _duration_type;
  _duration_type duration;



  enum {
 
    RIGHT = 2u,
 
    LEFT = 1u,
  };


  typedef boost::shared_ptr< ::jsk_footstep_msgs::Footstep_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jsk_footstep_msgs::Footstep_<ContainerAllocator> const> ConstPtr;

}; // struct Footstep_

typedef ::jsk_footstep_msgs::Footstep_<std::allocator<void> > Footstep;

typedef boost::shared_ptr< ::jsk_footstep_msgs::Footstep > FootstepPtr;
typedef boost::shared_ptr< ::jsk_footstep_msgs::Footstep const> FootstepConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jsk_footstep_msgs::Footstep_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jsk_footstep_msgs::Footstep_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace jsk_footstep_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/geometry_msgs/cmake/../msg'], 'actionlib': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/actionlib/cmake/../msg'], 'jsk_footstep_msgs': ['/local-ssd1/All_Custom_Msgs/PendingPackagesInitial/matlab_msg_gen_ros1/glnxa64/src/jsk_footstep_msgs/msg', '/local-ssd1/All_Custom_Msgs/PendingPackagesInitial/matlab_msg_gen_ros1/glnxa64/devel/share/jsk_footstep_msgs/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::jsk_footstep_msgs::Footstep_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jsk_footstep_msgs::Footstep_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jsk_footstep_msgs::Footstep_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jsk_footstep_msgs::Footstep_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_footstep_msgs::Footstep_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_footstep_msgs::Footstep_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jsk_footstep_msgs::Footstep_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8739a6e268745367467577013fb52aa6";
  }

  static const char* value(const ::jsk_footstep_msgs::Footstep_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8739a6e268745367ULL;
  static const uint64_t static_value2 = 0x467577013fb52aa6ULL;
};

template<class ContainerAllocator>
struct DataType< ::jsk_footstep_msgs::Footstep_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jsk_footstep_msgs/Footstep";
  }

  static const char* value(const ::jsk_footstep_msgs::Footstep_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jsk_footstep_msgs::Footstep_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 RIGHT=2\n"
"uint8 LEFT=1\n"
"uint8 leg\n"
"geometry_msgs/Pose pose\n"
"duration duration\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::jsk_footstep_msgs::Footstep_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jsk_footstep_msgs::Footstep_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.leg);
      stream.next(m.pose);
      stream.next(m.duration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Footstep_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jsk_footstep_msgs::Footstep_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jsk_footstep_msgs::Footstep_<ContainerAllocator>& v)
  {
    s << indent << "leg: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.leg);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "duration: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.duration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JSK_FOOTSTEP_MSGS_MESSAGE_FOOTSTEP_H
