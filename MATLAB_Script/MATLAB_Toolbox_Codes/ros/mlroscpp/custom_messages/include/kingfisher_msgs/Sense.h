// Generated by gencpp from file kingfisher_msgs/Sense.msg
// DO NOT EDIT!


#ifndef KINGFISHER_MSGS_MESSAGE_SENSE_H
#define KINGFISHER_MSGS_MESSAGE_SENSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kingfisher_msgs
{
template <class ContainerAllocator>
struct Sense_
{
  typedef Sense_<ContainerAllocator> Type;

  Sense_()
    : battery(0.0)
    , current_left(0.0)
    , current_right(0.0)
    , pcb_temperature(0.0)
    , fan_on(false)
    , rc(0)
    , rc_throttle(0)
    , rc_rotation(0)
    , rc_enable(0)  {
    }
  Sense_(const ContainerAllocator& _alloc)
    : battery(0.0)
    , current_left(0.0)
    , current_right(0.0)
    , pcb_temperature(0.0)
    , fan_on(false)
    , rc(0)
    , rc_throttle(0)
    , rc_rotation(0)
    , rc_enable(0)  {
  (void)_alloc;
    }



   typedef float _battery_type;
  _battery_type battery;

   typedef float _current_left_type;
  _current_left_type current_left;

   typedef float _current_right_type;
  _current_right_type current_right;

   typedef float _pcb_temperature_type;
  _pcb_temperature_type pcb_temperature;

   typedef uint8_t _fan_on_type;
  _fan_on_type fan_on;

   typedef uint8_t _rc_type;
  _rc_type rc;

   typedef uint16_t _rc_throttle_type;
  _rc_throttle_type rc_throttle;

   typedef uint16_t _rc_rotation_type;
  _rc_rotation_type rc_rotation;

   typedef uint16_t _rc_enable_type;
  _rc_enable_type rc_enable;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(RC_INRANGE)
  #undef RC_INRANGE
#endif
#if defined(_WIN32) && defined(RC_INUSE)
  #undef RC_INUSE
#endif

  enum {
    RC_INRANGE = 1u,
    RC_INUSE = 2u,
  };


  typedef boost::shared_ptr< ::kingfisher_msgs::Sense_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kingfisher_msgs::Sense_<ContainerAllocator> const> ConstPtr;

}; // struct Sense_

typedef ::kingfisher_msgs::Sense_<std::allocator<void> > Sense;

typedef boost::shared_ptr< ::kingfisher_msgs::Sense > SensePtr;
typedef boost::shared_ptr< ::kingfisher_msgs::Sense const> SenseConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kingfisher_msgs::Sense_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kingfisher_msgs::Sense_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kingfisher_msgs::Sense_<ContainerAllocator1> & lhs, const ::kingfisher_msgs::Sense_<ContainerAllocator2> & rhs)
{
  return lhs.battery == rhs.battery &&
    lhs.current_left == rhs.current_left &&
    lhs.current_right == rhs.current_right &&
    lhs.pcb_temperature == rhs.pcb_temperature &&
    lhs.fan_on == rhs.fan_on &&
    lhs.rc == rhs.rc &&
    lhs.rc_throttle == rhs.rc_throttle &&
    lhs.rc_rotation == rhs.rc_rotation &&
    lhs.rc_enable == rhs.rc_enable;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kingfisher_msgs::Sense_<ContainerAllocator1> & lhs, const ::kingfisher_msgs::Sense_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kingfisher_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kingfisher_msgs::Sense_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kingfisher_msgs::Sense_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kingfisher_msgs::Sense_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kingfisher_msgs::Sense_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kingfisher_msgs::Sense_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kingfisher_msgs::Sense_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kingfisher_msgs::Sense_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b0209acddc7f26d2e3dc1338d6c4df94";
  }

  static const char* value(const ::kingfisher_msgs::Sense_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb0209acddc7f26d2ULL;
  static const uint64_t static_value2 = 0xe3dc1338d6c4df94ULL;
};

template<class ContainerAllocator>
struct DataType< ::kingfisher_msgs::Sense_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kingfisher_msgs/Sense";
  }

  static const char* value(const ::kingfisher_msgs::Sense_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kingfisher_msgs::Sense_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# General MCU status for Kingfisher transmitted from the MCU\n"
"# to higher-level software on the /sense topic.\n"
"\n"
"# Voltage level of battery, in volts\n"
"float32 battery\n"
"\n"
"# Instantaneous current drawn by each motor, in amps.\n"
"float32 current_left\n"
"float32 current_right\n"
"\n"
"# Temperature of PCB as measured by internal AVR thermometer,\n"
"# reported in degrees centigrade.\n"
"float32 pcb_temperature\n"
"bool fan_on\n"
"\n"
"# Bitfield represents status of hobby R/C override.\n"
"uint8 RC_INRANGE=1\n"
"uint8 RC_INUSE=2\n"
"uint8 rc\n"
"\n"
"# Pulse lengths received from the three R/C channels.\n"
"uint16 rc_throttle\n"
"uint16 rc_rotation\n"
"uint16 rc_enable\n"
;
  }

  static const char* value(const ::kingfisher_msgs::Sense_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kingfisher_msgs::Sense_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.battery);
      stream.next(m.current_left);
      stream.next(m.current_right);
      stream.next(m.pcb_temperature);
      stream.next(m.fan_on);
      stream.next(m.rc);
      stream.next(m.rc_throttle);
      stream.next(m.rc_rotation);
      stream.next(m.rc_enable);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Sense_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kingfisher_msgs::Sense_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kingfisher_msgs::Sense_<ContainerAllocator>& v)
  {
    s << indent << "battery: ";
    Printer<float>::stream(s, indent + "  ", v.battery);
    s << indent << "current_left: ";
    Printer<float>::stream(s, indent + "  ", v.current_left);
    s << indent << "current_right: ";
    Printer<float>::stream(s, indent + "  ", v.current_right);
    s << indent << "pcb_temperature: ";
    Printer<float>::stream(s, indent + "  ", v.pcb_temperature);
    s << indent << "fan_on: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fan_on);
    s << indent << "rc: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rc);
    s << indent << "rc_throttle: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.rc_throttle);
    s << indent << "rc_rotation: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.rc_rotation);
    s << indent << "rc_enable: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.rc_enable);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KINGFISHER_MSGS_MESSAGE_SENSE_H
