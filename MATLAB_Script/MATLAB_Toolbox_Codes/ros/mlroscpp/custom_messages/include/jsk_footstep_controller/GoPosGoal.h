// Generated by gencpp from file jsk_footstep_controller/GoPosGoal.msg
// DO NOT EDIT!


#ifndef JSK_FOOTSTEP_CONTROLLER_MESSAGE_GOPOSGOAL_H
#define JSK_FOOTSTEP_CONTROLLER_MESSAGE_GOPOSGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace jsk_footstep_controller
{
template <class ContainerAllocator>
struct GoPosGoal_
{
  typedef GoPosGoal_<ContainerAllocator> Type;

  GoPosGoal_()
    : x(0.0)
    , y(0.0)
    , theta(0.0)
    , action(0)  {
    }
  GoPosGoal_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , theta(0.0)
    , action(0)  {
  (void)_alloc;
    }



   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _theta_type;
  _theta_type theta;

   typedef uint8_t _action_type;
  _action_type action;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NEW_TARGET)
  #undef NEW_TARGET
#endif
#if defined(_WIN32) && defined(OVER_WRITE)
  #undef OVER_WRITE
#endif
#if defined(_WIN32) && defined(ABSOLUTE_NEW_TARGET)
  #undef ABSOLUTE_NEW_TARGET
#endif
#if defined(_WIN32) && defined(ABSOLUTE_OVER_WRITE)
  #undef ABSOLUTE_OVER_WRITE
#endif

  enum {
    NEW_TARGET = 0u,
    OVER_WRITE = 1u,
    ABSOLUTE_NEW_TARGET = 2u,
    ABSOLUTE_OVER_WRITE = 3u,
  };


  typedef boost::shared_ptr< ::jsk_footstep_controller::GoPosGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jsk_footstep_controller::GoPosGoal_<ContainerAllocator> const> ConstPtr;

}; // struct GoPosGoal_

typedef ::jsk_footstep_controller::GoPosGoal_<std::allocator<void> > GoPosGoal;

typedef boost::shared_ptr< ::jsk_footstep_controller::GoPosGoal > GoPosGoalPtr;
typedef boost::shared_ptr< ::jsk_footstep_controller::GoPosGoal const> GoPosGoalConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jsk_footstep_controller::GoPosGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jsk_footstep_controller::GoPosGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jsk_footstep_controller::GoPosGoal_<ContainerAllocator1> & lhs, const ::jsk_footstep_controller::GoPosGoal_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.theta == rhs.theta &&
    lhs.action == rhs.action;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jsk_footstep_controller::GoPosGoal_<ContainerAllocator1> & lhs, const ::jsk_footstep_controller::GoPosGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jsk_footstep_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::jsk_footstep_controller::GoPosGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jsk_footstep_controller::GoPosGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jsk_footstep_controller::GoPosGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jsk_footstep_controller::GoPosGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_footstep_controller::GoPosGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_footstep_controller::GoPosGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jsk_footstep_controller::GoPosGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "69d55867d9a94dddd5bc8dc8910558cf";
  }

  static const char* value(const ::jsk_footstep_controller::GoPosGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x69d55867d9a94dddULL;
  static const uint64_t static_value2 = 0xd5bc8dc8910558cfULL;
};

template<class ContainerAllocator>
struct DataType< ::jsk_footstep_controller::GoPosGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jsk_footstep_controller/GoPosGoal";
  }

  static const char* value(const ::jsk_footstep_controller::GoPosGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jsk_footstep_controller::GoPosGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# goal\n"
"uint8 NEW_TARGET=0\n"
"uint8 OVER_WRITE=1\n"
"uint8 ABSOLUTE_NEW_TARGET=2\n"
"uint8 ABSOLUTE_OVER_WRITE=3\n"
"float32 x # [ m ]\n"
"float32 y # [ m ]\n"
"float32 theta # [ degree ]\n"
"# geometry_msgs/PoseStamped pose ## used for absolute\n"
"uint8 action # 0 (NEW_TARGET), 1 (OVER_WRITE) over write old destination while walking\n"
;
  }

  static const char* value(const ::jsk_footstep_controller::GoPosGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jsk_footstep_controller::GoPosGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.theta);
      stream.next(m.action);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GoPosGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jsk_footstep_controller::GoPosGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jsk_footstep_controller::GoPosGoal_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "theta: ";
    Printer<float>::stream(s, indent + "  ", v.theta);
    s << indent << "action: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.action);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JSK_FOOTSTEP_CONTROLLER_MESSAGE_GOPOSGOAL_H
