// Generated by gencpp from file speech_recognition_msgs/SpeechRecognitionRequest.msg
// DO NOT EDIT!


#ifndef SPEECH_RECOGNITION_MSGS_MESSAGE_SPEECHRECOGNITIONREQUEST_H
#define SPEECH_RECOGNITION_MSGS_MESSAGE_SPEECHRECOGNITIONREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <speech_recognition_msgs/Vocabulary.h>
#include <speech_recognition_msgs/Grammar.h>

namespace speech_recognition_msgs
{
template <class ContainerAllocator>
struct SpeechRecognitionRequest_
{
  typedef SpeechRecognitionRequest_<ContainerAllocator> Type;

  SpeechRecognitionRequest_()
    : vocabulary()
    , grammar()
    , grammar_name()
    , duration(0.0)
    , quiet(false)
    , threshold(0.0)  {
    }
  SpeechRecognitionRequest_(const ContainerAllocator& _alloc)
    : vocabulary(_alloc)
    , grammar(_alloc)
    , grammar_name(_alloc)
    , duration(0.0)
    , quiet(false)
    , threshold(0.0)  {
  (void)_alloc;
    }



   typedef  ::speech_recognition_msgs::Vocabulary_<ContainerAllocator>  _vocabulary_type;
  _vocabulary_type vocabulary;

   typedef  ::speech_recognition_msgs::Grammar_<ContainerAllocator>  _grammar_type;
  _grammar_type grammar;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _grammar_name_type;
  _grammar_name_type grammar_name;

   typedef float _duration_type;
  _duration_type duration;

   typedef uint8_t _quiet_type;
  _quiet_type quiet;

   typedef float _threshold_type;
  _threshold_type threshold;





  typedef boost::shared_ptr< ::speech_recognition_msgs::SpeechRecognitionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::speech_recognition_msgs::SpeechRecognitionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SpeechRecognitionRequest_

typedef ::speech_recognition_msgs::SpeechRecognitionRequest_<std::allocator<void> > SpeechRecognitionRequest;

typedef boost::shared_ptr< ::speech_recognition_msgs::SpeechRecognitionRequest > SpeechRecognitionRequestPtr;
typedef boost::shared_ptr< ::speech_recognition_msgs::SpeechRecognitionRequest const> SpeechRecognitionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::speech_recognition_msgs::SpeechRecognitionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::speech_recognition_msgs::SpeechRecognitionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::speech_recognition_msgs::SpeechRecognitionRequest_<ContainerAllocator1> & lhs, const ::speech_recognition_msgs::SpeechRecognitionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.vocabulary == rhs.vocabulary &&
    lhs.grammar == rhs.grammar &&
    lhs.grammar_name == rhs.grammar_name &&
    lhs.duration == rhs.duration &&
    lhs.quiet == rhs.quiet &&
    lhs.threshold == rhs.threshold;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::speech_recognition_msgs::SpeechRecognitionRequest_<ContainerAllocator1> & lhs, const ::speech_recognition_msgs::SpeechRecognitionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace speech_recognition_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::speech_recognition_msgs::SpeechRecognitionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::speech_recognition_msgs::SpeechRecognitionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::speech_recognition_msgs::SpeechRecognitionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::speech_recognition_msgs::SpeechRecognitionRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::speech_recognition_msgs::SpeechRecognitionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::speech_recognition_msgs::SpeechRecognitionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::speech_recognition_msgs::SpeechRecognitionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "af5602408bd36e4d9a80cde6f4453023";
  }

  static const char* value(const ::speech_recognition_msgs::SpeechRecognitionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaf5602408bd36e4dULL;
  static const uint64_t static_value2 = 0x9a80cde6f4453023ULL;
};

template<class ContainerAllocator>
struct DataType< ::speech_recognition_msgs::SpeechRecognitionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "speech_recognition_msgs/SpeechRecognitionRequest";
  }

  static const char* value(const ::speech_recognition_msgs::SpeechRecognitionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::speech_recognition_msgs::SpeechRecognitionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Vocabulary vocabulary  #  Specify isolated words candidates to be recognized (Enabled on isolated word mode)\n"
"Grammar grammar        #  Or, specify grammar to be recognized\n"
"string grammar_name    #  Or, simply specify grammar name which is already registered on the server\n"
"\n"
"float32 duration\n"
"bool quiet\n"
"float32 threshold\n"
"\n"
"================================================================================\n"
"MSG: speech_recognition_msgs/Vocabulary\n"
"string name  # register vocabulary with the name.\n"
"string[] words\n"
"string[] phonemes\n"
"\n"
"================================================================================\n"
"MSG: speech_recognition_msgs/Grammar\n"
"string name  # register this grammar with the name\n"
"PhraseRule[] rules\n"
"\n"
"string[] categories\n"
"Vocabulary[] vocabularies\n"
"\n"
"================================================================================\n"
"MSG: speech_recognition_msgs/PhraseRule\n"
"string symbol\n"
"string[] definition\n"
;
  }

  static const char* value(const ::speech_recognition_msgs::SpeechRecognitionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::speech_recognition_msgs::SpeechRecognitionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vocabulary);
      stream.next(m.grammar);
      stream.next(m.grammar_name);
      stream.next(m.duration);
      stream.next(m.quiet);
      stream.next(m.threshold);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SpeechRecognitionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::speech_recognition_msgs::SpeechRecognitionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::speech_recognition_msgs::SpeechRecognitionRequest_<ContainerAllocator>& v)
  {
    s << indent << "vocabulary: ";
    s << std::endl;
    Printer< ::speech_recognition_msgs::Vocabulary_<ContainerAllocator> >::stream(s, indent + "  ", v.vocabulary);
    s << indent << "grammar: ";
    s << std::endl;
    Printer< ::speech_recognition_msgs::Grammar_<ContainerAllocator> >::stream(s, indent + "  ", v.grammar);
    s << indent << "grammar_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.grammar_name);
    s << indent << "duration: ";
    Printer<float>::stream(s, indent + "  ", v.duration);
    s << indent << "quiet: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.quiet);
    s << indent << "threshold: ";
    Printer<float>::stream(s, indent + "  ", v.threshold);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPEECH_RECOGNITION_MSGS_MESSAGE_SPEECHRECOGNITIONREQUEST_H
