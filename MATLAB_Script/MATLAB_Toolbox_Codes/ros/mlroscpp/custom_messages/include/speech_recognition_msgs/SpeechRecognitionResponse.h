// Generated by gencpp from file speech_recognition_msgs/SpeechRecognitionResponse.msg
// DO NOT EDIT!


#ifndef SPEECH_RECOGNITION_MSGS_MESSAGE_SPEECHRECOGNITIONRESPONSE_H
#define SPEECH_RECOGNITION_MSGS_MESSAGE_SPEECHRECOGNITIONRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <speech_recognition_msgs/SpeechRecognitionCandidates.h>

namespace speech_recognition_msgs
{
template <class ContainerAllocator>
struct SpeechRecognitionResponse_
{
  typedef SpeechRecognitionResponse_<ContainerAllocator> Type;

  SpeechRecognitionResponse_()
    : result()  {
    }
  SpeechRecognitionResponse_(const ContainerAllocator& _alloc)
    : result(_alloc)  {
  (void)_alloc;
    }



   typedef  ::speech_recognition_msgs::SpeechRecognitionCandidates_<ContainerAllocator>  _result_type;
  _result_type result;





  typedef boost::shared_ptr< ::speech_recognition_msgs::SpeechRecognitionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::speech_recognition_msgs::SpeechRecognitionResponse_<ContainerAllocator> const> ConstPtr;

}; // struct SpeechRecognitionResponse_

typedef ::speech_recognition_msgs::SpeechRecognitionResponse_<std::allocator<void> > SpeechRecognitionResponse;

typedef boost::shared_ptr< ::speech_recognition_msgs::SpeechRecognitionResponse > SpeechRecognitionResponsePtr;
typedef boost::shared_ptr< ::speech_recognition_msgs::SpeechRecognitionResponse const> SpeechRecognitionResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::speech_recognition_msgs::SpeechRecognitionResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::speech_recognition_msgs::SpeechRecognitionResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::speech_recognition_msgs::SpeechRecognitionResponse_<ContainerAllocator1> & lhs, const ::speech_recognition_msgs::SpeechRecognitionResponse_<ContainerAllocator2> & rhs)
{
  return lhs.result == rhs.result;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::speech_recognition_msgs::SpeechRecognitionResponse_<ContainerAllocator1> & lhs, const ::speech_recognition_msgs::SpeechRecognitionResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace speech_recognition_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::speech_recognition_msgs::SpeechRecognitionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::speech_recognition_msgs::SpeechRecognitionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::speech_recognition_msgs::SpeechRecognitionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::speech_recognition_msgs::SpeechRecognitionResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::speech_recognition_msgs::SpeechRecognitionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::speech_recognition_msgs::SpeechRecognitionResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::speech_recognition_msgs::SpeechRecognitionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "46fe009ac10a19a0e861b8792ad42e0b";
  }

  static const char* value(const ::speech_recognition_msgs::SpeechRecognitionResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x46fe009ac10a19a0ULL;
  static const uint64_t static_value2 = 0xe861b8792ad42e0bULL;
};

template<class ContainerAllocator>
struct DataType< ::speech_recognition_msgs::SpeechRecognitionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "speech_recognition_msgs/SpeechRecognitionResponse";
  }

  static const char* value(const ::speech_recognition_msgs::SpeechRecognitionResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::speech_recognition_msgs::SpeechRecognitionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "speech_recognition_msgs/SpeechRecognitionCandidates result\n"
"\n"
"\n"
"================================================================================\n"
"MSG: speech_recognition_msgs/SpeechRecognitionCandidates\n"
"string[] transcript   # candidate words of speech-to-text API\n"
"float32[] confidence  # confidence of transcript\n"
;
  }

  static const char* value(const ::speech_recognition_msgs::SpeechRecognitionResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::speech_recognition_msgs::SpeechRecognitionResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.result);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SpeechRecognitionResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::speech_recognition_msgs::SpeechRecognitionResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::speech_recognition_msgs::SpeechRecognitionResponse_<ContainerAllocator>& v)
  {
    s << indent << "result: ";
    s << std::endl;
    Printer< ::speech_recognition_msgs::SpeechRecognitionCandidates_<ContainerAllocator> >::stream(s, indent + "  ", v.result);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPEECH_RECOGNITION_MSGS_MESSAGE_SPEECHRECOGNITIONRESPONSE_H
