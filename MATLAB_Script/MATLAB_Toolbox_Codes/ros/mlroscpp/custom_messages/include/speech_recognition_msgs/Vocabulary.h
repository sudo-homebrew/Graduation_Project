// Generated by gencpp from file speech_recognition_msgs/Vocabulary.msg
// DO NOT EDIT!


#ifndef SPEECH_RECOGNITION_MSGS_MESSAGE_VOCABULARY_H
#define SPEECH_RECOGNITION_MSGS_MESSAGE_VOCABULARY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace speech_recognition_msgs
{
template <class ContainerAllocator>
struct Vocabulary_
{
  typedef Vocabulary_<ContainerAllocator> Type;

  Vocabulary_()
    : name()
    , words()
    , phonemes()  {
    }
  Vocabulary_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , words(_alloc)
    , phonemes(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _words_type;
  _words_type words;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _phonemes_type;
  _phonemes_type phonemes;





  typedef boost::shared_ptr< ::speech_recognition_msgs::Vocabulary_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::speech_recognition_msgs::Vocabulary_<ContainerAllocator> const> ConstPtr;

}; // struct Vocabulary_

typedef ::speech_recognition_msgs::Vocabulary_<std::allocator<void> > Vocabulary;

typedef boost::shared_ptr< ::speech_recognition_msgs::Vocabulary > VocabularyPtr;
typedef boost::shared_ptr< ::speech_recognition_msgs::Vocabulary const> VocabularyConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::speech_recognition_msgs::Vocabulary_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::speech_recognition_msgs::Vocabulary_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::speech_recognition_msgs::Vocabulary_<ContainerAllocator1> & lhs, const ::speech_recognition_msgs::Vocabulary_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.words == rhs.words &&
    lhs.phonemes == rhs.phonemes;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::speech_recognition_msgs::Vocabulary_<ContainerAllocator1> & lhs, const ::speech_recognition_msgs::Vocabulary_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace speech_recognition_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::speech_recognition_msgs::Vocabulary_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::speech_recognition_msgs::Vocabulary_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::speech_recognition_msgs::Vocabulary_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::speech_recognition_msgs::Vocabulary_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::speech_recognition_msgs::Vocabulary_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::speech_recognition_msgs::Vocabulary_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::speech_recognition_msgs::Vocabulary_<ContainerAllocator> >
{
  static const char* value()
  {
    return "20a1ff9e31d8f4dc29f230a64ed707d7";
  }

  static const char* value(const ::speech_recognition_msgs::Vocabulary_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x20a1ff9e31d8f4dcULL;
  static const uint64_t static_value2 = 0x29f230a64ed707d7ULL;
};

template<class ContainerAllocator>
struct DataType< ::speech_recognition_msgs::Vocabulary_<ContainerAllocator> >
{
  static const char* value()
  {
    return "speech_recognition_msgs/Vocabulary";
  }

  static const char* value(const ::speech_recognition_msgs::Vocabulary_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::speech_recognition_msgs::Vocabulary_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name  # register vocabulary with the name.\n"
"string[] words\n"
"string[] phonemes\n"
;
  }

  static const char* value(const ::speech_recognition_msgs::Vocabulary_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::speech_recognition_msgs::Vocabulary_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.words);
      stream.next(m.phonemes);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Vocabulary_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::speech_recognition_msgs::Vocabulary_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::speech_recognition_msgs::Vocabulary_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "words[]" << std::endl;
    for (size_t i = 0; i < v.words.size(); ++i)
    {
      s << indent << "  words[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.words[i]);
    }
    s << indent << "phonemes[]" << std::endl;
    for (size_t i = 0; i < v.phonemes.size(); ++i)
    {
      s << indent << "  phonemes[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.phonemes[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPEECH_RECOGNITION_MSGS_MESSAGE_VOCABULARY_H
