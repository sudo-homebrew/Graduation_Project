// Generated by gencpp from file graph_msgs/Edges.msg
// DO NOT EDIT!


#ifndef GRAPH_MSGS_MESSAGE_EDGES_H
#define GRAPH_MSGS_MESSAGE_EDGES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace graph_msgs
{
template <class ContainerAllocator>
struct Edges_
{
  typedef Edges_<ContainerAllocator> Type;

  Edges_()
    : node_ids()
    , weights()  {
    }
  Edges_(const ContainerAllocator& _alloc)
    : node_ids(_alloc)
    , weights(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _node_ids_type;
  _node_ids_type node_ids;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _weights_type;
  _weights_type weights;





  typedef boost::shared_ptr< ::graph_msgs::Edges_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::graph_msgs::Edges_<ContainerAllocator> const> ConstPtr;

}; // struct Edges_

typedef ::graph_msgs::Edges_<std::allocator<void> > Edges;

typedef boost::shared_ptr< ::graph_msgs::Edges > EdgesPtr;
typedef boost::shared_ptr< ::graph_msgs::Edges const> EdgesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::graph_msgs::Edges_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::graph_msgs::Edges_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::graph_msgs::Edges_<ContainerAllocator1> & lhs, const ::graph_msgs::Edges_<ContainerAllocator2> & rhs)
{
  return lhs.node_ids == rhs.node_ids &&
    lhs.weights == rhs.weights;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::graph_msgs::Edges_<ContainerAllocator1> & lhs, const ::graph_msgs::Edges_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace graph_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::graph_msgs::Edges_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::graph_msgs::Edges_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graph_msgs::Edges_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graph_msgs::Edges_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graph_msgs::Edges_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graph_msgs::Edges_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::graph_msgs::Edges_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1dcd54afd0b0c0fbebeb59dbdda4c026";
  }

  static const char* value(const ::graph_msgs::Edges_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1dcd54afd0b0c0fbULL;
  static const uint64_t static_value2 = 0xebeb59dbdda4c026ULL;
};

template<class ContainerAllocator>
struct DataType< ::graph_msgs::Edges_<ContainerAllocator> >
{
  static const char* value()
  {
    return "graph_msgs/Edges";
  }

  static const char* value(const ::graph_msgs::Edges_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::graph_msgs::Edges_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#base-zero index of all the verticies this particular vertice connects to (edges)\n"
"uint32[] node_ids\n"
"\n"
"# optional cost/weight of each edge. if vector is empty assume all weights are equal (1)\n"
"float64[] weights\n"
;
  }

  static const char* value(const ::graph_msgs::Edges_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::graph_msgs::Edges_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.node_ids);
      stream.next(m.weights);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Edges_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::graph_msgs::Edges_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::graph_msgs::Edges_<ContainerAllocator>& v)
  {
    s << indent << "node_ids[]" << std::endl;
    for (size_t i = 0; i < v.node_ids.size(); ++i)
    {
      s << indent << "  node_ids[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.node_ids[i]);
    }
    s << indent << "weights[]" << std::endl;
    for (size_t i = 0; i < v.weights.size(); ++i)
    {
      s << indent << "  weights[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.weights[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRAPH_MSGS_MESSAGE_EDGES_H
