// Generated by gencpp from file pr2_msgs/SetLaserTrajCmdRequest.msg
// DO NOT EDIT!


#ifndef PR2_MSGS_MESSAGE_SETLASERTRAJCMDREQUEST_H
#define PR2_MSGS_MESSAGE_SETLASERTRAJCMDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <pr2_msgs/LaserTrajCmd.h>

namespace pr2_msgs
{
template <class ContainerAllocator>
struct SetLaserTrajCmdRequest_
{
  typedef SetLaserTrajCmdRequest_<ContainerAllocator> Type;

  SetLaserTrajCmdRequest_()
    : command()  {
    }
  SetLaserTrajCmdRequest_(const ContainerAllocator& _alloc)
    : command(_alloc)  {
  (void)_alloc;
    }



   typedef  ::pr2_msgs::LaserTrajCmd_<ContainerAllocator>  _command_type;
  _command_type command;





  typedef boost::shared_ptr< ::pr2_msgs::SetLaserTrajCmdRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr2_msgs::SetLaserTrajCmdRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetLaserTrajCmdRequest_

typedef ::pr2_msgs::SetLaserTrajCmdRequest_<std::allocator<void> > SetLaserTrajCmdRequest;

typedef boost::shared_ptr< ::pr2_msgs::SetLaserTrajCmdRequest > SetLaserTrajCmdRequestPtr;
typedef boost::shared_ptr< ::pr2_msgs::SetLaserTrajCmdRequest const> SetLaserTrajCmdRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pr2_msgs::SetLaserTrajCmdRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pr2_msgs::SetLaserTrajCmdRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pr2_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/mathworks/devel/sbs/31/avaranas.Brobot.j1368574.april23/matlab/sys/ros1/glnxa64/ros1/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/mathworks/devel/sbs/31/avaranas.Brobot.j1368574.april23/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/avaranas.Brobot.j1368574.april23/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'pr2_msgs': ['/mathworks/devel/sbs/31/avaranas.Brobot.j1368574.april23/matlab/toolbox/ros/mlroscpp/custom_messages/ROS Packages/pack_2/matlab_msg_gen_ros1/glnxa64/src/pr2_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pr2_msgs::SetLaserTrajCmdRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pr2_msgs::SetLaserTrajCmdRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pr2_msgs::SetLaserTrajCmdRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pr2_msgs::SetLaserTrajCmdRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr2_msgs::SetLaserTrajCmdRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr2_msgs::SetLaserTrajCmdRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pr2_msgs::SetLaserTrajCmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "83f915c37d36f61442c752779261e7d4";
  }

  static const char* value(const ::pr2_msgs::SetLaserTrajCmdRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x83f915c37d36f614ULL;
  static const uint64_t static_value2 = 0x42c752779261e7d4ULL;
};

template<class ContainerAllocator>
struct DataType< ::pr2_msgs::SetLaserTrajCmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pr2_msgs/SetLaserTrajCmdRequest";
  }

  static const char* value(const ::pr2_msgs::SetLaserTrajCmdRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pr2_msgs::SetLaserTrajCmdRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pr2_msgs/LaserTrajCmd command\n"
"\n"
"================================================================================\n"
"MSG: pr2_msgs/LaserTrajCmd\n"
"# This message is used to set the profile that the tilt laser controller\n"
"# executes.\n"
"Header header\n"
"string profile              # options are currently \"linear\" or \"linear_blended\"\n"
"float64[] position          # Laser positions\n"
"duration[] time_from_start  # Times to reach laser positions in seconds\n"
"float64 max_velocity        # Set <= 0 to use default\n"
"float64 max_acceleration    # Set <= 0 to use default\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::pr2_msgs::SetLaserTrajCmdRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pr2_msgs::SetLaserTrajCmdRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.command);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetLaserTrajCmdRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr2_msgs::SetLaserTrajCmdRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pr2_msgs::SetLaserTrajCmdRequest_<ContainerAllocator>& v)
  {
    s << indent << "command: ";
    s << std::endl;
    Printer< ::pr2_msgs::LaserTrajCmd_<ContainerAllocator> >::stream(s, indent + "  ", v.command);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PR2_MSGS_MESSAGE_SETLASERTRAJCMDREQUEST_H
