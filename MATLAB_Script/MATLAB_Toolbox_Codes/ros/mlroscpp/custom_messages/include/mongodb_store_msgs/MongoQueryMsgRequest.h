// Generated by gencpp from file mongodb_store_msgs/MongoQueryMsgRequest.msg
// DO NOT EDIT!


#ifndef MONGODB_STORE_MSGS_MESSAGE_MONGOQUERYMSGREQUEST_H
#define MONGODB_STORE_MSGS_MESSAGE_MONGOQUERYMSGREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mongodb_store_msgs/StringPairList.h>
#include <mongodb_store_msgs/StringPairList.h>

namespace mongodb_store_msgs
{
template <class ContainerAllocator>
struct MongoQueryMsgRequest_
{
  typedef MongoQueryMsgRequest_<ContainerAllocator> Type;

  MongoQueryMsgRequest_()
    : database()
    , collection()
    , type()
    , single(false)
    , message_query()
    , meta_query()  {
    }
  MongoQueryMsgRequest_(const ContainerAllocator& _alloc)
    : database(_alloc)
    , collection(_alloc)
    , type(_alloc)
    , single(false)
    , message_query(_alloc)
    , meta_query(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _database_type;
  _database_type database;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _collection_type;
  _collection_type collection;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef uint8_t _single_type;
  _single_type single;

   typedef  ::mongodb_store_msgs::StringPairList_<ContainerAllocator>  _message_query_type;
  _message_query_type message_query;

   typedef  ::mongodb_store_msgs::StringPairList_<ContainerAllocator>  _meta_query_type;
  _meta_query_type meta_query;




  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  JSON_QUERY;

  typedef boost::shared_ptr< ::mongodb_store_msgs::MongoQueryMsgRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mongodb_store_msgs::MongoQueryMsgRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MongoQueryMsgRequest_

typedef ::mongodb_store_msgs::MongoQueryMsgRequest_<std::allocator<void> > MongoQueryMsgRequest;

typedef boost::shared_ptr< ::mongodb_store_msgs::MongoQueryMsgRequest > MongoQueryMsgRequestPtr;
typedef boost::shared_ptr< ::mongodb_store_msgs::MongoQueryMsgRequest const> MongoQueryMsgRequestConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      MongoQueryMsgRequest_<ContainerAllocator>::JSON_QUERY =
        
          "\"jnsdfskajd_fmgs.dlf\""
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mongodb_store_msgs::MongoQueryMsgRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mongodb_store_msgs::MongoQueryMsgRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mongodb_store_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'actionlib': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/actionlib/cmake/../msg'], 'mongodb_store_msgs': ['/local-ssd1/All_Custom_Msgs/PendingPackagesInitial/matlab_msg_gen_ros1/glnxa64/src/mongodb_store_msgs/msg', '/local-ssd1/All_Custom_Msgs/PendingPackagesInitial/matlab_msg_gen_ros1/glnxa64/devel/share/mongodb_store_msgs/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mongodb_store_msgs::MongoQueryMsgRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mongodb_store_msgs::MongoQueryMsgRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mongodb_store_msgs::MongoQueryMsgRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mongodb_store_msgs::MongoQueryMsgRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mongodb_store_msgs::MongoQueryMsgRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mongodb_store_msgs::MongoQueryMsgRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mongodb_store_msgs::MongoQueryMsgRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "466476bf283c0a0f8865b13eebc33609";
  }

  static const char* value(const ::mongodb_store_msgs::MongoQueryMsgRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x466476bf283c0a0fULL;
  static const uint64_t static_value2 = 0x8865b13eebc33609ULL;
};

template<class ContainerAllocator>
struct DataType< ::mongodb_store_msgs::MongoQueryMsgRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mongodb_store_msgs/MongoQueryMsgRequest";
  }

  static const char* value(const ::mongodb_store_msgs::MongoQueryMsgRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mongodb_store_msgs::MongoQueryMsgRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"\n"
"\n"
"string JSON_QUERY=\"jnsdfskajd_fmgs.dlf\"\n"
"\n"
"string database\n"
"string collection\n"
"\n"
"string type\n"
"\n"
"bool single\n"
"\n"
"StringPairList message_query\n"
"\n"
"StringPairList meta_query\n"
"\n"
"================================================================================\n"
"MSG: mongodb_store_msgs/StringPairList\n"
"StringPair[] pairs\n"
"\n"
"================================================================================\n"
"MSG: mongodb_store_msgs/StringPair\n"
"string first\n"
"string second\n"
;
  }

  static const char* value(const ::mongodb_store_msgs::MongoQueryMsgRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mongodb_store_msgs::MongoQueryMsgRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.database);
      stream.next(m.collection);
      stream.next(m.type);
      stream.next(m.single);
      stream.next(m.message_query);
      stream.next(m.meta_query);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MongoQueryMsgRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mongodb_store_msgs::MongoQueryMsgRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mongodb_store_msgs::MongoQueryMsgRequest_<ContainerAllocator>& v)
  {
    s << indent << "database: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.database);
    s << indent << "collection: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.collection);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "single: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.single);
    s << indent << "message_query: ";
    s << std::endl;
    Printer< ::mongodb_store_msgs::StringPairList_<ContainerAllocator> >::stream(s, indent + "  ", v.message_query);
    s << indent << "meta_query: ";
    s << std::endl;
    Printer< ::mongodb_store_msgs::StringPairList_<ContainerAllocator> >::stream(s, indent + "  ", v.meta_query);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MONGODB_STORE_MSGS_MESSAGE_MONGOQUERYMSGREQUEST_H
