// Generated by gencpp from file data_vis_msgs/TaskTree.msg
// DO NOT EDIT!


#ifndef DATA_VIS_MSGS_MESSAGE_TASKTREE_H
#define DATA_VIS_MSGS_MESSAGE_TASKTREE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <data_vis_msgs/Task.h>

namespace data_vis_msgs
{
template <class ContainerAllocator>
struct TaskTree_
{
  typedef TaskTree_<ContainerAllocator> Type;

  TaskTree_()
    : height(0)
    , width(0)
    , tree()  {
    }
  TaskTree_(const ContainerAllocator& _alloc)
    : height(0)
    , width(0)
    , tree(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _height_type;
  _height_type height;

   typedef int32_t _width_type;
  _width_type width;

   typedef std::vector< ::data_vis_msgs::Task_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::data_vis_msgs::Task_<ContainerAllocator> >::other >  _tree_type;
  _tree_type tree;





  typedef boost::shared_ptr< ::data_vis_msgs::TaskTree_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::data_vis_msgs::TaskTree_<ContainerAllocator> const> ConstPtr;

}; // struct TaskTree_

typedef ::data_vis_msgs::TaskTree_<std::allocator<void> > TaskTree;

typedef boost::shared_ptr< ::data_vis_msgs::TaskTree > TaskTreePtr;
typedef boost::shared_ptr< ::data_vis_msgs::TaskTree const> TaskTreeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::data_vis_msgs::TaskTree_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::data_vis_msgs::TaskTree_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::data_vis_msgs::TaskTree_<ContainerAllocator1> & lhs, const ::data_vis_msgs::TaskTree_<ContainerAllocator2> & rhs)
{
  return lhs.height == rhs.height &&
    lhs.width == rhs.width &&
    lhs.tree == rhs.tree;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::data_vis_msgs::TaskTree_<ContainerAllocator1> & lhs, const ::data_vis_msgs::TaskTree_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace data_vis_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::data_vis_msgs::TaskTree_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::data_vis_msgs::TaskTree_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::data_vis_msgs::TaskTree_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::data_vis_msgs::TaskTree_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::data_vis_msgs::TaskTree_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::data_vis_msgs::TaskTree_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::data_vis_msgs::TaskTree_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a4447319272190b864fdbc5675f1daae";
  }

  static const char* value(const ::data_vis_msgs::TaskTree_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa4447319272190b8ULL;
  static const uint64_t static_value2 = 0x64fdbc5675f1daaeULL;
};

template<class ContainerAllocator>
struct DataType< ::data_vis_msgs::TaskTree_<ContainerAllocator> >
{
  static const char* value()
  {
    return "data_vis_msgs/TaskTree";
  }

  static const char* value(const ::data_vis_msgs::TaskTree_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::data_vis_msgs::TaskTree_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 height\n"
"int32 width\n"
"Task[] tree\n"
"\n"
"================================================================================\n"
"MSG: data_vis_msgs/Task\n"
"int32 id\n"
"int32 parent\n"
"string color\n"
"string info\n"
"string type\n"
;
  }

  static const char* value(const ::data_vis_msgs::TaskTree_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::data_vis_msgs::TaskTree_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.height);
      stream.next(m.width);
      stream.next(m.tree);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TaskTree_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::data_vis_msgs::TaskTree_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::data_vis_msgs::TaskTree_<ContainerAllocator>& v)
  {
    s << indent << "height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.height);
    s << indent << "width: ";
    Printer<int32_t>::stream(s, indent + "  ", v.width);
    s << indent << "tree[]" << std::endl;
    for (size_t i = 0; i < v.tree.size(); ++i)
    {
      s << indent << "  tree[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::data_vis_msgs::Task_<ContainerAllocator> >::stream(s, indent + "    ", v.tree[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DATA_VIS_MSGS_MESSAGE_TASKTREE_H
