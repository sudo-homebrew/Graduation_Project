// Generated by gencpp from file robot_mechanism_controllers/JTCartesianControllerState.msg
// DO NOT EDIT!


#ifndef ROBOT_MECHANISM_CONTROLLERS_MESSAGE_JTCARTESIANCONTROLLERSTATE_H
#define ROBOT_MECHANISM_CONTROLLERS_MESSAGE_JTCARTESIANCONTROLLERSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Wrench.h>
#include <std_msgs/Float64MultiArray.h>
#include <std_msgs/Float64MultiArray.h>

namespace robot_mechanism_controllers
{
template <class ContainerAllocator>
struct JTCartesianControllerState_
{
  typedef JTCartesianControllerState_<ContainerAllocator> Type;

  JTCartesianControllerState_()
    : header()
    , x()
    , x_desi()
    , x_desi_filtered()
    , x_err()
    , xd()
    , xd_desi()
    , F()
    , tau_pose()
    , tau_posture()
    , tau()
    , J()
    , N()  {
    }
  JTCartesianControllerState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , x(_alloc)
    , x_desi(_alloc)
    , x_desi_filtered(_alloc)
    , x_err(_alloc)
    , xd(_alloc)
    , xd_desi(_alloc)
    , F(_alloc)
    , tau_pose(_alloc)
    , tau_posture(_alloc)
    , tau(_alloc)
    , J(_alloc)
    , N(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _x_type;
  _x_type x;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _x_desi_type;
  _x_desi_type x_desi;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _x_desi_filtered_type;
  _x_desi_filtered_type x_desi_filtered;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _x_err_type;
  _x_err_type x_err;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _xd_type;
  _xd_type xd;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _xd_desi_type;
  _xd_desi_type xd_desi;

   typedef  ::geometry_msgs::Wrench_<ContainerAllocator>  _F_type;
  _F_type F;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _tau_pose_type;
  _tau_pose_type tau_pose;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _tau_posture_type;
  _tau_posture_type tau_posture;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _tau_type;
  _tau_type tau;

   typedef  ::std_msgs::Float64MultiArray_<ContainerAllocator>  _J_type;
  _J_type J;

   typedef  ::std_msgs::Float64MultiArray_<ContainerAllocator>  _N_type;
  _N_type N;





  typedef boost::shared_ptr< ::robot_mechanism_controllers::JTCartesianControllerState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_mechanism_controllers::JTCartesianControllerState_<ContainerAllocator> const> ConstPtr;

}; // struct JTCartesianControllerState_

typedef ::robot_mechanism_controllers::JTCartesianControllerState_<std::allocator<void> > JTCartesianControllerState;

typedef boost::shared_ptr< ::robot_mechanism_controllers::JTCartesianControllerState > JTCartesianControllerStatePtr;
typedef boost::shared_ptr< ::robot_mechanism_controllers::JTCartesianControllerState const> JTCartesianControllerStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_mechanism_controllers::JTCartesianControllerState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_mechanism_controllers::JTCartesianControllerState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robot_mechanism_controllers

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'geometry_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/geometry_msgs/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'robot_mechanism_controllers': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/robot_mechanism_controllers/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robot_mechanism_controllers::JTCartesianControllerState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_mechanism_controllers::JTCartesianControllerState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_mechanism_controllers::JTCartesianControllerState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_mechanism_controllers::JTCartesianControllerState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_mechanism_controllers::JTCartesianControllerState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_mechanism_controllers::JTCartesianControllerState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_mechanism_controllers::JTCartesianControllerState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6ecdaa599ea0d27643819ae4cd4c43d0";
  }

  static const char* value(const ::robot_mechanism_controllers::JTCartesianControllerState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6ecdaa599ea0d276ULL;
  static const uint64_t static_value2 = 0x43819ae4cd4c43d0ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_mechanism_controllers::JTCartesianControllerState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_mechanism_controllers/JTCartesianControllerState";
  }

  static const char* value(const ::robot_mechanism_controllers::JTCartesianControllerState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_mechanism_controllers::JTCartesianControllerState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"geometry_msgs/PoseStamped x\n"
"geometry_msgs/PoseStamped x_desi\n"
"geometry_msgs/PoseStamped x_desi_filtered\n"
"geometry_msgs/Twist x_err\n"
"geometry_msgs/Twist xd\n"
"geometry_msgs/Twist xd_desi\n"
"geometry_msgs/Wrench F\n"
"float64[] tau_pose\n"
"float64[] tau_posture\n"
"float64[] tau\n"
"std_msgs/Float64MultiArray J\n"
"std_msgs/Float64MultiArray N\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of postion and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Wrench\n"
"# This represents force in free space, separated into\n"
"# its linear and angular parts.\n"
"Vector3  force\n"
"Vector3  torque\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float64MultiArray\n"
"# Please look at the MultiArrayLayout message definition for\n"
"# documentation on all multiarrays.\n"
"\n"
"MultiArrayLayout  layout        # specification of data layout\n"
"float64[]         data          # array of data\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayLayout\n"
"# The multiarray declares a generic multi-dimensional array of a\n"
"# particular data type.  Dimensions are ordered from outer most\n"
"# to inner most.\n"
"\n"
"MultiArrayDimension[] dim # Array of dimension properties\n"
"uint32 data_offset        # padding elements at front of data\n"
"\n"
"# Accessors should ALWAYS be written in terms of dimension stride\n"
"# and specified outer-most dimension first.\n"
"# \n"
"# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n"
"#\n"
"# A standard, 3-channel 640x480 image with interleaved color channels\n"
"# would be specified as:\n"
"#\n"
"# dim[0].label  = \"height\"\n"
"# dim[0].size   = 480\n"
"# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n"
"# dim[1].label  = \"width\"\n"
"# dim[1].size   = 640\n"
"# dim[1].stride = 3*640 = 1920\n"
"# dim[2].label  = \"channel\"\n"
"# dim[2].size   = 3\n"
"# dim[2].stride = 3\n"
"#\n"
"# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayDimension\n"
"string label   # label of given dimension\n"
"uint32 size    # size of given dimension (in type units)\n"
"uint32 stride  # stride of given dimension\n"
;
  }

  static const char* value(const ::robot_mechanism_controllers::JTCartesianControllerState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_mechanism_controllers::JTCartesianControllerState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.x);
      stream.next(m.x_desi);
      stream.next(m.x_desi_filtered);
      stream.next(m.x_err);
      stream.next(m.xd);
      stream.next(m.xd_desi);
      stream.next(m.F);
      stream.next(m.tau_pose);
      stream.next(m.tau_posture);
      stream.next(m.tau);
      stream.next(m.J);
      stream.next(m.N);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JTCartesianControllerState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_mechanism_controllers::JTCartesianControllerState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_mechanism_controllers::JTCartesianControllerState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "x: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.x);
    s << indent << "x_desi: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.x_desi);
    s << indent << "x_desi_filtered: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.x_desi_filtered);
    s << indent << "x_err: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.x_err);
    s << indent << "xd: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.xd);
    s << indent << "xd_desi: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.xd_desi);
    s << indent << "F: ";
    s << std::endl;
    Printer< ::geometry_msgs::Wrench_<ContainerAllocator> >::stream(s, indent + "  ", v.F);
    s << indent << "tau_pose[]" << std::endl;
    for (size_t i = 0; i < v.tau_pose.size(); ++i)
    {
      s << indent << "  tau_pose[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.tau_pose[i]);
    }
    s << indent << "tau_posture[]" << std::endl;
    for (size_t i = 0; i < v.tau_posture.size(); ++i)
    {
      s << indent << "  tau_posture[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.tau_posture[i]);
    }
    s << indent << "tau[]" << std::endl;
    for (size_t i = 0; i < v.tau.size(); ++i)
    {
      s << indent << "  tau[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.tau[i]);
    }
    s << indent << "J: ";
    s << std::endl;
    Printer< ::std_msgs::Float64MultiArray_<ContainerAllocator> >::stream(s, indent + "  ", v.J);
    s << indent << "N: ";
    s << std::endl;
    Printer< ::std_msgs::Float64MultiArray_<ContainerAllocator> >::stream(s, indent + "  ", v.N);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MECHANISM_CONTROLLERS_MESSAGE_JTCARTESIANCONTROLLERSTATE_H
