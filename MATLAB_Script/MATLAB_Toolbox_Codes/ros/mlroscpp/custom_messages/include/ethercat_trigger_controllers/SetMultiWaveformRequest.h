// Generated by gencpp from file ethercat_trigger_controllers/SetMultiWaveformRequest.msg
// DO NOT EDIT!


#ifndef ETHERCAT_TRIGGER_CONTROLLERS_MESSAGE_SETMULTIWAVEFORMREQUEST_H
#define ETHERCAT_TRIGGER_CONTROLLERS_MESSAGE_SETMULTIWAVEFORMREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <ethercat_trigger_controllers/MultiWaveform.h>

namespace ethercat_trigger_controllers
{
template <class ContainerAllocator>
struct SetMultiWaveformRequest_
{
  typedef SetMultiWaveformRequest_<ContainerAllocator> Type;

  SetMultiWaveformRequest_()
    : waveform()  {
    }
  SetMultiWaveformRequest_(const ContainerAllocator& _alloc)
    : waveform(_alloc)  {
  (void)_alloc;
    }



   typedef  ::ethercat_trigger_controllers::MultiWaveform_<ContainerAllocator>  _waveform_type;
  _waveform_type waveform;





  typedef boost::shared_ptr< ::ethercat_trigger_controllers::SetMultiWaveformRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ethercat_trigger_controllers::SetMultiWaveformRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetMultiWaveformRequest_

typedef ::ethercat_trigger_controllers::SetMultiWaveformRequest_<std::allocator<void> > SetMultiWaveformRequest;

typedef boost::shared_ptr< ::ethercat_trigger_controllers::SetMultiWaveformRequest > SetMultiWaveformRequestPtr;
typedef boost::shared_ptr< ::ethercat_trigger_controllers::SetMultiWaveformRequest const> SetMultiWaveformRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ethercat_trigger_controllers::SetMultiWaveformRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ethercat_trigger_controllers::SetMultiWaveformRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ethercat_trigger_controllers

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1339814/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'ethercat_trigger_controllers': ['/mathworks/home/pmurali/Documents/Test 3/matlab_msg_gen_ros1/glnxa64/src/ethercat_trigger_controllers/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ethercat_trigger_controllers::SetMultiWaveformRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ethercat_trigger_controllers::SetMultiWaveformRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ethercat_trigger_controllers::SetMultiWaveformRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ethercat_trigger_controllers::SetMultiWaveformRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ethercat_trigger_controllers::SetMultiWaveformRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ethercat_trigger_controllers::SetMultiWaveformRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ethercat_trigger_controllers::SetMultiWaveformRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bfedad8205348a9bcc90e6ae4b778d86";
  }

  static const char* value(const ::ethercat_trigger_controllers::SetMultiWaveformRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbfedad8205348a9bULL;
  static const uint64_t static_value2 = 0xcc90e6ae4b778d86ULL;
};

template<class ContainerAllocator>
struct DataType< ::ethercat_trigger_controllers::SetMultiWaveformRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ethercat_trigger_controllers/SetMultiWaveformRequest";
  }

  static const char* value(const ::ethercat_trigger_controllers::SetMultiWaveformRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ethercat_trigger_controllers::SetMultiWaveformRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "MultiWaveform waveform\n"
"\n"
"================================================================================\n"
"MSG: ethercat_trigger_controllers/MultiWaveform\n"
"# Transitions will occur at k * period + zero_offset + transitions[j].time, where j and\n"
"# k are integers.\n"
"\n"
"float64 period # Period of the waveform in seconds.\n"
"float64 zero_offset # Time corresponding to a time of 0 in times[] in seconds\n"
"MultiWaveformTransition[] transitions # Transitions in the waveform. Transition times should be in increasing order, and be between 0 (inclusive) and period (exclusive)\n"
"\n"
"================================================================================\n"
"MSG: ethercat_trigger_controllers/MultiWaveformTransition\n"
"# Used to specify a transition in the SetMultiWaveform service.\n"
"\n"
"float64 time # Transition time after start of period.\n"
"uint32 value # Value of the digital output after the transition time.\n"
"string topic # Topic to publish the transition timestamp to, or empty string if the transition should not be published.\n"
;
  }

  static const char* value(const ::ethercat_trigger_controllers::SetMultiWaveformRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ethercat_trigger_controllers::SetMultiWaveformRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.waveform);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetMultiWaveformRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ethercat_trigger_controllers::SetMultiWaveformRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ethercat_trigger_controllers::SetMultiWaveformRequest_<ContainerAllocator>& v)
  {
    s << indent << "waveform: ";
    s << std::endl;
    Printer< ::ethercat_trigger_controllers::MultiWaveform_<ContainerAllocator> >::stream(s, indent + "  ", v.waveform);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ETHERCAT_TRIGGER_CONTROLLERS_MESSAGE_SETMULTIWAVEFORMREQUEST_H
