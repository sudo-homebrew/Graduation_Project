// Generated by gencpp from file moveit_simple_grasps/GenerateGraspsGoal.msg
// DO NOT EDIT!


#ifndef MOVEIT_SIMPLE_GRASPS_MESSAGE_GENERATEGRASPSGOAL_H
#define MOVEIT_SIMPLE_GRASPS_MESSAGE_GENERATEGRASPSGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <moveit_simple_grasps/GraspGeneratorOptions.h>

namespace moveit_simple_grasps
{
template <class ContainerAllocator>
struct GenerateGraspsGoal_
{
  typedef GenerateGraspsGoal_<ContainerAllocator> Type;

  GenerateGraspsGoal_()
    : pose()
    , width(0.0)
    , options()  {
    }
  GenerateGraspsGoal_(const ContainerAllocator& _alloc)
    : pose(_alloc)
    , width(0.0)
    , options(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef double _width_type;
  _width_type width;

   typedef std::vector< ::moveit_simple_grasps::GraspGeneratorOptions_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::moveit_simple_grasps::GraspGeneratorOptions_<ContainerAllocator> >::other >  _options_type;
  _options_type options;





  typedef boost::shared_ptr< ::moveit_simple_grasps::GenerateGraspsGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::moveit_simple_grasps::GenerateGraspsGoal_<ContainerAllocator> const> ConstPtr;

}; // struct GenerateGraspsGoal_

typedef ::moveit_simple_grasps::GenerateGraspsGoal_<std::allocator<void> > GenerateGraspsGoal;

typedef boost::shared_ptr< ::moveit_simple_grasps::GenerateGraspsGoal > GenerateGraspsGoalPtr;
typedef boost::shared_ptr< ::moveit_simple_grasps::GenerateGraspsGoal const> GenerateGraspsGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::moveit_simple_grasps::GenerateGraspsGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::moveit_simple_grasps::GenerateGraspsGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace moveit_simple_grasps

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'shape_msgs': ['/local-ssd1/All_Custom_Msgs/packages_in_cluster/matlab_msg_gen_ros1/glnxa64/src/shape_msgs/msg'], 'actionlib_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1368129/matlab/sys/ros1/glnxa64/ros1/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/local-ssd1/All_Custom_Msgs/packages_in_cluster/matlab_msg_gen_ros1/glnxa64/src/sensor_msgs/msg'], 'actionlib': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1368129/matlab/sys/ros1/glnxa64/ros1/share/actionlib/cmake/../msg'], 'trajectory_msgs': ['/local-ssd1/All_Custom_Msgs/packages_in_cluster/matlab_msg_gen_ros1/glnxa64/src/trajectory_msgs/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1368129/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'object_recognition_msgs': ['/local-ssd1/All_Custom_Msgs/packages_in_cluster/matlab_msg_gen_ros1/glnxa64/src/object_recognition_msgs/msg', '/local-ssd1/All_Custom_Msgs/packages_in_cluster/matlab_msg_gen_ros1/glnxa64/devel/share/object_recognition_msgs/msg'], 'octomap_msgs': ['/local-ssd1/All_Custom_Msgs/packages_in_cluster/matlab_msg_gen_ros1/glnxa64/src/octomap_msgs/msg'], 'moveit_simple_grasps': ['/local-ssd1/All_Custom_Msgs/packages_in_cluster/matlab_msg_gen_ros1/glnxa64/src/moveit_simple_grasps/msg', '/local-ssd1/All_Custom_Msgs/packages_in_cluster/matlab_msg_gen_ros1/glnxa64/devel/share/moveit_simple_grasps/msg'], 'geometry_msgs': ['/local-ssd1/All_Custom_Msgs/packages_in_cluster/matlab_msg_gen_ros1/glnxa64/src/geometry_msgs/msg'], 'moveit_msgs': ['/local-ssd1/All_Custom_Msgs/packages_in_cluster/matlab_msg_gen_ros1/glnxa64/src/moveit_msgs/msg', '/local-ssd1/All_Custom_Msgs/packages_in_cluster/matlab_msg_gen_ros1/glnxa64/devel/share/moveit_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::moveit_simple_grasps::GenerateGraspsGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::moveit_simple_grasps::GenerateGraspsGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::moveit_simple_grasps::GenerateGraspsGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::moveit_simple_grasps::GenerateGraspsGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::moveit_simple_grasps::GenerateGraspsGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::moveit_simple_grasps::GenerateGraspsGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::moveit_simple_grasps::GenerateGraspsGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "162875df5b62e9fb4be6d2aa5a67176d";
  }

  static const char* value(const ::moveit_simple_grasps::GenerateGraspsGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x162875df5b62e9fbULL;
  static const uint64_t static_value2 = 0x4be6d2aa5a67176dULL;
};

template<class ContainerAllocator>
struct DataType< ::moveit_simple_grasps::GenerateGraspsGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "moveit_simple_grasps/GenerateGraspsGoal";
  }

  static const char* value(const ::moveit_simple_grasps::GenerateGraspsGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::moveit_simple_grasps::GenerateGraspsGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#goal\n"
"geometry_msgs/Pose pose\n"
"float64 width\n"
"moveit_simple_grasps/GraspGeneratorOptions[] options\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of postion and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: moveit_simple_grasps/GraspGeneratorOptions\n"
"uint8 grasp_axis\n"
"uint8 GRASP_AXIS_X = 0\n"
"uint8 GRASP_AXIS_Y = 1\n"
"uint8 GRASP_AXIS_Z = 2\n"
"\n"
"uint8 grasp_direction\n"
"uint8 GRASP_DIRECTION_UP = 0\n"
"uint8 GRASP_DIRECTION_DOWN = 1\n"
"\n"
"uint8 grasp_rotation\n"
"uint8 GRASP_ROTATION_HALF = 0\n"
"uint8 GRASP_ROTATION_FULL = 1\n"
;
  }

  static const char* value(const ::moveit_simple_grasps::GenerateGraspsGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::moveit_simple_grasps::GenerateGraspsGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose);
      stream.next(m.width);
      stream.next(m.options);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GenerateGraspsGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::moveit_simple_grasps::GenerateGraspsGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::moveit_simple_grasps::GenerateGraspsGoal_<ContainerAllocator>& v)
  {
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "width: ";
    Printer<double>::stream(s, indent + "  ", v.width);
    s << indent << "options[]" << std::endl;
    for (size_t i = 0; i < v.options.size(); ++i)
    {
      s << indent << "  options[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::moveit_simple_grasps::GraspGeneratorOptions_<ContainerAllocator> >::stream(s, indent + "    ", v.options[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOVEIT_SIMPLE_GRASPS_MESSAGE_GENERATEGRASPSGOAL_H
