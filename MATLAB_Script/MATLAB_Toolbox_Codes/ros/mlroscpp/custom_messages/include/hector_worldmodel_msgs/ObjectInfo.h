// Generated by gencpp from file hector_worldmodel_msgs/ObjectInfo.msg
// DO NOT EDIT!


#ifndef HECTOR_WORLDMODEL_MSGS_MESSAGE_OBJECTINFO_H
#define HECTOR_WORLDMODEL_MSGS_MESSAGE_OBJECTINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hector_worldmodel_msgs
{
template <class ContainerAllocator>
struct ObjectInfo_
{
  typedef ObjectInfo_<ContainerAllocator> Type;

  ObjectInfo_()
    : class_id()
    , object_id()
    , name()
    , support(0.0)  {
    }
  ObjectInfo_(const ContainerAllocator& _alloc)
    : class_id(_alloc)
    , object_id(_alloc)
    , name(_alloc)
    , support(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _class_id_type;
  _class_id_type class_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _object_id_type;
  _object_id_type object_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef float _support_type;
  _support_type support;





  typedef boost::shared_ptr< ::hector_worldmodel_msgs::ObjectInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hector_worldmodel_msgs::ObjectInfo_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectInfo_

typedef ::hector_worldmodel_msgs::ObjectInfo_<std::allocator<void> > ObjectInfo;

typedef boost::shared_ptr< ::hector_worldmodel_msgs::ObjectInfo > ObjectInfoPtr;
typedef boost::shared_ptr< ::hector_worldmodel_msgs::ObjectInfo const> ObjectInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hector_worldmodel_msgs::ObjectInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hector_worldmodel_msgs::ObjectInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hector_worldmodel_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/sensor_msgs/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'hector_worldmodel_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/hector_worldmodel_msgs/msg'], 'geometry_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/geometry_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hector_worldmodel_msgs::ObjectInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hector_worldmodel_msgs::ObjectInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hector_worldmodel_msgs::ObjectInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hector_worldmodel_msgs::ObjectInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hector_worldmodel_msgs::ObjectInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hector_worldmodel_msgs::ObjectInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hector_worldmodel_msgs::ObjectInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d394469df540d3963132564bb1e1b6c6";
  }

  static const char* value(const ::hector_worldmodel_msgs::ObjectInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd394469df540d396ULL;
  static const uint64_t static_value2 = 0x3132564bb1e1b6c6ULL;
};

template<class ContainerAllocator>
struct DataType< ::hector_worldmodel_msgs::ObjectInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hector_worldmodel_msgs/ObjectInfo";
  }

  static const char* value(const ::hector_worldmodel_msgs::ObjectInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hector_worldmodel_msgs::ObjectInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# hector_worldmodel_msgs/ObjectInfo\n"
"# This message contains information about the estimated class affiliation, object id and corresponding support\n"
"\n"
"# A string identifying the object's class (all objects of a class look the same)\n"
"string class_id\n"
"\n"
"# A string identifying the specific object\n"
"string object_id\n"
"\n"
"# A string that contains the name or a description of the specific object\n"
"string name\n"
"\n"
"# The support (degree of belief) of the object's presence given as log odd ratio\n"
"float32 support\n"
"\n"
;
  }

  static const char* value(const ::hector_worldmodel_msgs::ObjectInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hector_worldmodel_msgs::ObjectInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.class_id);
      stream.next(m.object_id);
      stream.next(m.name);
      stream.next(m.support);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hector_worldmodel_msgs::ObjectInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hector_worldmodel_msgs::ObjectInfo_<ContainerAllocator>& v)
  {
    s << indent << "class_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.class_id);
    s << indent << "object_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.object_id);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "support: ";
    Printer<float>::stream(s, indent + "  ", v.support);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HECTOR_WORLDMODEL_MSGS_MESSAGE_OBJECTINFO_H
