// Generated by gencpp from file hector_worldmodel_msgs/SetObjectStateRequest.msg
// DO NOT EDIT!


#ifndef HECTOR_WORLDMODEL_MSGS_MESSAGE_SETOBJECTSTATEREQUEST_H
#define HECTOR_WORLDMODEL_MSGS_MESSAGE_SETOBJECTSTATEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <hector_worldmodel_msgs/ObjectState.h>

namespace hector_worldmodel_msgs
{
template <class ContainerAllocator>
struct SetObjectStateRequest_
{
  typedef SetObjectStateRequest_<ContainerAllocator> Type;

  SetObjectStateRequest_()
    : object_id()
    , new_state()  {
    }
  SetObjectStateRequest_(const ContainerAllocator& _alloc)
    : object_id(_alloc)
    , new_state(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _object_id_type;
  _object_id_type object_id;

   typedef  ::hector_worldmodel_msgs::ObjectState_<ContainerAllocator>  _new_state_type;
  _new_state_type new_state;





  typedef boost::shared_ptr< ::hector_worldmodel_msgs::SetObjectStateRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hector_worldmodel_msgs::SetObjectStateRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetObjectStateRequest_

typedef ::hector_worldmodel_msgs::SetObjectStateRequest_<std::allocator<void> > SetObjectStateRequest;

typedef boost::shared_ptr< ::hector_worldmodel_msgs::SetObjectStateRequest > SetObjectStateRequestPtr;
typedef boost::shared_ptr< ::hector_worldmodel_msgs::SetObjectStateRequest const> SetObjectStateRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hector_worldmodel_msgs::SetObjectStateRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hector_worldmodel_msgs::SetObjectStateRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hector_worldmodel_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1352567/matlab/sys/ros1/glnxa64/ros1/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1352567/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/pmurali.Brobot.j1352567/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'hector_worldmodel_msgs': ['/mathworks/home/pmurali/Documents/rosjava_messages/GEN-4-6/6/matlab_msg_gen_ros1/glnxa64/src/hector_worldmodel_msgs/msg'], 'geometry_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1352567/matlab/sys/ros1/glnxa64/ros1/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hector_worldmodel_msgs::SetObjectStateRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hector_worldmodel_msgs::SetObjectStateRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hector_worldmodel_msgs::SetObjectStateRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hector_worldmodel_msgs::SetObjectStateRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hector_worldmodel_msgs::SetObjectStateRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hector_worldmodel_msgs::SetObjectStateRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hector_worldmodel_msgs::SetObjectStateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f1ca4bb9d91ddc88e48d16dceb6ab0e5";
  }

  static const char* value(const ::hector_worldmodel_msgs::SetObjectStateRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf1ca4bb9d91ddc88ULL;
  static const uint64_t static_value2 = 0xe48d16dceb6ab0e5ULL;
};

template<class ContainerAllocator>
struct DataType< ::hector_worldmodel_msgs::SetObjectStateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hector_worldmodel_msgs/SetObjectStateRequest";
  }

  static const char* value(const ::hector_worldmodel_msgs::SetObjectStateRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hector_worldmodel_msgs::SetObjectStateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"\n"
"string object_id\n"
"ObjectState new_state\n"
"\n"
"================================================================================\n"
"MSG: hector_worldmodel_msgs/ObjectState\n"
"# The state of an object estimate used to track\n"
"# states smaller than 0 disable all updates\n"
"\n"
"# Predefined states. Use states smaller than 0 or bigger than 63 for user defined states.\n"
"int8 UNKNOWN = 0\n"
"int8 PENDING = 1\n"
"int8 ACTIVE  = 2\n"
"int8 INACTIVE = 3\n"
"int8 CONFIRMED = -1\n"
"int8 DISCARDED = -2\n"
"int8 APPROACHING = -3\n"
"\n"
"int8 state\n"
;
  }

  static const char* value(const ::hector_worldmodel_msgs::SetObjectStateRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hector_worldmodel_msgs::SetObjectStateRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.object_id);
      stream.next(m.new_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetObjectStateRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hector_worldmodel_msgs::SetObjectStateRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hector_worldmodel_msgs::SetObjectStateRequest_<ContainerAllocator>& v)
  {
    s << indent << "object_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.object_id);
    s << indent << "new_state: ";
    s << std::endl;
    Printer< ::hector_worldmodel_msgs::ObjectState_<ContainerAllocator> >::stream(s, indent + "  ", v.new_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HECTOR_WORLDMODEL_MSGS_MESSAGE_SETOBJECTSTATEREQUEST_H
