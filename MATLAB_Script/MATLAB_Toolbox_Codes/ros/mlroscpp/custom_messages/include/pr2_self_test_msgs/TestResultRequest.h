// Generated by gencpp from file pr2_self_test_msgs/TestResultRequest.msg
// DO NOT EDIT!


#ifndef PR2_SELF_TEST_MSGS_MESSAGE_TESTRESULTREQUEST_H
#define PR2_SELF_TEST_MSGS_MESSAGE_TESTRESULTREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <pr2_self_test_msgs/Plot.h>
#include <pr2_self_test_msgs/TestParam.h>
#include <pr2_self_test_msgs/TestValue.h>

namespace pr2_self_test_msgs
{
template <class ContainerAllocator>
struct TestResultRequest_
{
  typedef TestResultRequest_<ContainerAllocator> Type;

  TestResultRequest_()
    : html_result()
    , text_summary()
    , result(0)
    , plots()
    , params()
    , values()  {
    }
  TestResultRequest_(const ContainerAllocator& _alloc)
    : html_result(_alloc)
    , text_summary(_alloc)
    , result(0)
    , plots(_alloc)
    , params(_alloc)
    , values(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _html_result_type;
  _html_result_type html_result;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _text_summary_type;
  _text_summary_type text_summary;

   typedef int8_t _result_type;
  _result_type result;

   typedef std::vector< ::pr2_self_test_msgs::Plot_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::pr2_self_test_msgs::Plot_<ContainerAllocator> >::other >  _plots_type;
  _plots_type plots;

   typedef std::vector< ::pr2_self_test_msgs::TestParam_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::pr2_self_test_msgs::TestParam_<ContainerAllocator> >::other >  _params_type;
  _params_type params;

   typedef std::vector< ::pr2_self_test_msgs::TestValue_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::pr2_self_test_msgs::TestValue_<ContainerAllocator> >::other >  _values_type;
  _values_type values;



  enum {
 
    RESULT_PASS = 0,
 
    RESULT_FAIL = 1,
 
    RESULT_HUMAN_REQUIRED = 2,
  };


  typedef boost::shared_ptr< ::pr2_self_test_msgs::TestResultRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr2_self_test_msgs::TestResultRequest_<ContainerAllocator> const> ConstPtr;

}; // struct TestResultRequest_

typedef ::pr2_self_test_msgs::TestResultRequest_<std::allocator<void> > TestResultRequest;

typedef boost::shared_ptr< ::pr2_self_test_msgs::TestResultRequest > TestResultRequestPtr;
typedef boost::shared_ptr< ::pr2_self_test_msgs::TestResultRequest const> TestResultRequestConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pr2_self_test_msgs::TestResultRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pr2_self_test_msgs::TestResultRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pr2_self_test_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'pr2_self_test_msgs': ['/mathworks/home/pmurali/Documents/P/matlab_msg_gen_ros1/glnxa64/src/pr2_self_test_msgs/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1339814/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pr2_self_test_msgs::TestResultRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pr2_self_test_msgs::TestResultRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pr2_self_test_msgs::TestResultRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pr2_self_test_msgs::TestResultRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr2_self_test_msgs::TestResultRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr2_self_test_msgs::TestResultRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pr2_self_test_msgs::TestResultRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3bc5fb8af85db1b7baaa0efa94b53344";
  }

  static const char* value(const ::pr2_self_test_msgs::TestResultRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3bc5fb8af85db1b7ULL;
  static const uint64_t static_value2 = 0xbaaa0efa94b53344ULL;
};

template<class ContainerAllocator>
struct DataType< ::pr2_self_test_msgs::TestResultRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pr2_self_test_msgs/TestResultRequest";
  }

  static const char* value(const ::pr2_self_test_msgs::TestResultRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pr2_self_test_msgs::TestResultRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"byte RESULT_PASS = 0\n"
"byte RESULT_FAIL = 1\n"
"byte RESULT_HUMAN_REQUIRED = 2\n"
"\n"
"string html_result\n"
"string text_summary\n"
"byte result\n"
"Plot[] plots\n"
"TestParam[] params\n"
"TestValue[] values\n"
"\n"
"================================================================================\n"
"MSG: pr2_self_test_msgs/Plot\n"
"# Plot data, used for PR2 self tests\n"
"string title\n"
"byte[] image\n"
"string image_format\n"
"\n"
"================================================================================\n"
"MSG: pr2_self_test_msgs/TestParam\n"
"# Test param is value that is set during qualification\n"
"string key\n"
"string value\n"
"================================================================================\n"
"MSG: pr2_self_test_msgs/TestValue\n"
"# TestValue is recorded value during PR2 qualification\n"
"string key\n"
"string value\n"
"string min\n"
"string max\n"
;
  }

  static const char* value(const ::pr2_self_test_msgs::TestResultRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pr2_self_test_msgs::TestResultRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.html_result);
      stream.next(m.text_summary);
      stream.next(m.result);
      stream.next(m.plots);
      stream.next(m.params);
      stream.next(m.values);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TestResultRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr2_self_test_msgs::TestResultRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pr2_self_test_msgs::TestResultRequest_<ContainerAllocator>& v)
  {
    s << indent << "html_result: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.html_result);
    s << indent << "text_summary: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.text_summary);
    s << indent << "result: ";
    Printer<int8_t>::stream(s, indent + "  ", v.result);
    s << indent << "plots[]" << std::endl;
    for (size_t i = 0; i < v.plots.size(); ++i)
    {
      s << indent << "  plots[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::pr2_self_test_msgs::Plot_<ContainerAllocator> >::stream(s, indent + "    ", v.plots[i]);
    }
    s << indent << "params[]" << std::endl;
    for (size_t i = 0; i < v.params.size(); ++i)
    {
      s << indent << "  params[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::pr2_self_test_msgs::TestParam_<ContainerAllocator> >::stream(s, indent + "    ", v.params[i]);
    }
    s << indent << "values[]" << std::endl;
    for (size_t i = 0; i < v.values.size(); ++i)
    {
      s << indent << "  values[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::pr2_self_test_msgs::TestValue_<ContainerAllocator> >::stream(s, indent + "    ", v.values[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PR2_SELF_TEST_MSGS_MESSAGE_TESTRESULTREQUEST_H
