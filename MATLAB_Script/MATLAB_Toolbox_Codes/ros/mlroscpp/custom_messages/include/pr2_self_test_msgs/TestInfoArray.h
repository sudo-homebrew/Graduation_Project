// Generated by gencpp from file pr2_self_test_msgs/TestInfoArray.msg
// DO NOT EDIT!


#ifndef PR2_SELF_TEST_MSGS_MESSAGE_TESTINFOARRAY_H
#define PR2_SELF_TEST_MSGS_MESSAGE_TESTINFOARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <pr2_self_test_msgs/TestInfo.h>

namespace pr2_self_test_msgs
{
template <class ContainerAllocator>
struct TestInfoArray_
{
  typedef TestInfoArray_<ContainerAllocator> Type;

  TestInfoArray_()
    : data()  {
    }
  TestInfoArray_(const ContainerAllocator& _alloc)
    : data(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::pr2_self_test_msgs::TestInfo_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::pr2_self_test_msgs::TestInfo_<ContainerAllocator> >::other >  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::pr2_self_test_msgs::TestInfoArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr2_self_test_msgs::TestInfoArray_<ContainerAllocator> const> ConstPtr;

}; // struct TestInfoArray_

typedef ::pr2_self_test_msgs::TestInfoArray_<std::allocator<void> > TestInfoArray;

typedef boost::shared_ptr< ::pr2_self_test_msgs::TestInfoArray > TestInfoArrayPtr;
typedef boost::shared_ptr< ::pr2_self_test_msgs::TestInfoArray const> TestInfoArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pr2_self_test_msgs::TestInfoArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pr2_self_test_msgs::TestInfoArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pr2_self_test_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'pr2_self_test_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/pr2_self_test_msgs/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pr2_self_test_msgs::TestInfoArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pr2_self_test_msgs::TestInfoArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pr2_self_test_msgs::TestInfoArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pr2_self_test_msgs::TestInfoArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr2_self_test_msgs::TestInfoArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr2_self_test_msgs::TestInfoArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pr2_self_test_msgs::TestInfoArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1ed4c76da9520649c668cc322d33542a";
  }

  static const char* value(const ::pr2_self_test_msgs::TestInfoArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1ed4c76da9520649ULL;
  static const uint64_t static_value2 = 0xc668cc322d33542aULL;
};

template<class ContainerAllocator>
struct DataType< ::pr2_self_test_msgs::TestInfoArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pr2_self_test_msgs/TestInfoArray";
  }

  static const char* value(const ::pr2_self_test_msgs::TestInfoArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pr2_self_test_msgs::TestInfoArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "TestInfo[] data\n"
"================================================================================\n"
"MSG: pr2_self_test_msgs/TestInfo\n"
"string serial\n"
"string test_name\n"
"byte test_status # 127, not launched, 0, ok; 1, warn; 2, error; 3, stale\n"
"string bay_name\n"
"string machine\n"
"int32 board\n"
"int32 breaker\n"
"string power_status\n"
"byte estop # 0, off; 1, on\n"
"int32 elapsed\n"
"string status_msg\n"
;
  }

  static const char* value(const ::pr2_self_test_msgs::TestInfoArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pr2_self_test_msgs::TestInfoArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TestInfoArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr2_self_test_msgs::TestInfoArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pr2_self_test_msgs::TestInfoArray_<ContainerAllocator>& v)
  {
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::pr2_self_test_msgs::TestInfo_<ContainerAllocator> >::stream(s, indent + "    ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PR2_SELF_TEST_MSGS_MESSAGE_TESTINFOARRAY_H
