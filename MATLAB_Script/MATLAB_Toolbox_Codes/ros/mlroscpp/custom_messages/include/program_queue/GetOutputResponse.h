// Generated by gencpp from file program_queue/GetOutputResponse.msg
// DO NOT EDIT!


#ifndef PROGRAM_QUEUE_MESSAGE_GETOUTPUTRESPONSE_H
#define PROGRAM_QUEUE_MESSAGE_GETOUTPUTRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <program_queue/Output.h>

namespace program_queue
{
template <class ContainerAllocator>
struct GetOutputResponse_
{
  typedef GetOutputResponse_<ContainerAllocator> Type;

  GetOutputResponse_()
    : output()  {
    }
  GetOutputResponse_(const ContainerAllocator& _alloc)
    : output(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::program_queue::Output_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::program_queue::Output_<ContainerAllocator> >::other >  _output_type;
  _output_type output;





  typedef boost::shared_ptr< ::program_queue::GetOutputResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::program_queue::GetOutputResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetOutputResponse_

typedef ::program_queue::GetOutputResponse_<std::allocator<void> > GetOutputResponse;

typedef boost::shared_ptr< ::program_queue::GetOutputResponse > GetOutputResponsePtr;
typedef boost::shared_ptr< ::program_queue::GetOutputResponse const> GetOutputResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::program_queue::GetOutputResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::program_queue::GetOutputResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace program_queue

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'program_queue': ['/mathworks/home/pmurali/Documents/P/matlab_msg_gen_ros1/glnxa64/src/program_queue/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1339814/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/pmurali.Brobot.j1339814/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::program_queue::GetOutputResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::program_queue::GetOutputResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::program_queue::GetOutputResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::program_queue::GetOutputResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::program_queue::GetOutputResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::program_queue::GetOutputResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::program_queue::GetOutputResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2f07868317033df679710a7da1873f15";
  }

  static const char* value(const ::program_queue::GetOutputResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2f07868317033df6ULL;
  static const uint64_t static_value2 = 0x79710a7da1873f15ULL;
};

template<class ContainerAllocator>
struct DataType< ::program_queue::GetOutputResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "program_queue/GetOutputResponse";
  }

  static const char* value(const ::program_queue::GetOutputResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::program_queue::GetOutputResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Output[] output\n"
"\n"
"\n"
"================================================================================\n"
"MSG: program_queue/Output\n"
"Header header\n"
"string output\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::program_queue::GetOutputResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::program_queue::GetOutputResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.output);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetOutputResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::program_queue::GetOutputResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::program_queue::GetOutputResponse_<ContainerAllocator>& v)
  {
    s << indent << "output[]" << std::endl;
    for (size_t i = 0; i < v.output.size(); ++i)
    {
      s << indent << "  output[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::program_queue::Output_<ContainerAllocator> >::stream(s, indent + "    ", v.output[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROGRAM_QUEUE_MESSAGE_GETOUTPUTRESPONSE_H
