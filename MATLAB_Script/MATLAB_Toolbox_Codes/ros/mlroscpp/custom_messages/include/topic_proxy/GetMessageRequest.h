// Generated by gencpp from file topic_proxy/GetMessageRequest.msg
// DO NOT EDIT!


#ifndef TOPIC_PROXY_MESSAGE_GETMESSAGEREQUEST_H
#define TOPIC_PROXY_MESSAGE_GETMESSAGEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace topic_proxy
{
template <class ContainerAllocator>
struct GetMessageRequest_
{
  typedef GetMessageRequest_<ContainerAllocator> Type;

  GetMessageRequest_()
    : topic()
    , compressed(false)
    , timeout()  {
    }
  GetMessageRequest_(const ContainerAllocator& _alloc)
    : topic(_alloc)
    , compressed(false)
    , timeout()  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _topic_type;
  _topic_type topic;

   typedef uint8_t _compressed_type;
  _compressed_type compressed;

   typedef ros::Duration _timeout_type;
  _timeout_type timeout;





  typedef boost::shared_ptr< ::topic_proxy::GetMessageRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::topic_proxy::GetMessageRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetMessageRequest_

typedef ::topic_proxy::GetMessageRequest_<std::allocator<void> > GetMessageRequest;

typedef boost::shared_ptr< ::topic_proxy::GetMessageRequest > GetMessageRequestPtr;
typedef boost::shared_ptr< ::topic_proxy::GetMessageRequest const> GetMessageRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::topic_proxy::GetMessageRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::topic_proxy::GetMessageRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace topic_proxy

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'topic_proxy': ['/mathworks/home/pmurali/Documents/S/matlab_msg_gen_ros1/glnxa64/src/topic_proxy/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1339814/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'blob': ['/mathworks/home/pmurali/Documents/S/matlab_msg_gen_ros1/glnxa64/src/blob/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::topic_proxy::GetMessageRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::topic_proxy::GetMessageRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::topic_proxy::GetMessageRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::topic_proxy::GetMessageRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::topic_proxy::GetMessageRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::topic_proxy::GetMessageRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::topic_proxy::GetMessageRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d58786c4419ea2772a24d9424036fbec";
  }

  static const char* value(const ::topic_proxy::GetMessageRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd58786c4419ea277ULL;
  static const uint64_t static_value2 = 0x2a24d9424036fbecULL;
};

template<class ContainerAllocator>
struct DataType< ::topic_proxy::GetMessageRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "topic_proxy/GetMessageRequest";
  }

  static const char* value(const ::topic_proxy::GetMessageRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::topic_proxy::GetMessageRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"\n"
"\n"
"string topic\n"
"bool compressed\n"
"duration timeout\n"
;
  }

  static const char* value(const ::topic_proxy::GetMessageRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::topic_proxy::GetMessageRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.topic);
      stream.next(m.compressed);
      stream.next(m.timeout);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetMessageRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::topic_proxy::GetMessageRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::topic_proxy::GetMessageRequest_<ContainerAllocator>& v)
  {
    s << indent << "topic: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.topic);
    s << indent << "compressed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.compressed);
    s << indent << "timeout: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.timeout);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TOPIC_PROXY_MESSAGE_GETMESSAGEREQUEST_H
