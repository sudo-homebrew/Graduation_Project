// Generated by gencpp from file topic_proxy/GetMessageResponse.msg
// DO NOT EDIT!


#ifndef TOPIC_PROXY_MESSAGE_GETMESSAGERESPONSE_H
#define TOPIC_PROXY_MESSAGE_GETMESSAGERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <topic_proxy/MessageInstance.h>

namespace topic_proxy
{
template <class ContainerAllocator>
struct GetMessageResponse_
{
  typedef GetMessageResponse_<ContainerAllocator> Type;

  GetMessageResponse_()
    : message()  {
    }
  GetMessageResponse_(const ContainerAllocator& _alloc)
    : message(_alloc)  {
  (void)_alloc;
    }



   typedef  ::topic_proxy::MessageInstance_<ContainerAllocator>  _message_type;
  _message_type message;





  typedef boost::shared_ptr< ::topic_proxy::GetMessageResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::topic_proxy::GetMessageResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetMessageResponse_

typedef ::topic_proxy::GetMessageResponse_<std::allocator<void> > GetMessageResponse;

typedef boost::shared_ptr< ::topic_proxy::GetMessageResponse > GetMessageResponsePtr;
typedef boost::shared_ptr< ::topic_proxy::GetMessageResponse const> GetMessageResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::topic_proxy::GetMessageResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::topic_proxy::GetMessageResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace topic_proxy

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'topic_proxy': ['/mathworks/home/pmurali/Documents/S/matlab_msg_gen_ros1/glnxa64/src/topic_proxy/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1339814/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'blob': ['/mathworks/home/pmurali/Documents/S/matlab_msg_gen_ros1/glnxa64/src/blob/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::topic_proxy::GetMessageResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::topic_proxy::GetMessageResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::topic_proxy::GetMessageResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::topic_proxy::GetMessageResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::topic_proxy::GetMessageResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::topic_proxy::GetMessageResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::topic_proxy::GetMessageResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8d90d5a41b9999d61bdf79869246e250";
  }

  static const char* value(const ::topic_proxy::GetMessageResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8d90d5a41b9999d6ULL;
  static const uint64_t static_value2 = 0x1bdf79869246e250ULL;
};

template<class ContainerAllocator>
struct DataType< ::topic_proxy::GetMessageResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "topic_proxy/GetMessageResponse";
  }

  static const char* value(const ::topic_proxy::GetMessageResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::topic_proxy::GetMessageResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "MessageInstance message\n"
"\n"
"\n"
"================================================================================\n"
"MSG: topic_proxy/MessageInstance\n"
"string topic\n"
"string md5sum\n"
"string type\n"
"string message_definition\n"
"blob/Blob blob\n"
"\n"
"================================================================================\n"
"MSG: blob/Blob\n"
"bool compressed\n"
"uint8[] data\n"
;
  }

  static const char* value(const ::topic_proxy::GetMessageResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::topic_proxy::GetMessageResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetMessageResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::topic_proxy::GetMessageResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::topic_proxy::GetMessageResponse_<ContainerAllocator>& v)
  {
    s << indent << "message: ";
    s << std::endl;
    Printer< ::topic_proxy::MessageInstance_<ContainerAllocator> >::stream(s, indent + "  ", v.message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TOPIC_PROXY_MESSAGE_GETMESSAGERESPONSE_H
