// Generated by gencpp from file roseus/VariableArray.msg
// DO NOT EDIT!


#ifndef ROSEUS_MESSAGE_VARIABLEARRAY_H
#define ROSEUS_MESSAGE_VARIABLEARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/String.h>

namespace roseus
{
template <class ContainerAllocator>
struct VariableArray_
{
  typedef VariableArray_<ContainerAllocator> Type;

  VariableArray_()
    : float32_data()
    , float64_data()
    , int16_data()
    , int32_data()
    , int64_data()
    , int8_data()
    , uint16_data()
    , uint32_data()
    , uint64_data()
    , uint8_data()
    , bool_data()
    , time_data()
    , duration_data()
    , string_data()  {
    }
  VariableArray_(const ContainerAllocator& _alloc)
    : float32_data(_alloc)
    , float64_data(_alloc)
    , int16_data(_alloc)
    , int32_data(_alloc)
    , int64_data(_alloc)
    , int8_data(_alloc)
    , uint16_data(_alloc)
    , uint32_data(_alloc)
    , uint64_data(_alloc)
    , uint8_data(_alloc)
    , bool_data(_alloc)
    , time_data(_alloc)
    , duration_data(_alloc)
    , string_data(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _float32_data_type;
  _float32_data_type float32_data;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _float64_data_type;
  _float64_data_type float64_data;

   typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _int16_data_type;
  _int16_data_type int16_data;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _int32_data_type;
  _int32_data_type int32_data;

   typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _int64_data_type;
  _int64_data_type int64_data;

   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _int8_data_type;
  _int8_data_type int8_data;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _uint16_data_type;
  _uint16_data_type uint16_data;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _uint32_data_type;
  _uint32_data_type uint32_data;

   typedef std::vector<uint64_t, typename ContainerAllocator::template rebind<uint64_t>::other >  _uint64_data_type;
  _uint64_data_type uint64_data;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _uint8_data_type;
  _uint8_data_type uint8_data;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _bool_data_type;
  _bool_data_type bool_data;

   typedef std::vector<ros::Time, typename ContainerAllocator::template rebind<ros::Time>::other >  _time_data_type;
  _time_data_type time_data;

   typedef std::vector<ros::Duration, typename ContainerAllocator::template rebind<ros::Duration>::other >  _duration_data_type;
  _duration_data_type duration_data;

   typedef std::vector< ::std_msgs::String_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::String_<ContainerAllocator> >::other >  _string_data_type;
  _string_data_type string_data;





  typedef boost::shared_ptr< ::roseus::VariableArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roseus::VariableArray_<ContainerAllocator> const> ConstPtr;

}; // struct VariableArray_

typedef ::roseus::VariableArray_<std::allocator<void> > VariableArray;

typedef boost::shared_ptr< ::roseus::VariableArray > VariableArrayPtr;
typedef boost::shared_ptr< ::roseus::VariableArray const> VariableArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roseus::VariableArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roseus::VariableArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roseus::VariableArray_<ContainerAllocator1> & lhs, const ::roseus::VariableArray_<ContainerAllocator2> & rhs)
{
  return lhs.float32_data == rhs.float32_data &&
    lhs.float64_data == rhs.float64_data &&
    lhs.int16_data == rhs.int16_data &&
    lhs.int32_data == rhs.int32_data &&
    lhs.int64_data == rhs.int64_data &&
    lhs.int8_data == rhs.int8_data &&
    lhs.uint16_data == rhs.uint16_data &&
    lhs.uint32_data == rhs.uint32_data &&
    lhs.uint64_data == rhs.uint64_data &&
    lhs.uint8_data == rhs.uint8_data &&
    lhs.bool_data == rhs.bool_data &&
    lhs.time_data == rhs.time_data &&
    lhs.duration_data == rhs.duration_data &&
    lhs.string_data == rhs.string_data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roseus::VariableArray_<ContainerAllocator1> & lhs, const ::roseus::VariableArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roseus

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::roseus::VariableArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roseus::VariableArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roseus::VariableArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roseus::VariableArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roseus::VariableArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roseus::VariableArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roseus::VariableArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aebf8af723dcbdb6782481457d175157";
  }

  static const char* value(const ::roseus::VariableArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaebf8af723dcbdb6ULL;
  static const uint64_t static_value2 = 0x782481457d175157ULL;
};

template<class ContainerAllocator>
struct DataType< ::roseus::VariableArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roseus/VariableArray";
  }

  static const char* value(const ::roseus::VariableArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roseus::VariableArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message is only for geneus test\n"
"float32[]  float32_data\n"
"float64[]  float64_data\n"
"  int16[]  int16_data\n"
"  int32[]  int32_data\n"
"  int64[]  int64_data\n"
"   int8[]  int8_data\n"
" uint16[]  uint16_data\n"
" uint32[]  uint32_data\n"
" uint64[]  uint64_data\n"
"  uint8[]  uint8_data\n"
"   bool[]  bool_data\n"
"   time[]  time_data\n"
"duration[]  duration_data\n"
"std_msgs/String[] string_data\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
;
  }

  static const char* value(const ::roseus::VariableArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roseus::VariableArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.float32_data);
      stream.next(m.float64_data);
      stream.next(m.int16_data);
      stream.next(m.int32_data);
      stream.next(m.int64_data);
      stream.next(m.int8_data);
      stream.next(m.uint16_data);
      stream.next(m.uint32_data);
      stream.next(m.uint64_data);
      stream.next(m.uint8_data);
      stream.next(m.bool_data);
      stream.next(m.time_data);
      stream.next(m.duration_data);
      stream.next(m.string_data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VariableArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roseus::VariableArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roseus::VariableArray_<ContainerAllocator>& v)
  {
    s << indent << "float32_data[]" << std::endl;
    for (size_t i = 0; i < v.float32_data.size(); ++i)
    {
      s << indent << "  float32_data[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.float32_data[i]);
    }
    s << indent << "float64_data[]" << std::endl;
    for (size_t i = 0; i < v.float64_data.size(); ++i)
    {
      s << indent << "  float64_data[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.float64_data[i]);
    }
    s << indent << "int16_data[]" << std::endl;
    for (size_t i = 0; i < v.int16_data.size(); ++i)
    {
      s << indent << "  int16_data[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.int16_data[i]);
    }
    s << indent << "int32_data[]" << std::endl;
    for (size_t i = 0; i < v.int32_data.size(); ++i)
    {
      s << indent << "  int32_data[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.int32_data[i]);
    }
    s << indent << "int64_data[]" << std::endl;
    for (size_t i = 0; i < v.int64_data.size(); ++i)
    {
      s << indent << "  int64_data[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.int64_data[i]);
    }
    s << indent << "int8_data[]" << std::endl;
    for (size_t i = 0; i < v.int8_data.size(); ++i)
    {
      s << indent << "  int8_data[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.int8_data[i]);
    }
    s << indent << "uint16_data[]" << std::endl;
    for (size_t i = 0; i < v.uint16_data.size(); ++i)
    {
      s << indent << "  uint16_data[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.uint16_data[i]);
    }
    s << indent << "uint32_data[]" << std::endl;
    for (size_t i = 0; i < v.uint32_data.size(); ++i)
    {
      s << indent << "  uint32_data[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.uint32_data[i]);
    }
    s << indent << "uint64_data[]" << std::endl;
    for (size_t i = 0; i < v.uint64_data.size(); ++i)
    {
      s << indent << "  uint64_data[" << i << "]: ";
      Printer<uint64_t>::stream(s, indent + "  ", v.uint64_data[i]);
    }
    s << indent << "uint8_data[]" << std::endl;
    for (size_t i = 0; i < v.uint8_data.size(); ++i)
    {
      s << indent << "  uint8_data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.uint8_data[i]);
    }
    s << indent << "bool_data[]" << std::endl;
    for (size_t i = 0; i < v.bool_data.size(); ++i)
    {
      s << indent << "  bool_data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.bool_data[i]);
    }
    s << indent << "time_data[]" << std::endl;
    for (size_t i = 0; i < v.time_data.size(); ++i)
    {
      s << indent << "  time_data[" << i << "]: ";
      Printer<ros::Time>::stream(s, indent + "  ", v.time_data[i]);
    }
    s << indent << "duration_data[]" << std::endl;
    for (size_t i = 0; i < v.duration_data.size(); ++i)
    {
      s << indent << "  duration_data[" << i << "]: ";
      Printer<ros::Duration>::stream(s, indent + "  ", v.duration_data[i]);
    }
    s << indent << "string_data[]" << std::endl;
    for (size_t i = 0; i < v.string_data.size(); ++i)
    {
      s << indent << "  string_data[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "    ", v.string_data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSEUS_MESSAGE_VARIABLEARRAY_H
