// Generated by gencpp from file multisense_ros/RawLidarData.msg
// DO NOT EDIT!


#ifndef MULTISENSE_ROS_MESSAGE_RAWLIDARDATA_H
#define MULTISENSE_ROS_MESSAGE_RAWLIDARDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace multisense_ros
{
template <class ContainerAllocator>
struct RawLidarData_
{
  typedef RawLidarData_<ContainerAllocator> Type;

  RawLidarData_()
    : scan_count(0)
    , time_start()
    , time_end()
    , angle_start(0)
    , angle_end(0)
    , distance()
    , intensity()  {
    }
  RawLidarData_(const ContainerAllocator& _alloc)
    : scan_count(0)
    , time_start()
    , time_end()
    , angle_start(0)
    , angle_end(0)
    , distance(_alloc)
    , intensity(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _scan_count_type;
  _scan_count_type scan_count;

   typedef ros::Time _time_start_type;
  _time_start_type time_start;

   typedef ros::Time _time_end_type;
  _time_end_type time_end;

   typedef int32_t _angle_start_type;
  _angle_start_type angle_start;

   typedef int32_t _angle_end_type;
  _angle_end_type angle_end;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _distance_type;
  _distance_type distance;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _intensity_type;
  _intensity_type intensity;





  typedef boost::shared_ptr< ::multisense_ros::RawLidarData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::multisense_ros::RawLidarData_<ContainerAllocator> const> ConstPtr;

}; // struct RawLidarData_

typedef ::multisense_ros::RawLidarData_<std::allocator<void> > RawLidarData;

typedef boost::shared_ptr< ::multisense_ros::RawLidarData > RawLidarDataPtr;
typedef boost::shared_ptr< ::multisense_ros::RawLidarData const> RawLidarDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::multisense_ros::RawLidarData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::multisense_ros::RawLidarData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::multisense_ros::RawLidarData_<ContainerAllocator1> & lhs, const ::multisense_ros::RawLidarData_<ContainerAllocator2> & rhs)
{
  return lhs.scan_count == rhs.scan_count &&
    lhs.time_start == rhs.time_start &&
    lhs.time_end == rhs.time_end &&
    lhs.angle_start == rhs.angle_start &&
    lhs.angle_end == rhs.angle_end &&
    lhs.distance == rhs.distance &&
    lhs.intensity == rhs.intensity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::multisense_ros::RawLidarData_<ContainerAllocator1> & lhs, const ::multisense_ros::RawLidarData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace multisense_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::multisense_ros::RawLidarData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multisense_ros::RawLidarData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multisense_ros::RawLidarData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multisense_ros::RawLidarData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multisense_ros::RawLidarData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multisense_ros::RawLidarData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::multisense_ros::RawLidarData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c6ed0471015a3cddab804db8e53836c1";
  }

  static const char* value(const ::multisense_ros::RawLidarData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc6ed0471015a3cddULL;
  static const uint64_t static_value2 = 0xab804db8e53836c1ULL;
};

template<class ContainerAllocator>
struct DataType< ::multisense_ros::RawLidarData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "multisense_ros/RawLidarData";
  }

  static const char* value(const ::multisense_ros::RawLidarData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::multisense_ros::RawLidarData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 scan_count\n"
"time time_start\n"
"time time_end\n"
"int32 angle_start\n"
"int32 angle_end\n"
"uint32[] distance\n"
"uint32[] intensity\n"
;
  }

  static const char* value(const ::multisense_ros::RawLidarData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::multisense_ros::RawLidarData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.scan_count);
      stream.next(m.time_start);
      stream.next(m.time_end);
      stream.next(m.angle_start);
      stream.next(m.angle_end);
      stream.next(m.distance);
      stream.next(m.intensity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RawLidarData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::multisense_ros::RawLidarData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::multisense_ros::RawLidarData_<ContainerAllocator>& v)
  {
    s << indent << "scan_count: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.scan_count);
    s << indent << "time_start: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time_start);
    s << indent << "time_end: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time_end);
    s << indent << "angle_start: ";
    Printer<int32_t>::stream(s, indent + "  ", v.angle_start);
    s << indent << "angle_end: ";
    Printer<int32_t>::stream(s, indent + "  ", v.angle_end);
    s << indent << "distance[]" << std::endl;
    for (size_t i = 0; i < v.distance.size(); ++i)
    {
      s << indent << "  distance[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.distance[i]);
    }
    s << indent << "intensity[]" << std::endl;
    for (size_t i = 0; i < v.intensity.size(); ++i)
    {
      s << indent << "  intensity[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.intensity[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MULTISENSE_ROS_MESSAGE_RAWLIDARDATA_H
