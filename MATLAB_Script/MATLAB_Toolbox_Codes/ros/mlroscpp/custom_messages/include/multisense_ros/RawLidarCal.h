// Generated by gencpp from file multisense_ros/RawLidarCal.msg
// DO NOT EDIT!


#ifndef MULTISENSE_ROS_MESSAGE_RAWLIDARCAL_H
#define MULTISENSE_ROS_MESSAGE_RAWLIDARCAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace multisense_ros
{
template <class ContainerAllocator>
struct RawLidarCal_
{
  typedef RawLidarCal_<ContainerAllocator> Type;

  RawLidarCal_()
    : laserToSpindle()
    , cameraToSpindleFixed()  {
      laserToSpindle.assign(0.0);

      cameraToSpindleFixed.assign(0.0);
  }
  RawLidarCal_(const ContainerAllocator& _alloc)
    : laserToSpindle()
    , cameraToSpindleFixed()  {
  (void)_alloc;
      laserToSpindle.assign(0.0);

      cameraToSpindleFixed.assign(0.0);
  }



   typedef boost::array<float, 16>  _laserToSpindle_type;
  _laserToSpindle_type laserToSpindle;

   typedef boost::array<float, 16>  _cameraToSpindleFixed_type;
  _cameraToSpindleFixed_type cameraToSpindleFixed;





  typedef boost::shared_ptr< ::multisense_ros::RawLidarCal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::multisense_ros::RawLidarCal_<ContainerAllocator> const> ConstPtr;

}; // struct RawLidarCal_

typedef ::multisense_ros::RawLidarCal_<std::allocator<void> > RawLidarCal;

typedef boost::shared_ptr< ::multisense_ros::RawLidarCal > RawLidarCalPtr;
typedef boost::shared_ptr< ::multisense_ros::RawLidarCal const> RawLidarCalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::multisense_ros::RawLidarCal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::multisense_ros::RawLidarCal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::multisense_ros::RawLidarCal_<ContainerAllocator1> & lhs, const ::multisense_ros::RawLidarCal_<ContainerAllocator2> & rhs)
{
  return lhs.laserToSpindle == rhs.laserToSpindle &&
    lhs.cameraToSpindleFixed == rhs.cameraToSpindleFixed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::multisense_ros::RawLidarCal_<ContainerAllocator1> & lhs, const ::multisense_ros::RawLidarCal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace multisense_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::multisense_ros::RawLidarCal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multisense_ros::RawLidarCal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multisense_ros::RawLidarCal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multisense_ros::RawLidarCal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multisense_ros::RawLidarCal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multisense_ros::RawLidarCal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::multisense_ros::RawLidarCal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a40a2eda974181d5f5f21ff840e3a6ff";
  }

  static const char* value(const ::multisense_ros::RawLidarCal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa40a2eda974181d5ULL;
  static const uint64_t static_value2 = 0xf5f21ff840e3a6ffULL;
};

template<class ContainerAllocator>
struct DataType< ::multisense_ros::RawLidarCal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "multisense_ros/RawLidarCal";
  }

  static const char* value(const ::multisense_ros::RawLidarCal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::multisense_ros::RawLidarCal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[16] laserToSpindle\n"
"float32[16] cameraToSpindleFixed\n"
;
  }

  static const char* value(const ::multisense_ros::RawLidarCal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::multisense_ros::RawLidarCal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.laserToSpindle);
      stream.next(m.cameraToSpindleFixed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RawLidarCal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::multisense_ros::RawLidarCal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::multisense_ros::RawLidarCal_<ContainerAllocator>& v)
  {
    s << indent << "laserToSpindle[]" << std::endl;
    for (size_t i = 0; i < v.laserToSpindle.size(); ++i)
    {
      s << indent << "  laserToSpindle[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.laserToSpindle[i]);
    }
    s << indent << "cameraToSpindleFixed[]" << std::endl;
    for (size_t i = 0; i < v.cameraToSpindleFixed.size(); ++i)
    {
      s << indent << "  cameraToSpindleFixed[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.cameraToSpindleFixed[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MULTISENSE_ROS_MESSAGE_RAWLIDARCAL_H
