// Generated by gencpp from file multisense_ros/RawCamCal.msg
// DO NOT EDIT!


#ifndef MULTISENSE_ROS_MESSAGE_RAWCAMCAL_H
#define MULTISENSE_ROS_MESSAGE_RAWCAMCAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace multisense_ros
{
template <class ContainerAllocator>
struct RawCamCal_
{
  typedef RawCamCal_<ContainerAllocator> Type;

  RawCamCal_()
    : left_M()
    , left_D()
    , left_R()
    , left_P()
    , right_M()
    , right_D()
    , right_R()
    , right_P()  {
      left_M.assign(0.0);

      left_D.assign(0.0);

      left_R.assign(0.0);

      left_P.assign(0.0);

      right_M.assign(0.0);

      right_D.assign(0.0);

      right_R.assign(0.0);

      right_P.assign(0.0);
  }
  RawCamCal_(const ContainerAllocator& _alloc)
    : left_M()
    , left_D()
    , left_R()
    , left_P()
    , right_M()
    , right_D()
    , right_R()
    , right_P()  {
  (void)_alloc;
      left_M.assign(0.0);

      left_D.assign(0.0);

      left_R.assign(0.0);

      left_P.assign(0.0);

      right_M.assign(0.0);

      right_D.assign(0.0);

      right_R.assign(0.0);

      right_P.assign(0.0);
  }



   typedef boost::array<float, 9>  _left_M_type;
  _left_M_type left_M;

   typedef boost::array<float, 8>  _left_D_type;
  _left_D_type left_D;

   typedef boost::array<float, 9>  _left_R_type;
  _left_R_type left_R;

   typedef boost::array<float, 12>  _left_P_type;
  _left_P_type left_P;

   typedef boost::array<float, 9>  _right_M_type;
  _right_M_type right_M;

   typedef boost::array<float, 8>  _right_D_type;
  _right_D_type right_D;

   typedef boost::array<float, 9>  _right_R_type;
  _right_R_type right_R;

   typedef boost::array<float, 12>  _right_P_type;
  _right_P_type right_P;





  typedef boost::shared_ptr< ::multisense_ros::RawCamCal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::multisense_ros::RawCamCal_<ContainerAllocator> const> ConstPtr;

}; // struct RawCamCal_

typedef ::multisense_ros::RawCamCal_<std::allocator<void> > RawCamCal;

typedef boost::shared_ptr< ::multisense_ros::RawCamCal > RawCamCalPtr;
typedef boost::shared_ptr< ::multisense_ros::RawCamCal const> RawCamCalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::multisense_ros::RawCamCal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::multisense_ros::RawCamCal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::multisense_ros::RawCamCal_<ContainerAllocator1> & lhs, const ::multisense_ros::RawCamCal_<ContainerAllocator2> & rhs)
{
  return lhs.left_M == rhs.left_M &&
    lhs.left_D == rhs.left_D &&
    lhs.left_R == rhs.left_R &&
    lhs.left_P == rhs.left_P &&
    lhs.right_M == rhs.right_M &&
    lhs.right_D == rhs.right_D &&
    lhs.right_R == rhs.right_R &&
    lhs.right_P == rhs.right_P;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::multisense_ros::RawCamCal_<ContainerAllocator1> & lhs, const ::multisense_ros::RawCamCal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace multisense_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::multisense_ros::RawCamCal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multisense_ros::RawCamCal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multisense_ros::RawCamCal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multisense_ros::RawCamCal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multisense_ros::RawCamCal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multisense_ros::RawCamCal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::multisense_ros::RawCamCal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1b8c86de8eb033489e8e49fb5532702e";
  }

  static const char* value(const ::multisense_ros::RawCamCal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1b8c86de8eb03348ULL;
  static const uint64_t static_value2 = 0x9e8e49fb5532702eULL;
};

template<class ContainerAllocator>
struct DataType< ::multisense_ros::RawCamCal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "multisense_ros/RawCamCal";
  }

  static const char* value(const ::multisense_ros::RawCamCal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::multisense_ros::RawCamCal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[9]  left_M\n"
"float32[8]  left_D\n"
"float32[9]  left_R\n"
"float32[12] left_P\n"
"float32[9]  right_M\n"
"float32[8]  right_D\n"
"float32[9]  right_R\n"
"float32[12] right_P\n"
;
  }

  static const char* value(const ::multisense_ros::RawCamCal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::multisense_ros::RawCamCal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left_M);
      stream.next(m.left_D);
      stream.next(m.left_R);
      stream.next(m.left_P);
      stream.next(m.right_M);
      stream.next(m.right_D);
      stream.next(m.right_R);
      stream.next(m.right_P);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RawCamCal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::multisense_ros::RawCamCal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::multisense_ros::RawCamCal_<ContainerAllocator>& v)
  {
    s << indent << "left_M[]" << std::endl;
    for (size_t i = 0; i < v.left_M.size(); ++i)
    {
      s << indent << "  left_M[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.left_M[i]);
    }
    s << indent << "left_D[]" << std::endl;
    for (size_t i = 0; i < v.left_D.size(); ++i)
    {
      s << indent << "  left_D[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.left_D[i]);
    }
    s << indent << "left_R[]" << std::endl;
    for (size_t i = 0; i < v.left_R.size(); ++i)
    {
      s << indent << "  left_R[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.left_R[i]);
    }
    s << indent << "left_P[]" << std::endl;
    for (size_t i = 0; i < v.left_P.size(); ++i)
    {
      s << indent << "  left_P[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.left_P[i]);
    }
    s << indent << "right_M[]" << std::endl;
    for (size_t i = 0; i < v.right_M.size(); ++i)
    {
      s << indent << "  right_M[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.right_M[i]);
    }
    s << indent << "right_D[]" << std::endl;
    for (size_t i = 0; i < v.right_D.size(); ++i)
    {
      s << indent << "  right_D[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.right_D[i]);
    }
    s << indent << "right_R[]" << std::endl;
    for (size_t i = 0; i < v.right_R.size(); ++i)
    {
      s << indent << "  right_R[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.right_R[i]);
    }
    s << indent << "right_P[]" << std::endl;
    for (size_t i = 0; i < v.right_P.size(); ++i)
    {
      s << indent << "  right_P[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.right_P[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MULTISENSE_ROS_MESSAGE_RAWCAMCAL_H
