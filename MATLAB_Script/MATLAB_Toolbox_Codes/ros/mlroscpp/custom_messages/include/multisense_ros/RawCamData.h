// Generated by gencpp from file multisense_ros/RawCamData.msg
// DO NOT EDIT!


#ifndef MULTISENSE_ROS_MESSAGE_RAWCAMDATA_H
#define MULTISENSE_ROS_MESSAGE_RAWCAMDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace multisense_ros
{
template <class ContainerAllocator>
struct RawCamData_
{
  typedef RawCamData_<ContainerAllocator> Type;

  RawCamData_()
    : frames_per_second(0.0)
    , gain(0.0)
    , exposure_time(0)
    , frame_count(0)
    , time_stamp()
    , angle(0)
    , width(0)
    , height(0)
    , gray_scale_image()
    , disparity_image()  {
    }
  RawCamData_(const ContainerAllocator& _alloc)
    : frames_per_second(0.0)
    , gain(0.0)
    , exposure_time(0)
    , frame_count(0)
    , time_stamp()
    , angle(0)
    , width(0)
    , height(0)
    , gray_scale_image(_alloc)
    , disparity_image(_alloc)  {
  (void)_alloc;
    }



   typedef float _frames_per_second_type;
  _frames_per_second_type frames_per_second;

   typedef float _gain_type;
  _gain_type gain;

   typedef uint32_t _exposure_time_type;
  _exposure_time_type exposure_time;

   typedef uint32_t _frame_count_type;
  _frame_count_type frame_count;

   typedef ros::Time _time_stamp_type;
  _time_stamp_type time_stamp;

   typedef uint32_t _angle_type;
  _angle_type angle;

   typedef uint16_t _width_type;
  _width_type width;

   typedef uint16_t _height_type;
  _height_type height;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _gray_scale_image_type;
  _gray_scale_image_type gray_scale_image;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _disparity_image_type;
  _disparity_image_type disparity_image;





  typedef boost::shared_ptr< ::multisense_ros::RawCamData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::multisense_ros::RawCamData_<ContainerAllocator> const> ConstPtr;

}; // struct RawCamData_

typedef ::multisense_ros::RawCamData_<std::allocator<void> > RawCamData;

typedef boost::shared_ptr< ::multisense_ros::RawCamData > RawCamDataPtr;
typedef boost::shared_ptr< ::multisense_ros::RawCamData const> RawCamDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::multisense_ros::RawCamData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::multisense_ros::RawCamData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::multisense_ros::RawCamData_<ContainerAllocator1> & lhs, const ::multisense_ros::RawCamData_<ContainerAllocator2> & rhs)
{
  return lhs.frames_per_second == rhs.frames_per_second &&
    lhs.gain == rhs.gain &&
    lhs.exposure_time == rhs.exposure_time &&
    lhs.frame_count == rhs.frame_count &&
    lhs.time_stamp == rhs.time_stamp &&
    lhs.angle == rhs.angle &&
    lhs.width == rhs.width &&
    lhs.height == rhs.height &&
    lhs.gray_scale_image == rhs.gray_scale_image &&
    lhs.disparity_image == rhs.disparity_image;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::multisense_ros::RawCamData_<ContainerAllocator1> & lhs, const ::multisense_ros::RawCamData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace multisense_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::multisense_ros::RawCamData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multisense_ros::RawCamData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multisense_ros::RawCamData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multisense_ros::RawCamData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multisense_ros::RawCamData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multisense_ros::RawCamData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::multisense_ros::RawCamData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5088c19778d4fa49ece5e07c0880c7e3";
  }

  static const char* value(const ::multisense_ros::RawCamData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5088c19778d4fa49ULL;
  static const uint64_t static_value2 = 0xece5e07c0880c7e3ULL;
};

template<class ContainerAllocator>
struct DataType< ::multisense_ros::RawCamData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "multisense_ros/RawCamData";
  }

  static const char* value(const ::multisense_ros::RawCamData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::multisense_ros::RawCamData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 frames_per_second\n"
"float32 gain\n"
"uint32  exposure_time\n"
"uint32  frame_count\n"
"time    time_stamp\n"
"uint32  angle\n"
"uint16  width\n"
"uint16  height\n"
"uint8[] gray_scale_image\n"
"uint16[] disparity_image\n"
;
  }

  static const char* value(const ::multisense_ros::RawCamData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::multisense_ros::RawCamData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frames_per_second);
      stream.next(m.gain);
      stream.next(m.exposure_time);
      stream.next(m.frame_count);
      stream.next(m.time_stamp);
      stream.next(m.angle);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.gray_scale_image);
      stream.next(m.disparity_image);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RawCamData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::multisense_ros::RawCamData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::multisense_ros::RawCamData_<ContainerAllocator>& v)
  {
    s << indent << "frames_per_second: ";
    Printer<float>::stream(s, indent + "  ", v.frames_per_second);
    s << indent << "gain: ";
    Printer<float>::stream(s, indent + "  ", v.gain);
    s << indent << "exposure_time: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.exposure_time);
    s << indent << "frame_count: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.frame_count);
    s << indent << "time_stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time_stamp);
    s << indent << "angle: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.angle);
    s << indent << "width: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.height);
    s << indent << "gray_scale_image[]" << std::endl;
    for (size_t i = 0; i < v.gray_scale_image.size(); ++i)
    {
      s << indent << "  gray_scale_image[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.gray_scale_image[i]);
    }
    s << indent << "disparity_image[]" << std::endl;
    for (size_t i = 0; i < v.disparity_image.size(); ++i)
    {
      s << indent << "  disparity_image[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.disparity_image[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MULTISENSE_ROS_MESSAGE_RAWCAMDATA_H
