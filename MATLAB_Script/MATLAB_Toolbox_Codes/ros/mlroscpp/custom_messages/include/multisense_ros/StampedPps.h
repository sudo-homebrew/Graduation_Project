// Generated by gencpp from file multisense_ros/StampedPps.msg
// DO NOT EDIT!


#ifndef MULTISENSE_ROS_MESSAGE_STAMPEDPPS_H
#define MULTISENSE_ROS_MESSAGE_STAMPEDPPS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace multisense_ros
{
template <class ContainerAllocator>
struct StampedPps_
{
  typedef StampedPps_<ContainerAllocator> Type;

  StampedPps_()
    : data()
    , host_time()  {
    }
  StampedPps_(const ContainerAllocator& _alloc)
    : data()
    , host_time()  {
  (void)_alloc;
    }



   typedef ros::Time _data_type;
  _data_type data;

   typedef ros::Time _host_time_type;
  _host_time_type host_time;





  typedef boost::shared_ptr< ::multisense_ros::StampedPps_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::multisense_ros::StampedPps_<ContainerAllocator> const> ConstPtr;

}; // struct StampedPps_

typedef ::multisense_ros::StampedPps_<std::allocator<void> > StampedPps;

typedef boost::shared_ptr< ::multisense_ros::StampedPps > StampedPpsPtr;
typedef boost::shared_ptr< ::multisense_ros::StampedPps const> StampedPpsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::multisense_ros::StampedPps_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::multisense_ros::StampedPps_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::multisense_ros::StampedPps_<ContainerAllocator1> & lhs, const ::multisense_ros::StampedPps_<ContainerAllocator2> & rhs)
{
  return lhs.data == rhs.data &&
    lhs.host_time == rhs.host_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::multisense_ros::StampedPps_<ContainerAllocator1> & lhs, const ::multisense_ros::StampedPps_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace multisense_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::multisense_ros::StampedPps_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::multisense_ros::StampedPps_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multisense_ros::StampedPps_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::multisense_ros::StampedPps_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multisense_ros::StampedPps_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::multisense_ros::StampedPps_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::multisense_ros::StampedPps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ee2f8d6ea6dc30440398fb554199fa0d";
  }

  static const char* value(const ::multisense_ros::StampedPps_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xee2f8d6ea6dc3044ULL;
  static const uint64_t static_value2 = 0x0398fb554199fa0dULL;
};

template<class ContainerAllocator>
struct DataType< ::multisense_ros::StampedPps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "multisense_ros/StampedPps";
  }

  static const char* value(const ::multisense_ros::StampedPps_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::multisense_ros::StampedPps_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time     data\n"
"time     host_time\n"
;
  }

  static const char* value(const ::multisense_ros::StampedPps_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::multisense_ros::StampedPps_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
      stream.next(m.host_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StampedPps_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::multisense_ros::StampedPps_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::multisense_ros::StampedPps_<ContainerAllocator>& v)
  {
    s << indent << "data: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.data);
    s << indent << "host_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.host_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MULTISENSE_ROS_MESSAGE_STAMPEDPPS_H
