// Generated by gencpp from file gateway_msgs/RemoteRuleWithStatus.msg
// DO NOT EDIT!


#ifndef GATEWAY_MSGS_MESSAGE_REMOTERULEWITHSTATUS_H
#define GATEWAY_MSGS_MESSAGE_REMOTERULEWITHSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <gateway_msgs/RemoteRule.h>

namespace gateway_msgs
{
template <class ContainerAllocator>
struct RemoteRuleWithStatus_
{
  typedef RemoteRuleWithStatus_<ContainerAllocator> Type;

  RemoteRuleWithStatus_()
    : remote_rule()
    , status()  {
    }
  RemoteRuleWithStatus_(const ContainerAllocator& _alloc)
    : remote_rule(_alloc)
    , status(_alloc)  {
  (void)_alloc;
    }



   typedef  ::gateway_msgs::RemoteRule_<ContainerAllocator>  _remote_rule_type;
  _remote_rule_type remote_rule;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_type;
  _status_type status;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UNKNOWN)
  #undef UNKNOWN
#endif
#if defined(_WIN32) && defined(PENDING)
  #undef PENDING
#endif
#if defined(_WIN32) && defined(ACCEPTED)
  #undef ACCEPTED
#endif
#if defined(_WIN32) && defined(BLOCKED)
  #undef BLOCKED
#endif
#if defined(_WIN32) && defined(RESEND)
  #undef RESEND
#endif


  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  UNKNOWN;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PENDING;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  ACCEPTED;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  BLOCKED;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  RESEND;

  typedef boost::shared_ptr< ::gateway_msgs::RemoteRuleWithStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gateway_msgs::RemoteRuleWithStatus_<ContainerAllocator> const> ConstPtr;

}; // struct RemoteRuleWithStatus_

typedef ::gateway_msgs::RemoteRuleWithStatus_<std::allocator<void> > RemoteRuleWithStatus;

typedef boost::shared_ptr< ::gateway_msgs::RemoteRuleWithStatus > RemoteRuleWithStatusPtr;
typedef boost::shared_ptr< ::gateway_msgs::RemoteRuleWithStatus const> RemoteRuleWithStatusConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      RemoteRuleWithStatus_<ContainerAllocator>::UNKNOWN =
        
          "unknown"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      RemoteRuleWithStatus_<ContainerAllocator>::PENDING =
        
          "pending"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      RemoteRuleWithStatus_<ContainerAllocator>::ACCEPTED =
        
          "accepted"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      RemoteRuleWithStatus_<ContainerAllocator>::BLOCKED =
        
          "blocked"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > 
      RemoteRuleWithStatus_<ContainerAllocator>::RESEND =
        
          "resend"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gateway_msgs::RemoteRuleWithStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gateway_msgs::RemoteRuleWithStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gateway_msgs::RemoteRuleWithStatus_<ContainerAllocator1> & lhs, const ::gateway_msgs::RemoteRuleWithStatus_<ContainerAllocator2> & rhs)
{
  return lhs.remote_rule == rhs.remote_rule &&
    lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gateway_msgs::RemoteRuleWithStatus_<ContainerAllocator1> & lhs, const ::gateway_msgs::RemoteRuleWithStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gateway_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gateway_msgs::RemoteRuleWithStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gateway_msgs::RemoteRuleWithStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gateway_msgs::RemoteRuleWithStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gateway_msgs::RemoteRuleWithStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gateway_msgs::RemoteRuleWithStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gateway_msgs::RemoteRuleWithStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gateway_msgs::RemoteRuleWithStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7892d8834068a87e345fff91adc26a5e";
  }

  static const char* value(const ::gateway_msgs::RemoteRuleWithStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7892d8834068a87eULL;
  static const uint64_t static_value2 = 0x345fff91adc26a5eULL;
};

template<class ContainerAllocator>
struct DataType< ::gateway_msgs::RemoteRuleWithStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gateway_msgs/RemoteRuleWithStatus";
  }

  static const char* value(const ::gateway_msgs::RemoteRuleWithStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gateway_msgs::RemoteRuleWithStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The remote rule whose status is being defined here\n"
"RemoteRule remote_rule\n"
"\n"
"# Whether the flip is still pending, was accepted \n"
"string UNKNOWN=unknown\n"
"string PENDING=pending\n"
"string ACCEPTED=accepted\n"
"string BLOCKED=blocked\n"
"string RESEND=resend\n"
"string status\n"
"\n"
"================================================================================\n"
"MSG: gateway_msgs/RemoteRule\n"
"# Definition for a flip. It represents either:\n"
"#\n"
"# 1) an existing flipped connection (from the local gateway)\n"
"# 2) a rule that is put on a watchlist\n"
"\n"
"# The target recipient of the flip\n"
"string gateway\n"
"\n"
"# Connection has the following parameters that need setting\n"
"# - name : fully qualified name of the connection (str)\n"
"# - type : connection type (str)\n"
"#  \n"
"# Use one of the types defined in Connection string constants:\n"
"#     (publisher, subscriber, service, action_client, action_server)\n"
"#\n"
"# - node : name of the node it originates from (str)(optional)\n"
"#\n"
"# Node name is necessary, for instance, if you have multiple subscribers\n"
"# publishing to a single topic. Most of the time it is not necessary,\n"
"# but in some cases it helps refine the rule. It helps refine the rule.\n"
"#\n"
"Rule rule\n"
"\n"
"================================================================================\n"
"MSG: gateway_msgs/Rule\n"
"# Standard gateway connection rule\n"
"\n"
"# type of connection (from gateway_msgs.msg.Connection)\n"
"string type\n"
"\n"
"# this is the topic/service name or the action base name (a regex is supported)\n"
"string name \n"
"\n"
"# (optional) an optional node name can be provided. if node name is not provided\n"
"# then all nodes are matched (also supports regex)\n"
"string node\n"
;
  }

  static const char* value(const ::gateway_msgs::RemoteRuleWithStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gateway_msgs::RemoteRuleWithStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.remote_rule);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RemoteRuleWithStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gateway_msgs::RemoteRuleWithStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gateway_msgs::RemoteRuleWithStatus_<ContainerAllocator>& v)
  {
    s << indent << "remote_rule: ";
    s << std::endl;
    Printer< ::gateway_msgs::RemoteRule_<ContainerAllocator> >::stream(s, indent + "  ", v.remote_rule);
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GATEWAY_MSGS_MESSAGE_REMOTERULEWITHSTATUS_H
