// Generated by gencpp from file gateway_msgs/RemoteGateway.msg
// DO NOT EDIT!


#ifndef GATEWAY_MSGS_MESSAGE_REMOTEGATEWAY_H
#define GATEWAY_MSGS_MESSAGE_REMOTEGATEWAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <gateway_msgs/ConnectionStatistics.h>
#include <gateway_msgs/Rule.h>
#include <gateway_msgs/RemoteRule.h>
#include <gateway_msgs/RemoteRule.h>

namespace gateway_msgs
{
template <class ContainerAllocator>
struct RemoteGateway_
{
  typedef RemoteGateway_<ContainerAllocator> Type;

  RemoteGateway_()
    : name()
    , ip()
    , firewall(false)
    , conn_stats()
    , public_interface()
    , flipped_interface()
    , pulled_interface()  {
    }
  RemoteGateway_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , ip(_alloc)
    , firewall(false)
    , conn_stats(_alloc)
    , public_interface(_alloc)
    , flipped_interface(_alloc)
    , pulled_interface(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ip_type;
  _ip_type ip;

   typedef uint8_t _firewall_type;
  _firewall_type firewall;

   typedef  ::gateway_msgs::ConnectionStatistics_<ContainerAllocator>  _conn_stats_type;
  _conn_stats_type conn_stats;

   typedef std::vector< ::gateway_msgs::Rule_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::gateway_msgs::Rule_<ContainerAllocator> >::other >  _public_interface_type;
  _public_interface_type public_interface;

   typedef std::vector< ::gateway_msgs::RemoteRule_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::gateway_msgs::RemoteRule_<ContainerAllocator> >::other >  _flipped_interface_type;
  _flipped_interface_type flipped_interface;

   typedef std::vector< ::gateway_msgs::RemoteRule_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::gateway_msgs::RemoteRule_<ContainerAllocator> >::other >  _pulled_interface_type;
  _pulled_interface_type pulled_interface;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(WIRED)
  #undef WIRED
#endif
#if defined(_WIN32) && defined(WIRELESS)
  #undef WIRELESS
#endif

  enum {
    WIRED = 1,
    WIRELESS = 2,
  };


  typedef boost::shared_ptr< ::gateway_msgs::RemoteGateway_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gateway_msgs::RemoteGateway_<ContainerAllocator> const> ConstPtr;

}; // struct RemoteGateway_

typedef ::gateway_msgs::RemoteGateway_<std::allocator<void> > RemoteGateway;

typedef boost::shared_ptr< ::gateway_msgs::RemoteGateway > RemoteGatewayPtr;
typedef boost::shared_ptr< ::gateway_msgs::RemoteGateway const> RemoteGatewayConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gateway_msgs::RemoteGateway_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gateway_msgs::RemoteGateway_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gateway_msgs::RemoteGateway_<ContainerAllocator1> & lhs, const ::gateway_msgs::RemoteGateway_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.ip == rhs.ip &&
    lhs.firewall == rhs.firewall &&
    lhs.conn_stats == rhs.conn_stats &&
    lhs.public_interface == rhs.public_interface &&
    lhs.flipped_interface == rhs.flipped_interface &&
    lhs.pulled_interface == rhs.pulled_interface;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gateway_msgs::RemoteGateway_<ContainerAllocator1> & lhs, const ::gateway_msgs::RemoteGateway_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gateway_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gateway_msgs::RemoteGateway_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gateway_msgs::RemoteGateway_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gateway_msgs::RemoteGateway_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gateway_msgs::RemoteGateway_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gateway_msgs::RemoteGateway_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gateway_msgs::RemoteGateway_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gateway_msgs::RemoteGateway_<ContainerAllocator> >
{
  static const char* value()
  {
    return "58607c66cd963e494a28cb3f919087f2";
  }

  static const char* value(const ::gateway_msgs::RemoteGateway_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x58607c66cd963e49ULL;
  static const uint64_t static_value2 = 0x4a28cb3f919087f2ULL;
};

template<class ContainerAllocator>
struct DataType< ::gateway_msgs::RemoteGateway_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gateway_msgs/RemoteGateway";
  }

  static const char* value(const ::gateway_msgs::RemoteGateway_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gateway_msgs::RemoteGateway_<ContainerAllocator> >
{
  static const char* value()
  {
    return "###### Gateway information ######\n"
"string name\n"
"string ip\n"
"#TODO blocking status\n"
"bool firewall\n"
"\n"
"# Remote Gateway Statistics\n"
"\n"
"# Constants\n"
"int8 WIRED = 1\n"
"int8 WIRELESS = 2\n"
"\n"
"#Connection Statistics\n"
"ConnectionStatistics conn_stats\n"
"\n"
"###### Public Interface ######\n"
"\n"
"Rule[] public_interface\n"
"\n"
"###### Flipped Interface ######\n"
"\n"
"# Flipped and pulled interfaces would be useful for debugging \n"
"#    https://github.com/robotics-in-concert/rocon_multimaster/issues/84\n"
"\n"
"RemoteRule[] flipped_interface\n"
"RemoteRule[] pulled_interface\n"
"\n"
"###### Foreign Interface ######\n"
"\n"
"# Q) Should we show these?\n"
"# A) Probably not, in the overall scheme of things, \n"
"#    it doubles up the information from above\n"
"\n"
"# RemoteRule[] flipped_in_connections\n"
"# RemoteRule[] pulled_connections\n"
"\n"
"================================================================================\n"
"MSG: gateway_msgs/ConnectionStatistics\n"
"# Constants\n"
"int8 WIRED = 1\n"
"int8 WIRELESS = 2\n"
"int32 MAX_TTL = 86400\n"
"\n"
"# Gateway ping indicators\n"
"bool gateway_available\n"
"int64 time_since_last_seen #time in seconds since last ping successful\n"
"float32 ping_latency_min\n"
"float32 ping_latency_max\n"
"float32 ping_latency_avg\n"
"float32 ping_latency_mdev #mean absolute deviation\n"
"\n"
"# Gateway network information indicators\n"
"bool network_info_available\n"
"int8 network_type\n"
"float32 wireless_bitrate\n"
"int8 wireless_link_quality\n"
"float32 wireless_signal_level\n"
"float32 wireless_noise_level\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: gateway_msgs/Rule\n"
"# Standard gateway connection rule\n"
"\n"
"# type of connection (from gateway_msgs.msg.Connection)\n"
"string type\n"
"\n"
"# this is the topic/service name or the action base name (a regex is supported)\n"
"string name \n"
"\n"
"# (optional) an optional node name can be provided. if node name is not provided\n"
"# then all nodes are matched (also supports regex)\n"
"string node\n"
"\n"
"================================================================================\n"
"MSG: gateway_msgs/RemoteRule\n"
"# Definition for a flip. It represents either:\n"
"#\n"
"# 1) an existing flipped connection (from the local gateway)\n"
"# 2) a rule that is put on a watchlist\n"
"\n"
"# The target recipient of the flip\n"
"string gateway\n"
"\n"
"# Connection has the following parameters that need setting\n"
"# - name : fully qualified name of the connection (str)\n"
"# - type : connection type (str)\n"
"#  \n"
"# Use one of the types defined in Connection string constants:\n"
"#     (publisher, subscriber, service, action_client, action_server)\n"
"#\n"
"# - node : name of the node it originates from (str)(optional)\n"
"#\n"
"# Node name is necessary, for instance, if you have multiple subscribers\n"
"# publishing to a single topic. Most of the time it is not necessary,\n"
"# but in some cases it helps refine the rule. It helps refine the rule.\n"
"#\n"
"Rule rule\n"
;
  }

  static const char* value(const ::gateway_msgs::RemoteGateway_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gateway_msgs::RemoteGateway_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.ip);
      stream.next(m.firewall);
      stream.next(m.conn_stats);
      stream.next(m.public_interface);
      stream.next(m.flipped_interface);
      stream.next(m.pulled_interface);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RemoteGateway_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gateway_msgs::RemoteGateway_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gateway_msgs::RemoteGateway_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "ip: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ip);
    s << indent << "firewall: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.firewall);
    s << indent << "conn_stats: ";
    s << std::endl;
    Printer< ::gateway_msgs::ConnectionStatistics_<ContainerAllocator> >::stream(s, indent + "  ", v.conn_stats);
    s << indent << "public_interface[]" << std::endl;
    for (size_t i = 0; i < v.public_interface.size(); ++i)
    {
      s << indent << "  public_interface[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::gateway_msgs::Rule_<ContainerAllocator> >::stream(s, indent + "    ", v.public_interface[i]);
    }
    s << indent << "flipped_interface[]" << std::endl;
    for (size_t i = 0; i < v.flipped_interface.size(); ++i)
    {
      s << indent << "  flipped_interface[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::gateway_msgs::RemoteRule_<ContainerAllocator> >::stream(s, indent + "    ", v.flipped_interface[i]);
    }
    s << indent << "pulled_interface[]" << std::endl;
    for (size_t i = 0; i < v.pulled_interface.size(); ++i)
    {
      s << indent << "  pulled_interface[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::gateway_msgs::RemoteRule_<ContainerAllocator> >::stream(s, indent + "    ", v.pulled_interface[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // GATEWAY_MSGS_MESSAGE_REMOTEGATEWAY_H
