// Generated by gencpp from file pr2_controllers_msgs/QueryTrajectoryStateResponse.msg
// DO NOT EDIT!


#ifndef PR2_CONTROLLERS_MSGS_MESSAGE_QUERYTRAJECTORYSTATERESPONSE_H
#define PR2_CONTROLLERS_MSGS_MESSAGE_QUERYTRAJECTORYSTATERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pr2_controllers_msgs
{
template <class ContainerAllocator>
struct QueryTrajectoryStateResponse_
{
  typedef QueryTrajectoryStateResponse_<ContainerAllocator> Type;

  QueryTrajectoryStateResponse_()
    : name()
    , position()
    , velocity()
    , acceleration()  {
    }
  QueryTrajectoryStateResponse_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , position(_alloc)
    , velocity(_alloc)
    , acceleration(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _name_type;
  _name_type name;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _position_type;
  _position_type position;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _velocity_type;
  _velocity_type velocity;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _acceleration_type;
  _acceleration_type acceleration;





  typedef boost::shared_ptr< ::pr2_controllers_msgs::QueryTrajectoryStateResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr2_controllers_msgs::QueryTrajectoryStateResponse_<ContainerAllocator> const> ConstPtr;

}; // struct QueryTrajectoryStateResponse_

typedef ::pr2_controllers_msgs::QueryTrajectoryStateResponse_<std::allocator<void> > QueryTrajectoryStateResponse;

typedef boost::shared_ptr< ::pr2_controllers_msgs::QueryTrajectoryStateResponse > QueryTrajectoryStateResponsePtr;
typedef boost::shared_ptr< ::pr2_controllers_msgs::QueryTrajectoryStateResponse const> QueryTrajectoryStateResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pr2_controllers_msgs::QueryTrajectoryStateResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pr2_controllers_msgs::QueryTrajectoryStateResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pr2_controllers_msgs::QueryTrajectoryStateResponse_<ContainerAllocator1> & lhs, const ::pr2_controllers_msgs::QueryTrajectoryStateResponse_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.position == rhs.position &&
    lhs.velocity == rhs.velocity &&
    lhs.acceleration == rhs.acceleration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pr2_controllers_msgs::QueryTrajectoryStateResponse_<ContainerAllocator1> & lhs, const ::pr2_controllers_msgs::QueryTrajectoryStateResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pr2_controllers_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pr2_controllers_msgs::QueryTrajectoryStateResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pr2_controllers_msgs::QueryTrajectoryStateResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pr2_controllers_msgs::QueryTrajectoryStateResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pr2_controllers_msgs::QueryTrajectoryStateResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr2_controllers_msgs::QueryTrajectoryStateResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr2_controllers_msgs::QueryTrajectoryStateResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pr2_controllers_msgs::QueryTrajectoryStateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1f1a6554ad060f44d013e71868403c1a";
  }

  static const char* value(const ::pr2_controllers_msgs::QueryTrajectoryStateResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1f1a6554ad060f44ULL;
  static const uint64_t static_value2 = 0xd013e71868403c1aULL;
};

template<class ContainerAllocator>
struct DataType< ::pr2_controllers_msgs::QueryTrajectoryStateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pr2_controllers_msgs/QueryTrajectoryStateResponse";
  }

  static const char* value(const ::pr2_controllers_msgs::QueryTrajectoryStateResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pr2_controllers_msgs::QueryTrajectoryStateResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] name\n"
"float64[] position\n"
"float64[] velocity\n"
"float64[] acceleration\n"
"\n"
;
  }

  static const char* value(const ::pr2_controllers_msgs::QueryTrajectoryStateResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pr2_controllers_msgs::QueryTrajectoryStateResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.position);
      stream.next(m.velocity);
      stream.next(m.acceleration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct QueryTrajectoryStateResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr2_controllers_msgs::QueryTrajectoryStateResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pr2_controllers_msgs::QueryTrajectoryStateResponse_<ContainerAllocator>& v)
  {
    s << indent << "name[]" << std::endl;
    for (size_t i = 0; i < v.name.size(); ++i)
    {
      s << indent << "  name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name[i]);
    }
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.position[i]);
    }
    s << indent << "velocity[]" << std::endl;
    for (size_t i = 0; i < v.velocity.size(); ++i)
    {
      s << indent << "  velocity[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.velocity[i]);
    }
    s << indent << "acceleration[]" << std::endl;
    for (size_t i = 0; i < v.acceleration.size(); ++i)
    {
      s << indent << "  acceleration[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.acceleration[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PR2_CONTROLLERS_MSGS_MESSAGE_QUERYTRAJECTORYSTATERESPONSE_H
