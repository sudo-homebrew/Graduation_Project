// Generated by gencpp from file cob_perception_msgs/Person.msg
// DO NOT EDIT!


#ifndef COB_PERCEPTION_MSGS_MESSAGE_PERSON_H
#define COB_PERCEPTION_MSGS_MESSAGE_PERSON_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Point.h>
#include <cob_perception_msgs/Skeleton.h>

namespace cob_perception_msgs
{
template <class ContainerAllocator>
struct Person_
{
  typedef Person_<ContainerAllocator> Type;

  Person_()
    : name()
    , detector()
    , position()
    , velocity()
    , skeleton()  {
    }
  Person_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , detector(_alloc)
    , position(_alloc)
    , velocity(_alloc)
    , skeleton(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _detector_type;
  _detector_type detector;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef  ::cob_perception_msgs::Skeleton_<ContainerAllocator>  _skeleton_type;
  _skeleton_type skeleton;





  typedef boost::shared_ptr< ::cob_perception_msgs::Person_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_perception_msgs::Person_<ContainerAllocator> const> ConstPtr;

}; // struct Person_

typedef ::cob_perception_msgs::Person_<std::allocator<void> > Person;

typedef boost::shared_ptr< ::cob_perception_msgs::Person > PersonPtr;
typedef boost::shared_ptr< ::cob_perception_msgs::Person const> PersonConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cob_perception_msgs::Person_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cob_perception_msgs::Person_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cob_perception_msgs::Person_<ContainerAllocator1> & lhs, const ::cob_perception_msgs::Person_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.detector == rhs.detector &&
    lhs.position == rhs.position &&
    lhs.velocity == rhs.velocity &&
    lhs.skeleton == rhs.skeleton;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cob_perception_msgs::Person_<ContainerAllocator1> & lhs, const ::cob_perception_msgs::Person_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cob_perception_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cob_perception_msgs::Person_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cob_perception_msgs::Person_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cob_perception_msgs::Person_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cob_perception_msgs::Person_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_perception_msgs::Person_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_perception_msgs::Person_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cob_perception_msgs::Person_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0726793e65e7420b1c7d52ed8e449b17";
  }

  static const char* value(const ::cob_perception_msgs::Person_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0726793e65e7420bULL;
  static const uint64_t static_value2 = 0x1c7d52ed8e449b17ULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_perception_msgs::Person_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cob_perception_msgs/Person";
  }

  static const char* value(const ::cob_perception_msgs::Person_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cob_perception_msgs::Person_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#This message is used to describe a person\n"
" \n"
"string              name				#id of a person\n"
"string              detector			#used device for detection (scan, camera)\n"
"geometry_msgs/Pose  position			#position in space\n"
"geometry_msgs/Point velocity			#speed\n"
"\n"
"cob_perception_msgs/Skeleton skeleton	#assigned skeleton to a tracked person\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: cob_perception_msgs/Skeleton\n"
"# This messages is used to describe a skeleton and defines joints of a tracked person\n"
"\n"
"# the same enum as defined in NiteCEnums.h of the Nite body tracker\n"
"uint8 JOINT_HEAD = 0\n"
"uint8 JOINT_NECK = 1\n"
"uint8 JOINT_LEFT_SHOULDER = 2\n"
"uint8 JOINT_RIGHT_SHOULDER = 3\n"
"uint8 JOINT_LEFT_ELBOW = 4\n"
"uint8 JOINT_RIGHT_ELBOW = 5\n"
"uint8 JOINT_LEFT_HAND = 6\n"
"uint8 JOINT_RIGHT_HAND = 7\n"
"uint8 JOINT_TORSO = 8\n"
"uint8 JOINT_LEFT_HIP = 9\n"
"uint8 JOINT_RIGHT_HIP = 10\n"
"uint8 JOINT_LEFT_KNEE = 11\n"
"uint8 JOINT_RIGHT_KNEE = 12\n"
"uint8 JOINT_LEFT_FOOT = 13\n"
"uint8 JOINT_RIGHT_FOOT = 14\n"
"uint8 JOINT_NUMBER = 15\n"
"\n"
"geometry_msgs/Pose[] joints\n"
;
  }

  static const char* value(const ::cob_perception_msgs::Person_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cob_perception_msgs::Person_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.detector);
      stream.next(m.position);
      stream.next(m.velocity);
      stream.next(m.skeleton);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Person_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cob_perception_msgs::Person_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cob_perception_msgs::Person_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "detector: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.detector);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "skeleton: ";
    s << std::endl;
    Printer< ::cob_perception_msgs::Skeleton_<ContainerAllocator> >::stream(s, indent + "  ", v.skeleton);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COB_PERCEPTION_MSGS_MESSAGE_PERSON_H
