// Generated by gencpp from file ethercat_hardware/SoftProcessorFirmwareWriteRequest.msg
// DO NOT EDIT!


#ifndef ETHERCAT_HARDWARE_MESSAGE_SOFTPROCESSORFIRMWAREWRITEREQUEST_H
#define ETHERCAT_HARDWARE_MESSAGE_SOFTPROCESSORFIRMWAREWRITEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ethercat_hardware
{
template <class ContainerAllocator>
struct SoftProcessorFirmwareWriteRequest_
{
  typedef SoftProcessorFirmwareWriteRequest_<ContainerAllocator> Type;

  SoftProcessorFirmwareWriteRequest_()
    : actuator_name()
    , processor_name()
    , instructions()  {
    }
  SoftProcessorFirmwareWriteRequest_(const ContainerAllocator& _alloc)
    : actuator_name(_alloc)
    , processor_name(_alloc)
    , instructions(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _actuator_name_type;
  _actuator_name_type actuator_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _processor_name_type;
  _processor_name_type processor_name;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _instructions_type;
  _instructions_type instructions;





  typedef boost::shared_ptr< ::ethercat_hardware::SoftProcessorFirmwareWriteRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ethercat_hardware::SoftProcessorFirmwareWriteRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SoftProcessorFirmwareWriteRequest_

typedef ::ethercat_hardware::SoftProcessorFirmwareWriteRequest_<std::allocator<void> > SoftProcessorFirmwareWriteRequest;

typedef boost::shared_ptr< ::ethercat_hardware::SoftProcessorFirmwareWriteRequest > SoftProcessorFirmwareWriteRequestPtr;
typedef boost::shared_ptr< ::ethercat_hardware::SoftProcessorFirmwareWriteRequest const> SoftProcessorFirmwareWriteRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ethercat_hardware::SoftProcessorFirmwareWriteRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ethercat_hardware::SoftProcessorFirmwareWriteRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ethercat_hardware

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1339814/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/pmurali.Brobot.j1339814/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'ethercat_hardware': ['/mathworks/home/pmurali/Documents/Test 3/matlab_msg_gen_ros1/glnxa64/src/ethercat_hardware/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ethercat_hardware::SoftProcessorFirmwareWriteRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ethercat_hardware::SoftProcessorFirmwareWriteRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ethercat_hardware::SoftProcessorFirmwareWriteRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ethercat_hardware::SoftProcessorFirmwareWriteRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ethercat_hardware::SoftProcessorFirmwareWriteRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ethercat_hardware::SoftProcessorFirmwareWriteRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ethercat_hardware::SoftProcessorFirmwareWriteRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5234f035d5f911e880df479ac901a6e0";
  }

  static const char* value(const ::ethercat_hardware::SoftProcessorFirmwareWriteRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5234f035d5f911e8ULL;
  static const uint64_t static_value2 = 0x80df479ac901a6e0ULL;
};

template<class ContainerAllocator>
struct DataType< ::ethercat_hardware::SoftProcessorFirmwareWriteRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ethercat_hardware/SoftProcessorFirmwareWriteRequest";
  }

  static const char* value(const ::ethercat_hardware::SoftProcessorFirmwareWriteRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ethercat_hardware::SoftProcessorFirmwareWriteRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string actuator_name\n"
"string processor_name\n"
"\n"
"uint32[] instructions\n"
"\n"
"\n"
;
  }

  static const char* value(const ::ethercat_hardware::SoftProcessorFirmwareWriteRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ethercat_hardware::SoftProcessorFirmwareWriteRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.actuator_name);
      stream.next(m.processor_name);
      stream.next(m.instructions);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SoftProcessorFirmwareWriteRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ethercat_hardware::SoftProcessorFirmwareWriteRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ethercat_hardware::SoftProcessorFirmwareWriteRequest_<ContainerAllocator>& v)
  {
    s << indent << "actuator_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.actuator_name);
    s << indent << "processor_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.processor_name);
    s << indent << "instructions[]" << std::endl;
    for (size_t i = 0; i < v.instructions.size(); ++i)
    {
      s << indent << "  instructions[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.instructions[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ETHERCAT_HARDWARE_MESSAGE_SOFTPROCESSORFIRMWAREWRITEREQUEST_H
