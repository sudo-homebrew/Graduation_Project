// Generated by gencpp from file ethercat_hardware/RawFTDataSample.msg
// DO NOT EDIT!


#ifndef ETHERCAT_HARDWARE_MESSAGE_RAWFTDATASAMPLE_H
#define ETHERCAT_HARDWARE_MESSAGE_RAWFTDATASAMPLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ethercat_hardware
{
template <class ContainerAllocator>
struct RawFTDataSample_
{
  typedef RawFTDataSample_<ContainerAllocator> Type;

  RawFTDataSample_()
    : sample_count(0)
    , data()
    , vhalf(0)  {
    }
  RawFTDataSample_(const ContainerAllocator& _alloc)
    : sample_count(0)
    , data(_alloc)
    , vhalf(0)  {
  (void)_alloc;
    }



   typedef uint64_t _sample_count_type;
  _sample_count_type sample_count;

   typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _data_type;
  _data_type data;

   typedef uint16_t _vhalf_type;
  _vhalf_type vhalf;





  typedef boost::shared_ptr< ::ethercat_hardware::RawFTDataSample_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ethercat_hardware::RawFTDataSample_<ContainerAllocator> const> ConstPtr;

}; // struct RawFTDataSample_

typedef ::ethercat_hardware::RawFTDataSample_<std::allocator<void> > RawFTDataSample;

typedef boost::shared_ptr< ::ethercat_hardware::RawFTDataSample > RawFTDataSamplePtr;
typedef boost::shared_ptr< ::ethercat_hardware::RawFTDataSample const> RawFTDataSampleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ethercat_hardware::RawFTDataSample_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ethercat_hardware::RawFTDataSample_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ethercat_hardware

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'ethercat_hardware': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/ethercat_hardware/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ethercat_hardware::RawFTDataSample_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ethercat_hardware::RawFTDataSample_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ethercat_hardware::RawFTDataSample_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ethercat_hardware::RawFTDataSample_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ethercat_hardware::RawFTDataSample_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ethercat_hardware::RawFTDataSample_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ethercat_hardware::RawFTDataSample_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6c3b6e352fd24802b2d95b606df80de6";
  }

  static const char* value(const ::ethercat_hardware::RawFTDataSample_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6c3b6e352fd24802ULL;
  static const uint64_t static_value2 = 0xb2d95b606df80de6ULL;
};

template<class ContainerAllocator>
struct DataType< ::ethercat_hardware::RawFTDataSample_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ethercat_hardware/RawFTDataSample";
  }

  static const char* value(const ::ethercat_hardware::RawFTDataSample_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ethercat_hardware::RawFTDataSample_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# One raw Data sample from WG035 F/T input via WG006 (gripper MCB).\n"
"uint64  sample_count\n"
"int16[] data\n"
"uint16  vhalf\n"
;
  }

  static const char* value(const ::ethercat_hardware::RawFTDataSample_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ethercat_hardware::RawFTDataSample_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sample_count);
      stream.next(m.data);
      stream.next(m.vhalf);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RawFTDataSample_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ethercat_hardware::RawFTDataSample_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ethercat_hardware::RawFTDataSample_<ContainerAllocator>& v)
  {
    s << indent << "sample_count: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.sample_count);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.data[i]);
    }
    s << indent << "vhalf: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.vhalf);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ETHERCAT_HARDWARE_MESSAGE_RAWFTDATASAMPLE_H
