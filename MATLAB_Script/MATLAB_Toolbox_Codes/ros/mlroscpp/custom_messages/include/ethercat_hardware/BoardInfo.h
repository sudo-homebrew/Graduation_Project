// Generated by gencpp from file ethercat_hardware/BoardInfo.msg
// DO NOT EDIT!


#ifndef ETHERCAT_HARDWARE_MESSAGE_BOARDINFO_H
#define ETHERCAT_HARDWARE_MESSAGE_BOARDINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ethercat_hardware
{
template <class ContainerAllocator>
struct BoardInfo_
{
  typedef BoardInfo_<ContainerAllocator> Type;

  BoardInfo_()
    : description()
    , product_code(0)
    , pcb(0)
    , pca(0)
    , serial(0)
    , firmware_major(0)
    , firmware_minor(0)
    , board_resistance(0.0)
    , max_pwm_ratio(0.0)
    , hw_max_current(0.0)
    , poor_measured_motor_voltage(false)  {
    }
  BoardInfo_(const ContainerAllocator& _alloc)
    : description(_alloc)
    , product_code(0)
    , pcb(0)
    , pca(0)
    , serial(0)
    , firmware_major(0)
    , firmware_minor(0)
    , board_resistance(0.0)
    , max_pwm_ratio(0.0)
    , hw_max_current(0.0)
    , poor_measured_motor_voltage(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _description_type;
  _description_type description;

   typedef uint32_t _product_code_type;
  _product_code_type product_code;

   typedef uint32_t _pcb_type;
  _pcb_type pcb;

   typedef uint32_t _pca_type;
  _pca_type pca;

   typedef uint32_t _serial_type;
  _serial_type serial;

   typedef uint32_t _firmware_major_type;
  _firmware_major_type firmware_major;

   typedef uint32_t _firmware_minor_type;
  _firmware_minor_type firmware_minor;

   typedef double _board_resistance_type;
  _board_resistance_type board_resistance;

   typedef double _max_pwm_ratio_type;
  _max_pwm_ratio_type max_pwm_ratio;

   typedef double _hw_max_current_type;
  _hw_max_current_type hw_max_current;

   typedef uint8_t _poor_measured_motor_voltage_type;
  _poor_measured_motor_voltage_type poor_measured_motor_voltage;





  typedef boost::shared_ptr< ::ethercat_hardware::BoardInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ethercat_hardware::BoardInfo_<ContainerAllocator> const> ConstPtr;

}; // struct BoardInfo_

typedef ::ethercat_hardware::BoardInfo_<std::allocator<void> > BoardInfo;

typedef boost::shared_ptr< ::ethercat_hardware::BoardInfo > BoardInfoPtr;
typedef boost::shared_ptr< ::ethercat_hardware::BoardInfo const> BoardInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ethercat_hardware::BoardInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ethercat_hardware::BoardInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ethercat_hardware

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'ethercat_hardware': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/ethercat_hardware/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ethercat_hardware::BoardInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ethercat_hardware::BoardInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ethercat_hardware::BoardInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ethercat_hardware::BoardInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ethercat_hardware::BoardInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ethercat_hardware::BoardInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ethercat_hardware::BoardInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ffcb87ef2725c5fab7d0d8fcd4c7e7bc";
  }

  static const char* value(const ::ethercat_hardware::BoardInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xffcb87ef2725c5faULL;
  static const uint64_t static_value2 = 0xb7d0d8fcd4c7e7bcULL;
};

template<class ContainerAllocator>
struct DataType< ::ethercat_hardware::BoardInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ethercat_hardware/BoardInfo";
  }

  static const char* value(const ::ethercat_hardware::BoardInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ethercat_hardware::BoardInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string description\n"
"uint32 product_code\n"
"uint32 pcb\n"
"uint32 pca\n"
"uint32 serial\n"
"uint32 firmware_major\n"
"uint32 firmware_minor\n"
"float64 board_resistance\n"
"float64 max_pwm_ratio\n"
"float64 hw_max_current\n"
"bool poor_measured_motor_voltage\n"
;
  }

  static const char* value(const ::ethercat_hardware::BoardInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ethercat_hardware::BoardInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.description);
      stream.next(m.product_code);
      stream.next(m.pcb);
      stream.next(m.pca);
      stream.next(m.serial);
      stream.next(m.firmware_major);
      stream.next(m.firmware_minor);
      stream.next(m.board_resistance);
      stream.next(m.max_pwm_ratio);
      stream.next(m.hw_max_current);
      stream.next(m.poor_measured_motor_voltage);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BoardInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ethercat_hardware::BoardInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ethercat_hardware::BoardInfo_<ContainerAllocator>& v)
  {
    s << indent << "description: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.description);
    s << indent << "product_code: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.product_code);
    s << indent << "pcb: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.pcb);
    s << indent << "pca: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.pca);
    s << indent << "serial: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.serial);
    s << indent << "firmware_major: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.firmware_major);
    s << indent << "firmware_minor: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.firmware_minor);
    s << indent << "board_resistance: ";
    Printer<double>::stream(s, indent + "  ", v.board_resistance);
    s << indent << "max_pwm_ratio: ";
    Printer<double>::stream(s, indent + "  ", v.max_pwm_ratio);
    s << indent << "hw_max_current: ";
    Printer<double>::stream(s, indent + "  ", v.hw_max_current);
    s << indent << "poor_measured_motor_voltage: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.poor_measured_motor_voltage);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ETHERCAT_HARDWARE_MESSAGE_BOARDINFO_H
