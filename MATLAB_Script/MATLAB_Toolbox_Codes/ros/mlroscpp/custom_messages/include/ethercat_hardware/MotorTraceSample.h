// Generated by gencpp from file ethercat_hardware/MotorTraceSample.msg
// DO NOT EDIT!


#ifndef ETHERCAT_HARDWARE_MESSAGE_MOTORTRACESAMPLE_H
#define ETHERCAT_HARDWARE_MESSAGE_MOTORTRACESAMPLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ethercat_hardware
{
template <class ContainerAllocator>
struct MotorTraceSample_
{
  typedef MotorTraceSample_<ContainerAllocator> Type;

  MotorTraceSample_()
    : timestamp(0.0)
    , enabled(false)
    , supply_voltage(0.0)
    , measured_motor_voltage(0.0)
    , programmed_pwm(0.0)
    , executed_current(0.0)
    , measured_current(0.0)
    , velocity(0.0)
    , encoder_position(0.0)
    , encoder_error_count(0)
    , motor_voltage_error_limit(0.0)
    , filtered_motor_voltage_error(0.0)
    , filtered_abs_motor_voltage_error(0.0)
    , filtered_measured_voltage_error(0.0)
    , filtered_abs_measured_voltage_error(0.0)
    , filtered_current_error(0.0)
    , filtered_abs_current_error(0.0)  {
    }
  MotorTraceSample_(const ContainerAllocator& _alloc)
    : timestamp(0.0)
    , enabled(false)
    , supply_voltage(0.0)
    , measured_motor_voltage(0.0)
    , programmed_pwm(0.0)
    , executed_current(0.0)
    , measured_current(0.0)
    , velocity(0.0)
    , encoder_position(0.0)
    , encoder_error_count(0)
    , motor_voltage_error_limit(0.0)
    , filtered_motor_voltage_error(0.0)
    , filtered_abs_motor_voltage_error(0.0)
    , filtered_measured_voltage_error(0.0)
    , filtered_abs_measured_voltage_error(0.0)
    , filtered_current_error(0.0)
    , filtered_abs_current_error(0.0)  {
  (void)_alloc;
    }



   typedef double _timestamp_type;
  _timestamp_type timestamp;

   typedef uint8_t _enabled_type;
  _enabled_type enabled;

   typedef double _supply_voltage_type;
  _supply_voltage_type supply_voltage;

   typedef double _measured_motor_voltage_type;
  _measured_motor_voltage_type measured_motor_voltage;

   typedef double _programmed_pwm_type;
  _programmed_pwm_type programmed_pwm;

   typedef double _executed_current_type;
  _executed_current_type executed_current;

   typedef double _measured_current_type;
  _measured_current_type measured_current;

   typedef double _velocity_type;
  _velocity_type velocity;

   typedef double _encoder_position_type;
  _encoder_position_type encoder_position;

   typedef uint32_t _encoder_error_count_type;
  _encoder_error_count_type encoder_error_count;

   typedef double _motor_voltage_error_limit_type;
  _motor_voltage_error_limit_type motor_voltage_error_limit;

   typedef double _filtered_motor_voltage_error_type;
  _filtered_motor_voltage_error_type filtered_motor_voltage_error;

   typedef double _filtered_abs_motor_voltage_error_type;
  _filtered_abs_motor_voltage_error_type filtered_abs_motor_voltage_error;

   typedef double _filtered_measured_voltage_error_type;
  _filtered_measured_voltage_error_type filtered_measured_voltage_error;

   typedef double _filtered_abs_measured_voltage_error_type;
  _filtered_abs_measured_voltage_error_type filtered_abs_measured_voltage_error;

   typedef double _filtered_current_error_type;
  _filtered_current_error_type filtered_current_error;

   typedef double _filtered_abs_current_error_type;
  _filtered_abs_current_error_type filtered_abs_current_error;





  typedef boost::shared_ptr< ::ethercat_hardware::MotorTraceSample_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ethercat_hardware::MotorTraceSample_<ContainerAllocator> const> ConstPtr;

}; // struct MotorTraceSample_

typedef ::ethercat_hardware::MotorTraceSample_<std::allocator<void> > MotorTraceSample;

typedef boost::shared_ptr< ::ethercat_hardware::MotorTraceSample > MotorTraceSamplePtr;
typedef boost::shared_ptr< ::ethercat_hardware::MotorTraceSample const> MotorTraceSampleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ethercat_hardware::MotorTraceSample_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ethercat_hardware::MotorTraceSample_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ethercat_hardware

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'ethercat_hardware': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/ethercat_hardware/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ethercat_hardware::MotorTraceSample_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ethercat_hardware::MotorTraceSample_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ethercat_hardware::MotorTraceSample_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ethercat_hardware::MotorTraceSample_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ethercat_hardware::MotorTraceSample_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ethercat_hardware::MotorTraceSample_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ethercat_hardware::MotorTraceSample_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3734a66334bc2033448f9c561d39c5e0";
  }

  static const char* value(const ::ethercat_hardware::MotorTraceSample_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3734a66334bc2033ULL;
  static const uint64_t static_value2 = 0x448f9c561d39c5e0ULL;
};

template<class ContainerAllocator>
struct DataType< ::ethercat_hardware::MotorTraceSample_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ethercat_hardware/MotorTraceSample";
  }

  static const char* value(const ::ethercat_hardware::MotorTraceSample_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ethercat_hardware::MotorTraceSample_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 timestamp\n"
"bool    enabled\n"
"float64 supply_voltage\n"
"float64 measured_motor_voltage\n"
"float64 programmed_pwm\n"
"float64 executed_current\n"
"float64 measured_current\n"
"float64 velocity\n"
"float64 encoder_position\n"
"uint32  encoder_error_count\n"
"float64 motor_voltage_error_limit\n"
"float64 filtered_motor_voltage_error\n"
"float64 filtered_abs_motor_voltage_error\n"
"float64 filtered_measured_voltage_error\n"
"float64 filtered_abs_measured_voltage_error\n"
"float64 filtered_current_error\n"
"float64 filtered_abs_current_error\n"
;
  }

  static const char* value(const ::ethercat_hardware::MotorTraceSample_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ethercat_hardware::MotorTraceSample_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp);
      stream.next(m.enabled);
      stream.next(m.supply_voltage);
      stream.next(m.measured_motor_voltage);
      stream.next(m.programmed_pwm);
      stream.next(m.executed_current);
      stream.next(m.measured_current);
      stream.next(m.velocity);
      stream.next(m.encoder_position);
      stream.next(m.encoder_error_count);
      stream.next(m.motor_voltage_error_limit);
      stream.next(m.filtered_motor_voltage_error);
      stream.next(m.filtered_abs_motor_voltage_error);
      stream.next(m.filtered_measured_voltage_error);
      stream.next(m.filtered_abs_measured_voltage_error);
      stream.next(m.filtered_current_error);
      stream.next(m.filtered_abs_current_error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorTraceSample_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ethercat_hardware::MotorTraceSample_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ethercat_hardware::MotorTraceSample_<ContainerAllocator>& v)
  {
    s << indent << "timestamp: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp);
    s << indent << "enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enabled);
    s << indent << "supply_voltage: ";
    Printer<double>::stream(s, indent + "  ", v.supply_voltage);
    s << indent << "measured_motor_voltage: ";
    Printer<double>::stream(s, indent + "  ", v.measured_motor_voltage);
    s << indent << "programmed_pwm: ";
    Printer<double>::stream(s, indent + "  ", v.programmed_pwm);
    s << indent << "executed_current: ";
    Printer<double>::stream(s, indent + "  ", v.executed_current);
    s << indent << "measured_current: ";
    Printer<double>::stream(s, indent + "  ", v.measured_current);
    s << indent << "velocity: ";
    Printer<double>::stream(s, indent + "  ", v.velocity);
    s << indent << "encoder_position: ";
    Printer<double>::stream(s, indent + "  ", v.encoder_position);
    s << indent << "encoder_error_count: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.encoder_error_count);
    s << indent << "motor_voltage_error_limit: ";
    Printer<double>::stream(s, indent + "  ", v.motor_voltage_error_limit);
    s << indent << "filtered_motor_voltage_error: ";
    Printer<double>::stream(s, indent + "  ", v.filtered_motor_voltage_error);
    s << indent << "filtered_abs_motor_voltage_error: ";
    Printer<double>::stream(s, indent + "  ", v.filtered_abs_motor_voltage_error);
    s << indent << "filtered_measured_voltage_error: ";
    Printer<double>::stream(s, indent + "  ", v.filtered_measured_voltage_error);
    s << indent << "filtered_abs_measured_voltage_error: ";
    Printer<double>::stream(s, indent + "  ", v.filtered_abs_measured_voltage_error);
    s << indent << "filtered_current_error: ";
    Printer<double>::stream(s, indent + "  ", v.filtered_current_error);
    s << indent << "filtered_abs_current_error: ";
    Printer<double>::stream(s, indent + "  ", v.filtered_abs_current_error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ETHERCAT_HARDWARE_MESSAGE_MOTORTRACESAMPLE_H
