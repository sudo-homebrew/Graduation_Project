// Generated by gencpp from file ethercat_hardware/ActuatorInfo.msg
// DO NOT EDIT!


#ifndef ETHERCAT_HARDWARE_MESSAGE_ACTUATORINFO_H
#define ETHERCAT_HARDWARE_MESSAGE_ACTUATORINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ethercat_hardware
{
template <class ContainerAllocator>
struct ActuatorInfo_
{
  typedef ActuatorInfo_<ContainerAllocator> Type;

  ActuatorInfo_()
    : id(0)
    , name()
    , robot_name()
    , motor_make()
    , motor_model()
    , max_current(0.0)
    , speed_constant(0.0)
    , motor_resistance(0.0)
    , motor_torque_constant(0.0)
    , encoder_reduction(0.0)
    , pulses_per_revolution(0.0)  {
    }
  ActuatorInfo_(const ContainerAllocator& _alloc)
    : id(0)
    , name(_alloc)
    , robot_name(_alloc)
    , motor_make(_alloc)
    , motor_model(_alloc)
    , max_current(0.0)
    , speed_constant(0.0)
    , motor_resistance(0.0)
    , motor_torque_constant(0.0)
    , encoder_reduction(0.0)
    , pulses_per_revolution(0.0)  {
  (void)_alloc;
    }



   typedef uint32_t _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _robot_name_type;
  _robot_name_type robot_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _motor_make_type;
  _motor_make_type motor_make;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _motor_model_type;
  _motor_model_type motor_model;

   typedef double _max_current_type;
  _max_current_type max_current;

   typedef double _speed_constant_type;
  _speed_constant_type speed_constant;

   typedef double _motor_resistance_type;
  _motor_resistance_type motor_resistance;

   typedef double _motor_torque_constant_type;
  _motor_torque_constant_type motor_torque_constant;

   typedef double _encoder_reduction_type;
  _encoder_reduction_type encoder_reduction;

   typedef double _pulses_per_revolution_type;
  _pulses_per_revolution_type pulses_per_revolution;





  typedef boost::shared_ptr< ::ethercat_hardware::ActuatorInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ethercat_hardware::ActuatorInfo_<ContainerAllocator> const> ConstPtr;

}; // struct ActuatorInfo_

typedef ::ethercat_hardware::ActuatorInfo_<std::allocator<void> > ActuatorInfo;

typedef boost::shared_ptr< ::ethercat_hardware::ActuatorInfo > ActuatorInfoPtr;
typedef boost::shared_ptr< ::ethercat_hardware::ActuatorInfo const> ActuatorInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ethercat_hardware::ActuatorInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ethercat_hardware::ActuatorInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ethercat_hardware

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'ethercat_hardware': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/ethercat_hardware/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ethercat_hardware::ActuatorInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ethercat_hardware::ActuatorInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ethercat_hardware::ActuatorInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ethercat_hardware::ActuatorInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ethercat_hardware::ActuatorInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ethercat_hardware::ActuatorInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ethercat_hardware::ActuatorInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "40f44d8ec4380adc0b63713486eecb09";
  }

  static const char* value(const ::ethercat_hardware::ActuatorInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x40f44d8ec4380adcULL;
  static const uint64_t static_value2 = 0x0b63713486eecb09ULL;
};

template<class ContainerAllocator>
struct DataType< ::ethercat_hardware::ActuatorInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ethercat_hardware/ActuatorInfo";
  }

  static const char* value(const ::ethercat_hardware::ActuatorInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ethercat_hardware::ActuatorInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 id\n"
"string name\n"
"string robot_name\n"
"string motor_make\n"
"string motor_model\n"
"float64 max_current\n"
"float64 speed_constant\n"
"float64 motor_resistance\n"
"float64 motor_torque_constant\n"
"float64 encoder_reduction\n"
"float64 pulses_per_revolution\n"
;
  }

  static const char* value(const ::ethercat_hardware::ActuatorInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ethercat_hardware::ActuatorInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.name);
      stream.next(m.robot_name);
      stream.next(m.motor_make);
      stream.next(m.motor_model);
      stream.next(m.max_current);
      stream.next(m.speed_constant);
      stream.next(m.motor_resistance);
      stream.next(m.motor_torque_constant);
      stream.next(m.encoder_reduction);
      stream.next(m.pulses_per_revolution);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ActuatorInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ethercat_hardware::ActuatorInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ethercat_hardware::ActuatorInfo_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.id);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "robot_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.robot_name);
    s << indent << "motor_make: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.motor_make);
    s << indent << "motor_model: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.motor_model);
    s << indent << "max_current: ";
    Printer<double>::stream(s, indent + "  ", v.max_current);
    s << indent << "speed_constant: ";
    Printer<double>::stream(s, indent + "  ", v.speed_constant);
    s << indent << "motor_resistance: ";
    Printer<double>::stream(s, indent + "  ", v.motor_resistance);
    s << indent << "motor_torque_constant: ";
    Printer<double>::stream(s, indent + "  ", v.motor_torque_constant);
    s << indent << "encoder_reduction: ";
    Printer<double>::stream(s, indent + "  ", v.encoder_reduction);
    s << indent << "pulses_per_revolution: ";
    Printer<double>::stream(s, indent + "  ", v.pulses_per_revolution);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ETHERCAT_HARDWARE_MESSAGE_ACTUATORINFO_H
