// Generated by gencpp from file ethercat_hardware/MotorTemperature.msg
// DO NOT EDIT!


#ifndef ETHERCAT_HARDWARE_MESSAGE_MOTORTEMPERATURE_H
#define ETHERCAT_HARDWARE_MESSAGE_MOTORTEMPERATURE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ethercat_hardware
{
template <class ContainerAllocator>
struct MotorTemperature_
{
  typedef MotorTemperature_<ContainerAllocator> Type;

  MotorTemperature_()
    : stamp()
    , winding_temperature(0.0)
    , housing_temperature(0.0)
    , ambient_temperature(0.0)
    , heating_power(0.0)  {
    }
  MotorTemperature_(const ContainerAllocator& _alloc)
    : stamp()
    , winding_temperature(0.0)
    , housing_temperature(0.0)
    , ambient_temperature(0.0)
    , heating_power(0.0)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef double _winding_temperature_type;
  _winding_temperature_type winding_temperature;

   typedef double _housing_temperature_type;
  _housing_temperature_type housing_temperature;

   typedef double _ambient_temperature_type;
  _ambient_temperature_type ambient_temperature;

   typedef double _heating_power_type;
  _heating_power_type heating_power;





  typedef boost::shared_ptr< ::ethercat_hardware::MotorTemperature_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ethercat_hardware::MotorTemperature_<ContainerAllocator> const> ConstPtr;

}; // struct MotorTemperature_

typedef ::ethercat_hardware::MotorTemperature_<std::allocator<void> > MotorTemperature;

typedef boost::shared_ptr< ::ethercat_hardware::MotorTemperature > MotorTemperaturePtr;
typedef boost::shared_ptr< ::ethercat_hardware::MotorTemperature const> MotorTemperatureConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ethercat_hardware::MotorTemperature_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ethercat_hardware::MotorTemperature_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ethercat_hardware

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'ethercat_hardware': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/ethercat_hardware/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ethercat_hardware::MotorTemperature_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ethercat_hardware::MotorTemperature_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ethercat_hardware::MotorTemperature_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ethercat_hardware::MotorTemperature_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ethercat_hardware::MotorTemperature_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ethercat_hardware::MotorTemperature_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ethercat_hardware::MotorTemperature_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d8c7239cd096d6f25b75bff6b63f2162";
  }

  static const char* value(const ::ethercat_hardware::MotorTemperature_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd8c7239cd096d6f2ULL;
  static const uint64_t static_value2 = 0x5b75bff6b63f2162ULL;
};

template<class ContainerAllocator>
struct DataType< ::ethercat_hardware::MotorTemperature_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ethercat_hardware/MotorTemperature";
  }

  static const char* value(const ::ethercat_hardware::MotorTemperature_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ethercat_hardware::MotorTemperature_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Sample of motor heating information\n"
"time    stamp\n"
"float64 winding_temperature\n"
"float64 housing_temperature\n"
"float64 ambient_temperature\n"
"float64 heating_power\n"
;
  }

  static const char* value(const ::ethercat_hardware::MotorTemperature_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ethercat_hardware::MotorTemperature_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.winding_temperature);
      stream.next(m.housing_temperature);
      stream.next(m.ambient_temperature);
      stream.next(m.heating_power);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorTemperature_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ethercat_hardware::MotorTemperature_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ethercat_hardware::MotorTemperature_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "winding_temperature: ";
    Printer<double>::stream(s, indent + "  ", v.winding_temperature);
    s << indent << "housing_temperature: ";
    Printer<double>::stream(s, indent + "  ", v.housing_temperature);
    s << indent << "ambient_temperature: ";
    Printer<double>::stream(s, indent + "  ", v.ambient_temperature);
    s << indent << "heating_power: ";
    Printer<double>::stream(s, indent + "  ", v.heating_power);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ETHERCAT_HARDWARE_MESSAGE_MOTORTEMPERATURE_H
