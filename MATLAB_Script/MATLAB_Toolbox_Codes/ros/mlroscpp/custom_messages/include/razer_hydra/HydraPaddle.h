// Generated by gencpp from file razer_hydra/HydraPaddle.msg
// DO NOT EDIT!


#ifndef RAZER_HYDRA_MESSAGE_HYDRAPADDLE_H
#define RAZER_HYDRA_MESSAGE_HYDRAPADDLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Transform.h>

namespace razer_hydra
{
template <class ContainerAllocator>
struct HydraPaddle_
{
  typedef HydraPaddle_<ContainerAllocator> Type;

  HydraPaddle_()
    : transform()
    , buttons()
    , joy()
    , trigger(0.0)  {
      buttons.assign(false);

      joy.assign(0.0);
  }
  HydraPaddle_(const ContainerAllocator& _alloc)
    : transform(_alloc)
    , buttons()
    , joy()
    , trigger(0.0)  {
  (void)_alloc;
      buttons.assign(false);

      joy.assign(0.0);
  }



   typedef  ::geometry_msgs::Transform_<ContainerAllocator>  _transform_type;
  _transform_type transform;

   typedef boost::array<uint8_t, 7>  _buttons_type;
  _buttons_type buttons;

   typedef boost::array<float, 2>  _joy_type;
  _joy_type joy;

   typedef float _trigger_type;
  _trigger_type trigger;





  typedef boost::shared_ptr< ::razer_hydra::HydraPaddle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::razer_hydra::HydraPaddle_<ContainerAllocator> const> ConstPtr;

}; // struct HydraPaddle_

typedef ::razer_hydra::HydraPaddle_<std::allocator<void> > HydraPaddle;

typedef boost::shared_ptr< ::razer_hydra::HydraPaddle > HydraPaddlePtr;
typedef boost::shared_ptr< ::razer_hydra::HydraPaddle const> HydraPaddleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::razer_hydra::HydraPaddle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::razer_hydra::HydraPaddle_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace razer_hydra

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'razer_hydra': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/razer_hydra/msg'], 'geometry_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/geometry_msgs/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::razer_hydra::HydraPaddle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::razer_hydra::HydraPaddle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::razer_hydra::HydraPaddle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::razer_hydra::HydraPaddle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::razer_hydra::HydraPaddle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::razer_hydra::HydraPaddle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::razer_hydra::HydraPaddle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9aa188f8a684b5f86f071eb093833ed5";
  }

  static const char* value(const ::razer_hydra::HydraPaddle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9aa188f8a684b5f8ULL;
  static const uint64_t static_value2 = 0x6f071eb093833ed5ULL;
};

template<class ContainerAllocator>
struct DataType< ::razer_hydra::HydraPaddle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "razer_hydra/HydraPaddle";
  }

  static const char* value(const ::razer_hydra::HydraPaddle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::razer_hydra::HydraPaddle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Transform transform\n"
"bool[7] buttons\n"
"float32[2] joy\n"
"float32 trigger\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Transform\n"
"# This represents the transform between two coordinate frames in free space.\n"
"\n"
"Vector3 translation\n"
"Quaternion rotation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::razer_hydra::HydraPaddle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::razer_hydra::HydraPaddle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.transform);
      stream.next(m.buttons);
      stream.next(m.joy);
      stream.next(m.trigger);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HydraPaddle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::razer_hydra::HydraPaddle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::razer_hydra::HydraPaddle_<ContainerAllocator>& v)
  {
    s << indent << "transform: ";
    s << std::endl;
    Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "  ", v.transform);
    s << indent << "buttons[]" << std::endl;
    for (size_t i = 0; i < v.buttons.size(); ++i)
    {
      s << indent << "  buttons[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.buttons[i]);
    }
    s << indent << "joy[]" << std::endl;
    for (size_t i = 0; i < v.joy.size(); ++i)
    {
      s << indent << "  joy[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.joy[i]);
    }
    s << indent << "trigger: ";
    Printer<float>::stream(s, indent + "  ", v.trigger);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RAZER_HYDRA_MESSAGE_HYDRAPADDLE_H
