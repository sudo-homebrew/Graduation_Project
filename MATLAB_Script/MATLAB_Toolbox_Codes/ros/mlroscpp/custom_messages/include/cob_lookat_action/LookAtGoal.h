// Generated by gencpp from file cob_lookat_action/LookAtGoal.msg
// DO NOT EDIT!


#ifndef COB_LOOKAT_ACTION_MESSAGE_LOOKATGOAL_H
#define COB_LOOKAT_ACTION_MESSAGE_LOOKATGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cob_lookat_action
{
template <class ContainerAllocator>
struct LookAtGoal_
{
  typedef LookAtGoal_<ContainerAllocator> Type;

  LookAtGoal_()
    : target_frame()
    , pointing_frame()
    , pointing_axis_type(0)
    , base_active(false)  {
    }
  LookAtGoal_(const ContainerAllocator& _alloc)
    : target_frame(_alloc)
    , pointing_frame(_alloc)
    , pointing_axis_type(0)
    , base_active(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _target_frame_type;
  _target_frame_type target_frame;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _pointing_frame_type;
  _pointing_frame_type pointing_frame;

   typedef uint8_t _pointing_axis_type_type;
  _pointing_axis_type_type pointing_axis_type;

   typedef uint8_t _base_active_type;
  _base_active_type base_active;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(X_POSITIVE)
  #undef X_POSITIVE
#endif
#if defined(_WIN32) && defined(Y_POSITIVE)
  #undef Y_POSITIVE
#endif
#if defined(_WIN32) && defined(Z_POSITIVE)
  #undef Z_POSITIVE
#endif
#if defined(_WIN32) && defined(X_NEGATIVE)
  #undef X_NEGATIVE
#endif
#if defined(_WIN32) && defined(Y_NEGATIVE)
  #undef Y_NEGATIVE
#endif
#if defined(_WIN32) && defined(Z_NEGATIVE)
  #undef Z_NEGATIVE
#endif

  enum {
    X_POSITIVE = 0u,
    Y_POSITIVE = 1u,
    Z_POSITIVE = 2u,
    X_NEGATIVE = 3u,
    Y_NEGATIVE = 4u,
    Z_NEGATIVE = 5u,
  };


  typedef boost::shared_ptr< ::cob_lookat_action::LookAtGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_lookat_action::LookAtGoal_<ContainerAllocator> const> ConstPtr;

}; // struct LookAtGoal_

typedef ::cob_lookat_action::LookAtGoal_<std::allocator<void> > LookAtGoal;

typedef boost::shared_ptr< ::cob_lookat_action::LookAtGoal > LookAtGoalPtr;
typedef boost::shared_ptr< ::cob_lookat_action::LookAtGoal const> LookAtGoalConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cob_lookat_action::LookAtGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cob_lookat_action::LookAtGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cob_lookat_action::LookAtGoal_<ContainerAllocator1> & lhs, const ::cob_lookat_action::LookAtGoal_<ContainerAllocator2> & rhs)
{
  return lhs.target_frame == rhs.target_frame &&
    lhs.pointing_frame == rhs.pointing_frame &&
    lhs.pointing_axis_type == rhs.pointing_axis_type &&
    lhs.base_active == rhs.base_active;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cob_lookat_action::LookAtGoal_<ContainerAllocator1> & lhs, const ::cob_lookat_action::LookAtGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cob_lookat_action

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cob_lookat_action::LookAtGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cob_lookat_action::LookAtGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cob_lookat_action::LookAtGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cob_lookat_action::LookAtGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_lookat_action::LookAtGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_lookat_action::LookAtGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cob_lookat_action::LookAtGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "859d6d22351f34337a597d0ad30bf590";
  }

  static const char* value(const ::cob_lookat_action::LookAtGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x859d6d22351f3433ULL;
  static const uint64_t static_value2 = 0x7a597d0ad30bf590ULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_lookat_action::LookAtGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cob_lookat_action/LookAtGoal";
  }

  static const char* value(const ::cob_lookat_action::LookAtGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cob_lookat_action::LookAtGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"###goal definition\n"
"\n"
"string target_frame\n"
"string pointing_frame\n"
"\n"
"#geometry_msgs/Transform target_trans\n"
"#geometry_msgs/Transform pointing_offset\n"
"\n"
"uint8 X_POSITIVE = 0\n"
"uint8 Y_POSITIVE = 1\n"
"uint8 Z_POSITIVE = 2\n"
"uint8 X_NEGATIVE = 3\n"
"uint8 Y_NEGATIVE = 4\n"
"uint8 Z_NEGATIVE = 5\n"
"\n"
"uint8 pointing_axis_type\n"
"\n"
"bool base_active\n"
"\n"
;
  }

  static const char* value(const ::cob_lookat_action::LookAtGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cob_lookat_action::LookAtGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target_frame);
      stream.next(m.pointing_frame);
      stream.next(m.pointing_axis_type);
      stream.next(m.base_active);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LookAtGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cob_lookat_action::LookAtGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cob_lookat_action::LookAtGoal_<ContainerAllocator>& v)
  {
    s << indent << "target_frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.target_frame);
    s << indent << "pointing_frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.pointing_frame);
    s << indent << "pointing_axis_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pointing_axis_type);
    s << indent << "base_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.base_active);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COB_LOOKAT_ACTION_MESSAGE_LOOKATGOAL_H
