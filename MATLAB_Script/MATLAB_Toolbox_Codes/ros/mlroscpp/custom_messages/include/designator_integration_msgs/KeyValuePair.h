// Generated by gencpp from file designator_integration_msgs/KeyValuePair.msg
// DO NOT EDIT!


#ifndef DESIGNATOR_INTEGRATION_MSGS_MESSAGE_KEYVALUEPAIR_H
#define DESIGNATOR_INTEGRATION_MSGS_MESSAGE_KEYVALUEPAIR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Wrench.h>

namespace designator_integration_msgs
{
template <class ContainerAllocator>
struct KeyValuePair_
{
  typedef KeyValuePair_<ContainerAllocator> Type;

  KeyValuePair_()
    : id(0)
    , parent(0)
    , type(0)
    , key()
    , value_string()
    , value_float(0.0)
    , value_data()
    , value_array()
    , value_posestamped()
    , value_pose()
    , value_point()
    , value_wrench()  {
    }
  KeyValuePair_(const ContainerAllocator& _alloc)
    : id(0)
    , parent(0)
    , type(0)
    , key(_alloc)
    , value_string(_alloc)
    , value_float(0.0)
    , value_data(_alloc)
    , value_array(_alloc)
    , value_posestamped(_alloc)
    , value_pose(_alloc)
    , value_point(_alloc)
    , value_wrench(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef int32_t _parent_type;
  _parent_type parent;

   typedef int32_t _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _key_type;
  _key_type key;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _value_string_type;
  _value_string_type value_string;

   typedef double _value_float_type;
  _value_float_type value_float;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _value_data_type;
  _value_data_type value_data;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _value_array_type;
  _value_array_type value_array;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _value_posestamped_type;
  _value_posestamped_type value_posestamped;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _value_pose_type;
  _value_pose_type value_pose;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _value_point_type;
  _value_point_type value_point;

   typedef  ::geometry_msgs::Wrench_<ContainerAllocator>  _value_wrench_type;
  _value_wrench_type value_wrench;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(TYPE_STRING)
  #undef TYPE_STRING
#endif
#if defined(_WIN32) && defined(TYPE_FLOAT)
  #undef TYPE_FLOAT
#endif
#if defined(_WIN32) && defined(TYPE_DATA)
  #undef TYPE_DATA
#endif
#if defined(_WIN32) && defined(TYPE_LIST)
  #undef TYPE_LIST
#endif
#if defined(_WIN32) && defined(TYPE_POSESTAMPED)
  #undef TYPE_POSESTAMPED
#endif
#if defined(_WIN32) && defined(TYPE_POSE)
  #undef TYPE_POSE
#endif
#if defined(_WIN32) && defined(TYPE_DESIGNATOR_ACTION)
  #undef TYPE_DESIGNATOR_ACTION
#endif
#if defined(_WIN32) && defined(TYPE_DESIGNATOR_OBJECT)
  #undef TYPE_DESIGNATOR_OBJECT
#endif
#if defined(_WIN32) && defined(TYPE_DESIGNATOR_LOCATION)
  #undef TYPE_DESIGNATOR_LOCATION
#endif
#if defined(_WIN32) && defined(TYPE_DESIGNATOR_HUMAN)
  #undef TYPE_DESIGNATOR_HUMAN
#endif
#if defined(_WIN32) && defined(TYPE_POINT)
  #undef TYPE_POINT
#endif
#if defined(_WIN32) && defined(TYPE_WRENCH)
  #undef TYPE_WRENCH
#endif
#if defined(_WIN32) && defined(TYPE_MATRIX)
  #undef TYPE_MATRIX
#endif
#if defined(_WIN32) && defined(TYPE_VECTOR)
  #undef TYPE_VECTOR
#endif

  enum {
    TYPE_STRING = 0,
    TYPE_FLOAT = 1,
    TYPE_DATA = 2,
    TYPE_LIST = 3,
    TYPE_POSESTAMPED = 4,
    TYPE_POSE = 5,
    TYPE_DESIGNATOR_ACTION = 6,
    TYPE_DESIGNATOR_OBJECT = 7,
    TYPE_DESIGNATOR_LOCATION = 8,
    TYPE_DESIGNATOR_HUMAN = 9,
    TYPE_POINT = 10,
    TYPE_WRENCH = 11,
    TYPE_MATRIX = 12,
    TYPE_VECTOR = 13,
  };


  typedef boost::shared_ptr< ::designator_integration_msgs::KeyValuePair_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::designator_integration_msgs::KeyValuePair_<ContainerAllocator> const> ConstPtr;

}; // struct KeyValuePair_

typedef ::designator_integration_msgs::KeyValuePair_<std::allocator<void> > KeyValuePair;

typedef boost::shared_ptr< ::designator_integration_msgs::KeyValuePair > KeyValuePairPtr;
typedef boost::shared_ptr< ::designator_integration_msgs::KeyValuePair const> KeyValuePairConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::designator_integration_msgs::KeyValuePair_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::designator_integration_msgs::KeyValuePair_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::designator_integration_msgs::KeyValuePair_<ContainerAllocator1> & lhs, const ::designator_integration_msgs::KeyValuePair_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.parent == rhs.parent &&
    lhs.type == rhs.type &&
    lhs.key == rhs.key &&
    lhs.value_string == rhs.value_string &&
    lhs.value_float == rhs.value_float &&
    lhs.value_data == rhs.value_data &&
    lhs.value_array == rhs.value_array &&
    lhs.value_posestamped == rhs.value_posestamped &&
    lhs.value_pose == rhs.value_pose &&
    lhs.value_point == rhs.value_point &&
    lhs.value_wrench == rhs.value_wrench;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::designator_integration_msgs::KeyValuePair_<ContainerAllocator1> & lhs, const ::designator_integration_msgs::KeyValuePair_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace designator_integration_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::designator_integration_msgs::KeyValuePair_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::designator_integration_msgs::KeyValuePair_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::designator_integration_msgs::KeyValuePair_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::designator_integration_msgs::KeyValuePair_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::designator_integration_msgs::KeyValuePair_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::designator_integration_msgs::KeyValuePair_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::designator_integration_msgs::KeyValuePair_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bf2b07f354b90ce1746743f304bc36a5";
  }

  static const char* value(const ::designator_integration_msgs::KeyValuePair_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbf2b07f354b90ce1ULL;
  static const uint64_t static_value2 = 0x746743f304bc36a5ULL;
};

template<class ContainerAllocator>
struct DataType< ::designator_integration_msgs::KeyValuePair_<ContainerAllocator> >
{
  static const char* value()
  {
    return "designator_integration_msgs/KeyValuePair";
  }

  static const char* value(const ::designator_integration_msgs::KeyValuePair_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::designator_integration_msgs::KeyValuePair_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Purely for (de-)serialization purposes\n"
"int32 id\n"
"int32 parent\n"
"\n"
"# Data\n"
"int32 TYPE_STRING=0\n"
"int32 TYPE_FLOAT=1\n"
"int32 TYPE_DATA=2\n"
"int32 TYPE_LIST=3\n"
"int32 TYPE_POSESTAMPED=4\n"
"int32 TYPE_POSE=5\n"
"int32 TYPE_DESIGNATOR_ACTION=6\n"
"int32 TYPE_DESIGNATOR_OBJECT=7\n"
"int32 TYPE_DESIGNATOR_LOCATION=8\n"
"int32 TYPE_DESIGNATOR_HUMAN=9\n"
"int32 TYPE_POINT=10\n"
"int32 TYPE_WRENCH=11\n"
"int32 TYPE_MATRIX=12\n"
"int32 TYPE_VECTOR=13\n"
"\n"
"int32 type\n"
"\n"
"string key\n"
"string value_string\n"
"float64 value_float\n"
"char[] value_data\n"
"float64[] value_array\n"
"geometry_msgs/PoseStamped value_posestamped\n"
"geometry_msgs/Pose value_pose\n"
"geometry_msgs/Point value_point\n"
"geometry_msgs/Wrench value_wrench\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Wrench\n"
"# This represents force in free space, separated into\n"
"# its linear and angular parts.\n"
"Vector3  force\n"
"Vector3  torque\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::designator_integration_msgs::KeyValuePair_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::designator_integration_msgs::KeyValuePair_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.parent);
      stream.next(m.type);
      stream.next(m.key);
      stream.next(m.value_string);
      stream.next(m.value_float);
      stream.next(m.value_data);
      stream.next(m.value_array);
      stream.next(m.value_posestamped);
      stream.next(m.value_pose);
      stream.next(m.value_point);
      stream.next(m.value_wrench);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct KeyValuePair_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::designator_integration_msgs::KeyValuePair_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::designator_integration_msgs::KeyValuePair_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "parent: ";
    Printer<int32_t>::stream(s, indent + "  ", v.parent);
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "key: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.key);
    s << indent << "value_string: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.value_string);
    s << indent << "value_float: ";
    Printer<double>::stream(s, indent + "  ", v.value_float);
    s << indent << "value_data[]" << std::endl;
    for (size_t i = 0; i < v.value_data.size(); ++i)
    {
      s << indent << "  value_data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.value_data[i]);
    }
    s << indent << "value_array[]" << std::endl;
    for (size_t i = 0; i < v.value_array.size(); ++i)
    {
      s << indent << "  value_array[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.value_array[i]);
    }
    s << indent << "value_posestamped: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.value_posestamped);
    s << indent << "value_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.value_pose);
    s << indent << "value_point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.value_point);
    s << indent << "value_wrench: ";
    s << std::endl;
    Printer< ::geometry_msgs::Wrench_<ContainerAllocator> >::stream(s, indent + "  ", v.value_wrench);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DESIGNATOR_INTEGRATION_MSGS_MESSAGE_KEYVALUEPAIR_H
