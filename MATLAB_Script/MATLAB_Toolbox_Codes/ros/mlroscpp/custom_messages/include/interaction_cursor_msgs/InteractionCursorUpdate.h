// Generated by gencpp from file interaction_cursor_msgs/InteractionCursorUpdate.msg
// DO NOT EDIT!


#ifndef INTERACTION_CURSOR_MSGS_MESSAGE_INTERACTIONCURSORUPDATE_H
#define INTERACTION_CURSOR_MSGS_MESSAGE_INTERACTIONCURSORUPDATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>
#include <visualization_msgs/Marker.h>

namespace interaction_cursor_msgs
{
template <class ContainerAllocator>
struct InteractionCursorUpdate_
{
  typedef InteractionCursorUpdate_<ContainerAllocator> Type;

  InteractionCursorUpdate_()
    : pose()
    , markers()
    , button_state(0)
    , key_event(0)  {
    }
  InteractionCursorUpdate_(const ContainerAllocator& _alloc)
    : pose(_alloc)
    , markers(_alloc)
    , button_state(0)
    , key_event(0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef std::vector< ::visualization_msgs::Marker_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::visualization_msgs::Marker_<ContainerAllocator> >::other >  _markers_type;
  _markers_type markers;

   typedef uint8_t _button_state_type;
  _button_state_type button_state;

   typedef uint8_t _key_event_type;
  _key_event_type key_event;



  enum {
    NONE = 0u,
    KEEP_ALIVE = 1u,
    GRAB = 2u,
    RELEASE = 3u,
    QUERY_MENU = 4u,
    KEY_UP = 1u,
    KEY_DOWN = 2u,
    KEY_LEFT = 3u,
    KEY_RIGHT = 4u,
    KEY_ENTER = 5u,
    KEY_ESCAPE = 6u,
  };


  typedef boost::shared_ptr< ::interaction_cursor_msgs::InteractionCursorUpdate_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::interaction_cursor_msgs::InteractionCursorUpdate_<ContainerAllocator> const> ConstPtr;

}; // struct InteractionCursorUpdate_

typedef ::interaction_cursor_msgs::InteractionCursorUpdate_<std::allocator<void> > InteractionCursorUpdate;

typedef boost::shared_ptr< ::interaction_cursor_msgs::InteractionCursorUpdate > InteractionCursorUpdatePtr;
typedef boost::shared_ptr< ::interaction_cursor_msgs::InteractionCursorUpdate const> InteractionCursorUpdateConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::interaction_cursor_msgs::InteractionCursorUpdate_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::interaction_cursor_msgs::InteractionCursorUpdate_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace interaction_cursor_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/geometry_msgs/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'interaction_cursor_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/interaction_cursor_msgs/msg'], 'visualization_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/visualization_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::interaction_cursor_msgs::InteractionCursorUpdate_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::interaction_cursor_msgs::InteractionCursorUpdate_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::interaction_cursor_msgs::InteractionCursorUpdate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::interaction_cursor_msgs::InteractionCursorUpdate_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interaction_cursor_msgs::InteractionCursorUpdate_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interaction_cursor_msgs::InteractionCursorUpdate_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::interaction_cursor_msgs::InteractionCursorUpdate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a43f17218e223e4570ef9a21571e18c1";
  }

  static const char* value(const ::interaction_cursor_msgs::InteractionCursorUpdate_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa43f17218e223e45ULL;
  static const uint64_t static_value2 = 0x70ef9a21571e18c1ULL;
};

template<class ContainerAllocator>
struct DataType< ::interaction_cursor_msgs::InteractionCursorUpdate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "interaction_cursor_msgs/InteractionCursorUpdate";
  }

  static const char* value(const ::interaction_cursor_msgs::InteractionCursorUpdate_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::interaction_cursor_msgs::InteractionCursorUpdate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# REQUIRED: Pose for cursor\n"
"geometry_msgs/PoseStamped pose\n"
"\n"
"# OPTIONAL: One or more markers to draw for the cursor\n"
"#           (if empty, just draws a sphere)\n"
"# On creation, marker poses can be specified in any frame, but they will be\n"
"# transformed and thereafter \"rigidly attached\" to the cursor frame.\n"
"visualization_msgs/Marker[] markers\n"
"\n"
"# REQUIRED  \n"
"uint8 button_state\n"
"uint8 NONE        = 0 # No buttons are pressed.\n"
"uint8 KEEP_ALIVE  = 1 # Sent while dragging to keep up control of the marker.\n"
"uint8 GRAB        = 2 # Start dragging a marker (e.g. a \"mouse_down\" event).\n"
"uint8 RELEASE     = 3 # Stop dragging a marker (e.g. a \"mouse_up\" event)\n"
"uint8 QUERY_MENU  = 4 # Request menu options (e.g. a \"right-click).\n"
"\n"
"# REQUIRED  \n"
"uint8 key_event\n"
"# default 0 is \"NONE\", already defined above\n"
"uint8 KEY_UP      = 1\n"
"uint8 KEY_DOWN    = 2\n"
"uint8 KEY_LEFT    = 3\n"
"uint8 KEY_RIGHT   = 4\n"
"uint8 KEY_ENTER   = 5\n"
"uint8 KEY_ESCAPE  = 6\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of postion and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: visualization_msgs/Marker\n"
"# See http://www.ros.org/wiki/rviz/DisplayTypes/Marker and http://www.ros.org/wiki/rviz/Tutorials/Markers%3A%20Basic%20Shapes for more information on using this message with rviz\n"
"\n"
"uint8 ARROW=0\n"
"uint8 CUBE=1\n"
"uint8 SPHERE=2\n"
"uint8 CYLINDER=3\n"
"uint8 LINE_STRIP=4\n"
"uint8 LINE_LIST=5\n"
"uint8 CUBE_LIST=6\n"
"uint8 SPHERE_LIST=7\n"
"uint8 POINTS=8\n"
"uint8 TEXT_VIEW_FACING=9\n"
"uint8 MESH_RESOURCE=10\n"
"uint8 TRIANGLE_LIST=11\n"
"\n"
"uint8 ADD=0\n"
"uint8 MODIFY=0\n"
"uint8 DELETE=2\n"
"\n"
"Header header                        # header for time/frame information\n"
"string ns                            # Namespace to place this object in... used in conjunction with id to create a unique name for the object\n"
"int32 id 		                         # object ID useful in conjunction with the namespace for manipulating and deleting the object later\n"
"int32 type 		                       # Type of object\n"
"int32 action 	                       # 0 add/modify an object, 1 (deprecated), 2 deletes an object\n"
"geometry_msgs/Pose pose                 # Pose of the object\n"
"geometry_msgs/Vector3 scale             # Scale of the object 1,1,1 means default (usually 1 meter square)\n"
"std_msgs/ColorRGBA color             # Color [0.0-1.0]\n"
"duration lifetime                    # How long the object should last before being automatically deleted.  0 means forever\n"
"bool frame_locked                    # If this marker should be frame-locked, i.e. retransformed into its frame every timestep\n"
"\n"
"#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)\n"
"geometry_msgs/Point[] points\n"
"#Only used if the type specified has some use for them (eg. POINTS, LINE_STRIP, ...)\n"
"#number of colors must either be 0 or equal to the number of points\n"
"#NOTE: alpha is not yet used\n"
"std_msgs/ColorRGBA[] colors\n"
"\n"
"# NOTE: only used for text markers\n"
"string text\n"
"\n"
"# NOTE: only used for MESH_RESOURCE markers\n"
"string mesh_resource\n"
"bool mesh_use_embedded_materials\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: std_msgs/ColorRGBA\n"
"float32 r\n"
"float32 g\n"
"float32 b\n"
"float32 a\n"
;
  }

  static const char* value(const ::interaction_cursor_msgs::InteractionCursorUpdate_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::interaction_cursor_msgs::InteractionCursorUpdate_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose);
      stream.next(m.markers);
      stream.next(m.button_state);
      stream.next(m.key_event);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct InteractionCursorUpdate_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::interaction_cursor_msgs::InteractionCursorUpdate_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::interaction_cursor_msgs::InteractionCursorUpdate_<ContainerAllocator>& v)
  {
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "markers[]" << std::endl;
    for (size_t i = 0; i < v.markers.size(); ++i)
    {
      s << indent << "  markers[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::visualization_msgs::Marker_<ContainerAllocator> >::stream(s, indent + "    ", v.markers[i]);
    }
    s << indent << "button_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button_state);
    s << indent << "key_event: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.key_event);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTERACTION_CURSOR_MSGS_MESSAGE_INTERACTIONCURSORUPDATE_H
