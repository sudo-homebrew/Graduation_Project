// Generated by gencpp from file concert_msgs/ConcertClientConfiguration.msg
// DO NOT EDIT!


#ifndef CONCERT_MSGS_MESSAGE_CONCERTCLIENTCONFIGURATION_H
#define CONCERT_MSGS_MESSAGE_CONCERTCLIENTCONFIGURATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace concert_msgs
{
template <class ContainerAllocator>
struct ConcertClientConfiguration_
{
  typedef ConcertClientConfiguration_<ContainerAllocator> Type;

  ConcertClientConfiguration_()
    : platform()
    , system()
    , robot()
    , app()  {
    }
  ConcertClientConfiguration_(const ContainerAllocator& _alloc)
    : platform(_alloc)
    , system(_alloc)
    , robot(_alloc)
    , app(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _platform_type;
  _platform_type platform;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _system_type;
  _system_type system;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _robot_type;
  _robot_type robot;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _app_type;
  _app_type app;





  typedef boost::shared_ptr< ::concert_msgs::ConcertClientConfiguration_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::concert_msgs::ConcertClientConfiguration_<ContainerAllocator> const> ConstPtr;

}; // struct ConcertClientConfiguration_

typedef ::concert_msgs::ConcertClientConfiguration_<std::allocator<void> > ConcertClientConfiguration;

typedef boost::shared_ptr< ::concert_msgs::ConcertClientConfiguration > ConcertClientConfigurationPtr;
typedef boost::shared_ptr< ::concert_msgs::ConcertClientConfiguration const> ConcertClientConfigurationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::concert_msgs::ConcertClientConfiguration_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::concert_msgs::ConcertClientConfiguration_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace concert_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'rocon_app_manager_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/rocon_app_manager_msgs/msg'], 'concert_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/concert_msgs/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::concert_msgs::ConcertClientConfiguration_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::concert_msgs::ConcertClientConfiguration_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::concert_msgs::ConcertClientConfiguration_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::concert_msgs::ConcertClientConfiguration_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::concert_msgs::ConcertClientConfiguration_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::concert_msgs::ConcertClientConfiguration_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::concert_msgs::ConcertClientConfiguration_<ContainerAllocator> >
{
  static const char* value()
  {
    return "271180ccd464930e6cd371441f8f7bf5";
  }

  static const char* value(const ::concert_msgs::ConcertClientConfiguration_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x271180ccd464930eULL;
  static const uint64_t static_value2 = 0x6cd371441f8f7bf5ULL;
};

template<class ContainerAllocator>
struct DataType< ::concert_msgs::ConcertClientConfiguration_<ContainerAllocator> >
{
  static const char* value()
  {
    return "concert_msgs/ConcertClientConfiguration";
  }

  static const char* value(const ::concert_msgs::ConcertClientConfiguration_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::concert_msgs::ConcertClientConfiguration_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This provides information about the concert client\n"
"# and app configuration required by an implementation\n"
"# of an orchestrated concert solution.\n"
"\n"
"# The platform id triple\n"
"string platform\n"
"string system\n"
"string robot\n"
"\n"
"# App that should run\n"
"string app\n"
;
  }

  static const char* value(const ::concert_msgs::ConcertClientConfiguration_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::concert_msgs::ConcertClientConfiguration_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.platform);
      stream.next(m.system);
      stream.next(m.robot);
      stream.next(m.app);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ConcertClientConfiguration_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::concert_msgs::ConcertClientConfiguration_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::concert_msgs::ConcertClientConfiguration_<ContainerAllocator>& v)
  {
    s << indent << "platform: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.platform);
    s << indent << "system: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.system);
    s << indent << "robot: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.robot);
    s << indent << "app: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.app);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONCERT_MSGS_MESSAGE_CONCERTCLIENTCONFIGURATION_H
