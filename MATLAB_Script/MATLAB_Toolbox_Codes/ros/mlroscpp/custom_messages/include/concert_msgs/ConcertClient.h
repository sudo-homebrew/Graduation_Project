// Generated by gencpp from file concert_msgs/ConcertClient.msg
// DO NOT EDIT!


#ifndef CONCERT_MSGS_MESSAGE_CONCERTCLIENT_H
#define CONCERT_MSGS_MESSAGE_CONCERTCLIENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <rocon_app_manager_msgs/App.h>

namespace concert_msgs
{
template <class ContainerAllocator>
struct ConcertClient_
{
  typedef ConcertClient_<ContainerAllocator> Type;

  ConcertClient_()
    : name()
    , gateway_name()
    , platform()
    , system()
    , robot()
    , client_status()
    , app_status()
    , status()
    , last_connection_timestamp()
    , apps()  {
    }
  ConcertClient_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , gateway_name(_alloc)
    , platform(_alloc)
    , system(_alloc)
    , robot(_alloc)
    , client_status(_alloc)
    , app_status(_alloc)
    , status(_alloc)
    , last_connection_timestamp()
    , apps(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _gateway_name_type;
  _gateway_name_type gateway_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _platform_type;
  _platform_type platform;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _system_type;
  _system_type system;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _robot_type;
  _robot_type robot;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _client_status_type;
  _client_status_type client_status;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _app_status_type;
  _app_status_type app_status;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_type;
  _status_type status;

   typedef ros::Time _last_connection_timestamp_type;
  _last_connection_timestamp_type last_connection_timestamp;

   typedef std::vector< ::rocon_app_manager_msgs::App_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rocon_app_manager_msgs::App_<ContainerAllocator> >::other >  _apps_type;
  _apps_type apps;





  typedef boost::shared_ptr< ::concert_msgs::ConcertClient_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::concert_msgs::ConcertClient_<ContainerAllocator> const> ConstPtr;

}; // struct ConcertClient_

typedef ::concert_msgs::ConcertClient_<std::allocator<void> > ConcertClient;

typedef boost::shared_ptr< ::concert_msgs::ConcertClient > ConcertClientPtr;
typedef boost::shared_ptr< ::concert_msgs::ConcertClient const> ConcertClientConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::concert_msgs::ConcertClient_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::concert_msgs::ConcertClient_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace concert_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'rocon_app_manager_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/rocon_app_manager_msgs/msg'], 'concert_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/concert_msgs/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::concert_msgs::ConcertClient_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::concert_msgs::ConcertClient_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::concert_msgs::ConcertClient_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::concert_msgs::ConcertClient_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::concert_msgs::ConcertClient_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::concert_msgs::ConcertClient_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::concert_msgs::ConcertClient_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b3a232588ecbbea02126d208e1faa1a9";
  }

  static const char* value(const ::concert_msgs::ConcertClient_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb3a232588ecbbea0ULL;
  static const uint64_t static_value2 = 0x2126d208e1faa1a9ULL;
};

template<class ContainerAllocator>
struct DataType< ::concert_msgs::ConcertClient_<ContainerAllocator> >
{
  static const char* value()
  {
    return "concert_msgs/ConcertClient";
  }

  static const char* value(const ::concert_msgs::ConcertClient_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::concert_msgs::ConcertClient_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# \n"
"# Describes a concert client - used only on the concert side\n"
"#\n"
"# Unique names - human consumable rocon name as well as global gateway name\n"
"string name\n"
"string gateway_name\n"
"\n"
"# The platform id triple (refer to concert_clients/PlatformInfo.msg for string values)\n"
"string platform\n"
"string system\n"
"string robot\n"
"\n"
"# Current status of the concert client (refer to concert_msgs/ConcertClient.msg for mode strings)\n"
"string client_status\n"
"string app_status\n"
"\n"
"# Depracate this\n"
"string status\n"
"\n"
"# Statistics\n"
"time last_connection_timestamp\n"
"\n"
"rocon_app_manager_msgs/App[] apps\n"
"\n"
"================================================================================\n"
"MSG: rocon_app_manager_msgs/App\n"
"# app name\n"
"string name\n"
"# user-friendly display name\n"
"string display_name\n"
"string description\n"
"string platform\n"
"string status\n"
"\n"
"# icon for showing the app\n"
"Icon icon\n"
"#  ordered list (by preference) of pairing clients to interact with this robot app.\n"
"PairingClient[] pairing_clients\n"
"================================================================================\n"
"MSG: rocon_app_manager_msgs/Icon\n"
"# Image data format.  \"jpeg\" or \"png\"\n"
"string format\n"
"\n"
"# Image data.\n"
"uint8[] data\n"
"================================================================================\n"
"MSG: rocon_app_manager_msgs/PairingClient\n"
"# like \"android\" or \"web\" or \"linux\"\n"
"string client_type\n"
"\n"
"# like \"intent = ros.android.teleop\" and \"accelerometer = true\", used to choose which ClientApp to use\n"
"KeyValue[] manager_data\n"
"\n"
"# parameters which just get passed through to the client app.\n"
"KeyValue[] app_data\n"
"================================================================================\n"
"MSG: rocon_app_manager_msgs/KeyValue\n"
"string key\n"
"string value\n"
;
  }

  static const char* value(const ::concert_msgs::ConcertClient_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::concert_msgs::ConcertClient_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.gateway_name);
      stream.next(m.platform);
      stream.next(m.system);
      stream.next(m.robot);
      stream.next(m.client_status);
      stream.next(m.app_status);
      stream.next(m.status);
      stream.next(m.last_connection_timestamp);
      stream.next(m.apps);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ConcertClient_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::concert_msgs::ConcertClient_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::concert_msgs::ConcertClient_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "gateway_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.gateway_name);
    s << indent << "platform: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.platform);
    s << indent << "system: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.system);
    s << indent << "robot: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.robot);
    s << indent << "client_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.client_status);
    s << indent << "app_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.app_status);
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status);
    s << indent << "last_connection_timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.last_connection_timestamp);
    s << indent << "apps[]" << std::endl;
    for (size_t i = 0; i < v.apps.size(); ++i)
    {
      s << indent << "  apps[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rocon_app_manager_msgs::App_<ContainerAllocator> >::stream(s, indent + "    ", v.apps[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONCERT_MSGS_MESSAGE_CONCERTCLIENT_H
