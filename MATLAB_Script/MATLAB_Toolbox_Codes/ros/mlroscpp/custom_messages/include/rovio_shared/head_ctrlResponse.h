// Generated by gencpp from file rovio_shared/head_ctrlResponse.msg
// DO NOT EDIT!


#ifndef ROVIO_SHARED_MESSAGE_HEAD_CTRLRESPONSE_H
#define ROVIO_SHARED_MESSAGE_HEAD_CTRLRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rovio_shared
{
template <class ContainerAllocator>
struct head_ctrlResponse_
{
  typedef head_ctrlResponse_<ContainerAllocator> Type;

  head_ctrlResponse_()
    : response(0)  {
    }
  head_ctrlResponse_(const ContainerAllocator& _alloc)
    : response(0)  {
  (void)_alloc;
    }



   typedef int8_t _response_type;
  _response_type response;



  enum {
 
    SUCCESS = 0,
 
    FAILURE = 1,
 
    ROBOT_BUSY = 2,
 
    FEATURE_NOT_IMPLEMENTED = 3,
 
    UNKNOWN_CGI_ACTION = 4,
 
    NO_NS_SIGNAL = 5,
 
    NO_EMPTY_PATH_AVAILABLE = 6,
 
    FAILED_TO_READ_PATH = 7,
 
    PATH_BASEADDRESS_NOT_INITIALIZED = 8,
 
    PATH_NOT_FOUND = 9,
 
    PATH_NAME_NOT_SPECIFIED = 10,
 
    NOT_RECORDING_PATH = 11,
 
    FLASH_NOT_INITIALIZED = 12,
 
    FAILED_TO_DELETE_PATH = 13,
 
    FAILED_TO_READ_FROM_FLASH = 14,
 
    FAILED_TO_WRITE_TO_FLASH = 15,
 
    FLASH_NOT_READY = 16,
 
    NO_MEMORY_AVAILABLE = 17,
 
    NO_MCU_PORT_AVAILABLE = 18,
 
    NO_NS_PORT_AVAILABLE = 19,
 
    NS_PACKET_CHECKSUM_ERROR = 20,
 
    NS_UART_READ_ERROR = 21,
 
    PARAMETER_OUTOFRANGE = 22,
 
    NO_PARAMETER = 23,
  };


  typedef boost::shared_ptr< ::rovio_shared::head_ctrlResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rovio_shared::head_ctrlResponse_<ContainerAllocator> const> ConstPtr;

}; // struct head_ctrlResponse_

typedef ::rovio_shared::head_ctrlResponse_<std::allocator<void> > head_ctrlResponse;

typedef boost::shared_ptr< ::rovio_shared::head_ctrlResponse > head_ctrlResponsePtr;
typedef boost::shared_ptr< ::rovio_shared::head_ctrlResponse const> head_ctrlResponseConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rovio_shared::head_ctrlResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rovio_shared::head_ctrlResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rovio_shared

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'rovio_shared': ['/mathworks/home/pmurali/Documents/R/matlab_msg_gen_ros1/glnxa64/src/rovio_shared/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1339814/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rovio_shared::head_ctrlResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rovio_shared::head_ctrlResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rovio_shared::head_ctrlResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rovio_shared::head_ctrlResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rovio_shared::head_ctrlResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rovio_shared::head_ctrlResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rovio_shared::head_ctrlResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "208ac5fdc497ef2f1bd168d28a2b5e05";
  }

  static const char* value(const ::rovio_shared::head_ctrlResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x208ac5fdc497ef2fULL;
  static const uint64_t static_value2 = 0x1bd168d28a2b5e05ULL;
};

template<class ContainerAllocator>
struct DataType< ::rovio_shared::head_ctrlResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rovio_shared/head_ctrlResponse";
  }

  static const char* value(const ::rovio_shared::head_ctrlResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rovio_shared::head_ctrlResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"int8 SUCCESS=0\n"
"int8 FAILURE=1\n"
"int8 ROBOT_BUSY=2\n"
"int8 FEATURE_NOT_IMPLEMENTED=3\n"
"int8 UNKNOWN_CGI_ACTION=4\n"
"int8 NO_NS_SIGNAL=5\n"
"int8 NO_EMPTY_PATH_AVAILABLE=6\n"
"int8 FAILED_TO_READ_PATH=7\n"
"int8 PATH_BASEADDRESS_NOT_INITIALIZED=8\n"
"int8 PATH_NOT_FOUND=9\n"
"int8 PATH_NAME_NOT_SPECIFIED=10\n"
"int8 NOT_RECORDING_PATH=11\n"
"int8 FLASH_NOT_INITIALIZED=12\n"
"int8 FAILED_TO_DELETE_PATH=13\n"
"int8 FAILED_TO_READ_FROM_FLASH=14\n"
"int8 FAILED_TO_WRITE_TO_FLASH=15\n"
"int8 FLASH_NOT_READY=16\n"
"int8 NO_MEMORY_AVAILABLE=17\n"
"int8 NO_MCU_PORT_AVAILABLE=18\n"
"int8 NO_NS_PORT_AVAILABLE=19\n"
"int8 NS_PACKET_CHECKSUM_ERROR=20\n"
"int8 NS_UART_READ_ERROR=21\n"
"int8 PARAMETER_OUTOFRANGE=22\n"
"int8 NO_PARAMETER=23\n"
"\n"
"int8 response\n"
"\n"
;
  }

  static const char* value(const ::rovio_shared::head_ctrlResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rovio_shared::head_ctrlResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.response);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct head_ctrlResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rovio_shared::head_ctrlResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rovio_shared::head_ctrlResponse_<ContainerAllocator>& v)
  {
    s << indent << "response: ";
    Printer<int8_t>::stream(s, indent + "  ", v.response);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROVIO_SHARED_MESSAGE_HEAD_CTRLRESPONSE_H
