// Generated by gencpp from file rovio_shared/wav_playRequest.msg
// DO NOT EDIT!


#ifndef ROVIO_SHARED_MESSAGE_WAV_PLAYREQUEST_H
#define ROVIO_SHARED_MESSAGE_WAV_PLAYREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rovio_shared
{
template <class ContainerAllocator>
struct wav_playRequest_
{
  typedef wav_playRequest_<ContainerAllocator> Type;

  wav_playRequest_()
    : f()  {
    }
  wav_playRequest_(const ContainerAllocator& _alloc)
    : f(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _f_type;
  _f_type f;





  typedef boost::shared_ptr< ::rovio_shared::wav_playRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rovio_shared::wav_playRequest_<ContainerAllocator> const> ConstPtr;

}; // struct wav_playRequest_

typedef ::rovio_shared::wav_playRequest_<std::allocator<void> > wav_playRequest;

typedef boost::shared_ptr< ::rovio_shared::wav_playRequest > wav_playRequestPtr;
typedef boost::shared_ptr< ::rovio_shared::wav_playRequest const> wav_playRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rovio_shared::wav_playRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rovio_shared::wav_playRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rovio_shared

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'rovio_shared': ['/mathworks/home/pmurali/Documents/R/matlab_msg_gen_ros1/glnxa64/src/rovio_shared/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1339814/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rovio_shared::wav_playRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rovio_shared::wav_playRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rovio_shared::wav_playRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rovio_shared::wav_playRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rovio_shared::wav_playRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rovio_shared::wav_playRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rovio_shared::wav_playRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b7ec5ba08b681050147d22f3cf073480";
  }

  static const char* value(const ::rovio_shared::wav_playRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb7ec5ba08b681050ULL;
  static const uint64_t static_value2 = 0x147d22f3cf073480ULL;
};

template<class ContainerAllocator>
struct DataType< ::rovio_shared::wav_playRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rovio_shared/wav_playRequest";
  }

  static const char* value(const ::rovio_shared::wav_playRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rovio_shared::wav_playRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"string f\n"
;
  }

  static const char* value(const ::rovio_shared::wav_playRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rovio_shared::wav_playRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.f);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct wav_playRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rovio_shared::wav_playRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rovio_shared::wav_playRequest_<ContainerAllocator>& v)
  {
    s << indent << "f: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.f);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROVIO_SHARED_MESSAGE_WAV_PLAYREQUEST_H
