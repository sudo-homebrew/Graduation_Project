// Generated by gencpp from file rovio_shared/head_ctrlRequest.msg
// DO NOT EDIT!


#ifndef ROVIO_SHARED_MESSAGE_HEAD_CTRLREQUEST_H
#define ROVIO_SHARED_MESSAGE_HEAD_CTRLREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rovio_shared
{
template <class ContainerAllocator>
struct head_ctrlRequest_
{
  typedef head_ctrlRequest_<ContainerAllocator> Type;

  head_ctrlRequest_()
    : head_pos(0)  {
    }
  head_ctrlRequest_(const ContainerAllocator& _alloc)
    : head_pos(0)  {
  (void)_alloc;
    }



   typedef int8_t _head_pos_type;
  _head_pos_type head_pos;



  enum {
 
    HEAD_UP = 11,
 
    HEAD_DOWN = 12,
 
    HEAD_MIDDLE = 13,
  };


  typedef boost::shared_ptr< ::rovio_shared::head_ctrlRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rovio_shared::head_ctrlRequest_<ContainerAllocator> const> ConstPtr;

}; // struct head_ctrlRequest_

typedef ::rovio_shared::head_ctrlRequest_<std::allocator<void> > head_ctrlRequest;

typedef boost::shared_ptr< ::rovio_shared::head_ctrlRequest > head_ctrlRequestPtr;
typedef boost::shared_ptr< ::rovio_shared::head_ctrlRequest const> head_ctrlRequestConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rovio_shared::head_ctrlRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rovio_shared::head_ctrlRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rovio_shared

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'rovio_shared': ['/mathworks/home/pmurali/Documents/R/matlab_msg_gen_ros1/glnxa64/src/rovio_shared/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1339814/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rovio_shared::head_ctrlRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rovio_shared::head_ctrlRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rovio_shared::head_ctrlRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rovio_shared::head_ctrlRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rovio_shared::head_ctrlRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rovio_shared::head_ctrlRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rovio_shared::head_ctrlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "522f8591c845ace5ac8c5c5852170802";
  }

  static const char* value(const ::rovio_shared::head_ctrlRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x522f8591c845ace5ULL;
  static const uint64_t static_value2 = 0xac8c5c5852170802ULL;
};

template<class ContainerAllocator>
struct DataType< ::rovio_shared::head_ctrlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rovio_shared/head_ctrlRequest";
  }

  static const char* value(const ::rovio_shared::head_ctrlRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rovio_shared::head_ctrlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"int8 HEAD_UP=11\n"
"int8 HEAD_DOWN=12\n"
"int8 HEAD_MIDDLE=13\n"
"\n"
"int8 head_pos\n"
;
  }

  static const char* value(const ::rovio_shared::head_ctrlRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rovio_shared::head_ctrlRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.head_pos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct head_ctrlRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rovio_shared::head_ctrlRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rovio_shared::head_ctrlRequest_<ContainerAllocator>& v)
  {
    s << indent << "head_pos: ";
    Printer<int8_t>::stream(s, indent + "  ", v.head_pos);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROVIO_SHARED_MESSAGE_HEAD_CTRLREQUEST_H
