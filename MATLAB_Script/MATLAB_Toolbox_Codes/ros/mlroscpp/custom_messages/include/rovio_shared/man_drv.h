// Generated by gencpp from file rovio_shared/man_drv.msg
// DO NOT EDIT!


#ifndef ROVIO_SHARED_MESSAGE_MAN_DRV_H
#define ROVIO_SHARED_MESSAGE_MAN_DRV_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rovio_shared
{
template <class ContainerAllocator>
struct man_drv_
{
  typedef man_drv_<ContainerAllocator> Type;

  man_drv_()
    : drive(0)
    , speed(0)  {
    }
  man_drv_(const ContainerAllocator& _alloc)
    : drive(0)
    , speed(0)  {
  (void)_alloc;
    }



   typedef int8_t _drive_type;
  _drive_type drive;

   typedef int8_t _speed_type;
  _speed_type speed;



  enum {
    STOP = 0,
    FORWARD = 1,
    BACKWARD = 2,
    STRAIGHT_LEFT = 3,
    STRAIGHT_RIGHT = 4,
    ROTATE_LEFT = 5,
    ROTATE_RIGHT = 6,
    DIAGONAL_FORWARD_LEFT = 7,
    DIAGONAL_FORWARD_RIGHT = 8,
    DIAGONAL_BACKWARD_LEFT = 9,
    DIAGONAL_BACKWARD_RIGHT = 10,
    HEAD_UP = 11,
    HEAD_DOWN = 12,
    HEAD_MIDDLE = 13,
    ROTATE_LEFT_20_DEG = 17,
    ROTATE_RIGHT_20_DEG = 18,
    MIN_DRIVE_VAL = 0,
    MAX_DRIVE_VAL = 18,
    FASTEST = 1,
    SLOWEST = 10,
    MIN_SPEED_VAL = 1,
    MAX_SPEED_VAL = 10,
  };


  typedef boost::shared_ptr< ::rovio_shared::man_drv_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rovio_shared::man_drv_<ContainerAllocator> const> ConstPtr;

}; // struct man_drv_

typedef ::rovio_shared::man_drv_<std::allocator<void> > man_drv;

typedef boost::shared_ptr< ::rovio_shared::man_drv > man_drvPtr;
typedef boost::shared_ptr< ::rovio_shared::man_drv const> man_drvConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rovio_shared::man_drv_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rovio_shared::man_drv_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rovio_shared

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'rovio_shared': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/rovio_shared/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rovio_shared::man_drv_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rovio_shared::man_drv_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rovio_shared::man_drv_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rovio_shared::man_drv_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rovio_shared::man_drv_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rovio_shared::man_drv_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rovio_shared::man_drv_<ContainerAllocator> >
{
  static const char* value()
  {
    return "14675853bd9417686a1390c3fb2eaae6";
  }

  static const char* value(const ::rovio_shared::man_drv_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x14675853bd941768ULL;
  static const uint64_t static_value2 = 0x6a1390c3fb2eaae6ULL;
};

template<class ContainerAllocator>
struct DataType< ::rovio_shared::man_drv_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rovio_shared/man_drv";
  }

  static const char* value(const ::rovio_shared::man_drv_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rovio_shared::man_drv_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Constants for the 'drive' value as defined by the Rovio API\n"
"int8 STOP=0\n"
"int8 FORWARD=1\n"
"int8 BACKWARD=2 \n"
"int8 STRAIGHT_LEFT=3\n"
"int8 STRAIGHT_RIGHT=4\n"
"int8 ROTATE_LEFT=5\n"
"int8 ROTATE_RIGHT=6\n"
"int8 DIAGONAL_FORWARD_LEFT=7\n"
"int8 DIAGONAL_FORWARD_RIGHT=8\n"
"int8 DIAGONAL_BACKWARD_LEFT=9\n"
"int8 DIAGONAL_BACKWARD_RIGHT=10\n"
"int8 HEAD_UP=11\n"
"int8 HEAD_DOWN=12\n"
"int8 HEAD_MIDDLE=13\n"
"# 14, 15, and 16 are reserved values\n"
"int8 ROTATE_LEFT_20_DEG=17\n"
"int8 ROTATE_RIGHT_20_DEG=18\n"
"int8 MIN_DRIVE_VAL=0\n"
"int8 MAX_DRIVE_VAL=18\n"
"\n"
"# Constants useful for the 'speed' value as defined by the Rovio API\n"
"int8 FASTEST=1 \n"
"int8 SLOWEST=10\n"
"int8 MIN_SPEED_VAL=1\n"
"int8 MAX_SPEED_VAL=10\n"
"\n"
"# The manual drive message contains a 'drive' and 'speed' value as defined by the Rovio API\n"
"int8 drive\n"
"int8 speed\n"
;
  }

  static const char* value(const ::rovio_shared::man_drv_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rovio_shared::man_drv_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.drive);
      stream.next(m.speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct man_drv_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rovio_shared::man_drv_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rovio_shared::man_drv_<ContainerAllocator>& v)
  {
    s << indent << "drive: ";
    Printer<int8_t>::stream(s, indent + "  ", v.drive);
    s << indent << "speed: ";
    Printer<int8_t>::stream(s, indent + "  ", v.speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROVIO_SHARED_MESSAGE_MAN_DRV_H
