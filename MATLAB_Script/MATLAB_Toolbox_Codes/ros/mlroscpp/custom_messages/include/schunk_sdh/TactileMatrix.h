// Generated by gencpp from file schunk_sdh/TactileMatrix.msg
// DO NOT EDIT!


#ifndef SCHUNK_SDH_MESSAGE_TACTILEMATRIX_H
#define SCHUNK_SDH_MESSAGE_TACTILEMATRIX_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace schunk_sdh
{
template <class ContainerAllocator>
struct TactileMatrix_
{
  typedef TactileMatrix_<ContainerAllocator> Type;

  TactileMatrix_()
    : matrix_id(0)
    , cells_x(0)
    , cells_y(0)
    , tactile_array()  {
    }
  TactileMatrix_(const ContainerAllocator& _alloc)
    : matrix_id(0)
    , cells_x(0)
    , cells_y(0)
    , tactile_array(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _matrix_id_type;
  _matrix_id_type matrix_id;

   typedef int16_t _cells_x_type;
  _cells_x_type cells_x;

   typedef int16_t _cells_y_type;
  _cells_y_type cells_y;

   typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _tactile_array_type;
  _tactile_array_type tactile_array;





  typedef boost::shared_ptr< ::schunk_sdh::TactileMatrix_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::schunk_sdh::TactileMatrix_<ContainerAllocator> const> ConstPtr;

}; // struct TactileMatrix_

typedef ::schunk_sdh::TactileMatrix_<std::allocator<void> > TactileMatrix;

typedef boost::shared_ptr< ::schunk_sdh::TactileMatrix > TactileMatrixPtr;
typedef boost::shared_ptr< ::schunk_sdh::TactileMatrix const> TactileMatrixConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::schunk_sdh::TactileMatrix_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::schunk_sdh::TactileMatrix_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::schunk_sdh::TactileMatrix_<ContainerAllocator1> & lhs, const ::schunk_sdh::TactileMatrix_<ContainerAllocator2> & rhs)
{
  return lhs.matrix_id == rhs.matrix_id &&
    lhs.cells_x == rhs.cells_x &&
    lhs.cells_y == rhs.cells_y &&
    lhs.tactile_array == rhs.tactile_array;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::schunk_sdh::TactileMatrix_<ContainerAllocator1> & lhs, const ::schunk_sdh::TactileMatrix_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace schunk_sdh

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::schunk_sdh::TactileMatrix_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::schunk_sdh::TactileMatrix_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::schunk_sdh::TactileMatrix_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::schunk_sdh::TactileMatrix_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::schunk_sdh::TactileMatrix_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::schunk_sdh::TactileMatrix_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::schunk_sdh::TactileMatrix_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ab718b6c1d4d719110707994d2e325e4";
  }

  static const char* value(const ::schunk_sdh::TactileMatrix_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xab718b6c1d4d7191ULL;
  static const uint64_t static_value2 = 0x10707994d2e325e4ULL;
};

template<class ContainerAllocator>
struct DataType< ::schunk_sdh::TactileMatrix_<ContainerAllocator> >
{
  static const char* value()
  {
    return "schunk_sdh/TactileMatrix";
  }

  static const char* value(const ::schunk_sdh::TactileMatrix_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::schunk_sdh::TactileMatrix_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 matrix_id\n"
"int16 cells_x\n"
"int16 cells_y\n"
"int16[] tactile_array\n"
;
  }

  static const char* value(const ::schunk_sdh::TactileMatrix_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::schunk_sdh::TactileMatrix_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.matrix_id);
      stream.next(m.cells_x);
      stream.next(m.cells_y);
      stream.next(m.tactile_array);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TactileMatrix_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::schunk_sdh::TactileMatrix_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::schunk_sdh::TactileMatrix_<ContainerAllocator>& v)
  {
    s << indent << "matrix_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.matrix_id);
    s << indent << "cells_x: ";
    Printer<int16_t>::stream(s, indent + "  ", v.cells_x);
    s << indent << "cells_y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.cells_y);
    s << indent << "tactile_array[]" << std::endl;
    for (size_t i = 0; i < v.tactile_array.size(); ++i)
    {
      s << indent << "  tactile_array[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.tactile_array[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCHUNK_SDH_MESSAGE_TACTILEMATRIX_H
