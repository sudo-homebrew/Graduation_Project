// Generated by gencpp from file schunk_sdh/PressureArray.msg
// DO NOT EDIT!


#ifndef SCHUNK_SDH_MESSAGE_PRESSUREARRAY_H
#define SCHUNK_SDH_MESSAGE_PRESSUREARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace schunk_sdh
{
template <class ContainerAllocator>
struct PressureArray_
{
  typedef PressureArray_<ContainerAllocator> Type;

  PressureArray_()
    : sensor_name()
    , cells_x(0)
    , cells_y(0)
    , pressure()  {
    }
  PressureArray_(const ContainerAllocator& _alloc)
    : sensor_name(_alloc)
    , cells_x(0)
    , cells_y(0)
    , pressure(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _sensor_name_type;
  _sensor_name_type sensor_name;

   typedef uint16_t _cells_x_type;
  _cells_x_type cells_x;

   typedef uint16_t _cells_y_type;
  _cells_y_type cells_y;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _pressure_type;
  _pressure_type pressure;





  typedef boost::shared_ptr< ::schunk_sdh::PressureArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::schunk_sdh::PressureArray_<ContainerAllocator> const> ConstPtr;

}; // struct PressureArray_

typedef ::schunk_sdh::PressureArray_<std::allocator<void> > PressureArray;

typedef boost::shared_ptr< ::schunk_sdh::PressureArray > PressureArrayPtr;
typedef boost::shared_ptr< ::schunk_sdh::PressureArray const> PressureArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::schunk_sdh::PressureArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::schunk_sdh::PressureArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::schunk_sdh::PressureArray_<ContainerAllocator1> & lhs, const ::schunk_sdh::PressureArray_<ContainerAllocator2> & rhs)
{
  return lhs.sensor_name == rhs.sensor_name &&
    lhs.cells_x == rhs.cells_x &&
    lhs.cells_y == rhs.cells_y &&
    lhs.pressure == rhs.pressure;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::schunk_sdh::PressureArray_<ContainerAllocator1> & lhs, const ::schunk_sdh::PressureArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace schunk_sdh

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::schunk_sdh::PressureArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::schunk_sdh::PressureArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::schunk_sdh::PressureArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::schunk_sdh::PressureArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::schunk_sdh::PressureArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::schunk_sdh::PressureArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::schunk_sdh::PressureArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "552b4f7037a43d9de82fe16651e48e29";
  }

  static const char* value(const ::schunk_sdh::PressureArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x552b4f7037a43d9dULL;
  static const uint64_t static_value2 = 0xe82fe16651e48e29ULL;
};

template<class ContainerAllocator>
struct DataType< ::schunk_sdh::PressureArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "schunk_sdh/PressureArray";
  }

  static const char* value(const ::schunk_sdh::PressureArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::schunk_sdh::PressureArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string sensor_name\n"
"uint16 cells_x\n"
"uint16 cells_y\n"
"float64[] pressure  # unit: Pascal (Pa)\n"
;
  }

  static const char* value(const ::schunk_sdh::PressureArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::schunk_sdh::PressureArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sensor_name);
      stream.next(m.cells_x);
      stream.next(m.cells_y);
      stream.next(m.pressure);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PressureArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::schunk_sdh::PressureArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::schunk_sdh::PressureArray_<ContainerAllocator>& v)
  {
    s << indent << "sensor_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.sensor_name);
    s << indent << "cells_x: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.cells_x);
    s << indent << "cells_y: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.cells_y);
    s << indent << "pressure[]" << std::endl;
    for (size_t i = 0; i < v.pressure.size(); ++i)
    {
      s << indent << "  pressure[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.pressure[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCHUNK_SDH_MESSAGE_PRESSUREARRAY_H
