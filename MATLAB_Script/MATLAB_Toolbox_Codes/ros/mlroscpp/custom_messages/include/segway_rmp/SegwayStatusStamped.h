// Generated by gencpp from file segway_rmp/SegwayStatusStamped.msg
// DO NOT EDIT!


#ifndef SEGWAY_RMP_MESSAGE_SEGWAYSTATUSSTAMPED_H
#define SEGWAY_RMP_MESSAGE_SEGWAYSTATUSSTAMPED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <segway_rmp/SegwayStatus.h>

namespace segway_rmp
{
template <class ContainerAllocator>
struct SegwayStatusStamped_
{
  typedef SegwayStatusStamped_<ContainerAllocator> Type;

  SegwayStatusStamped_()
    : header()
    , segway()  {
    }
  SegwayStatusStamped_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , segway(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::segway_rmp::SegwayStatus_<ContainerAllocator>  _segway_type;
  _segway_type segway;





  typedef boost::shared_ptr< ::segway_rmp::SegwayStatusStamped_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::segway_rmp::SegwayStatusStamped_<ContainerAllocator> const> ConstPtr;

}; // struct SegwayStatusStamped_

typedef ::segway_rmp::SegwayStatusStamped_<std::allocator<void> > SegwayStatusStamped;

typedef boost::shared_ptr< ::segway_rmp::SegwayStatusStamped > SegwayStatusStampedPtr;
typedef boost::shared_ptr< ::segway_rmp::SegwayStatusStamped const> SegwayStatusStampedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::segway_rmp::SegwayStatusStamped_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::segway_rmp::SegwayStatusStamped_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace segway_rmp

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'segway_rmp': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/segway_rmp/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::segway_rmp::SegwayStatusStamped_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::segway_rmp::SegwayStatusStamped_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::segway_rmp::SegwayStatusStamped_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::segway_rmp::SegwayStatusStamped_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::segway_rmp::SegwayStatusStamped_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::segway_rmp::SegwayStatusStamped_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::segway_rmp::SegwayStatusStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f11247ac7dcf2a8717603cc53878eec2";
  }

  static const char* value(const ::segway_rmp::SegwayStatusStamped_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf11247ac7dcf2a87ULL;
  static const uint64_t static_value2 = 0x17603cc53878eec2ULL;
};

template<class ContainerAllocator>
struct DataType< ::segway_rmp::SegwayStatusStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "segway_rmp/SegwayStatusStamped";
  }

  static const char* value(const ::segway_rmp::SegwayStatusStamped_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::segway_rmp::SegwayStatusStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header       header                      # Timestamp, sequence number, and frame id\n"
"\n"
"SegwayStatus segway                      # Segway Status information\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: segway_rmp/SegwayStatus\n"
"# This is the msg definition for the Segway Status struct.\n"
"\n"
"# Gain Schedule Constants\n"
"int8    LIGHT=1\n"
"int8    TALL=2\n"
"int8    HEAVY=3\n"
"\n"
"# Operation Mode Constants\n"
"int8    BALANCE=1\n"
"int8    TRACTOR=2\n"
"int8    POWER_DOWN=3\n"
"\n"
"float32 pitch_angle                 # radians\n"
"float32 pitch_rate                  # radians/s\n"
"float32 roll_angle                  # radians\n"
"float32 roll_rate                   # radians/s\n"
"float32 left_wheel_velocity         # meters/s\n"
"float32 right_wheel_velocity        # meters/s\n"
"float32 yaw_rate                    # radians/s\n"
"float32 servo_frames                # frames/second\n"
"float32 left_wheel_displacement     # meters\n"
"float32 right_wheel_displacement    # meters\n"
"float32 forward_displacement        # meters\n"
"float32 yaw_displacement            # revolutions\n"
"float32 left_motor_torque           # Newton-meters\n"
"float32 right_motor_torque          # Newton-meters\n"
"int8    operation_mode              # Balance, Tractor, or Powered Down\n"
"int8    gain_schedule               # Light, Tall, or Heavy\n"
"float32 ui_battery                  # Volts\n"
"float32 powerbase_battery           # Volts\n"
"\n"
"bool    motors_enabled              # Enabled (true) or E-Stopped (false)\n"
;
  }

  static const char* value(const ::segway_rmp::SegwayStatusStamped_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::segway_rmp::SegwayStatusStamped_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.segway);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SegwayStatusStamped_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::segway_rmp::SegwayStatusStamped_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::segway_rmp::SegwayStatusStamped_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "segway: ";
    s << std::endl;
    Printer< ::segway_rmp::SegwayStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.segway);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SEGWAY_RMP_MESSAGE_SEGWAYSTATUSSTAMPED_H
