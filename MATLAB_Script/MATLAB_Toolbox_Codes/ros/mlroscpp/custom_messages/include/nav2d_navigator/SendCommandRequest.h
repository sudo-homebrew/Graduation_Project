// Generated by gencpp from file nav2d_navigator/SendCommandRequest.msg
// DO NOT EDIT!


#ifndef NAV2D_NAVIGATOR_MESSAGE_SENDCOMMANDREQUEST_H
#define NAV2D_NAVIGATOR_MESSAGE_SENDCOMMANDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace nav2d_navigator
{
template <class ContainerAllocator>
struct SendCommandRequest_
{
  typedef SendCommandRequest_<ContainerAllocator> Type;

  SendCommandRequest_()
    : command(0)  {
    }
  SendCommandRequest_(const ContainerAllocator& _alloc)
    : command(0)  {
  (void)_alloc;
    }



   typedef int8_t _command_type;
  _command_type command;





  typedef boost::shared_ptr< ::nav2d_navigator::SendCommandRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nav2d_navigator::SendCommandRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SendCommandRequest_

typedef ::nav2d_navigator::SendCommandRequest_<std::allocator<void> > SendCommandRequest;

typedef boost::shared_ptr< ::nav2d_navigator::SendCommandRequest > SendCommandRequestPtr;
typedef boost::shared_ptr< ::nav2d_navigator::SendCommandRequest const> SendCommandRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nav2d_navigator::SendCommandRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nav2d_navigator::SendCommandRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace nav2d_navigator

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav2d_navigator': ['/local-ssd1/All_Custom_Msgs/PendingActionPackages/matlab_msg_gen_ros1/glnxa64/devel/share/nav2d_navigator/msg'], 'geometry_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/geometry_msgs/cmake/../msg'], 'actionlib': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/actionlib/cmake/../msg'], 'std_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::nav2d_navigator::SendCommandRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nav2d_navigator::SendCommandRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nav2d_navigator::SendCommandRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nav2d_navigator::SendCommandRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nav2d_navigator::SendCommandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nav2d_navigator::SendCommandRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nav2d_navigator::SendCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "481ac5a494c3140a2539020bd74c82c7";
  }

  static const char* value(const ::nav2d_navigator::SendCommandRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x481ac5a494c3140aULL;
  static const uint64_t static_value2 = 0x2539020bd74c82c7ULL;
};

template<class ContainerAllocator>
struct DataType< ::nav2d_navigator::SendCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nav2d_navigator/SendCommandRequest";
  }

  static const char* value(const ::nav2d_navigator::SendCommandRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nav2d_navigator::SendCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 command\n"
;
  }

  static const char* value(const ::nav2d_navigator::SendCommandRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nav2d_navigator::SendCommandRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.command);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SendCommandRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nav2d_navigator::SendCommandRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nav2d_navigator::SendCommandRequest_<ContainerAllocator>& v)
  {
    s << indent << "command: ";
    Printer<int8_t>::stream(s, indent + "  ", v.command);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAV2D_NAVIGATOR_MESSAGE_SENDCOMMANDREQUEST_H
