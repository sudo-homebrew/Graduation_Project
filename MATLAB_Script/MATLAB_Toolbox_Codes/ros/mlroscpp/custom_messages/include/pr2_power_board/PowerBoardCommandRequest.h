// Generated by gencpp from file pr2_power_board/PowerBoardCommandRequest.msg
// DO NOT EDIT!


#ifndef PR2_POWER_BOARD_MESSAGE_POWERBOARDCOMMANDREQUEST_H
#define PR2_POWER_BOARD_MESSAGE_POWERBOARDCOMMANDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pr2_power_board
{
template <class ContainerAllocator>
struct PowerBoardCommandRequest_
{
  typedef PowerBoardCommandRequest_<ContainerAllocator> Type;

  PowerBoardCommandRequest_()
    : serial_number(0)
    , breaker_number(0)
    , command()
    , flags(0)  {
    }
  PowerBoardCommandRequest_(const ContainerAllocator& _alloc)
    : serial_number(0)
    , breaker_number(0)
    , command(_alloc)
    , flags(0)  {
  (void)_alloc;
    }



   typedef uint32_t _serial_number_type;
  _serial_number_type serial_number;

   typedef int32_t _breaker_number_type;
  _breaker_number_type breaker_number;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _command_type;
  _command_type command;

   typedef uint32_t _flags_type;
  _flags_type flags;





  typedef boost::shared_ptr< ::pr2_power_board::PowerBoardCommandRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr2_power_board::PowerBoardCommandRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PowerBoardCommandRequest_

typedef ::pr2_power_board::PowerBoardCommandRequest_<std::allocator<void> > PowerBoardCommandRequest;

typedef boost::shared_ptr< ::pr2_power_board::PowerBoardCommandRequest > PowerBoardCommandRequestPtr;
typedef boost::shared_ptr< ::pr2_power_board::PowerBoardCommandRequest const> PowerBoardCommandRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pr2_power_board::PowerBoardCommandRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pr2_power_board::PowerBoardCommandRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pr2_power_board

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/mathworks/devel/sbs/31/jkonakal.Brobot.j1364265/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pr2_power_board::PowerBoardCommandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pr2_power_board::PowerBoardCommandRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pr2_power_board::PowerBoardCommandRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pr2_power_board::PowerBoardCommandRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr2_power_board::PowerBoardCommandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr2_power_board::PowerBoardCommandRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pr2_power_board::PowerBoardCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9c621f5309bca0033e8eaef81c31500a";
  }

  static const char* value(const ::pr2_power_board::PowerBoardCommandRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9c621f5309bca003ULL;
  static const uint64_t static_value2 = 0x3e8eaef81c31500aULL;
};

template<class ContainerAllocator>
struct DataType< ::pr2_power_board::PowerBoardCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pr2_power_board/PowerBoardCommandRequest";
  }

  static const char* value(const ::pr2_power_board::PowerBoardCommandRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pr2_power_board::PowerBoardCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 serial_number\n"
"int32 breaker_number\n"
"string command\n"
"uint32 flags\n"
;
  }

  static const char* value(const ::pr2_power_board::PowerBoardCommandRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pr2_power_board::PowerBoardCommandRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.serial_number);
      stream.next(m.breaker_number);
      stream.next(m.command);
      stream.next(m.flags);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PowerBoardCommandRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr2_power_board::PowerBoardCommandRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pr2_power_board::PowerBoardCommandRequest_<ContainerAllocator>& v)
  {
    s << indent << "serial_number: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.serial_number);
    s << indent << "breaker_number: ";
    Printer<int32_t>::stream(s, indent + "  ", v.breaker_number);
    s << indent << "command: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.command);
    s << indent << "flags: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.flags);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PR2_POWER_BOARD_MESSAGE_POWERBOARDCOMMANDREQUEST_H
