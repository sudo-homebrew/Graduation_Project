// Generated by gencpp from file sr_edc_ethercat_drivers/MotorTrace.msg
// DO NOT EDIT!


#ifndef SR_EDC_ETHERCAT_DRIVERS_MESSAGE_MOTORTRACE_H
#define SR_EDC_ETHERCAT_DRIVERS_MESSAGE_MOTORTRACE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <sr_edc_ethercat_drivers/ActuatorInfo.h>
#include <sr_edc_ethercat_drivers/MotorTraceSample.h>

namespace sr_edc_ethercat_drivers
{
template <class ContainerAllocator>
struct MotorTrace_
{
  typedef MotorTrace_<ContainerAllocator> Type;

  MotorTrace_()
    : header()
    , reason()
    , actuator_info()
    , samples()  {
    }
  MotorTrace_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , reason(_alloc)
    , actuator_info(_alloc)
    , samples(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _reason_type;
  _reason_type reason;

   typedef  ::sr_edc_ethercat_drivers::ActuatorInfo_<ContainerAllocator>  _actuator_info_type;
  _actuator_info_type actuator_info;

   typedef std::vector< ::sr_edc_ethercat_drivers::MotorTraceSample_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::sr_edc_ethercat_drivers::MotorTraceSample_<ContainerAllocator> >::other >  _samples_type;
  _samples_type samples;





  typedef boost::shared_ptr< ::sr_edc_ethercat_drivers::MotorTrace_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sr_edc_ethercat_drivers::MotorTrace_<ContainerAllocator> const> ConstPtr;

}; // struct MotorTrace_

typedef ::sr_edc_ethercat_drivers::MotorTrace_<std::allocator<void> > MotorTrace;

typedef boost::shared_ptr< ::sr_edc_ethercat_drivers::MotorTrace > MotorTracePtr;
typedef boost::shared_ptr< ::sr_edc_ethercat_drivers::MotorTrace const> MotorTraceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sr_edc_ethercat_drivers::MotorTrace_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sr_edc_ethercat_drivers::MotorTrace_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sr_edc_ethercat_drivers

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'sr_edc_ethercat_drivers': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/sr_edc_ethercat_drivers/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sr_edc_ethercat_drivers::MotorTrace_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sr_edc_ethercat_drivers::MotorTrace_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sr_edc_ethercat_drivers::MotorTrace_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sr_edc_ethercat_drivers::MotorTrace_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sr_edc_ethercat_drivers::MotorTrace_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sr_edc_ethercat_drivers::MotorTrace_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sr_edc_ethercat_drivers::MotorTrace_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d06300e55fe6989d2795bc4072205fe1";
  }

  static const char* value(const ::sr_edc_ethercat_drivers::MotorTrace_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd06300e55fe6989dULL;
  static const uint64_t static_value2 = 0x2795bc4072205fe1ULL;
};

template<class ContainerAllocator>
struct DataType< ::sr_edc_ethercat_drivers::MotorTrace_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sr_edc_ethercat_drivers/MotorTrace";
  }

  static const char* value(const ::sr_edc_ethercat_drivers::MotorTrace_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sr_edc_ethercat_drivers::MotorTrace_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"string reason\n"
"sr_edc_ethercat_drivers/ActuatorInfo actuator_info\n"
"sr_edc_ethercat_drivers/MotorTraceSample[] samples\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: sr_edc_ethercat_drivers/ActuatorInfo\n"
"string name\n"
"float64 slow_motor_current_limit\n"
"float64 quick_motor_current_limit\n"
"float64 duty_limit\n"
"float64 max_duty\n"
"================================================================================\n"
"MSG: sr_edc_ethercat_drivers/MotorTraceSample\n"
"float64 commanded_effort\n"
"float64 slow_effort_limit\n"
"float64 quick_effort_limit\n"
"float64 motor_current\n"
"float64 motor_supply_voltage\n"
"float64 hbridge_duty\n"
"float64 temperature\n"
"float64 force_sensor_1\n"
"float64 force_sensor_2\n"
"float64 force_sensor_3\n"
"float64 motor_velocity\n"
"float64 velocity\n"
"float64 position\n"
;
  }

  static const char* value(const ::sr_edc_ethercat_drivers::MotorTrace_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sr_edc_ethercat_drivers::MotorTrace_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.reason);
      stream.next(m.actuator_info);
      stream.next(m.samples);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorTrace_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sr_edc_ethercat_drivers::MotorTrace_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sr_edc_ethercat_drivers::MotorTrace_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "reason: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.reason);
    s << indent << "actuator_info: ";
    s << std::endl;
    Printer< ::sr_edc_ethercat_drivers::ActuatorInfo_<ContainerAllocator> >::stream(s, indent + "  ", v.actuator_info);
    s << indent << "samples[]" << std::endl;
    for (size_t i = 0; i < v.samples.size(); ++i)
    {
      s << indent << "  samples[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::sr_edc_ethercat_drivers::MotorTraceSample_<ContainerAllocator> >::stream(s, indent + "    ", v.samples[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SR_EDC_ETHERCAT_DRIVERS_MESSAGE_MOTORTRACE_H
