// Generated by gencpp from file network_monitor_udp/LinktestGoal.msg
// DO NOT EDIT!


#ifndef NETWORK_MONITOR_UDP_MESSAGE_LINKTESTGOAL_H
#define NETWORK_MONITOR_UDP_MESSAGE_LINKTESTGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace network_monitor_udp
{
template <class ContainerAllocator>
struct LinktestGoal_
{
  typedef LinktestGoal_<ContainerAllocator> Type;

  LinktestGoal_()
    : duration(0.0)
    , update_interval(0.0)
    , bw(0.0)
    , bw_type(0)
    , latency_threshold(0.0)
    , pktloss_threshold(0.0)
    , tos(0)
    , pktsize(0)
    , ros_returnpath(false)
    , roundtrip(false)
    , max_return_time(0.0)
    , rostopic_prefix()
    , sink_ip()
    , sink_port(0)
    , latencybins()  {
    }
  LinktestGoal_(const ContainerAllocator& _alloc)
    : duration(0.0)
    , update_interval(0.0)
    , bw(0.0)
    , bw_type(0)
    , latency_threshold(0.0)
    , pktloss_threshold(0.0)
    , tos(0)
    , pktsize(0)
    , ros_returnpath(false)
    , roundtrip(false)
    , max_return_time(0.0)
    , rostopic_prefix(_alloc)
    , sink_ip(_alloc)
    , sink_port(0)
    , latencybins(_alloc)  {
  (void)_alloc;
    }



   typedef float _duration_type;
  _duration_type duration;

   typedef float _update_interval_type;
  _update_interval_type update_interval;

   typedef float _bw_type;
  _bw_type bw;

   typedef uint8_t _bw_type_type;
  _bw_type_type bw_type;

   typedef float _latency_threshold_type;
  _latency_threshold_type latency_threshold;

   typedef float _pktloss_threshold_type;
  _pktloss_threshold_type pktloss_threshold;

   typedef uint8_t _tos_type;
  _tos_type tos;

   typedef int32_t _pktsize_type;
  _pktsize_type pktsize;

   typedef uint8_t _ros_returnpath_type;
  _ros_returnpath_type ros_returnpath;

   typedef uint8_t _roundtrip_type;
  _roundtrip_type roundtrip;

   typedef float _max_return_time_type;
  _max_return_time_type max_return_time;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _rostopic_prefix_type;
  _rostopic_prefix_type rostopic_prefix;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _sink_ip_type;
  _sink_ip_type sink_ip;

   typedef int32_t _sink_port_type;
  _sink_port_type sink_port;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _latencybins_type;
  _latencybins_type latencybins;



  enum {
 
    DEFAULT_BWTYPE = 99,
 
    BW_CONSTANT = 99,
 
    BW_ADAPTIVE = 97,
 
    DEFAULT_PKTSIZE = 1500,
  };

  static const float DEFAULT_UPDATE_INTERVAL;
  static const float DEFAULT_BW;
  static const float LIM1;
  static const float LIM2;
  static const float C1;
  static const float C2;
  static const float DEFAULT_LATENCY_THRESHOLD;
  static const float DEFAULT_PKTLOSS_THRESHOLD;

  typedef boost::shared_ptr< ::network_monitor_udp::LinktestGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::network_monitor_udp::LinktestGoal_<ContainerAllocator> const> ConstPtr;

}; // struct LinktestGoal_

typedef ::network_monitor_udp::LinktestGoal_<std::allocator<void> > LinktestGoal;

typedef boost::shared_ptr< ::network_monitor_udp::LinktestGoal > LinktestGoalPtr;
typedef boost::shared_ptr< ::network_monitor_udp::LinktestGoal const> LinktestGoalConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const float
      LinktestGoal_<ContainerAllocator>::DEFAULT_UPDATE_INTERVAL =
        
          0.15f
        
        ;
   

   
   template<typename ContainerAllocator> const float
      LinktestGoal_<ContainerAllocator>::DEFAULT_BW =
        
          5000000.0f
        
        ;
   

   

   

   

   
   template<typename ContainerAllocator> const float
      LinktestGoal_<ContainerAllocator>::LIM1 =
        
          -0.3f
        
        ;
   

   
   template<typename ContainerAllocator> const float
      LinktestGoal_<ContainerAllocator>::LIM2 =
        
          0.3f
        
        ;
   

   
   template<typename ContainerAllocator> const float
      LinktestGoal_<ContainerAllocator>::C1 =
        
          -0.05f
        
        ;
   

   
   template<typename ContainerAllocator> const float
      LinktestGoal_<ContainerAllocator>::C2 =
        
          0.2f
        
        ;
   

   
   template<typename ContainerAllocator> const float
      LinktestGoal_<ContainerAllocator>::DEFAULT_LATENCY_THRESHOLD =
        
          0.01f
        
        ;
   

   
   template<typename ContainerAllocator> const float
      LinktestGoal_<ContainerAllocator>::DEFAULT_PKTLOSS_THRESHOLD =
        
          0.5f
        
        ;
   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::network_monitor_udp::LinktestGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::network_monitor_udp::LinktestGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace network_monitor_udp

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'actionlib': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/actionlib/cmake/../msg'], 'std_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/actionlib_msgs/cmake/../msg'], 'network_monitor_udp': ['/local-ssd1/All_Custom_Msgs/PendingActionPackages/matlab_msg_gen_ros1/glnxa64/src/network_monitor_udp/msg', '/local-ssd1/All_Custom_Msgs/PendingActionPackages/matlab_msg_gen_ros1/glnxa64/devel/share/network_monitor_udp/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::network_monitor_udp::LinktestGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::network_monitor_udp::LinktestGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::network_monitor_udp::LinktestGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::network_monitor_udp::LinktestGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::network_monitor_udp::LinktestGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::network_monitor_udp::LinktestGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::network_monitor_udp::LinktestGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a319f2787ce16837363051a27c7fd49f";
  }

  static const char* value(const ::network_monitor_udp::LinktestGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa319f2787ce16837ULL;
  static const uint64_t static_value2 = 0x363051a27c7fd49fULL;
};

template<class ContainerAllocator>
struct DataType< ::network_monitor_udp::LinktestGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "network_monitor_udp/LinktestGoal";
  }

  static const char* value(const ::network_monitor_udp::LinktestGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::network_monitor_udp::LinktestGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Goal definition\n"
"float32 DEFAULT_UPDATE_INTERVAL=0.15    # sec\n"
"float32 DEFAULT_BW=5000000.0            # bps\n"
"char DEFAULT_BWTYPE=99                  # default bw type: constant              \n"
"char BW_CONSTANT=99                     # 'c'\n"
"char BW_ADAPTIVE=97                     # 'a'\n"
"float32 LIM1=-0.3                       # adaptive alg constants\n"
"float32 LIM2=0.3\n"
"float32 C1=-0.05\n"
"float32 C2=0.2\n"
"float32 DEFAULT_LATENCY_THRESHOLD=0.01  # sec\n"
"float32 DEFAULT_PKTLOSS_THRESHOLD=0.5   # %\n"
"int32 DEFAULT_PKTSIZE=1500              # bytes\n"
"\n"
"float32 duration                        # sec\n"
"float32 update_interval                 # sec\n"
"float32 bw                              # bps \n"
"char bw_type                            # BW_CONSTANT | BW_ADAPTIVE\n"
"float32 latency_threshold               # sec\n"
"float32 pktloss_threshold               # %\n"
"uint8 tos\n"
"int32 pktsize                           # bytes\n"
"bool ros_returnpath                     # default: false == UDP\n"
"bool roundtrip                          # default: false == oneway\n"
"float32 max_return_time                 # sec\n"
"string rostopic_prefix\n"
"string sink_ip\n"
"int32 sink_port\n"
"float32[] latencybins\n"
;
  }

  static const char* value(const ::network_monitor_udp::LinktestGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::network_monitor_udp::LinktestGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.duration);
      stream.next(m.update_interval);
      stream.next(m.bw);
      stream.next(m.bw_type);
      stream.next(m.latency_threshold);
      stream.next(m.pktloss_threshold);
      stream.next(m.tos);
      stream.next(m.pktsize);
      stream.next(m.ros_returnpath);
      stream.next(m.roundtrip);
      stream.next(m.max_return_time);
      stream.next(m.rostopic_prefix);
      stream.next(m.sink_ip);
      stream.next(m.sink_port);
      stream.next(m.latencybins);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LinktestGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::network_monitor_udp::LinktestGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::network_monitor_udp::LinktestGoal_<ContainerAllocator>& v)
  {
    s << indent << "duration: ";
    Printer<float>::stream(s, indent + "  ", v.duration);
    s << indent << "update_interval: ";
    Printer<float>::stream(s, indent + "  ", v.update_interval);
    s << indent << "bw: ";
    Printer<float>::stream(s, indent + "  ", v.bw);
    s << indent << "bw_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bw_type);
    s << indent << "latency_threshold: ";
    Printer<float>::stream(s, indent + "  ", v.latency_threshold);
    s << indent << "pktloss_threshold: ";
    Printer<float>::stream(s, indent + "  ", v.pktloss_threshold);
    s << indent << "tos: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tos);
    s << indent << "pktsize: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pktsize);
    s << indent << "ros_returnpath: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ros_returnpath);
    s << indent << "roundtrip: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.roundtrip);
    s << indent << "max_return_time: ";
    Printer<float>::stream(s, indent + "  ", v.max_return_time);
    s << indent << "rostopic_prefix: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.rostopic_prefix);
    s << indent << "sink_ip: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.sink_ip);
    s << indent << "sink_port: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sink_port);
    s << indent << "latencybins[]" << std::endl;
    for (size_t i = 0; i < v.latencybins.size(); ++i)
    {
      s << indent << "  latencybins[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.latencybins[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // NETWORK_MONITOR_UDP_MESSAGE_LINKTESTGOAL_H
