// Generated by gencpp from file network_monitor_udp/LinktestResult.msg
// DO NOT EDIT!


#ifndef NETWORK_MONITOR_UDP_MESSAGE_LINKTESTRESULT_H
#define NETWORK_MONITOR_UDP_MESSAGE_LINKTESTRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace network_monitor_udp
{
template <class ContainerAllocator>
struct LinktestResult_
{
  typedef LinktestResult_<ContainerAllocator> Type;

  LinktestResult_()
    : latency(0.0)
    , loss(0.0)
    , bandwidth(0.0)
    , latency_histogram()  {
    }
  LinktestResult_(const ContainerAllocator& _alloc)
    : latency(0.0)
    , loss(0.0)
    , bandwidth(0.0)
    , latency_histogram(_alloc)  {
  (void)_alloc;
    }



   typedef float _latency_type;
  _latency_type latency;

   typedef float _loss_type;
  _loss_type loss;

   typedef float _bandwidth_type;
  _bandwidth_type bandwidth;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _latency_histogram_type;
  _latency_histogram_type latency_histogram;





  typedef boost::shared_ptr< ::network_monitor_udp::LinktestResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::network_monitor_udp::LinktestResult_<ContainerAllocator> const> ConstPtr;

}; // struct LinktestResult_

typedef ::network_monitor_udp::LinktestResult_<std::allocator<void> > LinktestResult;

typedef boost::shared_ptr< ::network_monitor_udp::LinktestResult > LinktestResultPtr;
typedef boost::shared_ptr< ::network_monitor_udp::LinktestResult const> LinktestResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::network_monitor_udp::LinktestResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::network_monitor_udp::LinktestResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace network_monitor_udp

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'actionlib': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/actionlib/cmake/../msg'], 'std_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/actionlib_msgs/cmake/../msg'], 'network_monitor_udp': ['/local-ssd1/All_Custom_Msgs/PendingActionPackages/matlab_msg_gen_ros1/glnxa64/src/network_monitor_udp/msg', '/local-ssd1/All_Custom_Msgs/PendingActionPackages/matlab_msg_gen_ros1/glnxa64/devel/share/network_monitor_udp/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::network_monitor_udp::LinktestResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::network_monitor_udp::LinktestResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::network_monitor_udp::LinktestResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::network_monitor_udp::LinktestResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::network_monitor_udp::LinktestResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::network_monitor_udp::LinktestResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::network_monitor_udp::LinktestResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cde18aa0ddbb2c88ca3e62eb27f8aa3f";
  }

  static const char* value(const ::network_monitor_udp::LinktestResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcde18aa0ddbb2c88ULL;
  static const uint64_t static_value2 = 0xca3e62eb27f8aa3fULL;
};

template<class ContainerAllocator>
struct DataType< ::network_monitor_udp::LinktestResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "network_monitor_udp/LinktestResult";
  }

  static const char* value(const ::network_monitor_udp::LinktestResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::network_monitor_udp::LinktestResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Result definition\n"
"float32 latency\n"
"float32 loss\n"
"float32 bandwidth \n"
"float32[] latency_histogram\n"
;
  }

  static const char* value(const ::network_monitor_udp::LinktestResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::network_monitor_udp::LinktestResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.latency);
      stream.next(m.loss);
      stream.next(m.bandwidth);
      stream.next(m.latency_histogram);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LinktestResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::network_monitor_udp::LinktestResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::network_monitor_udp::LinktestResult_<ContainerAllocator>& v)
  {
    s << indent << "latency: ";
    Printer<float>::stream(s, indent + "  ", v.latency);
    s << indent << "loss: ";
    Printer<float>::stream(s, indent + "  ", v.loss);
    s << indent << "bandwidth: ";
    Printer<float>::stream(s, indent + "  ", v.bandwidth);
    s << indent << "latency_histogram[]" << std::endl;
    for (size_t i = 0; i < v.latency_histogram.size(); ++i)
    {
      s << indent << "  latency_histogram[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.latency_histogram[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // NETWORK_MONITOR_UDP_MESSAGE_LINKTESTRESULT_H
