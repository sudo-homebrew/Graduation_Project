// Generated by gencpp from file network_monitor_udp/UdpMonitor.msg
// DO NOT EDIT!


#ifndef NETWORK_MONITOR_UDP_MESSAGE_UDPMONITOR_H
#define NETWORK_MONITOR_UDP_MESSAGE_UDPMONITOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace network_monitor_udp
{
template <class ContainerAllocator>
struct UdpMonitor_
{
  typedef UdpMonitor_<ContainerAllocator> Type;

  UdpMonitor_()
    : header()
    , server_host()
    , server_port(0)
    , source_interface()
    , packet_rate(0.0)
    , packet_size(0)
    , latency_bin_limits()
    , latency_bin_values()
    , average_latency_fresh(0.0)
    , loss_fresh(0.0)
    , average_latency_all(0.0)  {
    }
  UdpMonitor_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , server_host(_alloc)
    , server_port(0)
    , source_interface(_alloc)
    , packet_rate(0.0)
    , packet_size(0)
    , latency_bin_limits(_alloc)
    , latency_bin_values(_alloc)
    , average_latency_fresh(0.0)
    , loss_fresh(0.0)
    , average_latency_all(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _server_host_type;
  _server_host_type server_host;

   typedef uint32_t _server_port_type;
  _server_port_type server_port;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _source_interface_type;
  _source_interface_type source_interface;

   typedef float _packet_rate_type;
  _packet_rate_type packet_rate;

   typedef uint32_t _packet_size_type;
  _packet_size_type packet_size;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _latency_bin_limits_type;
  _latency_bin_limits_type latency_bin_limits;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _latency_bin_values_type;
  _latency_bin_values_type latency_bin_values;

   typedef float _average_latency_fresh_type;
  _average_latency_fresh_type average_latency_fresh;

   typedef float _loss_fresh_type;
  _loss_fresh_type loss_fresh;

   typedef float _average_latency_all_type;
  _average_latency_all_type average_latency_all;





  typedef boost::shared_ptr< ::network_monitor_udp::UdpMonitor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::network_monitor_udp::UdpMonitor_<ContainerAllocator> const> ConstPtr;

}; // struct UdpMonitor_

typedef ::network_monitor_udp::UdpMonitor_<std::allocator<void> > UdpMonitor;

typedef boost::shared_ptr< ::network_monitor_udp::UdpMonitor > UdpMonitorPtr;
typedef boost::shared_ptr< ::network_monitor_udp::UdpMonitor const> UdpMonitorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::network_monitor_udp::UdpMonitor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::network_monitor_udp::UdpMonitor_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace network_monitor_udp

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'actionlib': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/actionlib/cmake/../msg'], 'std_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/actionlib_msgs/cmake/../msg'], 'network_monitor_udp': ['/local-ssd1/All_Custom_Msgs/PendingActionPackages/matlab_msg_gen_ros1/glnxa64/src/network_monitor_udp/msg', '/local-ssd1/All_Custom_Msgs/PendingActionPackages/matlab_msg_gen_ros1/glnxa64/devel/share/network_monitor_udp/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::network_monitor_udp::UdpMonitor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::network_monitor_udp::UdpMonitor_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::network_monitor_udp::UdpMonitor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::network_monitor_udp::UdpMonitor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::network_monitor_udp::UdpMonitor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::network_monitor_udp::UdpMonitor_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::network_monitor_udp::UdpMonitor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "61e78eeecffb9257ae40ca291408f8cc";
  }

  static const char* value(const ::network_monitor_udp::UdpMonitor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x61e78eeecffb9257ULL;
  static const uint64_t static_value2 = 0xae40ca291408f8ccULL;
};

template<class ContainerAllocator>
struct DataType< ::network_monitor_udp::UdpMonitor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "network_monitor_udp/UdpMonitor";
  }

  static const char* value(const ::network_monitor_udp::UdpMonitor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::network_monitor_udp::UdpMonitor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"# Summary of the client settings\n"
"string server_host\n"
"uint32 server_port\n"
"string source_interface\n"
"float32 packet_rate\n"
"uint32 packet_size\n"
"\n"
"# Proportion of packets that have latencies within a bin. The first bin\n"
"# starts at zero, bins end at the value in latency_bin_values. \n"
"# len(latency_bin_values) = len(latency_bin_limits) + 1\n"
"float32[] latency_bin_limits\n"
"float32[] latency_bin_values\n"
"\n"
"# Average latency in seconds and loss rate (between 0 and 1) for packets\n"
"# that fall within one of the bins.\n"
"float32 average_latency_fresh\n"
"float32 loss_fresh\n"
"\n"
"# Average latency in seconds for all\n"
"# received packets, including very old ones.\n"
"float32 average_latency_all\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::network_monitor_udp::UdpMonitor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::network_monitor_udp::UdpMonitor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.server_host);
      stream.next(m.server_port);
      stream.next(m.source_interface);
      stream.next(m.packet_rate);
      stream.next(m.packet_size);
      stream.next(m.latency_bin_limits);
      stream.next(m.latency_bin_values);
      stream.next(m.average_latency_fresh);
      stream.next(m.loss_fresh);
      stream.next(m.average_latency_all);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UdpMonitor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::network_monitor_udp::UdpMonitor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::network_monitor_udp::UdpMonitor_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "server_host: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.server_host);
    s << indent << "server_port: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.server_port);
    s << indent << "source_interface: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.source_interface);
    s << indent << "packet_rate: ";
    Printer<float>::stream(s, indent + "  ", v.packet_rate);
    s << indent << "packet_size: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.packet_size);
    s << indent << "latency_bin_limits[]" << std::endl;
    for (size_t i = 0; i < v.latency_bin_limits.size(); ++i)
    {
      s << indent << "  latency_bin_limits[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.latency_bin_limits[i]);
    }
    s << indent << "latency_bin_values[]" << std::endl;
    for (size_t i = 0; i < v.latency_bin_values.size(); ++i)
    {
      s << indent << "  latency_bin_values[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.latency_bin_values[i]);
    }
    s << indent << "average_latency_fresh: ";
    Printer<float>::stream(s, indent + "  ", v.average_latency_fresh);
    s << indent << "loss_fresh: ";
    Printer<float>::stream(s, indent + "  ", v.loss_fresh);
    s << indent << "average_latency_all: ";
    Printer<float>::stream(s, indent + "  ", v.average_latency_all);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NETWORK_MONITOR_UDP_MESSAGE_UDPMONITOR_H
