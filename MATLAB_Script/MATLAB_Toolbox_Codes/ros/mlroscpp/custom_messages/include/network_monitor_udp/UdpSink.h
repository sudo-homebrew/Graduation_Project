// Generated by gencpp from file network_monitor_udp/UdpSink.msg
// DO NOT EDIT!


#ifndef NETWORK_MONITOR_UDP_MESSAGE_UDPSINK_H
#define NETWORK_MONITOR_UDP_MESSAGE_UDPSINK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace network_monitor_udp
{
template <class ContainerAllocator>
struct UdpSink_
{
  typedef UdpSink_<ContainerAllocator> Type;

  UdpSink_()
    : magic()
    , send_time(0.0)
    , echo_time(0.0)
    , seqnum(0)
    , source_id(0)  {
      magic.assign(0);
  }
  UdpSink_(const ContainerAllocator& _alloc)
    : magic()
    , send_time(0.0)
    , echo_time(0.0)
    , seqnum(0)
    , source_id(0)  {
  (void)_alloc;
      magic.assign(0);
  }



   typedef boost::array<uint8_t, 4>  _magic_type;
  _magic_type magic;

   typedef double _send_time_type;
  _send_time_type send_time;

   typedef double _echo_time_type;
  _echo_time_type echo_time;

   typedef int32_t _seqnum_type;
  _seqnum_type seqnum;

   typedef int32_t _source_id_type;
  _source_id_type source_id;





  typedef boost::shared_ptr< ::network_monitor_udp::UdpSink_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::network_monitor_udp::UdpSink_<ContainerAllocator> const> ConstPtr;

}; // struct UdpSink_

typedef ::network_monitor_udp::UdpSink_<std::allocator<void> > UdpSink;

typedef boost::shared_ptr< ::network_monitor_udp::UdpSink > UdpSinkPtr;
typedef boost::shared_ptr< ::network_monitor_udp::UdpSink const> UdpSinkConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::network_monitor_udp::UdpSink_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::network_monitor_udp::UdpSink_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace network_monitor_udp

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'actionlib': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/actionlib/cmake/../msg'], 'std_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/actionlib_msgs/cmake/../msg'], 'network_monitor_udp': ['/local-ssd1/All_Custom_Msgs/PendingActionPackages/matlab_msg_gen_ros1/glnxa64/src/network_monitor_udp/msg', '/local-ssd1/All_Custom_Msgs/PendingActionPackages/matlab_msg_gen_ros1/glnxa64/devel/share/network_monitor_udp/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::network_monitor_udp::UdpSink_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::network_monitor_udp::UdpSink_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::network_monitor_udp::UdpSink_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::network_monitor_udp::UdpSink_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::network_monitor_udp::UdpSink_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::network_monitor_udp::UdpSink_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::network_monitor_udp::UdpSink_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a56e2a33942a368e87b357cc9e894ec5";
  }

  static const char* value(const ::network_monitor_udp::UdpSink_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa56e2a33942a368eULL;
  static const uint64_t static_value2 = 0x87b357cc9e894ec5ULL;
};

template<class ContainerAllocator>
struct DataType< ::network_monitor_udp::UdpSink_<ContainerAllocator> >
{
  static const char* value()
  {
    return "network_monitor_udp/UdpSink";
  }

  static const char* value(const ::network_monitor_udp::UdpSink_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::network_monitor_udp::UdpSink_<ContainerAllocator> >
{
  static const char* value()
  {
    return "### data send from sink to source\n"
"uint8[4] magic\n"
"float64 send_time\n"
"float64 echo_time\n"
"int32 seqnum\n"
"int32 source_id\n"
"\n"
;
  }

  static const char* value(const ::network_monitor_udp::UdpSink_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::network_monitor_udp::UdpSink_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.magic);
      stream.next(m.send_time);
      stream.next(m.echo_time);
      stream.next(m.seqnum);
      stream.next(m.source_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UdpSink_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::network_monitor_udp::UdpSink_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::network_monitor_udp::UdpSink_<ContainerAllocator>& v)
  {
    s << indent << "magic[]" << std::endl;
    for (size_t i = 0; i < v.magic.size(); ++i)
    {
      s << indent << "  magic[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.magic[i]);
    }
    s << indent << "send_time: ";
    Printer<double>::stream(s, indent + "  ", v.send_time);
    s << indent << "echo_time: ";
    Printer<double>::stream(s, indent + "  ", v.echo_time);
    s << indent << "seqnum: ";
    Printer<int32_t>::stream(s, indent + "  ", v.seqnum);
    s << indent << "source_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.source_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NETWORK_MONITOR_UDP_MESSAGE_UDPSINK_H
