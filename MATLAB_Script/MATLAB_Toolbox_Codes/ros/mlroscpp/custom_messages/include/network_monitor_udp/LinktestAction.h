// Generated by gencpp from file network_monitor_udp/LinktestAction.msg
// DO NOT EDIT!


#ifndef NETWORK_MONITOR_UDP_MESSAGE_LINKTESTACTION_H
#define NETWORK_MONITOR_UDP_MESSAGE_LINKTESTACTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <network_monitor_udp/LinktestActionGoal.h>
#include <network_monitor_udp/LinktestActionResult.h>
#include <network_monitor_udp/LinktestActionFeedback.h>

namespace network_monitor_udp
{
template <class ContainerAllocator>
struct LinktestAction_
{
  typedef LinktestAction_<ContainerAllocator> Type;

  LinktestAction_()
    : action_goal()
    , action_result()
    , action_feedback()  {
    }
  LinktestAction_(const ContainerAllocator& _alloc)
    : action_goal(_alloc)
    , action_result(_alloc)
    , action_feedback(_alloc)  {
  (void)_alloc;
    }



   typedef  ::network_monitor_udp::LinktestActionGoal_<ContainerAllocator>  _action_goal_type;
  _action_goal_type action_goal;

   typedef  ::network_monitor_udp::LinktestActionResult_<ContainerAllocator>  _action_result_type;
  _action_result_type action_result;

   typedef  ::network_monitor_udp::LinktestActionFeedback_<ContainerAllocator>  _action_feedback_type;
  _action_feedback_type action_feedback;





  typedef boost::shared_ptr< ::network_monitor_udp::LinktestAction_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::network_monitor_udp::LinktestAction_<ContainerAllocator> const> ConstPtr;

}; // struct LinktestAction_

typedef ::network_monitor_udp::LinktestAction_<std::allocator<void> > LinktestAction;

typedef boost::shared_ptr< ::network_monitor_udp::LinktestAction > LinktestActionPtr;
typedef boost::shared_ptr< ::network_monitor_udp::LinktestAction const> LinktestActionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::network_monitor_udp::LinktestAction_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::network_monitor_udp::LinktestAction_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace network_monitor_udp

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'actionlib': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/actionlib/cmake/../msg'], 'std_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/actionlib_msgs/cmake/../msg'], 'network_monitor_udp': ['/local-ssd1/All_Custom_Msgs/PendingActionPackages/matlab_msg_gen_ros1/glnxa64/src/network_monitor_udp/msg', '/local-ssd1/All_Custom_Msgs/PendingActionPackages/matlab_msg_gen_ros1/glnxa64/devel/share/network_monitor_udp/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::network_monitor_udp::LinktestAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::network_monitor_udp::LinktestAction_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::network_monitor_udp::LinktestAction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::network_monitor_udp::LinktestAction_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::network_monitor_udp::LinktestAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::network_monitor_udp::LinktestAction_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::network_monitor_udp::LinktestAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "87d4de3ce9cd4ec54de5ab95fc70d3ac";
  }

  static const char* value(const ::network_monitor_udp::LinktestAction_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x87d4de3ce9cd4ec5ULL;
  static const uint64_t static_value2 = 0x4de5ab95fc70d3acULL;
};

template<class ContainerAllocator>
struct DataType< ::network_monitor_udp::LinktestAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "network_monitor_udp/LinktestAction";
  }

  static const char* value(const ::network_monitor_udp::LinktestAction_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::network_monitor_udp::LinktestAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"\n"
"LinktestActionGoal action_goal\n"
"LinktestActionResult action_result\n"
"LinktestActionFeedback action_feedback\n"
"\n"
"================================================================================\n"
"MSG: network_monitor_udp/LinktestActionGoal\n"
"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"\n"
"Header header\n"
"actionlib_msgs/GoalID goal_id\n"
"LinktestGoal goal\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: actionlib_msgs/GoalID\n"
"# The stamp should store the time at which this goal was requested.\n"
"# It is used by an action server when it tries to preempt all\n"
"# goals that were requested before a certain time\n"
"time stamp\n"
"\n"
"# The id provides a way to associate feedback and\n"
"# result message with specific goal requests. The id\n"
"# specified must be unique.\n"
"string id\n"
"\n"
"\n"
"================================================================================\n"
"MSG: network_monitor_udp/LinktestGoal\n"
"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Goal definition\n"
"float32 DEFAULT_UPDATE_INTERVAL=0.15    # sec\n"
"float32 DEFAULT_BW=5000000.0            # bps\n"
"char DEFAULT_BWTYPE=99                  # default bw type: constant              \n"
"char BW_CONSTANT=99                     # 'c'\n"
"char BW_ADAPTIVE=97                     # 'a'\n"
"float32 LIM1=-0.3                       # adaptive alg constants\n"
"float32 LIM2=0.3\n"
"float32 C1=-0.05\n"
"float32 C2=0.2\n"
"float32 DEFAULT_LATENCY_THRESHOLD=0.01  # sec\n"
"float32 DEFAULT_PKTLOSS_THRESHOLD=0.5   # %\n"
"int32 DEFAULT_PKTSIZE=1500              # bytes\n"
"\n"
"float32 duration                        # sec\n"
"float32 update_interval                 # sec\n"
"float32 bw                              # bps \n"
"char bw_type                            # BW_CONSTANT | BW_ADAPTIVE\n"
"float32 latency_threshold               # sec\n"
"float32 pktloss_threshold               # %\n"
"uint8 tos\n"
"int32 pktsize                           # bytes\n"
"bool ros_returnpath                     # default: false == UDP\n"
"bool roundtrip                          # default: false == oneway\n"
"float32 max_return_time                 # sec\n"
"string rostopic_prefix\n"
"string sink_ip\n"
"int32 sink_port\n"
"float32[] latencybins\n"
"\n"
"================================================================================\n"
"MSG: network_monitor_udp/LinktestActionResult\n"
"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"\n"
"Header header\n"
"actionlib_msgs/GoalStatus status\n"
"LinktestResult result\n"
"\n"
"================================================================================\n"
"MSG: actionlib_msgs/GoalStatus\n"
"GoalID goal_id\n"
"uint8 status\n"
"uint8 PENDING         = 0   # The goal has yet to be processed by the action server\n"
"uint8 ACTIVE          = 1   # The goal is currently being processed by the action server\n"
"uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n"
"                            #   and has since completed its execution (Terminal State)\n"
"uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\n"
"uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n"
"                            #    to some failure (Terminal State)\n"
"uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n"
"                            #    because the goal was unattainable or invalid (Terminal State)\n"
"uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n"
"                            #    and has not yet completed execution\n"
"uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n"
"                            #    but the action server has not yet confirmed that the goal is canceled\n"
"uint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n"
"                            #    and was successfully cancelled (Terminal State)\n"
"uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n"
"                            #    sent over the wire by an action server\n"
"\n"
"#Allow for the user to associate a string with GoalStatus for debugging\n"
"string text\n"
"\n"
"\n"
"================================================================================\n"
"MSG: network_monitor_udp/LinktestResult\n"
"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Result definition\n"
"float32 latency\n"
"float32 loss\n"
"float32 bandwidth \n"
"float32[] latency_histogram\n"
"\n"
"================================================================================\n"
"MSG: network_monitor_udp/LinktestActionFeedback\n"
"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"\n"
"Header header\n"
"actionlib_msgs/GoalStatus status\n"
"LinktestFeedback feedback\n"
"\n"
"================================================================================\n"
"MSG: network_monitor_udp/LinktestFeedback\n"
"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Feedback definition\n"
"float32 latency\n"
"float32 loss \n"
"float32 bandwidth\n"
"float32[] latency_histogram\n"
"time stamp\n"
"\n"
;
  }

  static const char* value(const ::network_monitor_udp::LinktestAction_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::network_monitor_udp::LinktestAction_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action_goal);
      stream.next(m.action_result);
      stream.next(m.action_feedback);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LinktestAction_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::network_monitor_udp::LinktestAction_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::network_monitor_udp::LinktestAction_<ContainerAllocator>& v)
  {
    s << indent << "action_goal: ";
    s << std::endl;
    Printer< ::network_monitor_udp::LinktestActionGoal_<ContainerAllocator> >::stream(s, indent + "  ", v.action_goal);
    s << indent << "action_result: ";
    s << std::endl;
    Printer< ::network_monitor_udp::LinktestActionResult_<ContainerAllocator> >::stream(s, indent + "  ", v.action_result);
    s << indent << "action_feedback: ";
    s << std::endl;
    Printer< ::network_monitor_udp::LinktestActionFeedback_<ContainerAllocator> >::stream(s, indent + "  ", v.action_feedback);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NETWORK_MONITOR_UDP_MESSAGE_LINKTESTACTION_H
