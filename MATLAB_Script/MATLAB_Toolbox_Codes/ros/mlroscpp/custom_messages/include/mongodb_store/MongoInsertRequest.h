// Generated by gencpp from file mongodb_store/MongoInsertRequest.msg
// DO NOT EDIT!


#ifndef MONGODB_STORE_MESSAGE_MONGOINSERTREQUEST_H
#define MONGODB_STORE_MESSAGE_MONGOINSERTREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mongodb_store
{
template <class ContainerAllocator>
struct MongoInsertRequest_
{
  typedef MongoInsertRequest_<ContainerAllocator> Type;

  MongoInsertRequest_()
    : db()
    , collection()
    , document()  {
    }
  MongoInsertRequest_(const ContainerAllocator& _alloc)
    : db(_alloc)
    , collection(_alloc)
    , document(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _db_type;
  _db_type db;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _collection_type;
  _collection_type collection;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _document_type;
  _document_type document;





  typedef boost::shared_ptr< ::mongodb_store::MongoInsertRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mongodb_store::MongoInsertRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MongoInsertRequest_

typedef ::mongodb_store::MongoInsertRequest_<std::allocator<void> > MongoInsertRequest;

typedef boost::shared_ptr< ::mongodb_store::MongoInsertRequest > MongoInsertRequestPtr;
typedef boost::shared_ptr< ::mongodb_store::MongoInsertRequest const> MongoInsertRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mongodb_store::MongoInsertRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mongodb_store::MongoInsertRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mongodb_store

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1352567/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mongodb_store::MongoInsertRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mongodb_store::MongoInsertRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mongodb_store::MongoInsertRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mongodb_store::MongoInsertRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mongodb_store::MongoInsertRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mongodb_store::MongoInsertRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mongodb_store::MongoInsertRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "370f65c72e031302f4aca6bcf64817f9";
  }

  static const char* value(const ::mongodb_store::MongoInsertRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x370f65c72e031302ULL;
  static const uint64_t static_value2 = 0xf4aca6bcf64817f9ULL;
};

template<class ContainerAllocator>
struct DataType< ::mongodb_store::MongoInsertRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mongodb_store/MongoInsertRequest";
  }

  static const char* value(const ::mongodb_store::MongoInsertRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mongodb_store::MongoInsertRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string db\n"
"string collection\n"
"string document\n"
;
  }

  static const char* value(const ::mongodb_store::MongoInsertRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mongodb_store::MongoInsertRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.db);
      stream.next(m.collection);
      stream.next(m.document);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MongoInsertRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mongodb_store::MongoInsertRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mongodb_store::MongoInsertRequest_<ContainerAllocator>& v)
  {
    s << indent << "db: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.db);
    s << indent << "collection: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.collection);
    s << indent << "document: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.document);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MONGODB_STORE_MESSAGE_MONGOINSERTREQUEST_H
