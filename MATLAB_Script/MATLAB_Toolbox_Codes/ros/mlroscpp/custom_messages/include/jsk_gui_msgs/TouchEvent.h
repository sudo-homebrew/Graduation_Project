// Generated by gencpp from file jsk_gui_msgs/TouchEvent.msg
// DO NOT EDIT!


#ifndef JSK_GUI_MSGS_MESSAGE_TOUCHEVENT_H
#define JSK_GUI_MSGS_MESSAGE_TOUCHEVENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace jsk_gui_msgs
{
template <class ContainerAllocator>
struct TouchEvent_
{
  typedef TouchEvent_<ContainerAllocator> Type;

  TouchEvent_()
    : state(0)
    , x(0.0)
    , y(0.0)
    , w(0.0)
    , h(0.0)  {
    }
  TouchEvent_(const ContainerAllocator& _alloc)
    : state(0)
    , x(0.0)
    , y(0.0)
    , w(0.0)
    , h(0.0)  {
  (void)_alloc;
    }



   typedef int8_t _state_type;
  _state_type state;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _w_type;
  _w_type w;

   typedef float _h_type;
  _h_type h;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(DOWN)
  #undef DOWN
#endif
#if defined(_WIN32) && defined(UP)
  #undef UP
#endif
#if defined(_WIN32) && defined(MOVE)
  #undef MOVE
#endif

  enum {
    DOWN = 0,
    UP = 1,
    MOVE = 2,
  };


  typedef boost::shared_ptr< ::jsk_gui_msgs::TouchEvent_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jsk_gui_msgs::TouchEvent_<ContainerAllocator> const> ConstPtr;

}; // struct TouchEvent_

typedef ::jsk_gui_msgs::TouchEvent_<std::allocator<void> > TouchEvent;

typedef boost::shared_ptr< ::jsk_gui_msgs::TouchEvent > TouchEventPtr;
typedef boost::shared_ptr< ::jsk_gui_msgs::TouchEvent const> TouchEventConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jsk_gui_msgs::TouchEvent_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jsk_gui_msgs::TouchEvent_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jsk_gui_msgs::TouchEvent_<ContainerAllocator1> & lhs, const ::jsk_gui_msgs::TouchEvent_<ContainerAllocator2> & rhs)
{
  return lhs.state == rhs.state &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.w == rhs.w &&
    lhs.h == rhs.h;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jsk_gui_msgs::TouchEvent_<ContainerAllocator1> & lhs, const ::jsk_gui_msgs::TouchEvent_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jsk_gui_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::jsk_gui_msgs::TouchEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jsk_gui_msgs::TouchEvent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jsk_gui_msgs::TouchEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jsk_gui_msgs::TouchEvent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_gui_msgs::TouchEvent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_gui_msgs::TouchEvent_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jsk_gui_msgs::TouchEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f074642ed1ad51ea5afc186cab8aaca1";
  }

  static const char* value(const ::jsk_gui_msgs::TouchEvent_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf074642ed1ad51eaULL;
  static const uint64_t static_value2 = 0x5afc186cab8aaca1ULL;
};

template<class ContainerAllocator>
struct DataType< ::jsk_gui_msgs::TouchEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jsk_gui_msgs/TouchEvent";
  }

  static const char* value(const ::jsk_gui_msgs::TouchEvent_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jsk_gui_msgs::TouchEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "byte DOWN=0\n"
"byte UP=1\n"
"byte MOVE=2\n"
"\n"
"byte state\n"
"float32 x\n"
"float32 y\n"
"float32 w\n"
"float32 h\n"
;
  }

  static const char* value(const ::jsk_gui_msgs::TouchEvent_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jsk_gui_msgs::TouchEvent_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.w);
      stream.next(m.h);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TouchEvent_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jsk_gui_msgs::TouchEvent_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jsk_gui_msgs::TouchEvent_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    Printer<int8_t>::stream(s, indent + "  ", v.state);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "w: ";
    Printer<float>::stream(s, indent + "  ", v.w);
    s << indent << "h: ";
    Printer<float>::stream(s, indent + "  ", v.h);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JSK_GUI_MSGS_MESSAGE_TOUCHEVENT_H
