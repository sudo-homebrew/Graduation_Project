// Generated by gencpp from file jsk_gui_msgs/Gravity.msg
// DO NOT EDIT!


#ifndef JSK_GUI_MSGS_MESSAGE_GRAVITY_H
#define JSK_GUI_MSGS_MESSAGE_GRAVITY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>

namespace jsk_gui_msgs
{
template <class ContainerAllocator>
struct Gravity_
{
  typedef Gravity_<ContainerAllocator> Type;

  Gravity_()
    : gravity()  {
    }
  Gravity_(const ContainerAllocator& _alloc)
    : gravity(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _gravity_type;
  _gravity_type gravity;





  typedef boost::shared_ptr< ::jsk_gui_msgs::Gravity_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jsk_gui_msgs::Gravity_<ContainerAllocator> const> ConstPtr;

}; // struct Gravity_

typedef ::jsk_gui_msgs::Gravity_<std::allocator<void> > Gravity;

typedef boost::shared_ptr< ::jsk_gui_msgs::Gravity > GravityPtr;
typedef boost::shared_ptr< ::jsk_gui_msgs::Gravity const> GravityConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jsk_gui_msgs::Gravity_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jsk_gui_msgs::Gravity_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jsk_gui_msgs::Gravity_<ContainerAllocator1> & lhs, const ::jsk_gui_msgs::Gravity_<ContainerAllocator2> & rhs)
{
  return lhs.gravity == rhs.gravity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jsk_gui_msgs::Gravity_<ContainerAllocator1> & lhs, const ::jsk_gui_msgs::Gravity_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jsk_gui_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::jsk_gui_msgs::Gravity_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jsk_gui_msgs::Gravity_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jsk_gui_msgs::Gravity_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jsk_gui_msgs::Gravity_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_gui_msgs::Gravity_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_gui_msgs::Gravity_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jsk_gui_msgs::Gravity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "86facaf836997cbbc4faee170616f59e";
  }

  static const char* value(const ::jsk_gui_msgs::Gravity_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x86facaf836997cbbULL;
  static const uint64_t static_value2 = 0xc4faee170616f59eULL;
};

template<class ContainerAllocator>
struct DataType< ::jsk_gui_msgs::Gravity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jsk_gui_msgs/Gravity";
  }

  static const char* value(const ::jsk_gui_msgs::Gravity_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jsk_gui_msgs::Gravity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Vector3 gravity\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::jsk_gui_msgs::Gravity_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jsk_gui_msgs::Gravity_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gravity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Gravity_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jsk_gui_msgs::Gravity_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jsk_gui_msgs::Gravity_<ContainerAllocator>& v)
  {
    s << indent << "gravity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.gravity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JSK_GUI_MSGS_MESSAGE_GRAVITY_H
