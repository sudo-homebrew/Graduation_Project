// Generated by gencpp from file jsk_gui_msgs/Tablet.msg
// DO NOT EDIT!


#ifndef JSK_GUI_MSGS_MESSAGE_TABLET_H
#define JSK_GUI_MSGS_MESSAGE_TABLET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <jsk_gui_msgs/Action.h>
#include <jsk_gui_msgs/DeviceSensor.h>
#include <jsk_gui_msgs/Touch.h>

namespace jsk_gui_msgs
{
template <class ContainerAllocator>
struct Tablet_
{
  typedef Tablet_<ContainerAllocator> Type;

  Tablet_()
    : header()
    , hardware_name()
    , hardware_id()
    , action()
    , sensor()
    , touches()  {
    }
  Tablet_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , hardware_name(_alloc)
    , hardware_id(_alloc)
    , action(_alloc)
    , sensor(_alloc)
    , touches(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _hardware_name_type;
  _hardware_name_type hardware_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _hardware_id_type;
  _hardware_id_type hardware_id;

   typedef  ::jsk_gui_msgs::Action_<ContainerAllocator>  _action_type;
  _action_type action;

   typedef  ::jsk_gui_msgs::DeviceSensor_<ContainerAllocator>  _sensor_type;
  _sensor_type sensor;

   typedef std::vector< ::jsk_gui_msgs::Touch_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::jsk_gui_msgs::Touch_<ContainerAllocator> >::other >  _touches_type;
  _touches_type touches;





  typedef boost::shared_ptr< ::jsk_gui_msgs::Tablet_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jsk_gui_msgs::Tablet_<ContainerAllocator> const> ConstPtr;

}; // struct Tablet_

typedef ::jsk_gui_msgs::Tablet_<std::allocator<void> > Tablet;

typedef boost::shared_ptr< ::jsk_gui_msgs::Tablet > TabletPtr;
typedef boost::shared_ptr< ::jsk_gui_msgs::Tablet const> TabletConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jsk_gui_msgs::Tablet_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jsk_gui_msgs::Tablet_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jsk_gui_msgs::Tablet_<ContainerAllocator1> & lhs, const ::jsk_gui_msgs::Tablet_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.hardware_name == rhs.hardware_name &&
    lhs.hardware_id == rhs.hardware_id &&
    lhs.action == rhs.action &&
    lhs.sensor == rhs.sensor &&
    lhs.touches == rhs.touches;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jsk_gui_msgs::Tablet_<ContainerAllocator1> & lhs, const ::jsk_gui_msgs::Tablet_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jsk_gui_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::jsk_gui_msgs::Tablet_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jsk_gui_msgs::Tablet_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jsk_gui_msgs::Tablet_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jsk_gui_msgs::Tablet_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_gui_msgs::Tablet_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_gui_msgs::Tablet_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jsk_gui_msgs::Tablet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0bab196c7b214826d8c27d7bd5f924f6";
  }

  static const char* value(const ::jsk_gui_msgs::Tablet_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0bab196c7b214826ULL;
  static const uint64_t static_value2 = 0xd8c27d7bd5f924f6ULL;
};

template<class ContainerAllocator>
struct DataType< ::jsk_gui_msgs::Tablet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jsk_gui_msgs/Tablet";
  }

  static const char* value(const ::jsk_gui_msgs::Tablet_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jsk_gui_msgs::Tablet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"# hardware_namel: iPad, Android, other mobile\n"
"string hardware_name\n"
"string hardware_id\n"
"Action action\n"
"DeviceSensor sensor\n"
"Touch[] touches\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: jsk_gui_msgs/Action\n"
"byte RARMID=0\n"
"byte LARMID=1\n"
"\n"
"# task: push, pick, open, slide, MoveNeck, MoveBase\n"
"string task_name\n"
"\n"
"# selection: button names\n"
"# string selection_name\n"
"\n"
"# arm: :rarm, :lsrm\n"
"int64 arm_id\n"
"\n"
"# state of touch: touch, pick, pinch, sweep\n"
"# for debugging\n"
"string state\n"
"# value of state\n"
"float64 state_value\n"
"\n"
"# direction: up, down, left, right\n"
"string direction\n"
"# value of direction, degree\n"
"float64 direction_value\n"
"\n"
"int64 touch_x\n"
"int64 touch_y\n"
"\n"
"# Example\n"
"#  push: touches[0].x, touches[0].y, task_name, arm_id\n"
"#  open: touches[0 1 2].x, touches[0 1 2].y, task_name, arm_id\n"
"#  slide: touches[0 1 2].x, touches[0 1 2].y, task_name, arm_id\n"
"#  move_neck: task_name, direction, direction_value\n"
"#  move_base: task_name, direction, direction_value\n"
"================================================================================\n"
"MSG: jsk_gui_msgs/DeviceSensor\n"
"float64 temperature\n"
"float64 relative_humidity\n"
"float64 light\n"
"float64 pressure\n"
"float64 proximity\n"
"\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: jsk_gui_msgs/Touch\n"
"# finger_id\n"
"int64 finger_id\n"
"# touch point(screen point)\n"
"float64 x\n"
"float64 y\n"
"# based image size (usually not needed)\n"
"int64 image_width\n"
"int64 image_height\n"
;
  }

  static const char* value(const ::jsk_gui_msgs::Tablet_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jsk_gui_msgs::Tablet_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.hardware_name);
      stream.next(m.hardware_id);
      stream.next(m.action);
      stream.next(m.sensor);
      stream.next(m.touches);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Tablet_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jsk_gui_msgs::Tablet_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jsk_gui_msgs::Tablet_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "hardware_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.hardware_name);
    s << indent << "hardware_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.hardware_id);
    s << indent << "action: ";
    s << std::endl;
    Printer< ::jsk_gui_msgs::Action_<ContainerAllocator> >::stream(s, indent + "  ", v.action);
    s << indent << "sensor: ";
    s << std::endl;
    Printer< ::jsk_gui_msgs::DeviceSensor_<ContainerAllocator> >::stream(s, indent + "  ", v.sensor);
    s << indent << "touches[]" << std::endl;
    for (size_t i = 0; i < v.touches.size(); ++i)
    {
      s << indent << "  touches[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::jsk_gui_msgs::Touch_<ContainerAllocator> >::stream(s, indent + "    ", v.touches[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // JSK_GUI_MSGS_MESSAGE_TABLET_H
