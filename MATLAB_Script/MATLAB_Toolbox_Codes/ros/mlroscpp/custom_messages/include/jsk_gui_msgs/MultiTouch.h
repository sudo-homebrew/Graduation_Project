// Generated by gencpp from file jsk_gui_msgs/MultiTouch.msg
// DO NOT EDIT!


#ifndef JSK_GUI_MSGS_MESSAGE_MULTITOUCH_H
#define JSK_GUI_MSGS_MESSAGE_MULTITOUCH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <jsk_gui_msgs/Touch.h>

namespace jsk_gui_msgs
{
template <class ContainerAllocator>
struct MultiTouch_
{
  typedef MultiTouch_<ContainerAllocator> Type;

  MultiTouch_()
    : touches()  {
    }
  MultiTouch_(const ContainerAllocator& _alloc)
    : touches(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::jsk_gui_msgs::Touch_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::jsk_gui_msgs::Touch_<ContainerAllocator> >::other >  _touches_type;
  _touches_type touches;





  typedef boost::shared_ptr< ::jsk_gui_msgs::MultiTouch_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jsk_gui_msgs::MultiTouch_<ContainerAllocator> const> ConstPtr;

}; // struct MultiTouch_

typedef ::jsk_gui_msgs::MultiTouch_<std::allocator<void> > MultiTouch;

typedef boost::shared_ptr< ::jsk_gui_msgs::MultiTouch > MultiTouchPtr;
typedef boost::shared_ptr< ::jsk_gui_msgs::MultiTouch const> MultiTouchConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jsk_gui_msgs::MultiTouch_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jsk_gui_msgs::MultiTouch_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jsk_gui_msgs::MultiTouch_<ContainerAllocator1> & lhs, const ::jsk_gui_msgs::MultiTouch_<ContainerAllocator2> & rhs)
{
  return lhs.touches == rhs.touches;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jsk_gui_msgs::MultiTouch_<ContainerAllocator1> & lhs, const ::jsk_gui_msgs::MultiTouch_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jsk_gui_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::jsk_gui_msgs::MultiTouch_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jsk_gui_msgs::MultiTouch_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jsk_gui_msgs::MultiTouch_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jsk_gui_msgs::MultiTouch_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_gui_msgs::MultiTouch_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_gui_msgs::MultiTouch_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jsk_gui_msgs::MultiTouch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9f4a309588ef669e69a71aa5601ea65e";
  }

  static const char* value(const ::jsk_gui_msgs::MultiTouch_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9f4a309588ef669eULL;
  static const uint64_t static_value2 = 0x69a71aa5601ea65eULL;
};

template<class ContainerAllocator>
struct DataType< ::jsk_gui_msgs::MultiTouch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jsk_gui_msgs/MultiTouch";
  }

  static const char* value(const ::jsk_gui_msgs::MultiTouch_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jsk_gui_msgs::MultiTouch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Touch[] touches\n"
"================================================================================\n"
"MSG: jsk_gui_msgs/Touch\n"
"# finger_id\n"
"int64 finger_id\n"
"# touch point(screen point)\n"
"float64 x\n"
"float64 y\n"
"# based image size (usually not needed)\n"
"int64 image_width\n"
"int64 image_height\n"
;
  }

  static const char* value(const ::jsk_gui_msgs::MultiTouch_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jsk_gui_msgs::MultiTouch_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.touches);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MultiTouch_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jsk_gui_msgs::MultiTouch_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jsk_gui_msgs::MultiTouch_<ContainerAllocator>& v)
  {
    s << indent << "touches[]" << std::endl;
    for (size_t i = 0; i < v.touches.size(); ++i)
    {
      s << indent << "  touches[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::jsk_gui_msgs::Touch_<ContainerAllocator> >::stream(s, indent + "    ", v.touches[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // JSK_GUI_MSGS_MESSAGE_MULTITOUCH_H
