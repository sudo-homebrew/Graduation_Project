// Generated by gencpp from file jsk_gui_msgs/DeviceSensor.msg
// DO NOT EDIT!


#ifndef JSK_GUI_MSGS_MESSAGE_DEVICESENSOR_H
#define JSK_GUI_MSGS_MESSAGE_DEVICESENSOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace jsk_gui_msgs
{
template <class ContainerAllocator>
struct DeviceSensor_
{
  typedef DeviceSensor_<ContainerAllocator> Type;

  DeviceSensor_()
    : temperature(0.0)
    , relative_humidity(0.0)
    , light(0.0)
    , pressure(0.0)
    , proximity(0.0)  {
    }
  DeviceSensor_(const ContainerAllocator& _alloc)
    : temperature(0.0)
    , relative_humidity(0.0)
    , light(0.0)
    , pressure(0.0)
    , proximity(0.0)  {
  (void)_alloc;
    }



   typedef double _temperature_type;
  _temperature_type temperature;

   typedef double _relative_humidity_type;
  _relative_humidity_type relative_humidity;

   typedef double _light_type;
  _light_type light;

   typedef double _pressure_type;
  _pressure_type pressure;

   typedef double _proximity_type;
  _proximity_type proximity;





  typedef boost::shared_ptr< ::jsk_gui_msgs::DeviceSensor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jsk_gui_msgs::DeviceSensor_<ContainerAllocator> const> ConstPtr;

}; // struct DeviceSensor_

typedef ::jsk_gui_msgs::DeviceSensor_<std::allocator<void> > DeviceSensor;

typedef boost::shared_ptr< ::jsk_gui_msgs::DeviceSensor > DeviceSensorPtr;
typedef boost::shared_ptr< ::jsk_gui_msgs::DeviceSensor const> DeviceSensorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jsk_gui_msgs::DeviceSensor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jsk_gui_msgs::DeviceSensor_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jsk_gui_msgs::DeviceSensor_<ContainerAllocator1> & lhs, const ::jsk_gui_msgs::DeviceSensor_<ContainerAllocator2> & rhs)
{
  return lhs.temperature == rhs.temperature &&
    lhs.relative_humidity == rhs.relative_humidity &&
    lhs.light == rhs.light &&
    lhs.pressure == rhs.pressure &&
    lhs.proximity == rhs.proximity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jsk_gui_msgs::DeviceSensor_<ContainerAllocator1> & lhs, const ::jsk_gui_msgs::DeviceSensor_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jsk_gui_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::jsk_gui_msgs::DeviceSensor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jsk_gui_msgs::DeviceSensor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jsk_gui_msgs::DeviceSensor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jsk_gui_msgs::DeviceSensor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_gui_msgs::DeviceSensor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_gui_msgs::DeviceSensor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jsk_gui_msgs::DeviceSensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d3861ba768b988b4c249337d4dc6552d";
  }

  static const char* value(const ::jsk_gui_msgs::DeviceSensor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd3861ba768b988b4ULL;
  static const uint64_t static_value2 = 0xc249337d4dc6552dULL;
};

template<class ContainerAllocator>
struct DataType< ::jsk_gui_msgs::DeviceSensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jsk_gui_msgs/DeviceSensor";
  }

  static const char* value(const ::jsk_gui_msgs::DeviceSensor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jsk_gui_msgs::DeviceSensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 temperature\n"
"float64 relative_humidity\n"
"float64 light\n"
"float64 pressure\n"
"float64 proximity\n"
"\n"
"\n"
"\n"
;
  }

  static const char* value(const ::jsk_gui_msgs::DeviceSensor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jsk_gui_msgs::DeviceSensor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.temperature);
      stream.next(m.relative_humidity);
      stream.next(m.light);
      stream.next(m.pressure);
      stream.next(m.proximity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DeviceSensor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jsk_gui_msgs::DeviceSensor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jsk_gui_msgs::DeviceSensor_<ContainerAllocator>& v)
  {
    s << indent << "temperature: ";
    Printer<double>::stream(s, indent + "  ", v.temperature);
    s << indent << "relative_humidity: ";
    Printer<double>::stream(s, indent + "  ", v.relative_humidity);
    s << indent << "light: ";
    Printer<double>::stream(s, indent + "  ", v.light);
    s << indent << "pressure: ";
    Printer<double>::stream(s, indent + "  ", v.pressure);
    s << indent << "proximity: ";
    Printer<double>::stream(s, indent + "  ", v.proximity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JSK_GUI_MSGS_MESSAGE_DEVICESENSOR_H
