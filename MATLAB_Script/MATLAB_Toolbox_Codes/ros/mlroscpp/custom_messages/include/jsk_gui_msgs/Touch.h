// Generated by gencpp from file jsk_gui_msgs/Touch.msg
// DO NOT EDIT!


#ifndef JSK_GUI_MSGS_MESSAGE_TOUCH_H
#define JSK_GUI_MSGS_MESSAGE_TOUCH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace jsk_gui_msgs
{
template <class ContainerAllocator>
struct Touch_
{
  typedef Touch_<ContainerAllocator> Type;

  Touch_()
    : finger_id(0)
    , x(0.0)
    , y(0.0)
    , image_width(0)
    , image_height(0)  {
    }
  Touch_(const ContainerAllocator& _alloc)
    : finger_id(0)
    , x(0.0)
    , y(0.0)
    , image_width(0)
    , image_height(0)  {
  (void)_alloc;
    }



   typedef int64_t _finger_id_type;
  _finger_id_type finger_id;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef int64_t _image_width_type;
  _image_width_type image_width;

   typedef int64_t _image_height_type;
  _image_height_type image_height;





  typedef boost::shared_ptr< ::jsk_gui_msgs::Touch_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jsk_gui_msgs::Touch_<ContainerAllocator> const> ConstPtr;

}; // struct Touch_

typedef ::jsk_gui_msgs::Touch_<std::allocator<void> > Touch;

typedef boost::shared_ptr< ::jsk_gui_msgs::Touch > TouchPtr;
typedef boost::shared_ptr< ::jsk_gui_msgs::Touch const> TouchConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jsk_gui_msgs::Touch_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jsk_gui_msgs::Touch_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jsk_gui_msgs::Touch_<ContainerAllocator1> & lhs, const ::jsk_gui_msgs::Touch_<ContainerAllocator2> & rhs)
{
  return lhs.finger_id == rhs.finger_id &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.image_width == rhs.image_width &&
    lhs.image_height == rhs.image_height;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jsk_gui_msgs::Touch_<ContainerAllocator1> & lhs, const ::jsk_gui_msgs::Touch_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jsk_gui_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::jsk_gui_msgs::Touch_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jsk_gui_msgs::Touch_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jsk_gui_msgs::Touch_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jsk_gui_msgs::Touch_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_gui_msgs::Touch_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_gui_msgs::Touch_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jsk_gui_msgs::Touch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d96a284d39fcc410f375ac68fd380177";
  }

  static const char* value(const ::jsk_gui_msgs::Touch_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd96a284d39fcc410ULL;
  static const uint64_t static_value2 = 0xf375ac68fd380177ULL;
};

template<class ContainerAllocator>
struct DataType< ::jsk_gui_msgs::Touch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jsk_gui_msgs/Touch";
  }

  static const char* value(const ::jsk_gui_msgs::Touch_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jsk_gui_msgs::Touch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# finger_id\n"
"int64 finger_id\n"
"# touch point(screen point)\n"
"float64 x\n"
"float64 y\n"
"# based image size (usually not needed)\n"
"int64 image_width\n"
"int64 image_height\n"
;
  }

  static const char* value(const ::jsk_gui_msgs::Touch_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jsk_gui_msgs::Touch_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.finger_id);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.image_width);
      stream.next(m.image_height);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Touch_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jsk_gui_msgs::Touch_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jsk_gui_msgs::Touch_<ContainerAllocator>& v)
  {
    s << indent << "finger_id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.finger_id);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "image_width: ";
    Printer<int64_t>::stream(s, indent + "  ", v.image_width);
    s << indent << "image_height: ";
    Printer<int64_t>::stream(s, indent + "  ", v.image_height);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JSK_GUI_MSGS_MESSAGE_TOUCH_H
