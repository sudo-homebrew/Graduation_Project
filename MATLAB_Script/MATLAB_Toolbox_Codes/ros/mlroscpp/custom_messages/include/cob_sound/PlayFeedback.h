// Generated by gencpp from file cob_sound/PlayFeedback.msg
// DO NOT EDIT!


#ifndef COB_SOUND_MESSAGE_PLAYFEEDBACK_H
#define COB_SOUND_MESSAGE_PLAYFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cob_sound
{
template <class ContainerAllocator>
struct PlayFeedback_
{
  typedef PlayFeedback_<ContainerAllocator> Type;

  PlayFeedback_()
    : position(0.0)
    , time(0)  {
    }
  PlayFeedback_(const ContainerAllocator& _alloc)
    : position(0.0)
    , time(0)  {
  (void)_alloc;
    }



   typedef float _position_type;
  _position_type position;

   typedef int64_t _time_type;
  _time_type time;





  typedef boost::shared_ptr< ::cob_sound::PlayFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_sound::PlayFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct PlayFeedback_

typedef ::cob_sound::PlayFeedback_<std::allocator<void> > PlayFeedback;

typedef boost::shared_ptr< ::cob_sound::PlayFeedback > PlayFeedbackPtr;
typedef boost::shared_ptr< ::cob_sound::PlayFeedback const> PlayFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cob_sound::PlayFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cob_sound::PlayFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cob_sound::PlayFeedback_<ContainerAllocator1> & lhs, const ::cob_sound::PlayFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.position == rhs.position &&
    lhs.time == rhs.time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cob_sound::PlayFeedback_<ContainerAllocator1> & lhs, const ::cob_sound::PlayFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cob_sound

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cob_sound::PlayFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cob_sound::PlayFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cob_sound::PlayFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cob_sound::PlayFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_sound::PlayFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_sound::PlayFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cob_sound::PlayFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f06b964fe8afc9fc6f0973a48e95fd13";
  }

  static const char* value(const ::cob_sound::PlayFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf06b964fe8afc9fcULL;
  static const uint64_t static_value2 = 0x6f0973a48e95fd13ULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_sound::PlayFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cob_sound/PlayFeedback";
  }

  static const char* value(const ::cob_sound::PlayFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cob_sound::PlayFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#feedback\n"
"float32 position    #the current position in the media file as percentage between 0.0 and 1.0\n"
"int64 time        #the current time in the media file (in ms)\n"
"\n"
;
  }

  static const char* value(const ::cob_sound::PlayFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cob_sound::PlayFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlayFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cob_sound::PlayFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cob_sound::PlayFeedback_<ContainerAllocator>& v)
  {
    s << indent << "position: ";
    Printer<float>::stream(s, indent + "  ", v.position);
    s << indent << "time: ";
    Printer<int64_t>::stream(s, indent + "  ", v.time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COB_SOUND_MESSAGE_PLAYFEEDBACK_H
