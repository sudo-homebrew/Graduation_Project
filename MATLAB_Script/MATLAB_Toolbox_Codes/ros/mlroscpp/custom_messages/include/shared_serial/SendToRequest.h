// Generated by gencpp from file shared_serial/SendToRequest.msg
// DO NOT EDIT!


#ifndef SHARED_SERIAL_MESSAGE_SENDTOREQUEST_H
#define SHARED_SERIAL_MESSAGE_SENDTOREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace shared_serial
{
template <class ContainerAllocator>
struct SendToRequest_
{
  typedef SendToRequest_<ContainerAllocator> Type;

  SendToRequest_()
    : socket(0)
    , data()
    , timeout(0.0)  {
    }
  SendToRequest_(const ContainerAllocator& _alloc)
    : socket(0)
    , data(_alloc)
    , timeout(0.0)  {
  (void)_alloc;
    }



   typedef uint32_t _socket_type;
  _socket_type socket;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _data_type;
  _data_type data;

   typedef float _timeout_type;
  _timeout_type timeout;





  typedef boost::shared_ptr< ::shared_serial::SendToRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::shared_serial::SendToRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SendToRequest_

typedef ::shared_serial::SendToRequest_<std::allocator<void> > SendToRequest;

typedef boost::shared_ptr< ::shared_serial::SendToRequest > SendToRequestPtr;
typedef boost::shared_ptr< ::shared_serial::SendToRequest const> SendToRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::shared_serial::SendToRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::shared_serial::SendToRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace shared_serial

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'shared_serial': ['/mathworks/home/pmurali/Documents/S/matlab_msg_gen_ros1/glnxa64/src/shared_serial/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1339814/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::shared_serial::SendToRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::shared_serial::SendToRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::shared_serial::SendToRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::shared_serial::SendToRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::shared_serial::SendToRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::shared_serial::SendToRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::shared_serial::SendToRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9488c54395f85f0662ca59801f32b45a";
  }

  static const char* value(const ::shared_serial::SendToRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9488c54395f85f06ULL;
  static const uint64_t static_value2 = 0x62ca59801f32b45aULL;
};

template<class ContainerAllocator>
struct DataType< ::shared_serial::SendToRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "shared_serial/SendToRequest";
  }

  static const char* value(const ::shared_serial::SendToRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::shared_serial::SendToRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"\n"
"\n"
"\n"
"uint32  socket\n"
"\n"
"\n"
"uint8[] data\n"
"\n"
"\n"
"float32 timeout\n"
"\n"
;
  }

  static const char* value(const ::shared_serial::SendToRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::shared_serial::SendToRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.socket);
      stream.next(m.data);
      stream.next(m.timeout);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SendToRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::shared_serial::SendToRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::shared_serial::SendToRequest_<ContainerAllocator>& v)
  {
    s << indent << "socket: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.socket);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data[i]);
    }
    s << indent << "timeout: ";
    Printer<float>::stream(s, indent + "  ", v.timeout);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SHARED_SERIAL_MESSAGE_SENDTOREQUEST_H
