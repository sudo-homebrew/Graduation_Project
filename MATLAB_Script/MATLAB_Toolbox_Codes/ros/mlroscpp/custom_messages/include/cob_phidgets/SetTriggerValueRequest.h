// Generated by gencpp from file cob_phidgets/SetTriggerValueRequest.msg
// DO NOT EDIT!


#ifndef COB_PHIDGETS_MESSAGE_SETTRIGGERVALUEREQUEST_H
#define COB_PHIDGETS_MESSAGE_SETTRIGGERVALUEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cob_phidgets
{
template <class ContainerAllocator>
struct SetTriggerValueRequest_
{
  typedef SetTriggerValueRequest_<ContainerAllocator> Type;

  SetTriggerValueRequest_()
    : index(0)
    , trigger_value(0)  {
    }
  SetTriggerValueRequest_(const ContainerAllocator& _alloc)
    : index(0)
    , trigger_value(0)  {
  (void)_alloc;
    }



   typedef int8_t _index_type;
  _index_type index;

   typedef uint16_t _trigger_value_type;
  _trigger_value_type trigger_value;





  typedef boost::shared_ptr< ::cob_phidgets::SetTriggerValueRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_phidgets::SetTriggerValueRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetTriggerValueRequest_

typedef ::cob_phidgets::SetTriggerValueRequest_<std::allocator<void> > SetTriggerValueRequest;

typedef boost::shared_ptr< ::cob_phidgets::SetTriggerValueRequest > SetTriggerValueRequestPtr;
typedef boost::shared_ptr< ::cob_phidgets::SetTriggerValueRequest const> SetTriggerValueRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cob_phidgets::SetTriggerValueRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cob_phidgets::SetTriggerValueRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cob_phidgets::SetTriggerValueRequest_<ContainerAllocator1> & lhs, const ::cob_phidgets::SetTriggerValueRequest_<ContainerAllocator2> & rhs)
{
  return lhs.index == rhs.index &&
    lhs.trigger_value == rhs.trigger_value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cob_phidgets::SetTriggerValueRequest_<ContainerAllocator1> & lhs, const ::cob_phidgets::SetTriggerValueRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cob_phidgets

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cob_phidgets::SetTriggerValueRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cob_phidgets::SetTriggerValueRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cob_phidgets::SetTriggerValueRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cob_phidgets::SetTriggerValueRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_phidgets::SetTriggerValueRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_phidgets::SetTriggerValueRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cob_phidgets::SetTriggerValueRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f5eabd2487a9b62214c60cbc4be257ee";
  }

  static const char* value(const ::cob_phidgets::SetTriggerValueRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf5eabd2487a9b622ULL;
  static const uint64_t static_value2 = 0x14c60cbc4be257eeULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_phidgets::SetTriggerValueRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cob_phidgets/SetTriggerValueRequest";
  }

  static const char* value(const ::cob_phidgets::SetTriggerValueRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cob_phidgets::SetTriggerValueRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 index\n"
"uint16 trigger_value\n"
;
  }

  static const char* value(const ::cob_phidgets::SetTriggerValueRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cob_phidgets::SetTriggerValueRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.index);
      stream.next(m.trigger_value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetTriggerValueRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cob_phidgets::SetTriggerValueRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cob_phidgets::SetTriggerValueRequest_<ContainerAllocator>& v)
  {
    s << indent << "index: ";
    Printer<int8_t>::stream(s, indent + "  ", v.index);
    s << indent << "trigger_value: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.trigger_value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COB_PHIDGETS_MESSAGE_SETTRIGGERVALUEREQUEST_H
