// Generated by gencpp from file manipulation_msgs/ManipulationPhase.msg
// DO NOT EDIT!


#ifndef MANIPULATION_MSGS_MESSAGE_MANIPULATIONPHASE_H
#define MANIPULATION_MSGS_MESSAGE_MANIPULATIONPHASE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace manipulation_msgs
{
template <class ContainerAllocator>
struct ManipulationPhase_
{
  typedef ManipulationPhase_<ContainerAllocator> Type;

  ManipulationPhase_()
    : phase(0)  {
    }
  ManipulationPhase_(const ContainerAllocator& _alloc)
    : phase(0)  {
  (void)_alloc;
    }



   typedef int32_t _phase_type;
  _phase_type phase;



  enum {
 
    CHECKING_FEASIBILITY = 0,
 
    MOVING_TO_PREGRASP = 1,
 
    MOVING_TO_GRASP = 2,
 
    CLOSING = 3,
 
    ADJUSTING_GRASP = 4,
 
    LIFTING = 5,
 
    MOVING_WITH_OBJECT = 6,
 
    MOVING_TO_PLACE = 7,
 
    PLACING = 8,
 
    OPENING = 9,
 
    RETREATING = 10,
 
    MOVING_WITHOUT_OBJECT = 11,
 
    SHAKING = 12,
 
    SUCCEEDED = 13,
 
    FAILED = 14,
 
    ABORTED = 15,
 
    HOLDING_OBJECT = 16,
  };


  typedef boost::shared_ptr< ::manipulation_msgs::ManipulationPhase_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::manipulation_msgs::ManipulationPhase_<ContainerAllocator> const> ConstPtr;

}; // struct ManipulationPhase_

typedef ::manipulation_msgs::ManipulationPhase_<std::allocator<void> > ManipulationPhase;

typedef boost::shared_ptr< ::manipulation_msgs::ManipulationPhase > ManipulationPhasePtr;
typedef boost::shared_ptr< ::manipulation_msgs::ManipulationPhase const> ManipulationPhaseConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::manipulation_msgs::ManipulationPhase_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::manipulation_msgs::ManipulationPhase_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace manipulation_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'household_objects_database_msgs': ['/local-ssd1/All_Custom_Msgs/PendingPackagesInitial/matlab_msg_gen_ros1/glnxa64/src/household_objects_database_msgs/msg'], 'shape_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/shape_msgs/cmake/../msg'], 'actionlib_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/sensor_msgs/cmake/../msg'], 'actionlib': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/actionlib/cmake/../msg'], 'std_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'object_recognition_msgs': ['/local-ssd1/All_Custom_Msgs/PendingPackagesInitial/matlab_msg_gen_ros1/glnxa64/src/object_recognition_msgs/msg', '/local-ssd1/All_Custom_Msgs/PendingPackagesInitial/matlab_msg_gen_ros1/glnxa64/devel/share/object_recognition_msgs/msg'], 'geometry_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/geometry_msgs/cmake/../msg'], 'manipulation_msgs': ['/local-ssd1/All_Custom_Msgs/PendingPackagesInitial/matlab_msg_gen_ros1/glnxa64/src/manipulation_msgs/msg', '/local-ssd1/All_Custom_Msgs/PendingPackagesInitial/matlab_msg_gen_ros1/glnxa64/devel/share/manipulation_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::manipulation_msgs::ManipulationPhase_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::manipulation_msgs::ManipulationPhase_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::manipulation_msgs::ManipulationPhase_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::manipulation_msgs::ManipulationPhase_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::manipulation_msgs::ManipulationPhase_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::manipulation_msgs::ManipulationPhase_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::manipulation_msgs::ManipulationPhase_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2c824c847a35d8fd9277d324a3723378";
  }

  static const char* value(const ::manipulation_msgs::ManipulationPhase_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2c824c847a35d8fdULL;
  static const uint64_t static_value2 = 0x9277d324a3723378ULL;
};

template<class ContainerAllocator>
struct DataType< ::manipulation_msgs::ManipulationPhase_<ContainerAllocator> >
{
  static const char* value()
  {
    return "manipulation_msgs/ManipulationPhase";
  }

  static const char* value(const ::manipulation_msgs::ManipulationPhase_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::manipulation_msgs::ManipulationPhase_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 CHECKING_FEASIBILITY = 0\n"
"int32 MOVING_TO_PREGRASP = 1\n"
"int32 MOVING_TO_GRASP = 2\n"
"int32 CLOSING = 3 \n"
"int32 ADJUSTING_GRASP = 4\n"
"int32 LIFTING = 5\n"
"int32 MOVING_WITH_OBJECT = 6\n"
"int32 MOVING_TO_PLACE = 7\n"
"int32 PLACING = 8\n"
"int32 OPENING = 9\n"
"int32 RETREATING = 10\n"
"int32 MOVING_WITHOUT_OBJECT = 11\n"
"int32 SHAKING = 12\n"
"int32 SUCCEEDED = 13\n"
"int32 FAILED = 14\n"
"int32 ABORTED = 15\n"
"int32 HOLDING_OBJECT = 16\n"
"\n"
"int32 phase\n"
;
  }

  static const char* value(const ::manipulation_msgs::ManipulationPhase_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::manipulation_msgs::ManipulationPhase_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.phase);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ManipulationPhase_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::manipulation_msgs::ManipulationPhase_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::manipulation_msgs::ManipulationPhase_<ContainerAllocator>& v)
  {
    s << indent << "phase: ";
    Printer<int32_t>::stream(s, indent + "  ", v.phase);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MANIPULATION_MSGS_MESSAGE_MANIPULATIONPHASE_H
