// Generated by gencpp from file pr2_tilt_laser_interface/GetSnapshotGoal.msg
// DO NOT EDIT!


#ifndef PR2_TILT_LASER_INTERFACE_MESSAGE_GETSNAPSHOTGOAL_H
#define PR2_TILT_LASER_INTERFACE_MESSAGE_GETSNAPSHOTGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pr2_tilt_laser_interface
{
template <class ContainerAllocator>
struct GetSnapshotGoal_
{
  typedef GetSnapshotGoal_<ContainerAllocator> Type;

  GetSnapshotGoal_()
    : start_angle(0.0)
    , end_angle(0.0)
    , speed(0.0)
    , hi_fidelity(false)
    , continuous(false)  {
    }
  GetSnapshotGoal_(const ContainerAllocator& _alloc)
    : start_angle(0.0)
    , end_angle(0.0)
    , speed(0.0)
    , hi_fidelity(false)
    , continuous(false)  {
  (void)_alloc;
    }



   typedef float _start_angle_type;
  _start_angle_type start_angle;

   typedef float _end_angle_type;
  _end_angle_type end_angle;

   typedef float _speed_type;
  _speed_type speed;

   typedef uint8_t _hi_fidelity_type;
  _hi_fidelity_type hi_fidelity;

   typedef uint8_t _continuous_type;
  _continuous_type continuous;





  typedef boost::shared_ptr< ::pr2_tilt_laser_interface::GetSnapshotGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr2_tilt_laser_interface::GetSnapshotGoal_<ContainerAllocator> const> ConstPtr;

}; // struct GetSnapshotGoal_

typedef ::pr2_tilt_laser_interface::GetSnapshotGoal_<std::allocator<void> > GetSnapshotGoal;

typedef boost::shared_ptr< ::pr2_tilt_laser_interface::GetSnapshotGoal > GetSnapshotGoalPtr;
typedef boost::shared_ptr< ::pr2_tilt_laser_interface::GetSnapshotGoal const> GetSnapshotGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pr2_tilt_laser_interface::GetSnapshotGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pr2_tilt_laser_interface::GetSnapshotGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pr2_tilt_laser_interface

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'actionlib': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/actionlib/cmake/../msg'], 'sensor_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/geometry_msgs/cmake/../msg'], 'pr2_tilt_laser_interface': ['/local-ssd1/All_Custom_Msgs/PendingActionPackagesPart2/matlab_msg_gen_ros1/glnxa64/devel/share/pr2_tilt_laser_interface/msg'], 'actionlib_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pr2_tilt_laser_interface::GetSnapshotGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pr2_tilt_laser_interface::GetSnapshotGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pr2_tilt_laser_interface::GetSnapshotGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pr2_tilt_laser_interface::GetSnapshotGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr2_tilt_laser_interface::GetSnapshotGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr2_tilt_laser_interface::GetSnapshotGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pr2_tilt_laser_interface::GetSnapshotGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "464673531a0e6172d0d965e354c952f0";
  }

  static const char* value(const ::pr2_tilt_laser_interface::GetSnapshotGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x464673531a0e6172ULL;
  static const uint64_t static_value2 = 0xd0d965e354c952f0ULL;
};

template<class ContainerAllocator>
struct DataType< ::pr2_tilt_laser_interface::GetSnapshotGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pr2_tilt_laser_interface/GetSnapshotGoal";
  }

  static const char* value(const ::pr2_tilt_laser_interface::GetSnapshotGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pr2_tilt_laser_interface::GetSnapshotGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Goal\n"
"# We always want to command. Don't need this bool\n"
"# bool command_laser   # True: Use the command below. False: Use existing profile\n"
"float32 start_angle\n"
"float32 end_angle\n"
"float32 speed\n"
"bool hi_fidelity\n"
"bool continuous\n"
;
  }

  static const char* value(const ::pr2_tilt_laser_interface::GetSnapshotGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pr2_tilt_laser_interface::GetSnapshotGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start_angle);
      stream.next(m.end_angle);
      stream.next(m.speed);
      stream.next(m.hi_fidelity);
      stream.next(m.continuous);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetSnapshotGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr2_tilt_laser_interface::GetSnapshotGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pr2_tilt_laser_interface::GetSnapshotGoal_<ContainerAllocator>& v)
  {
    s << indent << "start_angle: ";
    Printer<float>::stream(s, indent + "  ", v.start_angle);
    s << indent << "end_angle: ";
    Printer<float>::stream(s, indent + "  ", v.end_angle);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "hi_fidelity: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hi_fidelity);
    s << indent << "continuous: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.continuous);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PR2_TILT_LASER_INTERFACE_MESSAGE_GETSNAPSHOTGOAL_H
