// Generated by gencpp from file sr_ronex_msgs/PWM.msg
// DO NOT EDIT!


#ifndef SR_RONEX_MSGS_MESSAGE_PWM_H
#define SR_RONEX_MSGS_MESSAGE_PWM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sr_ronex_msgs
{
template <class ContainerAllocator>
struct PWM_
{
  typedef PWM_<ContainerAllocator> Type;

  PWM_()
    : pwm_period(0)
    , pwm_on_time_0(0)
    , pwm_on_time_1(0)  {
    }
  PWM_(const ContainerAllocator& _alloc)
    : pwm_period(0)
    , pwm_on_time_0(0)
    , pwm_on_time_1(0)  {
  (void)_alloc;
    }



   typedef uint16_t _pwm_period_type;
  _pwm_period_type pwm_period;

   typedef uint16_t _pwm_on_time_0_type;
  _pwm_on_time_0_type pwm_on_time_0;

   typedef uint16_t _pwm_on_time_1_type;
  _pwm_on_time_1_type pwm_on_time_1;





  typedef boost::shared_ptr< ::sr_ronex_msgs::PWM_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sr_ronex_msgs::PWM_<ContainerAllocator> const> ConstPtr;

}; // struct PWM_

typedef ::sr_ronex_msgs::PWM_<std::allocator<void> > PWM;

typedef boost::shared_ptr< ::sr_ronex_msgs::PWM > PWMPtr;
typedef boost::shared_ptr< ::sr_ronex_msgs::PWM const> PWMConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sr_ronex_msgs::PWM_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sr_ronex_msgs::PWM_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sr_ronex_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sr_ronex_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/sr_ronex_msgs/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sr_ronex_msgs::PWM_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sr_ronex_msgs::PWM_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sr_ronex_msgs::PWM_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sr_ronex_msgs::PWM_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sr_ronex_msgs::PWM_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sr_ronex_msgs::PWM_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sr_ronex_msgs::PWM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "09d4129905f63410b7c71ee5d97925f3";
  }

  static const char* value(const ::sr_ronex_msgs::PWM_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x09d4129905f63410ULL;
  static const uint64_t static_value2 = 0xb7c71ee5d97925f3ULL;
};

template<class ContainerAllocator>
struct DataType< ::sr_ronex_msgs::PWM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sr_ronex_msgs/PWM";
  }

  static const char* value(const ::sr_ronex_msgs::PWM_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sr_ronex_msgs::PWM_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 pwm_period      #PWM period is pwm_period / clock_speed\n"
"uint16 pwm_on_time_0   # On time is pwm_on_time_0 / clock speed\n"
"uint16 pwm_on_time_1   # on time for 2nd output of the PWM module\n"
;
  }

  static const char* value(const ::sr_ronex_msgs::PWM_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sr_ronex_msgs::PWM_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pwm_period);
      stream.next(m.pwm_on_time_0);
      stream.next(m.pwm_on_time_1);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PWM_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sr_ronex_msgs::PWM_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sr_ronex_msgs::PWM_<ContainerAllocator>& v)
  {
    s << indent << "pwm_period: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pwm_period);
    s << indent << "pwm_on_time_0: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pwm_on_time_0);
    s << indent << "pwm_on_time_1: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pwm_on_time_1);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SR_RONEX_MSGS_MESSAGE_PWM_H
