// Generated by gencpp from file sr_ronex_msgs/SPIState.msg
// DO NOT EDIT!


#ifndef SR_RONEX_MSGS_MESSAGE_SPISTATE_H
#define SR_RONEX_MSGS_MESSAGE_SPISTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <sr_ronex_msgs/SPIPacketIn.h>

namespace sr_ronex_msgs
{
template <class ContainerAllocator>
struct SPIState_
{
  typedef SPIState_<ContainerAllocator> Type;

  SPIState_()
    : header()
    , command_type(0)
    , pin_input_states_DIO()
    , pin_input_states_SOMI()
    , spi_in()
    , analogue_in()  {
      pin_input_states_DIO.assign(0);

      pin_input_states_SOMI.assign(0);

      analogue_in.assign(0);
  }
  SPIState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , command_type(0)
    , pin_input_states_DIO()
    , pin_input_states_SOMI()
    , spi_in()
    , analogue_in()  {
  (void)_alloc;
      pin_input_states_DIO.assign(0);

      pin_input_states_SOMI.assign(0);

      spi_in.assign( ::sr_ronex_msgs::SPIPacketIn_<ContainerAllocator> (_alloc));

      analogue_in.assign(0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint16_t _command_type_type;
  _command_type_type command_type;

   typedef boost::array<uint8_t, 4>  _pin_input_states_DIO_type;
  _pin_input_states_DIO_type pin_input_states_DIO;

   typedef boost::array<uint8_t, 4>  _pin_input_states_SOMI_type;
  _pin_input_states_SOMI_type pin_input_states_SOMI;

   typedef boost::array< ::sr_ronex_msgs::SPIPacketIn_<ContainerAllocator> , 4>  _spi_in_type;
  _spi_in_type spi_in;

   typedef boost::array<uint16_t, 6>  _analogue_in_type;
  _analogue_in_type analogue_in;





  typedef boost::shared_ptr< ::sr_ronex_msgs::SPIState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sr_ronex_msgs::SPIState_<ContainerAllocator> const> ConstPtr;

}; // struct SPIState_

typedef ::sr_ronex_msgs::SPIState_<std::allocator<void> > SPIState;

typedef boost::shared_ptr< ::sr_ronex_msgs::SPIState > SPIStatePtr;
typedef boost::shared_ptr< ::sr_ronex_msgs::SPIState const> SPIStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sr_ronex_msgs::SPIState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sr_ronex_msgs::SPIState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sr_ronex_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'sr_ronex_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/sr_ronex_msgs/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sr_ronex_msgs::SPIState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sr_ronex_msgs::SPIState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sr_ronex_msgs::SPIState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sr_ronex_msgs::SPIState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sr_ronex_msgs::SPIState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sr_ronex_msgs::SPIState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sr_ronex_msgs::SPIState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a93176a9c88e53cc58a927f7b4db311c";
  }

  static const char* value(const ::sr_ronex_msgs::SPIState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa93176a9c88e53ccULL;
  static const uint64_t static_value2 = 0x58a927f7b4db311cULL;
};

template<class ContainerAllocator>
struct DataType< ::sr_ronex_msgs::SPIState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sr_ronex_msgs/SPIState";
  }

  static const char* value(const ::sr_ronex_msgs::SPIState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sr_ronex_msgs::SPIState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"uint16 command_type\n"
"uint8[4] pin_input_states_DIO\n"
"uint8[4] pin_input_states_SOMI\n"
"sr_ronex_msgs/SPIPacketIn[4] spi_in\n"
"uint16[6] analogue_in\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: sr_ronex_msgs/SPIPacketIn\n"
"uint8[32] data\n"
;
  }

  static const char* value(const ::sr_ronex_msgs::SPIState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sr_ronex_msgs::SPIState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.command_type);
      stream.next(m.pin_input_states_DIO);
      stream.next(m.pin_input_states_SOMI);
      stream.next(m.spi_in);
      stream.next(m.analogue_in);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SPIState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sr_ronex_msgs::SPIState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sr_ronex_msgs::SPIState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "command_type: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.command_type);
    s << indent << "pin_input_states_DIO[]" << std::endl;
    for (size_t i = 0; i < v.pin_input_states_DIO.size(); ++i)
    {
      s << indent << "  pin_input_states_DIO[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.pin_input_states_DIO[i]);
    }
    s << indent << "pin_input_states_SOMI[]" << std::endl;
    for (size_t i = 0; i < v.pin_input_states_SOMI.size(); ++i)
    {
      s << indent << "  pin_input_states_SOMI[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.pin_input_states_SOMI[i]);
    }
    s << indent << "spi_in[]" << std::endl;
    for (size_t i = 0; i < v.spi_in.size(); ++i)
    {
      s << indent << "  spi_in[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::sr_ronex_msgs::SPIPacketIn_<ContainerAllocator> >::stream(s, indent + "    ", v.spi_in[i]);
    }
    s << indent << "analogue_in[]" << std::endl;
    for (size_t i = 0; i < v.analogue_in.size(); ++i)
    {
      s << indent << "  analogue_in[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.analogue_in[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SR_RONEX_MSGS_MESSAGE_SPISTATE_H
