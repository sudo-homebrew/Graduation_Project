// Generated by gencpp from file sr_ronex_msgs/ReceiverData.msg
// DO NOT EDIT!


#ifndef SR_RONEX_MSGS_MESSAGE_RECEIVERDATA_H
#define SR_RONEX_MSGS_MESSAGE_RECEIVERDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sr_ronex_msgs/ImpulseSample.h>

namespace sr_ronex_msgs
{
template <class ContainerAllocator>
struct ReceiverData_
{
  typedef ReceiverData_<ContainerAllocator> Type;

  ReceiverData_()
    : data_received(false)
    , reserved()
    , impulse_response()
    , first_sample_number(0)
    , payload()
    , rx_frame_information(0)
    , std_noise(0)
    , flags(0)
    , FPI(0.0)
    , timestamp_ns(0.0)  {
    }
  ReceiverData_(const ContainerAllocator& _alloc)
    : data_received(false)
    , reserved(_alloc)
    , impulse_response(_alloc)
    , first_sample_number(0)
    , payload(_alloc)
    , rx_frame_information(0)
    , std_noise(0)
    , flags(0)
    , FPI(0.0)
    , timestamp_ns(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _data_received_type;
  _data_received_type data_received;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _reserved_type;
  _reserved_type reserved;

   typedef std::vector< ::sr_ronex_msgs::ImpulseSample_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::sr_ronex_msgs::ImpulseSample_<ContainerAllocator> >::other >  _impulse_response_type;
  _impulse_response_type impulse_response;

   typedef uint16_t _first_sample_number_type;
  _first_sample_number_type first_sample_number;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _payload_type;
  _payload_type payload;

   typedef uint32_t _rx_frame_information_type;
  _rx_frame_information_type rx_frame_information;

   typedef uint16_t _std_noise_type;
  _std_noise_type std_noise;

   typedef uint32_t _flags_type;
  _flags_type flags;

   typedef float _FPI_type;
  _FPI_type FPI;

   typedef double _timestamp_ns_type;
  _timestamp_ns_type timestamp_ns;





  typedef boost::shared_ptr< ::sr_ronex_msgs::ReceiverData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sr_ronex_msgs::ReceiverData_<ContainerAllocator> const> ConstPtr;

}; // struct ReceiverData_

typedef ::sr_ronex_msgs::ReceiverData_<std::allocator<void> > ReceiverData;

typedef boost::shared_ptr< ::sr_ronex_msgs::ReceiverData > ReceiverDataPtr;
typedef boost::shared_ptr< ::sr_ronex_msgs::ReceiverData const> ReceiverDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sr_ronex_msgs::ReceiverData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sr_ronex_msgs::ReceiverData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sr_ronex_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sr_ronex_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/sr_ronex_msgs/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sr_ronex_msgs::ReceiverData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sr_ronex_msgs::ReceiverData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sr_ronex_msgs::ReceiverData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sr_ronex_msgs::ReceiverData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sr_ronex_msgs::ReceiverData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sr_ronex_msgs::ReceiverData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sr_ronex_msgs::ReceiverData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "290b652e8726c46401de5c21009cba66";
  }

  static const char* value(const ::sr_ronex_msgs::ReceiverData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x290b652e8726c464ULL;
  static const uint64_t static_value2 = 0x01de5c21009cba66ULL;
};

template<class ContainerAllocator>
struct DataType< ::sr_ronex_msgs::ReceiverData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sr_ronex_msgs/ReceiverData";
  }

  static const char* value(const ::sr_ronex_msgs::ReceiverData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sr_ronex_msgs::ReceiverData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool data_received\n"
"uint16[] reserved\n"
"sr_ronex_msgs/ImpulseSample[] impulse_response\n"
"uint16 first_sample_number\n"
"uint16[] payload\n"
"uint32 rx_frame_information\n"
"uint16 std_noise\n"
"uint32 flags\n"
"float32 FPI\n"
"float64 timestamp_ns\n"
"\n"
"================================================================================\n"
"MSG: sr_ronex_msgs/ImpulseSample\n"
"int16 real\n"
"int16 imaginary\n"
;
  }

  static const char* value(const ::sr_ronex_msgs::ReceiverData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sr_ronex_msgs::ReceiverData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data_received);
      stream.next(m.reserved);
      stream.next(m.impulse_response);
      stream.next(m.first_sample_number);
      stream.next(m.payload);
      stream.next(m.rx_frame_information);
      stream.next(m.std_noise);
      stream.next(m.flags);
      stream.next(m.FPI);
      stream.next(m.timestamp_ns);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ReceiverData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sr_ronex_msgs::ReceiverData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sr_ronex_msgs::ReceiverData_<ContainerAllocator>& v)
  {
    s << indent << "data_received: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.data_received);
    s << indent << "reserved[]" << std::endl;
    for (size_t i = 0; i < v.reserved.size(); ++i)
    {
      s << indent << "  reserved[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.reserved[i]);
    }
    s << indent << "impulse_response[]" << std::endl;
    for (size_t i = 0; i < v.impulse_response.size(); ++i)
    {
      s << indent << "  impulse_response[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::sr_ronex_msgs::ImpulseSample_<ContainerAllocator> >::stream(s, indent + "    ", v.impulse_response[i]);
    }
    s << indent << "first_sample_number: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.first_sample_number);
    s << indent << "payload[]" << std::endl;
    for (size_t i = 0; i < v.payload.size(); ++i)
    {
      s << indent << "  payload[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.payload[i]);
    }
    s << indent << "rx_frame_information: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.rx_frame_information);
    s << indent << "std_noise: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.std_noise);
    s << indent << "flags: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.flags);
    s << indent << "FPI: ";
    Printer<float>::stream(s, indent + "  ", v.FPI);
    s << indent << "timestamp_ns: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp_ns);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SR_RONEX_MSGS_MESSAGE_RECEIVERDATA_H
