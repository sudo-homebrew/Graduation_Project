// Generated by gencpp from file sr_ronex_msgs/ImpulseSample.msg
// DO NOT EDIT!


#ifndef SR_RONEX_MSGS_MESSAGE_IMPULSESAMPLE_H
#define SR_RONEX_MSGS_MESSAGE_IMPULSESAMPLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sr_ronex_msgs
{
template <class ContainerAllocator>
struct ImpulseSample_
{
  typedef ImpulseSample_<ContainerAllocator> Type;

  ImpulseSample_()
    : real(0)
    , imaginary(0)  {
    }
  ImpulseSample_(const ContainerAllocator& _alloc)
    : real(0)
    , imaginary(0)  {
  (void)_alloc;
    }



   typedef int16_t _real_type;
  _real_type real;

   typedef int16_t _imaginary_type;
  _imaginary_type imaginary;





  typedef boost::shared_ptr< ::sr_ronex_msgs::ImpulseSample_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sr_ronex_msgs::ImpulseSample_<ContainerAllocator> const> ConstPtr;

}; // struct ImpulseSample_

typedef ::sr_ronex_msgs::ImpulseSample_<std::allocator<void> > ImpulseSample;

typedef boost::shared_ptr< ::sr_ronex_msgs::ImpulseSample > ImpulseSamplePtr;
typedef boost::shared_ptr< ::sr_ronex_msgs::ImpulseSample const> ImpulseSampleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sr_ronex_msgs::ImpulseSample_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sr_ronex_msgs::ImpulseSample_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sr_ronex_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sr_ronex_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/sr_ronex_msgs/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sr_ronex_msgs::ImpulseSample_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sr_ronex_msgs::ImpulseSample_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sr_ronex_msgs::ImpulseSample_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sr_ronex_msgs::ImpulseSample_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sr_ronex_msgs::ImpulseSample_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sr_ronex_msgs::ImpulseSample_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sr_ronex_msgs::ImpulseSample_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1a6cc52cb69fe83d58c1fc831cda158d";
  }

  static const char* value(const ::sr_ronex_msgs::ImpulseSample_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1a6cc52cb69fe83dULL;
  static const uint64_t static_value2 = 0x58c1fc831cda158dULL;
};

template<class ContainerAllocator>
struct DataType< ::sr_ronex_msgs::ImpulseSample_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sr_ronex_msgs/ImpulseSample";
  }

  static const char* value(const ::sr_ronex_msgs::ImpulseSample_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sr_ronex_msgs::ImpulseSample_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 real\n"
"int16 imaginary\n"
;
  }

  static const char* value(const ::sr_ronex_msgs::ImpulseSample_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sr_ronex_msgs::ImpulseSample_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.real);
      stream.next(m.imaginary);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ImpulseSample_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sr_ronex_msgs::ImpulseSample_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sr_ronex_msgs::ImpulseSample_<ContainerAllocator>& v)
  {
    s << indent << "real: ";
    Printer<int16_t>::stream(s, indent + "  ", v.real);
    s << indent << "imaginary: ";
    Printer<int16_t>::stream(s, indent + "  ", v.imaginary);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SR_RONEX_MSGS_MESSAGE_IMPULSESAMPLE_H
