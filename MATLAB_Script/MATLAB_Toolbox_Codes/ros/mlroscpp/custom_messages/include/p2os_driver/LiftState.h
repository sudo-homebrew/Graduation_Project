// Generated by gencpp from file p2os_driver/LiftState.msg
// DO NOT EDIT!


#ifndef P2OS_DRIVER_MESSAGE_LIFTSTATE_H
#define P2OS_DRIVER_MESSAGE_LIFTSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace p2os_driver
{
template <class ContainerAllocator>
struct LiftState_
{
  typedef LiftState_<ContainerAllocator> Type;

  LiftState_()
    : state(0)
    , dir(0)
    , position(0.0)  {
    }
  LiftState_(const ContainerAllocator& _alloc)
    : state(0)
    , dir(0)
    , position(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _state_type;
  _state_type state;

   typedef int32_t _dir_type;
  _dir_type dir;

   typedef float _position_type;
  _position_type position;





  typedef boost::shared_ptr< ::p2os_driver::LiftState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::p2os_driver::LiftState_<ContainerAllocator> const> ConstPtr;

}; // struct LiftState_

typedef ::p2os_driver::LiftState_<std::allocator<void> > LiftState;

typedef boost::shared_ptr< ::p2os_driver::LiftState > LiftStatePtr;
typedef boost::shared_ptr< ::p2os_driver::LiftState const> LiftStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::p2os_driver::LiftState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::p2os_driver::LiftState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace p2os_driver

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'p2os_driver': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/p2os_driver/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::p2os_driver::LiftState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::p2os_driver::LiftState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::p2os_driver::LiftState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::p2os_driver::LiftState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::p2os_driver::LiftState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::p2os_driver::LiftState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::p2os_driver::LiftState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4dcc2e41838611193ef6b9f90c9be41f";
  }

  static const char* value(const ::p2os_driver::LiftState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4dcc2e4183861119ULL;
  static const uint64_t static_value2 = 0x3ef6b9f90c9be41fULL;
};

template<class ContainerAllocator>
struct DataType< ::p2os_driver::LiftState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "p2os_driver/LiftState";
  }

  static const char* value(const ::p2os_driver::LiftState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::p2os_driver::LiftState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# direction -1 is downard, +1 is upward, 0 is stationary\n"
"int32 state\n"
"int32 dir\n"
"float32 position\n"
;
  }

  static const char* value(const ::p2os_driver::LiftState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::p2os_driver::LiftState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
      stream.next(m.dir);
      stream.next(m.position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LiftState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::p2os_driver::LiftState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::p2os_driver::LiftState_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.state);
    s << indent << "dir: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dir);
    s << indent << "position: ";
    Printer<float>::stream(s, indent + "  ", v.position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // P2OS_DRIVER_MESSAGE_LIFTSTATE_H
