// Generated by gencpp from file epos_driver/MoveCycleRequest.msg
// DO NOT EDIT!


#ifndef EPOS_DRIVER_MESSAGE_MOVECYCLEREQUEST_H
#define EPOS_DRIVER_MESSAGE_MOVECYCLEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace epos_driver
{
template <class ContainerAllocator>
struct MoveCycleRequest_
{
  typedef MoveCycleRequest_<ContainerAllocator> Type;

  MoveCycleRequest_()
    : pose_top(0.0)
    , pose_bottom(0.0)  {
    }
  MoveCycleRequest_(const ContainerAllocator& _alloc)
    : pose_top(0.0)
    , pose_bottom(0.0)  {
  (void)_alloc;
    }



   typedef double _pose_top_type;
  _pose_top_type pose_top;

   typedef double _pose_bottom_type;
  _pose_bottom_type pose_bottom;





  typedef boost::shared_ptr< ::epos_driver::MoveCycleRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::epos_driver::MoveCycleRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MoveCycleRequest_

typedef ::epos_driver::MoveCycleRequest_<std::allocator<void> > MoveCycleRequest;

typedef boost::shared_ptr< ::epos_driver::MoveCycleRequest > MoveCycleRequestPtr;
typedef boost::shared_ptr< ::epos_driver::MoveCycleRequest const> MoveCycleRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::epos_driver::MoveCycleRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::epos_driver::MoveCycleRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace epos_driver

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'epos_driver': ['/mathworks/home/pmurali/Documents/Test 3/matlab_msg_gen_ros1/glnxa64/src/epos_driver/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1339814/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/pmurali.Brobot.j1339814/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::epos_driver::MoveCycleRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::epos_driver::MoveCycleRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::epos_driver::MoveCycleRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::epos_driver::MoveCycleRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::epos_driver::MoveCycleRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::epos_driver::MoveCycleRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::epos_driver::MoveCycleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "313e82050281596e9fb6583909e87a1d";
  }

  static const char* value(const ::epos_driver::MoveCycleRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x313e82050281596eULL;
  static const uint64_t static_value2 = 0x9fb6583909e87a1dULL;
};

template<class ContainerAllocator>
struct DataType< ::epos_driver::MoveCycleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "epos_driver/MoveCycleRequest";
  }

  static const char* value(const ::epos_driver::MoveCycleRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::epos_driver::MoveCycleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"\n"
"\n"
"float64 pose_top\n"
"float64 pose_bottom\n"
;
  }

  static const char* value(const ::epos_driver::MoveCycleRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::epos_driver::MoveCycleRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose_top);
      stream.next(m.pose_bottom);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveCycleRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::epos_driver::MoveCycleRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::epos_driver::MoveCycleRequest_<ContainerAllocator>& v)
  {
    s << indent << "pose_top: ";
    Printer<double>::stream(s, indent + "  ", v.pose_top);
    s << indent << "pose_bottom: ";
    Printer<double>::stream(s, indent + "  ", v.pose_bottom);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EPOS_DRIVER_MESSAGE_MOVECYCLEREQUEST_H
