// Generated by gencpp from file epos_driver/EPOSState.msg
// DO NOT EDIT!


#ifndef EPOS_DRIVER_MESSAGE_EPOSSTATE_H
#define EPOS_DRIVER_MESSAGE_EPOSSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace epos_driver
{
template <class ContainerAllocator>
struct EPOSState_
{
  typedef EPOSState_<ContainerAllocator> Type;

  EPOSState_()
    : header()
    , raw_position(0)
    , position(0.0)
    , raw_speed(0)
    , speed(0.0)
    , acceleration(0.0)
    , current(0)
    , sync(false)  {
    }
  EPOSState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , raw_position(0)
    , position(0.0)
    , raw_speed(0)
    , speed(0.0)
    , acceleration(0.0)
    , current(0)
    , sync(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int64_t _raw_position_type;
  _raw_position_type raw_position;

   typedef double _position_type;
  _position_type position;

   typedef int64_t _raw_speed_type;
  _raw_speed_type raw_speed;

   typedef double _speed_type;
  _speed_type speed;

   typedef double _acceleration_type;
  _acceleration_type acceleration;

   typedef int16_t _current_type;
  _current_type current;

   typedef uint8_t _sync_type;
  _sync_type sync;





  typedef boost::shared_ptr< ::epos_driver::EPOSState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::epos_driver::EPOSState_<ContainerAllocator> const> ConstPtr;

}; // struct EPOSState_

typedef ::epos_driver::EPOSState_<std::allocator<void> > EPOSState;

typedef boost::shared_ptr< ::epos_driver::EPOSState > EPOSStatePtr;
typedef boost::shared_ptr< ::epos_driver::EPOSState const> EPOSStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::epos_driver::EPOSState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::epos_driver::EPOSState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace epos_driver

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'epos_driver': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/epos_driver/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::epos_driver::EPOSState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::epos_driver::EPOSState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::epos_driver::EPOSState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::epos_driver::EPOSState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::epos_driver::EPOSState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::epos_driver::EPOSState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::epos_driver::EPOSState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bd7e8496790385978d37612e81cd065e";
  }

  static const char* value(const ::epos_driver::EPOSState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbd7e849679038597ULL;
  static const uint64_t static_value2 = 0x8d37612e81cd065eULL;
};

template<class ContainerAllocator>
struct DataType< ::epos_driver::EPOSState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "epos_driver/EPOSState";
  }

  static const char* value(const ::epos_driver::EPOSState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::epos_driver::EPOSState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This is a file in which the message publishing epos state is\n"
"# defined. It should return thesame types of inrmation as the Player\n"
"# driver.  \n"
"Header header        #standard header information\n"
"\n"
"int64 raw_position   # position directly from readActualPosition\n"
"float64 position     # position in radians (I hope)\n"
"\n"
"int64 raw_speed      # speed directly from readActualSpeed\n"
"float64 speed        # speed in radians (I hope)\n"
"\n"
"float64 acceleration # computed acceleration\n"
"int16 current        # current directly from readActualCurrent\n"
"\n"
"bool sync            # change to true if servo is not moving\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::epos_driver::EPOSState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::epos_driver::EPOSState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.raw_position);
      stream.next(m.position);
      stream.next(m.raw_speed);
      stream.next(m.speed);
      stream.next(m.acceleration);
      stream.next(m.current);
      stream.next(m.sync);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EPOSState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::epos_driver::EPOSState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::epos_driver::EPOSState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "raw_position: ";
    Printer<int64_t>::stream(s, indent + "  ", v.raw_position);
    s << indent << "position: ";
    Printer<double>::stream(s, indent + "  ", v.position);
    s << indent << "raw_speed: ";
    Printer<int64_t>::stream(s, indent + "  ", v.raw_speed);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
    s << indent << "acceleration: ";
    Printer<double>::stream(s, indent + "  ", v.acceleration);
    s << indent << "current: ";
    Printer<int16_t>::stream(s, indent + "  ", v.current);
    s << indent << "sync: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sync);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EPOS_DRIVER_MESSAGE_EPOSSTATE_H
