// Generated by gencpp from file jsk_network_tools/FC2OCS.msg
// DO NOT EDIT!


#ifndef JSK_NETWORK_TOOLS_MESSAGE_FC2OCS_H
#define JSK_NETWORK_TOOLS_MESSAGE_FC2OCS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace jsk_network_tools
{
template <class ContainerAllocator>
struct FC2OCS_
{
  typedef FC2OCS_<ContainerAllocator> Type;

  FC2OCS_()
    : joint_angles()
    , lhand_force()
    , rhand_force()
    , lfoot_force()
    , rfoot_force()
    , servo_state(false)  {
      joint_angles.assign(0);

      lhand_force.assign(0);

      rhand_force.assign(0);

      lfoot_force.assign(0);

      rfoot_force.assign(0);
  }
  FC2OCS_(const ContainerAllocator& _alloc)
    : joint_angles()
    , lhand_force()
    , rhand_force()
    , lfoot_force()
    , rfoot_force()
    , servo_state(false)  {
  (void)_alloc;
      joint_angles.assign(0);

      lhand_force.assign(0);

      rhand_force.assign(0);

      lfoot_force.assign(0);

      rfoot_force.assign(0);
  }



   typedef boost::array<uint8_t, 32>  _joint_angles_type;
  _joint_angles_type joint_angles;

   typedef boost::array<uint8_t, 6>  _lhand_force_type;
  _lhand_force_type lhand_force;

   typedef boost::array<uint8_t, 6>  _rhand_force_type;
  _rhand_force_type rhand_force;

   typedef boost::array<uint8_t, 6>  _lfoot_force_type;
  _lfoot_force_type lfoot_force;

   typedef boost::array<uint8_t, 6>  _rfoot_force_type;
  _rfoot_force_type rfoot_force;

   typedef uint8_t _servo_state_type;
  _servo_state_type servo_state;





  typedef boost::shared_ptr< ::jsk_network_tools::FC2OCS_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jsk_network_tools::FC2OCS_<ContainerAllocator> const> ConstPtr;

}; // struct FC2OCS_

typedef ::jsk_network_tools::FC2OCS_<std::allocator<void> > FC2OCS;

typedef boost::shared_ptr< ::jsk_network_tools::FC2OCS > FC2OCSPtr;
typedef boost::shared_ptr< ::jsk_network_tools::FC2OCS const> FC2OCSConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jsk_network_tools::FC2OCS_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jsk_network_tools::FC2OCS_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jsk_network_tools::FC2OCS_<ContainerAllocator1> & lhs, const ::jsk_network_tools::FC2OCS_<ContainerAllocator2> & rhs)
{
  return lhs.joint_angles == rhs.joint_angles &&
    lhs.lhand_force == rhs.lhand_force &&
    lhs.rhand_force == rhs.rhand_force &&
    lhs.lfoot_force == rhs.lfoot_force &&
    lhs.rfoot_force == rhs.rfoot_force &&
    lhs.servo_state == rhs.servo_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jsk_network_tools::FC2OCS_<ContainerAllocator1> & lhs, const ::jsk_network_tools::FC2OCS_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jsk_network_tools

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::jsk_network_tools::FC2OCS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jsk_network_tools::FC2OCS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jsk_network_tools::FC2OCS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jsk_network_tools::FC2OCS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_network_tools::FC2OCS_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_network_tools::FC2OCS_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jsk_network_tools::FC2OCS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7a556e2b1084dcaa36eeac7b2f905853";
  }

  static const char* value(const ::jsk_network_tools::FC2OCS_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7a556e2b1084dcaaULL;
  static const uint64_t static_value2 = 0x36eeac7b2f905853ULL;
};

template<class ContainerAllocator>
struct DataType< ::jsk_network_tools::FC2OCS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jsk_network_tools/FC2OCS";
  }

  static const char* value(const ::jsk_network_tools::FC2OCS_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jsk_network_tools::FC2OCS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# A message from FC to OSC.\n"
"# There is are several limitations\n"
"# 1. no nested fields is allowed.\n"
"# 2. no variable length array is allowed.\n"
"# 3. string is not supported.\n"
"# 4. duration and time are not supported.\n"
"\n"
"uint8[32] joint_angles\n"
"uint8[6] lhand_force\n"
"uint8[6] rhand_force\n"
"uint8[6] lfoot_force\n"
"uint8[6] rfoot_force\n"
"bool servo_state\n"
;
  }

  static const char* value(const ::jsk_network_tools::FC2OCS_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jsk_network_tools::FC2OCS_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_angles);
      stream.next(m.lhand_force);
      stream.next(m.rhand_force);
      stream.next(m.lfoot_force);
      stream.next(m.rfoot_force);
      stream.next(m.servo_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FC2OCS_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jsk_network_tools::FC2OCS_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jsk_network_tools::FC2OCS_<ContainerAllocator>& v)
  {
    s << indent << "joint_angles[]" << std::endl;
    for (size_t i = 0; i < v.joint_angles.size(); ++i)
    {
      s << indent << "  joint_angles[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.joint_angles[i]);
    }
    s << indent << "lhand_force[]" << std::endl;
    for (size_t i = 0; i < v.lhand_force.size(); ++i)
    {
      s << indent << "  lhand_force[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.lhand_force[i]);
    }
    s << indent << "rhand_force[]" << std::endl;
    for (size_t i = 0; i < v.rhand_force.size(); ++i)
    {
      s << indent << "  rhand_force[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.rhand_force[i]);
    }
    s << indent << "lfoot_force[]" << std::endl;
    for (size_t i = 0; i < v.lfoot_force.size(); ++i)
    {
      s << indent << "  lfoot_force[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.lfoot_force[i]);
    }
    s << indent << "rfoot_force[]" << std::endl;
    for (size_t i = 0; i < v.rfoot_force.size(); ++i)
    {
      s << indent << "  rfoot_force[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.rfoot_force[i]);
    }
    s << indent << "servo_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.servo_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JSK_NETWORK_TOOLS_MESSAGE_FC2OCS_H
