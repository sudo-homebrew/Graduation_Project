// Generated by gencpp from file jsk_network_tools/FC2OCSLargeData.msg
// DO NOT EDIT!


#ifndef JSK_NETWORK_TOOLS_MESSAGE_FC2OCSLARGEDATA_H
#define JSK_NETWORK_TOOLS_MESSAGE_FC2OCSLARGEDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sensor_msgs/Image.h>
#include <sensor_msgs/JointState.h>
#include <sensor_msgs/Image.h>

namespace jsk_network_tools
{
template <class ContainerAllocator>
struct FC2OCSLargeData_
{
  typedef FC2OCSLargeData_<ContainerAllocator> Type;

  FC2OCSLargeData_()
    : camera__rgb__image_rect_color()
    , joint_state()
    , usb_cam__image_raw()  {
    }
  FC2OCSLargeData_(const ContainerAllocator& _alloc)
    : camera__rgb__image_rect_color(_alloc)
    , joint_state(_alloc)
    , usb_cam__image_raw(_alloc)  {
  (void)_alloc;
    }



   typedef  ::sensor_msgs::Image_<ContainerAllocator>  _camera__rgb__image_rect_color_type;
  _camera__rgb__image_rect_color_type camera__rgb__image_rect_color;

   typedef  ::sensor_msgs::JointState_<ContainerAllocator>  _joint_state_type;
  _joint_state_type joint_state;

   typedef  ::sensor_msgs::Image_<ContainerAllocator>  _usb_cam__image_raw_type;
  _usb_cam__image_raw_type usb_cam__image_raw;





  typedef boost::shared_ptr< ::jsk_network_tools::FC2OCSLargeData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jsk_network_tools::FC2OCSLargeData_<ContainerAllocator> const> ConstPtr;

}; // struct FC2OCSLargeData_

typedef ::jsk_network_tools::FC2OCSLargeData_<std::allocator<void> > FC2OCSLargeData;

typedef boost::shared_ptr< ::jsk_network_tools::FC2OCSLargeData > FC2OCSLargeDataPtr;
typedef boost::shared_ptr< ::jsk_network_tools::FC2OCSLargeData const> FC2OCSLargeDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jsk_network_tools::FC2OCSLargeData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jsk_network_tools::FC2OCSLargeData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jsk_network_tools::FC2OCSLargeData_<ContainerAllocator1> & lhs, const ::jsk_network_tools::FC2OCSLargeData_<ContainerAllocator2> & rhs)
{
  return lhs.camera__rgb__image_rect_color == rhs.camera__rgb__image_rect_color &&
    lhs.joint_state == rhs.joint_state &&
    lhs.usb_cam__image_raw == rhs.usb_cam__image_raw;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jsk_network_tools::FC2OCSLargeData_<ContainerAllocator1> & lhs, const ::jsk_network_tools::FC2OCSLargeData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jsk_network_tools

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::jsk_network_tools::FC2OCSLargeData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jsk_network_tools::FC2OCSLargeData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jsk_network_tools::FC2OCSLargeData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jsk_network_tools::FC2OCSLargeData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_network_tools::FC2OCSLargeData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_network_tools::FC2OCSLargeData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jsk_network_tools::FC2OCSLargeData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "51c7ca6e66514e69ddd1a156f6a0b404";
  }

  static const char* value(const ::jsk_network_tools::FC2OCSLargeData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x51c7ca6e66514e69ULL;
  static const uint64_t static_value2 = 0xddd1a156f6a0b404ULL;
};

template<class ContainerAllocator>
struct DataType< ::jsk_network_tools::FC2OCSLargeData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jsk_network_tools/FC2OCSLargeData";
  }

  static const char* value(const ::jsk_network_tools::FC2OCSLargeData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jsk_network_tools::FC2OCSLargeData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# large message from FC to OSC\n"
"# topic name will be automatically generated from\n"
"# field names.\n"
"# the rule is super simple, just replace '__' with '/'\n"
"sensor_msgs/Image camera__rgb__image_rect_color\n"
"sensor_msgs/JointState joint_state\n"
"sensor_msgs/Image usb_cam__image_raw\n"
"================================================================================\n"
"MSG: sensor_msgs/Image\n"
"# This message contains an uncompressed image\n"
"# (0, 0) is at top-left corner of image\n"
"#\n"
"\n"
"Header header        # Header timestamp should be acquisition time of image\n"
"                     # Header frame_id should be optical frame of camera\n"
"                     # origin of frame should be optical center of camera\n"
"                     # +x should point to the right in the image\n"
"                     # +y should point down in the image\n"
"                     # +z should point into to plane of the image\n"
"                     # If the frame_id here and the frame_id of the CameraInfo\n"
"                     # message associated with the image conflict\n"
"                     # the behavior is undefined\n"
"\n"
"uint32 height         # image height, that is, number of rows\n"
"uint32 width          # image width, that is, number of columns\n"
"\n"
"# The legal values for encoding are in file src/image_encodings.cpp\n"
"# If you want to standardize a new string format, join\n"
"# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n"
"\n"
"string encoding       # Encoding of pixels -- channel meaning, ordering, size\n"
"                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n"
"\n"
"uint8 is_bigendian    # is this data bigendian?\n"
"uint32 step           # Full row length in bytes\n"
"uint8[] data          # actual matrix data, size is (step * rows)\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/JointState\n"
"# This is a message that holds data to describe the state of a set of torque controlled joints. \n"
"#\n"
"# The state of each joint (revolute or prismatic) is defined by:\n"
"#  * the position of the joint (rad or m),\n"
"#  * the velocity of the joint (rad/s or m/s) and \n"
"#  * the effort that is applied in the joint (Nm or N).\n"
"#\n"
"# Each joint is uniquely identified by its name\n"
"# The header specifies the time at which the joint states were recorded. All the joint states\n"
"# in one message have to be recorded at the same time.\n"
"#\n"
"# This message consists of a multiple arrays, one for each part of the joint state. \n"
"# The goal is to make each of the fields optional. When e.g. your joints have no\n"
"# effort associated with them, you can leave the effort array empty. \n"
"#\n"
"# All arrays in this message should have the same size, or be empty.\n"
"# This is the only way to uniquely associate the joint name with the correct\n"
"# states.\n"
"\n"
"\n"
"Header header\n"
"\n"
"string[] name\n"
"float64[] position\n"
"float64[] velocity\n"
"float64[] effort\n"
;
  }

  static const char* value(const ::jsk_network_tools::FC2OCSLargeData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jsk_network_tools::FC2OCSLargeData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.camera__rgb__image_rect_color);
      stream.next(m.joint_state);
      stream.next(m.usb_cam__image_raw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FC2OCSLargeData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jsk_network_tools::FC2OCSLargeData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jsk_network_tools::FC2OCSLargeData_<ContainerAllocator>& v)
  {
    s << indent << "camera__rgb__image_rect_color: ";
    s << std::endl;
    Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "  ", v.camera__rgb__image_rect_color);
    s << indent << "joint_state: ";
    s << std::endl;
    Printer< ::sensor_msgs::JointState_<ContainerAllocator> >::stream(s, indent + "  ", v.joint_state);
    s << indent << "usb_cam__image_raw: ";
    s << std::endl;
    Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "  ", v.usb_cam__image_raw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JSK_NETWORK_TOOLS_MESSAGE_FC2OCSLARGEDATA_H
