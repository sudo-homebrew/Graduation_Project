// Generated by gencpp from file jsk_network_tools/WifiStatus.msg
// DO NOT EDIT!


#ifndef JSK_NETWORK_TOOLS_MESSAGE_WIFISTATUS_H
#define JSK_NETWORK_TOOLS_MESSAGE_WIFISTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace jsk_network_tools
{
template <class ContainerAllocator>
struct WifiStatus_
{
  typedef WifiStatus_<ContainerAllocator> Type;

  WifiStatus_()
    : header()
    , interface()
    , enabled(false)
    , connected(false)
    , ssid()
    , frequency(0.0)
    , access_point()
    , bitrate(0.0)
    , tx_power(0)
    , link_quality(0.0)
    , signal_level(0)  {
    }
  WifiStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , interface(_alloc)
    , enabled(false)
    , connected(false)
    , ssid(_alloc)
    , frequency(0.0)
    , access_point(_alloc)
    , bitrate(0.0)
    , tx_power(0)
    , link_quality(0.0)
    , signal_level(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _interface_type;
  _interface_type interface;

   typedef uint8_t _enabled_type;
  _enabled_type enabled;

   typedef uint8_t _connected_type;
  _connected_type connected;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ssid_type;
  _ssid_type ssid;

   typedef float _frequency_type;
  _frequency_type frequency;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _access_point_type;
  _access_point_type access_point;

   typedef float _bitrate_type;
  _bitrate_type bitrate;

   typedef int16_t _tx_power_type;
  _tx_power_type tx_power;

   typedef float _link_quality_type;
  _link_quality_type link_quality;

   typedef int16_t _signal_level_type;
  _signal_level_type signal_level;





  typedef boost::shared_ptr< ::jsk_network_tools::WifiStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jsk_network_tools::WifiStatus_<ContainerAllocator> const> ConstPtr;

}; // struct WifiStatus_

typedef ::jsk_network_tools::WifiStatus_<std::allocator<void> > WifiStatus;

typedef boost::shared_ptr< ::jsk_network_tools::WifiStatus > WifiStatusPtr;
typedef boost::shared_ptr< ::jsk_network_tools::WifiStatus const> WifiStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jsk_network_tools::WifiStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jsk_network_tools::WifiStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jsk_network_tools::WifiStatus_<ContainerAllocator1> & lhs, const ::jsk_network_tools::WifiStatus_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.interface == rhs.interface &&
    lhs.enabled == rhs.enabled &&
    lhs.connected == rhs.connected &&
    lhs.ssid == rhs.ssid &&
    lhs.frequency == rhs.frequency &&
    lhs.access_point == rhs.access_point &&
    lhs.bitrate == rhs.bitrate &&
    lhs.tx_power == rhs.tx_power &&
    lhs.link_quality == rhs.link_quality &&
    lhs.signal_level == rhs.signal_level;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jsk_network_tools::WifiStatus_<ContainerAllocator1> & lhs, const ::jsk_network_tools::WifiStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jsk_network_tools

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::jsk_network_tools::WifiStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jsk_network_tools::WifiStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jsk_network_tools::WifiStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jsk_network_tools::WifiStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_network_tools::WifiStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_network_tools::WifiStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jsk_network_tools::WifiStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "94da4b64008d69473c62c62019a8c0f6";
  }

  static const char* value(const ::jsk_network_tools::WifiStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x94da4b64008d6947ULL;
  static const uint64_t static_value2 = 0x3c62c62019a8c0f6ULL;
};

template<class ContainerAllocator>
struct DataType< ::jsk_network_tools::WifiStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jsk_network_tools/WifiStatus";
  }

  static const char* value(const ::jsk_network_tools::WifiStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jsk_network_tools::WifiStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"string interface\n"
"bool enabled\n"
"bool connected\n"
"string ssid\n"
"float32 frequency # GHz\n"
"string access_point\n"
"float32 bitrate # Mb/s\n"
"int16 tx_power # dBm\n"
"float32 link_quality\n"
"int16 signal_level # dBm\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::jsk_network_tools::WifiStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jsk_network_tools::WifiStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.interface);
      stream.next(m.enabled);
      stream.next(m.connected);
      stream.next(m.ssid);
      stream.next(m.frequency);
      stream.next(m.access_point);
      stream.next(m.bitrate);
      stream.next(m.tx_power);
      stream.next(m.link_quality);
      stream.next(m.signal_level);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WifiStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jsk_network_tools::WifiStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jsk_network_tools::WifiStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "interface: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.interface);
    s << indent << "enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enabled);
    s << indent << "connected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.connected);
    s << indent << "ssid: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ssid);
    s << indent << "frequency: ";
    Printer<float>::stream(s, indent + "  ", v.frequency);
    s << indent << "access_point: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.access_point);
    s << indent << "bitrate: ";
    Printer<float>::stream(s, indent + "  ", v.bitrate);
    s << indent << "tx_power: ";
    Printer<int16_t>::stream(s, indent + "  ", v.tx_power);
    s << indent << "link_quality: ";
    Printer<float>::stream(s, indent + "  ", v.link_quality);
    s << indent << "signal_level: ";
    Printer<int16_t>::stream(s, indent + "  ", v.signal_level);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JSK_NETWORK_TOOLS_MESSAGE_WIFISTATUS_H
