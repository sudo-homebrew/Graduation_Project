// Generated by gencpp from file jsk_network_tools/CompressedAngleVectorPR2.msg
// DO NOT EDIT!


#ifndef JSK_NETWORK_TOOLS_MESSAGE_COMPRESSEDANGLEVECTORPR2_H
#define JSK_NETWORK_TOOLS_MESSAGE_COMPRESSEDANGLEVECTORPR2_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace jsk_network_tools
{
template <class ContainerAllocator>
struct CompressedAngleVectorPR2_
{
  typedef CompressedAngleVectorPR2_<ContainerAllocator> Type;

  CompressedAngleVectorPR2_()
    : angles()  {
      angles.assign(0);
  }
  CompressedAngleVectorPR2_(const ContainerAllocator& _alloc)
    : angles()  {
  (void)_alloc;
      angles.assign(0);
  }



   typedef boost::array<uint8_t, 17>  _angles_type;
  _angles_type angles;





  typedef boost::shared_ptr< ::jsk_network_tools::CompressedAngleVectorPR2_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jsk_network_tools::CompressedAngleVectorPR2_<ContainerAllocator> const> ConstPtr;

}; // struct CompressedAngleVectorPR2_

typedef ::jsk_network_tools::CompressedAngleVectorPR2_<std::allocator<void> > CompressedAngleVectorPR2;

typedef boost::shared_ptr< ::jsk_network_tools::CompressedAngleVectorPR2 > CompressedAngleVectorPR2Ptr;
typedef boost::shared_ptr< ::jsk_network_tools::CompressedAngleVectorPR2 const> CompressedAngleVectorPR2ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jsk_network_tools::CompressedAngleVectorPR2_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jsk_network_tools::CompressedAngleVectorPR2_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jsk_network_tools::CompressedAngleVectorPR2_<ContainerAllocator1> & lhs, const ::jsk_network_tools::CompressedAngleVectorPR2_<ContainerAllocator2> & rhs)
{
  return lhs.angles == rhs.angles;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jsk_network_tools::CompressedAngleVectorPR2_<ContainerAllocator1> & lhs, const ::jsk_network_tools::CompressedAngleVectorPR2_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jsk_network_tools

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::jsk_network_tools::CompressedAngleVectorPR2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jsk_network_tools::CompressedAngleVectorPR2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jsk_network_tools::CompressedAngleVectorPR2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jsk_network_tools::CompressedAngleVectorPR2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_network_tools::CompressedAngleVectorPR2_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_network_tools::CompressedAngleVectorPR2_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jsk_network_tools::CompressedAngleVectorPR2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "41a167b428fc98b1c378a7ba1bae8d54";
  }

  static const char* value(const ::jsk_network_tools::CompressedAngleVectorPR2_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x41a167b428fc98b1ULL;
  static const uint64_t static_value2 = 0xc378a7ba1bae8d54ULL;
};

template<class ContainerAllocator>
struct DataType< ::jsk_network_tools::CompressedAngleVectorPR2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jsk_network_tools/CompressedAngleVectorPR2";
  }

  static const char* value(const ::jsk_network_tools::CompressedAngleVectorPR2_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jsk_network_tools::CompressedAngleVectorPR2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8[17] angles\n"
;
  }

  static const char* value(const ::jsk_network_tools::CompressedAngleVectorPR2_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jsk_network_tools::CompressedAngleVectorPR2_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.angles);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CompressedAngleVectorPR2_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jsk_network_tools::CompressedAngleVectorPR2_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jsk_network_tools::CompressedAngleVectorPR2_<ContainerAllocator>& v)
  {
    s << indent << "angles[]" << std::endl;
    for (size_t i = 0; i < v.angles.size(); ++i)
    {
      s << indent << "  angles[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.angles[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // JSK_NETWORK_TOOLS_MESSAGE_COMPRESSEDANGLEVECTORPR2_H
