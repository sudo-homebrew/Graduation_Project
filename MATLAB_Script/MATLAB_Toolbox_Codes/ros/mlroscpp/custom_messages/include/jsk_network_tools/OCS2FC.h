// Generated by gencpp from file jsk_network_tools/OCS2FC.msg
// DO NOT EDIT!


#ifndef JSK_NETWORK_TOOLS_MESSAGE_OCS2FC_H
#define JSK_NETWORK_TOOLS_MESSAGE_OCS2FC_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace jsk_network_tools
{
template <class ContainerAllocator>
struct OCS2FC_
{
  typedef OCS2FC_<ContainerAllocator> Type;

  OCS2FC_()
    : joint_angles()
    , start_impedance(false)
    , stop(false)  {
      joint_angles.assign(0);
  }
  OCS2FC_(const ContainerAllocator& _alloc)
    : joint_angles()
    , start_impedance(false)
    , stop(false)  {
  (void)_alloc;
      joint_angles.assign(0);
  }



   typedef boost::array<uint8_t, 32>  _joint_angles_type;
  _joint_angles_type joint_angles;

   typedef uint8_t _start_impedance_type;
  _start_impedance_type start_impedance;

   typedef uint8_t _stop_type;
  _stop_type stop;





  typedef boost::shared_ptr< ::jsk_network_tools::OCS2FC_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jsk_network_tools::OCS2FC_<ContainerAllocator> const> ConstPtr;

}; // struct OCS2FC_

typedef ::jsk_network_tools::OCS2FC_<std::allocator<void> > OCS2FC;

typedef boost::shared_ptr< ::jsk_network_tools::OCS2FC > OCS2FCPtr;
typedef boost::shared_ptr< ::jsk_network_tools::OCS2FC const> OCS2FCConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jsk_network_tools::OCS2FC_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jsk_network_tools::OCS2FC_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jsk_network_tools::OCS2FC_<ContainerAllocator1> & lhs, const ::jsk_network_tools::OCS2FC_<ContainerAllocator2> & rhs)
{
  return lhs.joint_angles == rhs.joint_angles &&
    lhs.start_impedance == rhs.start_impedance &&
    lhs.stop == rhs.stop;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jsk_network_tools::OCS2FC_<ContainerAllocator1> & lhs, const ::jsk_network_tools::OCS2FC_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jsk_network_tools

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::jsk_network_tools::OCS2FC_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jsk_network_tools::OCS2FC_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jsk_network_tools::OCS2FC_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jsk_network_tools::OCS2FC_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_network_tools::OCS2FC_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_network_tools::OCS2FC_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jsk_network_tools::OCS2FC_<ContainerAllocator> >
{
  static const char* value()
  {
    return "036058ee69589b4817d296161ea7f432";
  }

  static const char* value(const ::jsk_network_tools::OCS2FC_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x036058ee69589b48ULL;
  static const uint64_t static_value2 = 0x17d296161ea7f432ULL;
};

template<class ContainerAllocator>
struct DataType< ::jsk_network_tools::OCS2FC_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jsk_network_tools/OCS2FC";
  }

  static const char* value(const ::jsk_network_tools::OCS2FC_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jsk_network_tools::OCS2FC_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# A message from OSC to FC.\n"
"# There is are several limitations\n"
"# 1. no nested fields is allowed.\n"
"# 2. no variable length array is allowed.\n"
"# 3. string is not supported.\n"
"# 4. duration and time are not supported.\n"
"\n"
"uint8[32] joint_angles\n"
"bool start_impedance\n"
"bool stop\n"
;
  }

  static const char* value(const ::jsk_network_tools::OCS2FC_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jsk_network_tools::OCS2FC_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_angles);
      stream.next(m.start_impedance);
      stream.next(m.stop);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OCS2FC_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jsk_network_tools::OCS2FC_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jsk_network_tools::OCS2FC_<ContainerAllocator>& v)
  {
    s << indent << "joint_angles[]" << std::endl;
    for (size_t i = 0; i < v.joint_angles.size(); ++i)
    {
      s << indent << "  joint_angles[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.joint_angles[i]);
    }
    s << indent << "start_impedance: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.start_impedance);
    s << indent << "stop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stop);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JSK_NETWORK_TOOLS_MESSAGE_OCS2FC_H
