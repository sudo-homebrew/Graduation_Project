// Generated by gencpp from file kobuki_msgs/ButtonEvent.msg
// DO NOT EDIT!


#ifndef KOBUKI_MSGS_MESSAGE_BUTTONEVENT_H
#define KOBUKI_MSGS_MESSAGE_BUTTONEVENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kobuki_msgs
{
template <class ContainerAllocator>
struct ButtonEvent_
{
  typedef ButtonEvent_<ContainerAllocator> Type;

  ButtonEvent_()
    : button(0)
    , state(0)  {
    }
  ButtonEvent_(const ContainerAllocator& _alloc)
    : button(0)
    , state(0)  {
  (void)_alloc;
    }



   typedef uint8_t _button_type;
  _button_type button;

   typedef uint8_t _state_type;
  _state_type state;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(BUTTON0)
  #undef BUTTON0
#endif
#if defined(_WIN32) && defined(BUTTON1)
  #undef BUTTON1
#endif
#if defined(_WIN32) && defined(BUTTON2)
  #undef BUTTON2
#endif
#if defined(_WIN32) && defined(RELEASED)
  #undef RELEASED
#endif
#if defined(_WIN32) && defined(PRESSED)
  #undef PRESSED
#endif

  enum {
    BUTTON0 = 0u,
    BUTTON1 = 1u,
    BUTTON2 = 2u,
    RELEASED = 0u,
    PRESSED = 1u,
  };


  typedef boost::shared_ptr< ::kobuki_msgs::ButtonEvent_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kobuki_msgs::ButtonEvent_<ContainerAllocator> const> ConstPtr;

}; // struct ButtonEvent_

typedef ::kobuki_msgs::ButtonEvent_<std::allocator<void> > ButtonEvent;

typedef boost::shared_ptr< ::kobuki_msgs::ButtonEvent > ButtonEventPtr;
typedef boost::shared_ptr< ::kobuki_msgs::ButtonEvent const> ButtonEventConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kobuki_msgs::ButtonEvent_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kobuki_msgs::ButtonEvent_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kobuki_msgs::ButtonEvent_<ContainerAllocator1> & lhs, const ::kobuki_msgs::ButtonEvent_<ContainerAllocator2> & rhs)
{
  return lhs.button == rhs.button &&
    lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kobuki_msgs::ButtonEvent_<ContainerAllocator1> & lhs, const ::kobuki_msgs::ButtonEvent_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kobuki_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::kobuki_msgs::ButtonEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kobuki_msgs::ButtonEvent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kobuki_msgs::ButtonEvent_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kobuki_msgs::ButtonEvent_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kobuki_msgs::ButtonEvent_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kobuki_msgs::ButtonEvent_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kobuki_msgs::ButtonEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ac0f2e6fd3cf398af2f6258f6065ea30";
  }

  static const char* value(const ::kobuki_msgs::ButtonEvent_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xac0f2e6fd3cf398aULL;
  static const uint64_t static_value2 = 0xf2f6258f6065ea30ULL;
};

template<class ContainerAllocator>
struct DataType< ::kobuki_msgs::ButtonEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kobuki_msgs/ButtonEvent";
  }

  static const char* value(const ::kobuki_msgs::ButtonEvent_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kobuki_msgs::ButtonEvent_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Provides a button event.\n"
"# This message is generated whenever a particular button is pressed or released.\n"
"# Note that, despite buttons field on SensorState messages, state field is not a\n"
"# bitmask, but the new state of a single button.\n"
"\n"
"uint8 BUTTON0 = 0\n"
"uint8 BUTTON1 = 1\n"
"uint8 BUTTON2 = 2\n"
"\n"
"uint8 RELEASED = 0\n"
"uint8 PRESSED  = 1\n"
"\n"
"uint8 button\n"
"uint8 state\n"
;
  }

  static const char* value(const ::kobuki_msgs::ButtonEvent_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kobuki_msgs::ButtonEvent_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.button);
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ButtonEvent_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kobuki_msgs::ButtonEvent_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kobuki_msgs::ButtonEvent_<ContainerAllocator>& v)
  {
    s << indent << "button: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button);
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KOBUKI_MSGS_MESSAGE_BUTTONEVENT_H
