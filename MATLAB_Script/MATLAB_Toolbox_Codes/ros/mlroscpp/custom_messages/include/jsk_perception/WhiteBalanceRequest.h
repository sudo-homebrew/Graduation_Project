// Generated by gencpp from file jsk_perception/WhiteBalanceRequest.msg
// DO NOT EDIT!


#ifndef JSK_PERCEPTION_MESSAGE_WHITEBALANCEREQUEST_H
#define JSK_PERCEPTION_MESSAGE_WHITEBALANCEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sensor_msgs/Image.h>

namespace jsk_perception
{
template <class ContainerAllocator>
struct WhiteBalanceRequest_
{
  typedef WhiteBalanceRequest_<ContainerAllocator> Type;

  WhiteBalanceRequest_()
    : reference_color()
    , input()  {
      reference_color.assign(0.0);
  }
  WhiteBalanceRequest_(const ContainerAllocator& _alloc)
    : reference_color()
    , input(_alloc)  {
  (void)_alloc;
      reference_color.assign(0.0);
  }



   typedef boost::array<float, 3>  _reference_color_type;
  _reference_color_type reference_color;

   typedef  ::sensor_msgs::Image_<ContainerAllocator>  _input_type;
  _input_type input;





  typedef boost::shared_ptr< ::jsk_perception::WhiteBalanceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jsk_perception::WhiteBalanceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct WhiteBalanceRequest_

typedef ::jsk_perception::WhiteBalanceRequest_<std::allocator<void> > WhiteBalanceRequest;

typedef boost::shared_ptr< ::jsk_perception::WhiteBalanceRequest > WhiteBalanceRequestPtr;
typedef boost::shared_ptr< ::jsk_perception::WhiteBalanceRequest const> WhiteBalanceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jsk_perception::WhiteBalanceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jsk_perception::WhiteBalanceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace jsk_perception

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1339814/matlab/sys/ros1/glnxa64/ros1/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1339814/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/pmurali.Brobot.j1339814/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'jsk_perception': ['/mathworks/home/pmurali/Documents/JKL/matlab_msg_gen_ros1/glnxa64/src/jsk_perception/msg'], 'geometry_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1339814/matlab/sys/ros1/glnxa64/ros1/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::jsk_perception::WhiteBalanceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jsk_perception::WhiteBalanceRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jsk_perception::WhiteBalanceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jsk_perception::WhiteBalanceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_perception::WhiteBalanceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_perception::WhiteBalanceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jsk_perception::WhiteBalanceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d7702dac51626a53e0806ebd0ad35ca3";
  }

  static const char* value(const ::jsk_perception::WhiteBalanceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd7702dac51626a53ULL;
  static const uint64_t static_value2 = 0xe0806ebd0ad35ca3ULL;
};

template<class ContainerAllocator>
struct DataType< ::jsk_perception::WhiteBalanceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jsk_perception/WhiteBalanceRequest";
  }

  static const char* value(const ::jsk_perception::WhiteBalanceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jsk_perception::WhiteBalanceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[3] reference_color\n"
"sensor_msgs/Image input\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/Image\n"
"# This message contains an uncompressed image\n"
"# (0, 0) is at top-left corner of image\n"
"#\n"
"\n"
"Header header        # Header timestamp should be acquisition time of image\n"
"                     # Header frame_id should be optical frame of camera\n"
"                     # origin of frame should be optical center of camera\n"
"                     # +x should point to the right in the image\n"
"                     # +y should point down in the image\n"
"                     # +z should point into to plane of the image\n"
"                     # If the frame_id here and the frame_id of the CameraInfo\n"
"                     # message associated with the image conflict\n"
"                     # the behavior is undefined\n"
"\n"
"uint32 height         # image height, that is, number of rows\n"
"uint32 width          # image width, that is, number of columns\n"
"\n"
"# The legal values for encoding are in file src/image_encodings.cpp\n"
"# If you want to standardize a new string format, join\n"
"# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n"
"\n"
"string encoding       # Encoding of pixels -- channel meaning, ordering, size\n"
"                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n"
"\n"
"uint8 is_bigendian    # is this data bigendian?\n"
"uint32 step           # Full row length in bytes\n"
"uint8[] data          # actual matrix data, size is (step * rows)\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::jsk_perception::WhiteBalanceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jsk_perception::WhiteBalanceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.reference_color);
      stream.next(m.input);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WhiteBalanceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jsk_perception::WhiteBalanceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jsk_perception::WhiteBalanceRequest_<ContainerAllocator>& v)
  {
    s << indent << "reference_color[]" << std::endl;
    for (size_t i = 0; i < v.reference_color.size(); ++i)
    {
      s << indent << "  reference_color[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.reference_color[i]);
    }
    s << indent << "input: ";
    s << std::endl;
    Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "  ", v.input);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JSK_PERCEPTION_MESSAGE_WHITEBALANCEREQUEST_H
