// Generated by gencpp from file pr2_mechanism_controllers/BaseControllerState2.msg
// DO NOT EDIT!


#ifndef PR2_MECHANISM_CONTROLLERS_MESSAGE_BASECONTROLLERSTATE2_H
#define PR2_MECHANISM_CONTROLLERS_MESSAGE_BASECONTROLLERSTATE2_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Twist.h>

namespace pr2_mechanism_controllers
{
template <class ContainerAllocator>
struct BaseControllerState2_
{
  typedef BaseControllerState2_<ContainerAllocator> Type;

  BaseControllerState2_()
    : command()
    , joint_command()
    , joint_error()
    , joint_velocity_commanded()
    , joint_velocity_measured()
    , joint_effort_measured()
    , joint_effort_commanded()
    , joint_effort_error()
    , joint_names()  {
    }
  BaseControllerState2_(const ContainerAllocator& _alloc)
    : command(_alloc)
    , joint_command(_alloc)
    , joint_error(_alloc)
    , joint_velocity_commanded(_alloc)
    , joint_velocity_measured(_alloc)
    , joint_effort_measured(_alloc)
    , joint_effort_commanded(_alloc)
    , joint_effort_error(_alloc)
    , joint_names(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _command_type;
  _command_type command;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _joint_command_type;
  _joint_command_type joint_command;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _joint_error_type;
  _joint_error_type joint_error;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _joint_velocity_commanded_type;
  _joint_velocity_commanded_type joint_velocity_commanded;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _joint_velocity_measured_type;
  _joint_velocity_measured_type joint_velocity_measured;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _joint_effort_measured_type;
  _joint_effort_measured_type joint_effort_measured;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _joint_effort_commanded_type;
  _joint_effort_commanded_type joint_effort_commanded;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _joint_effort_error_type;
  _joint_effort_error_type joint_effort_error;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _joint_names_type;
  _joint_names_type joint_names;





  typedef boost::shared_ptr< ::pr2_mechanism_controllers::BaseControllerState2_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr2_mechanism_controllers::BaseControllerState2_<ContainerAllocator> const> ConstPtr;

}; // struct BaseControllerState2_

typedef ::pr2_mechanism_controllers::BaseControllerState2_<std::allocator<void> > BaseControllerState2;

typedef boost::shared_ptr< ::pr2_mechanism_controllers::BaseControllerState2 > BaseControllerState2Ptr;
typedef boost::shared_ptr< ::pr2_mechanism_controllers::BaseControllerState2 const> BaseControllerState2ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pr2_mechanism_controllers::BaseControllerState2_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pr2_mechanism_controllers::BaseControllerState2_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pr2_mechanism_controllers

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'pr2_mechanism_controllers': ['/local-ssd1/All_Custom_Msgs/PendingActionPackagesPart2/matlab_msg_gen_ros1/glnxa64/src/pr2_mechanism_controllers/msg'], 'actionlib': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/actionlib/cmake/../msg'], 'std_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pr2_mechanism_controllers::BaseControllerState2_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pr2_mechanism_controllers::BaseControllerState2_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pr2_mechanism_controllers::BaseControllerState2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pr2_mechanism_controllers::BaseControllerState2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr2_mechanism_controllers::BaseControllerState2_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr2_mechanism_controllers::BaseControllerState2_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pr2_mechanism_controllers::BaseControllerState2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d4b64baf09d8cb133f3f2bc279de1137";
  }

  static const char* value(const ::pr2_mechanism_controllers::BaseControllerState2_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd4b64baf09d8cb13ULL;
  static const uint64_t static_value2 = 0x3f3f2bc279de1137ULL;
};

template<class ContainerAllocator>
struct DataType< ::pr2_mechanism_controllers::BaseControllerState2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pr2_mechanism_controllers/BaseControllerState2";
  }

  static const char* value(const ::pr2_mechanism_controllers::BaseControllerState2_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pr2_mechanism_controllers::BaseControllerState2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Twist command\n"
"float64[] joint_command\n"
"float64[] joint_error\n"
"float64[] joint_velocity_commanded\n"
"float64[] joint_velocity_measured\n"
"float64[] joint_effort_measured\n"
"float64[] joint_effort_commanded\n"
"float64[] joint_effort_error\n"
"string[] joint_names\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::pr2_mechanism_controllers::BaseControllerState2_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pr2_mechanism_controllers::BaseControllerState2_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.command);
      stream.next(m.joint_command);
      stream.next(m.joint_error);
      stream.next(m.joint_velocity_commanded);
      stream.next(m.joint_velocity_measured);
      stream.next(m.joint_effort_measured);
      stream.next(m.joint_effort_commanded);
      stream.next(m.joint_effort_error);
      stream.next(m.joint_names);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BaseControllerState2_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr2_mechanism_controllers::BaseControllerState2_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pr2_mechanism_controllers::BaseControllerState2_<ContainerAllocator>& v)
  {
    s << indent << "command: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.command);
    s << indent << "joint_command[]" << std::endl;
    for (size_t i = 0; i < v.joint_command.size(); ++i)
    {
      s << indent << "  joint_command[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_command[i]);
    }
    s << indent << "joint_error[]" << std::endl;
    for (size_t i = 0; i < v.joint_error.size(); ++i)
    {
      s << indent << "  joint_error[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_error[i]);
    }
    s << indent << "joint_velocity_commanded[]" << std::endl;
    for (size_t i = 0; i < v.joint_velocity_commanded.size(); ++i)
    {
      s << indent << "  joint_velocity_commanded[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_velocity_commanded[i]);
    }
    s << indent << "joint_velocity_measured[]" << std::endl;
    for (size_t i = 0; i < v.joint_velocity_measured.size(); ++i)
    {
      s << indent << "  joint_velocity_measured[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_velocity_measured[i]);
    }
    s << indent << "joint_effort_measured[]" << std::endl;
    for (size_t i = 0; i < v.joint_effort_measured.size(); ++i)
    {
      s << indent << "  joint_effort_measured[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_effort_measured[i]);
    }
    s << indent << "joint_effort_commanded[]" << std::endl;
    for (size_t i = 0; i < v.joint_effort_commanded.size(); ++i)
    {
      s << indent << "  joint_effort_commanded[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_effort_commanded[i]);
    }
    s << indent << "joint_effort_error[]" << std::endl;
    for (size_t i = 0; i < v.joint_effort_error.size(); ++i)
    {
      s << indent << "  joint_effort_error[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_effort_error[i]);
    }
    s << indent << "joint_names[]" << std::endl;
    for (size_t i = 0; i < v.joint_names.size(); ++i)
    {
      s << indent << "  joint_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.joint_names[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PR2_MECHANISM_CONTROLLERS_MESSAGE_BASECONTROLLERSTATE2_H
