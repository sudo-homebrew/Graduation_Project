// Generated by gencpp from file pr2_mechanism_controllers/TrackLinkCmd.msg
// DO NOT EDIT!


#ifndef PR2_MECHANISM_CONTROLLERS_MESSAGE_TRACKLINKCMD_H
#define PR2_MECHANISM_CONTROLLERS_MESSAGE_TRACKLINKCMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace pr2_mechanism_controllers
{
template <class ContainerAllocator>
struct TrackLinkCmd_
{
  typedef TrackLinkCmd_<ContainerAllocator> Type;

  TrackLinkCmd_()
    : enable(0)
    , link_name()
    , point()  {
    }
  TrackLinkCmd_(const ContainerAllocator& _alloc)
    : enable(0)
    , link_name(_alloc)
    , point(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _enable_type;
  _enable_type enable;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _link_name_type;
  _link_name_type link_name;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _point_type;
  _point_type point;





  typedef boost::shared_ptr< ::pr2_mechanism_controllers::TrackLinkCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr2_mechanism_controllers::TrackLinkCmd_<ContainerAllocator> const> ConstPtr;

}; // struct TrackLinkCmd_

typedef ::pr2_mechanism_controllers::TrackLinkCmd_<std::allocator<void> > TrackLinkCmd;

typedef boost::shared_ptr< ::pr2_mechanism_controllers::TrackLinkCmd > TrackLinkCmdPtr;
typedef boost::shared_ptr< ::pr2_mechanism_controllers::TrackLinkCmd const> TrackLinkCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pr2_mechanism_controllers::TrackLinkCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pr2_mechanism_controllers::TrackLinkCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pr2_mechanism_controllers

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'pr2_mechanism_controllers': ['/local-ssd1/All_Custom_Msgs/PendingActionPackagesPart2/matlab_msg_gen_ros1/glnxa64/src/pr2_mechanism_controllers/msg'], 'actionlib': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/actionlib/cmake/../msg'], 'std_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pr2_mechanism_controllers::TrackLinkCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pr2_mechanism_controllers::TrackLinkCmd_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pr2_mechanism_controllers::TrackLinkCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pr2_mechanism_controllers::TrackLinkCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr2_mechanism_controllers::TrackLinkCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr2_mechanism_controllers::TrackLinkCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pr2_mechanism_controllers::TrackLinkCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "08ccfe603e4e21c792896712c3b72de2";
  }

  static const char* value(const ::pr2_mechanism_controllers::TrackLinkCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x08ccfe603e4e21c7ULL;
  static const uint64_t static_value2 = 0x92896712c3b72de2ULL;
};

template<class ContainerAllocator>
struct DataType< ::pr2_mechanism_controllers::TrackLinkCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pr2_mechanism_controllers/TrackLinkCmd";
  }

  static const char* value(const ::pr2_mechanism_controllers::TrackLinkCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pr2_mechanism_controllers::TrackLinkCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 enable\n"
"string link_name\n"
"geometry_msgs/Point point\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::pr2_mechanism_controllers::TrackLinkCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pr2_mechanism_controllers::TrackLinkCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.enable);
      stream.next(m.link_name);
      stream.next(m.point);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrackLinkCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr2_mechanism_controllers::TrackLinkCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pr2_mechanism_controllers::TrackLinkCmd_<ContainerAllocator>& v)
  {
    s << indent << "enable: ";
    Printer<int8_t>::stream(s, indent + "  ", v.enable);
    s << indent << "link_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.link_name);
    s << indent << "point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.point);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PR2_MECHANISM_CONTROLLERS_MESSAGE_TRACKLINKCMD_H
