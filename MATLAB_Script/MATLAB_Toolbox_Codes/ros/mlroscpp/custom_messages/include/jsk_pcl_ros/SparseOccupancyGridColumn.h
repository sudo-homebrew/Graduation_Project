// Generated by gencpp from file jsk_pcl_ros/SparseOccupancyGridColumn.msg
// DO NOT EDIT!


#ifndef JSK_PCL_ROS_MESSAGE_SPARSEOCCUPANCYGRIDCOLUMN_H
#define JSK_PCL_ROS_MESSAGE_SPARSEOCCUPANCYGRIDCOLUMN_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <jsk_pcl_ros/SparseOccupancyGridCell.h>

namespace jsk_pcl_ros
{
template <class ContainerAllocator>
struct SparseOccupancyGridColumn_
{
  typedef SparseOccupancyGridColumn_<ContainerAllocator> Type;

  SparseOccupancyGridColumn_()
    : column_index(0)
    , cells()  {
    }
  SparseOccupancyGridColumn_(const ContainerAllocator& _alloc)
    : column_index(0)
    , cells(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _column_index_type;
  _column_index_type column_index;

   typedef std::vector< ::jsk_pcl_ros::SparseOccupancyGridCell_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::jsk_pcl_ros::SparseOccupancyGridCell_<ContainerAllocator> >::other >  _cells_type;
  _cells_type cells;





  typedef boost::shared_ptr< ::jsk_pcl_ros::SparseOccupancyGridColumn_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jsk_pcl_ros::SparseOccupancyGridColumn_<ContainerAllocator> const> ConstPtr;

}; // struct SparseOccupancyGridColumn_

typedef ::jsk_pcl_ros::SparseOccupancyGridColumn_<std::allocator<void> > SparseOccupancyGridColumn;

typedef boost::shared_ptr< ::jsk_pcl_ros::SparseOccupancyGridColumn > SparseOccupancyGridColumnPtr;
typedef boost::shared_ptr< ::jsk_pcl_ros::SparseOccupancyGridColumn const> SparseOccupancyGridColumnConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jsk_pcl_ros::SparseOccupancyGridColumn_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jsk_pcl_ros::SparseOccupancyGridColumn_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace jsk_pcl_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/sensor_msgs/msg'], 'geometry_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/geometry_msgs/msg'], 'jsk_pcl_ros': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/jsk_pcl_ros/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'pcl_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/pcl_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::jsk_pcl_ros::SparseOccupancyGridColumn_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jsk_pcl_ros::SparseOccupancyGridColumn_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jsk_pcl_ros::SparseOccupancyGridColumn_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jsk_pcl_ros::SparseOccupancyGridColumn_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_pcl_ros::SparseOccupancyGridColumn_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jsk_pcl_ros::SparseOccupancyGridColumn_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jsk_pcl_ros::SparseOccupancyGridColumn_<ContainerAllocator> >
{
  static const char* value()
  {
    return "55074b193e722d5ead092ffe27f06522";
  }

  static const char* value(const ::jsk_pcl_ros::SparseOccupancyGridColumn_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x55074b193e722d5eULL;
  static const uint64_t static_value2 = 0xad092ffe27f06522ULL;
};

template<class ContainerAllocator>
struct DataType< ::jsk_pcl_ros::SparseOccupancyGridColumn_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jsk_pcl_ros/SparseOccupancyGridColumn";
  }

  static const char* value(const ::jsk_pcl_ros::SparseOccupancyGridColumn_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jsk_pcl_ros::SparseOccupancyGridColumn_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 column_index\n"
"SparseOccupancyGridCell[] cells\n"
"\n"
"================================================================================\n"
"MSG: jsk_pcl_ros/SparseOccupancyGridCell\n"
"int32 row_index\n"
"float32 value\n"
;
  }

  static const char* value(const ::jsk_pcl_ros::SparseOccupancyGridColumn_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jsk_pcl_ros::SparseOccupancyGridColumn_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.column_index);
      stream.next(m.cells);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SparseOccupancyGridColumn_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jsk_pcl_ros::SparseOccupancyGridColumn_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jsk_pcl_ros::SparseOccupancyGridColumn_<ContainerAllocator>& v)
  {
    s << indent << "column_index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.column_index);
    s << indent << "cells[]" << std::endl;
    for (size_t i = 0; i < v.cells.size(); ++i)
    {
      s << indent << "  cells[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::jsk_pcl_ros::SparseOccupancyGridCell_<ContainerAllocator> >::stream(s, indent + "    ", v.cells[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // JSK_PCL_ROS_MESSAGE_SPARSEOCCUPANCYGRIDCOLUMN_H
