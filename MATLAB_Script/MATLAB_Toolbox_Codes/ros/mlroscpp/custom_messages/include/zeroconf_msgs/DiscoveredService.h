// Generated by gencpp from file zeroconf_msgs/DiscoveredService.msg
// DO NOT EDIT!


#ifndef ZEROCONF_MSGS_MESSAGE_DISCOVEREDSERVICE_H
#define ZEROCONF_MSGS_MESSAGE_DISCOVEREDSERVICE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace zeroconf_msgs
{
template <class ContainerAllocator>
struct DiscoveredService_
{
  typedef DiscoveredService_<ContainerAllocator> Type;

  DiscoveredService_()
    : name()
    , type()
    , domain()
    , description()
    , hostname()
    , ipv4_addresses()
    , ipv6_addresses()
    , port(0)
    , cookie(0)
    , is_local(false)
    , our_own(false)
    , wide_area(false)
    , multicast(false)
    , cached(false)  {
    }
  DiscoveredService_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , type(_alloc)
    , domain(_alloc)
    , description(_alloc)
    , hostname(_alloc)
    , ipv4_addresses(_alloc)
    , ipv6_addresses(_alloc)
    , port(0)
    , cookie(0)
    , is_local(false)
    , our_own(false)
    , wide_area(false)
    , multicast(false)
    , cached(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _domain_type;
  _domain_type domain;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _description_type;
  _description_type description;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _hostname_type;
  _hostname_type hostname;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _ipv4_addresses_type;
  _ipv4_addresses_type ipv4_addresses;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _ipv6_addresses_type;
  _ipv6_addresses_type ipv6_addresses;

   typedef int32_t _port_type;
  _port_type port;

   typedef uint32_t _cookie_type;
  _cookie_type cookie;

   typedef uint8_t _is_local_type;
  _is_local_type is_local;

   typedef uint8_t _our_own_type;
  _our_own_type our_own;

   typedef uint8_t _wide_area_type;
  _wide_area_type wide_area;

   typedef uint8_t _multicast_type;
  _multicast_type multicast;

   typedef uint8_t _cached_type;
  _cached_type cached;





  typedef boost::shared_ptr< ::zeroconf_msgs::DiscoveredService_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::zeroconf_msgs::DiscoveredService_<ContainerAllocator> const> ConstPtr;

}; // struct DiscoveredService_

typedef ::zeroconf_msgs::DiscoveredService_<std::allocator<void> > DiscoveredService;

typedef boost::shared_ptr< ::zeroconf_msgs::DiscoveredService > DiscoveredServicePtr;
typedef boost::shared_ptr< ::zeroconf_msgs::DiscoveredService const> DiscoveredServiceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::zeroconf_msgs::DiscoveredService_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::zeroconf_msgs::DiscoveredService_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace zeroconf_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'zeroconf_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/zeroconf_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::zeroconf_msgs::DiscoveredService_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::zeroconf_msgs::DiscoveredService_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zeroconf_msgs::DiscoveredService_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zeroconf_msgs::DiscoveredService_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zeroconf_msgs::DiscoveredService_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zeroconf_msgs::DiscoveredService_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::zeroconf_msgs::DiscoveredService_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3aabc6dd9875ef180c75536ad9a51d86";
  }

  static const char* value(const ::zeroconf_msgs::DiscoveredService_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3aabc6dd9875ef18ULL;
  static const uint64_t static_value2 = 0x0c75536ad9a51d86ULL;
};

template<class ContainerAllocator>
struct DataType< ::zeroconf_msgs::DiscoveredService_<ContainerAllocator> >
{
  static const char* value()
  {
    return "zeroconf_msgs/DiscoveredService";
  }

  static const char* value(const ::zeroconf_msgs::DiscoveredService_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::zeroconf_msgs::DiscoveredService_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# Provides all the properties required for definition of a discovered \n"
"# zeroconf service. Note that it contains rather alot more information\n"
"# than that which is used to publish a zeroconf service.\n"
"\n"
"# Service Part\n"
"string name\n"
"string type\n"
"string domain\n"
"string description\n"
"\n"
"# Resolved part\n"
"string hostname\n"
"string[] ipv4_addresses\n"
"string[] ipv6_addresses\n"
"int32 port\n"
"\n"
"# These are detailed variables that you should not normally need\n"
"# and can be safely ignored in most circumstances (currently used\n"
"# by the avahi implementation).\n"
"\n"
"uint32 cookie\n"
"bool is_local\n"
"bool our_own\n"
"bool wide_area\n"
"bool multicast\n"
"bool cached\n"
"\n"
;
  }

  static const char* value(const ::zeroconf_msgs::DiscoveredService_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::zeroconf_msgs::DiscoveredService_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.type);
      stream.next(m.domain);
      stream.next(m.description);
      stream.next(m.hostname);
      stream.next(m.ipv4_addresses);
      stream.next(m.ipv6_addresses);
      stream.next(m.port);
      stream.next(m.cookie);
      stream.next(m.is_local);
      stream.next(m.our_own);
      stream.next(m.wide_area);
      stream.next(m.multicast);
      stream.next(m.cached);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DiscoveredService_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::zeroconf_msgs::DiscoveredService_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::zeroconf_msgs::DiscoveredService_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "domain: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.domain);
    s << indent << "description: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.description);
    s << indent << "hostname: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.hostname);
    s << indent << "ipv4_addresses[]" << std::endl;
    for (size_t i = 0; i < v.ipv4_addresses.size(); ++i)
    {
      s << indent << "  ipv4_addresses[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ipv4_addresses[i]);
    }
    s << indent << "ipv6_addresses[]" << std::endl;
    for (size_t i = 0; i < v.ipv6_addresses.size(); ++i)
    {
      s << indent << "  ipv6_addresses[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ipv6_addresses[i]);
    }
    s << indent << "port: ";
    Printer<int32_t>::stream(s, indent + "  ", v.port);
    s << indent << "cookie: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.cookie);
    s << indent << "is_local: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_local);
    s << indent << "our_own: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.our_own);
    s << indent << "wide_area: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wide_area);
    s << indent << "multicast: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.multicast);
    s << indent << "cached: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cached);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ZEROCONF_MSGS_MESSAGE_DISCOVEREDSERVICE_H
