// Generated by gencpp from file rtt_ros_msgs/GetPeerListResponse.msg
// DO NOT EDIT!


#ifndef RTT_ROS_MSGS_MESSAGE_GETPEERLISTRESPONSE_H
#define RTT_ROS_MSGS_MESSAGE_GETPEERLISTRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rtt_ros_msgs
{
template <class ContainerAllocator>
struct GetPeerListResponse_
{
  typedef GetPeerListResponse_<ContainerAllocator> Type;

  GetPeerListResponse_()
    : peers()  {
    }
  GetPeerListResponse_(const ContainerAllocator& _alloc)
    : peers(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _peers_type;
  _peers_type peers;





  typedef boost::shared_ptr< ::rtt_ros_msgs::GetPeerListResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rtt_ros_msgs::GetPeerListResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetPeerListResponse_

typedef ::rtt_ros_msgs::GetPeerListResponse_<std::allocator<void> > GetPeerListResponse;

typedef boost::shared_ptr< ::rtt_ros_msgs::GetPeerListResponse > GetPeerListResponsePtr;
typedef boost::shared_ptr< ::rtt_ros_msgs::GetPeerListResponse const> GetPeerListResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rtt_ros_msgs::GetPeerListResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rtt_ros_msgs::GetPeerListResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rtt_ros_msgs::GetPeerListResponse_<ContainerAllocator1> & lhs, const ::rtt_ros_msgs::GetPeerListResponse_<ContainerAllocator2> & rhs)
{
  return lhs.peers == rhs.peers;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rtt_ros_msgs::GetPeerListResponse_<ContainerAllocator1> & lhs, const ::rtt_ros_msgs::GetPeerListResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rtt_ros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rtt_ros_msgs::GetPeerListResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rtt_ros_msgs::GetPeerListResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rtt_ros_msgs::GetPeerListResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rtt_ros_msgs::GetPeerListResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rtt_ros_msgs::GetPeerListResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rtt_ros_msgs::GetPeerListResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rtt_ros_msgs::GetPeerListResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6db093f77b4f8d943666a07989041c39";
  }

  static const char* value(const ::rtt_ros_msgs::GetPeerListResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6db093f77b4f8d94ULL;
  static const uint64_t static_value2 = 0x3666a07989041c39ULL;
};

template<class ContainerAllocator>
struct DataType< ::rtt_ros_msgs::GetPeerListResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rtt_ros_msgs/GetPeerListResponse";
  }

  static const char* value(const ::rtt_ros_msgs::GetPeerListResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rtt_ros_msgs::GetPeerListResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] peers\n"
"\n"
;
  }

  static const char* value(const ::rtt_ros_msgs::GetPeerListResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rtt_ros_msgs::GetPeerListResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.peers);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetPeerListResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rtt_ros_msgs::GetPeerListResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rtt_ros_msgs::GetPeerListResponse_<ContainerAllocator>& v)
  {
    s << indent << "peers[]" << std::endl;
    for (size_t i = 0; i < v.peers.size(); ++i)
    {
      s << indent << "  peers[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.peers[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RTT_ROS_MSGS_MESSAGE_GETPEERLISTRESPONSE_H
