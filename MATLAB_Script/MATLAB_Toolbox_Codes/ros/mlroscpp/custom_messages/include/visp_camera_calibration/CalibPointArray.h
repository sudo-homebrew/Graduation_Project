// Generated by gencpp from file visp_camera_calibration/CalibPointArray.msg
// DO NOT EDIT!


#ifndef VISP_CAMERA_CALIBRATION_MESSAGE_CALIBPOINTARRAY_H
#define VISP_CAMERA_CALIBRATION_MESSAGE_CALIBPOINTARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <visp_camera_calibration/CalibPoint.h>

namespace visp_camera_calibration
{
template <class ContainerAllocator>
struct CalibPointArray_
{
  typedef CalibPointArray_<ContainerAllocator> Type;

  CalibPointArray_()
    : points()  {
    }
  CalibPointArray_(const ContainerAllocator& _alloc)
    : points(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::visp_camera_calibration::CalibPoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::visp_camera_calibration::CalibPoint_<ContainerAllocator> >::other >  _points_type;
  _points_type points;





  typedef boost::shared_ptr< ::visp_camera_calibration::CalibPointArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::visp_camera_calibration::CalibPointArray_<ContainerAllocator> const> ConstPtr;

}; // struct CalibPointArray_

typedef ::visp_camera_calibration::CalibPointArray_<std::allocator<void> > CalibPointArray;

typedef boost::shared_ptr< ::visp_camera_calibration::CalibPointArray > CalibPointArrayPtr;
typedef boost::shared_ptr< ::visp_camera_calibration::CalibPointArray const> CalibPointArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::visp_camera_calibration::CalibPointArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::visp_camera_calibration::CalibPointArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace visp_camera_calibration

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/sensor_msgs/msg'], 'visp_camera_calibration': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/visp_camera_calibration/msg'], 'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/geometry_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::visp_camera_calibration::CalibPointArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::visp_camera_calibration::CalibPointArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::visp_camera_calibration::CalibPointArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::visp_camera_calibration::CalibPointArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::visp_camera_calibration::CalibPointArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::visp_camera_calibration::CalibPointArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::visp_camera_calibration::CalibPointArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "46e7b53381d96d2d7cbbb7418f6dd696";
  }

  static const char* value(const ::visp_camera_calibration::CalibPointArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x46e7b53381d96d2dULL;
  static const uint64_t static_value2 = 0x7cbbb7418f6dd696ULL;
};

template<class ContainerAllocator>
struct DataType< ::visp_camera_calibration::CalibPointArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "visp_camera_calibration/CalibPointArray";
  }

  static const char* value(const ::visp_camera_calibration::CalibPointArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::visp_camera_calibration::CalibPointArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# an array of vpPoint\n"
"visp_camera_calibration/CalibPoint[] points\n"
"\n"
"================================================================================\n"
"MSG: visp_camera_calibration/CalibPoint\n"
"# a vpPoint\n"
"\n"
"int32 i\n"
"int32 j\n"
"float64 X\n"
"float64 Y\n"
"float64 Z\n"
"\n"
;
  }

  static const char* value(const ::visp_camera_calibration::CalibPointArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::visp_camera_calibration::CalibPointArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CalibPointArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::visp_camera_calibration::CalibPointArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::visp_camera_calibration::CalibPointArray_<ContainerAllocator>& v)
  {
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::visp_camera_calibration::CalibPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISP_CAMERA_CALIBRATION_MESSAGE_CALIBPOINTARRAY_H
