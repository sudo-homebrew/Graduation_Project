// Generated by gencpp from file clearpath_base/StateChange.msg
// DO NOT EDIT!


#ifndef CLEARPATH_BASE_MESSAGE_STATECHANGE_H
#define CLEARPATH_BASE_MESSAGE_STATECHANGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace clearpath_base
{
template <class ContainerAllocator>
struct StateChange_
{
  typedef StateChange_<ContainerAllocator> Type;

  StateChange_()
    : new_state()
    , joystick()  {
    }
  StateChange_(const ContainerAllocator& _alloc)
    : new_state(_alloc)
    , joystick(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _new_state_type;
  _new_state_type new_state;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _joystick_type;
  _joystick_type joystick;





  typedef boost::shared_ptr< ::clearpath_base::StateChange_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::clearpath_base::StateChange_<ContainerAllocator> const> ConstPtr;

}; // struct StateChange_

typedef ::clearpath_base::StateChange_<std::allocator<void> > StateChange;

typedef boost::shared_ptr< ::clearpath_base::StateChange > StateChangePtr;
typedef boost::shared_ptr< ::clearpath_base::StateChange const> StateChangeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::clearpath_base::StateChange_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::clearpath_base::StateChange_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::clearpath_base::StateChange_<ContainerAllocator1> & lhs, const ::clearpath_base::StateChange_<ContainerAllocator2> & rhs)
{
  return lhs.new_state == rhs.new_state &&
    lhs.joystick == rhs.joystick;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::clearpath_base::StateChange_<ContainerAllocator1> & lhs, const ::clearpath_base::StateChange_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace clearpath_base

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::clearpath_base::StateChange_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::clearpath_base::StateChange_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::clearpath_base::StateChange_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::clearpath_base::StateChange_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::clearpath_base::StateChange_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::clearpath_base::StateChange_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::clearpath_base::StateChange_<ContainerAllocator> >
{
  static const char* value()
  {
    return "44a4273c39fe35090d35b71e32a477da";
  }

  static const char* value(const ::clearpath_base::StateChange_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x44a4273c39fe3509ULL;
  static const uint64_t static_value2 = 0x0d35b71e32a477daULL;
};

template<class ContainerAllocator>
struct DataType< ::clearpath_base::StateChange_<ContainerAllocator> >
{
  static const char* value()
  {
    return "clearpath_base/StateChange";
  }

  static const char* value(const ::clearpath_base::StateChange_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::clearpath_base::StateChange_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string new_state\n"
"string joystick\n"
;
  }

  static const char* value(const ::clearpath_base::StateChange_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::clearpath_base::StateChange_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.new_state);
      stream.next(m.joystick);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StateChange_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::clearpath_base::StateChange_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::clearpath_base::StateChange_<ContainerAllocator>& v)
  {
    s << indent << "new_state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.new_state);
    s << indent << "joystick: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.joystick);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CLEARPATH_BASE_MESSAGE_STATECHANGE_H
