// Generated by gencpp from file clearpath_base/PowerSource.msg
// DO NOT EDIT!


#ifndef CLEARPATH_BASE_MESSAGE_POWERSOURCE_H
#define CLEARPATH_BASE_MESSAGE_POWERSOURCE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace clearpath_base
{
template <class ContainerAllocator>
struct PowerSource_
{
  typedef PowerSource_<ContainerAllocator> Type;

  PowerSource_()
    : charge(0.0)
    , capacity(0)
    , present(false)
    , in_use(false)
    , description(0)  {
    }
  PowerSource_(const ContainerAllocator& _alloc)
    : charge(0.0)
    , capacity(0)
    , present(false)
    , in_use(false)
    , description(0)  {
  (void)_alloc;
    }



   typedef float _charge_type;
  _charge_type charge;

   typedef int16_t _capacity_type;
  _capacity_type capacity;

   typedef uint8_t _present_type;
  _present_type present;

   typedef uint8_t _in_use_type;
  _in_use_type in_use;

   typedef uint8_t _description_type;
  _description_type description;





  typedef boost::shared_ptr< ::clearpath_base::PowerSource_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::clearpath_base::PowerSource_<ContainerAllocator> const> ConstPtr;

}; // struct PowerSource_

typedef ::clearpath_base::PowerSource_<std::allocator<void> > PowerSource;

typedef boost::shared_ptr< ::clearpath_base::PowerSource > PowerSourcePtr;
typedef boost::shared_ptr< ::clearpath_base::PowerSource const> PowerSourceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::clearpath_base::PowerSource_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::clearpath_base::PowerSource_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::clearpath_base::PowerSource_<ContainerAllocator1> & lhs, const ::clearpath_base::PowerSource_<ContainerAllocator2> & rhs)
{
  return lhs.charge == rhs.charge &&
    lhs.capacity == rhs.capacity &&
    lhs.present == rhs.present &&
    lhs.in_use == rhs.in_use &&
    lhs.description == rhs.description;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::clearpath_base::PowerSource_<ContainerAllocator1> & lhs, const ::clearpath_base::PowerSource_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace clearpath_base

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::clearpath_base::PowerSource_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::clearpath_base::PowerSource_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::clearpath_base::PowerSource_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::clearpath_base::PowerSource_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::clearpath_base::PowerSource_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::clearpath_base::PowerSource_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::clearpath_base::PowerSource_<ContainerAllocator> >
{
  static const char* value()
  {
    return "adbe384d7d69a337a7f2b6bf1d0139cb";
  }

  static const char* value(const ::clearpath_base::PowerSource_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xadbe384d7d69a337ULL;
  static const uint64_t static_value2 = 0xa7f2b6bf1d0139cbULL;
};

template<class ContainerAllocator>
struct DataType< ::clearpath_base::PowerSource_<ContainerAllocator> >
{
  static const char* value()
  {
    return "clearpath_base/PowerSource";
  }

  static const char* value(const ::clearpath_base::PowerSource_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::clearpath_base::PowerSource_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 charge\n"
"int16 capacity\n"
"bool present\n"
"bool in_use\n"
"uint8 description\n"
;
  }

  static const char* value(const ::clearpath_base::PowerSource_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::clearpath_base::PowerSource_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.charge);
      stream.next(m.capacity);
      stream.next(m.present);
      stream.next(m.in_use);
      stream.next(m.description);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PowerSource_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::clearpath_base::PowerSource_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::clearpath_base::PowerSource_<ContainerAllocator>& v)
  {
    s << indent << "charge: ";
    Printer<float>::stream(s, indent + "  ", v.charge);
    s << indent << "capacity: ";
    Printer<int16_t>::stream(s, indent + "  ", v.capacity);
    s << indent << "present: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.present);
    s << indent << "in_use: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.in_use);
    s << indent << "description: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.description);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CLEARPATH_BASE_MESSAGE_POWERSOURCE_H
