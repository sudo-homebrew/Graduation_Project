// Generated by gencpp from file clearpath_base/ClearpathRobot.msg
// DO NOT EDIT!


#ifndef CLEARPATH_BASE_MESSAGE_CLEARPATHROBOT_H
#define CLEARPATH_BASE_MESSAGE_CLEARPATHROBOT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace clearpath_base
{
template <class ContainerAllocator>
struct ClearpathRobot_
{
  typedef ClearpathRobot_<ContainerAllocator> Type;

  ClearpathRobot_()
    : name()
    , model()
    , platform_revision(0)
    , serial(0)
    , horizon_version()
    , firmware_version()
    , firmware_revision(0)
    , write_date()  {
      horizon_version.assign(0);

      firmware_version.assign(0);
  }
  ClearpathRobot_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , model(_alloc)
    , platform_revision(0)
    , serial(0)
    , horizon_version()
    , firmware_version()
    , firmware_revision(0)
    , write_date(_alloc)  {
  (void)_alloc;
      horizon_version.assign(0);

      firmware_version.assign(0);
  }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _model_type;
  _model_type model;

   typedef int32_t _platform_revision_type;
  _platform_revision_type platform_revision;

   typedef uint32_t _serial_type;
  _serial_type serial;

   typedef boost::array<int32_t, 2>  _horizon_version_type;
  _horizon_version_type horizon_version;

   typedef boost::array<int32_t, 2>  _firmware_version_type;
  _firmware_version_type firmware_version;

   typedef int32_t _firmware_revision_type;
  _firmware_revision_type firmware_revision;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _write_date_type;
  _write_date_type write_date;





  typedef boost::shared_ptr< ::clearpath_base::ClearpathRobot_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::clearpath_base::ClearpathRobot_<ContainerAllocator> const> ConstPtr;

}; // struct ClearpathRobot_

typedef ::clearpath_base::ClearpathRobot_<std::allocator<void> > ClearpathRobot;

typedef boost::shared_ptr< ::clearpath_base::ClearpathRobot > ClearpathRobotPtr;
typedef boost::shared_ptr< ::clearpath_base::ClearpathRobot const> ClearpathRobotConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::clearpath_base::ClearpathRobot_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::clearpath_base::ClearpathRobot_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::clearpath_base::ClearpathRobot_<ContainerAllocator1> & lhs, const ::clearpath_base::ClearpathRobot_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.model == rhs.model &&
    lhs.platform_revision == rhs.platform_revision &&
    lhs.serial == rhs.serial &&
    lhs.horizon_version == rhs.horizon_version &&
    lhs.firmware_version == rhs.firmware_version &&
    lhs.firmware_revision == rhs.firmware_revision &&
    lhs.write_date == rhs.write_date;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::clearpath_base::ClearpathRobot_<ContainerAllocator1> & lhs, const ::clearpath_base::ClearpathRobot_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace clearpath_base

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::clearpath_base::ClearpathRobot_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::clearpath_base::ClearpathRobot_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::clearpath_base::ClearpathRobot_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::clearpath_base::ClearpathRobot_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::clearpath_base::ClearpathRobot_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::clearpath_base::ClearpathRobot_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::clearpath_base::ClearpathRobot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1bdab2b789676c1b350ab6739da650c7";
  }

  static const char* value(const ::clearpath_base::ClearpathRobot_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1bdab2b789676c1bULL;
  static const uint64_t static_value2 = 0x350ab6739da650c7ULL;
};

template<class ContainerAllocator>
struct DataType< ::clearpath_base::ClearpathRobot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "clearpath_base/ClearpathRobot";
  }

  static const char* value(const ::clearpath_base::ClearpathRobot_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::clearpath_base::ClearpathRobot_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"string model\n"
"int32 platform_revision\n"
"uint32 serial\n"
"int32[2] horizon_version\n"
"int32[2] firmware_version\n"
"int32 firmware_revision\n"
"string write_date\n"
;
  }

  static const char* value(const ::clearpath_base::ClearpathRobot_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::clearpath_base::ClearpathRobot_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.model);
      stream.next(m.platform_revision);
      stream.next(m.serial);
      stream.next(m.horizon_version);
      stream.next(m.firmware_version);
      stream.next(m.firmware_revision);
      stream.next(m.write_date);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ClearpathRobot_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::clearpath_base::ClearpathRobot_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::clearpath_base::ClearpathRobot_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "model: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.model);
    s << indent << "platform_revision: ";
    Printer<int32_t>::stream(s, indent + "  ", v.platform_revision);
    s << indent << "serial: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.serial);
    s << indent << "horizon_version[]" << std::endl;
    for (size_t i = 0; i < v.horizon_version.size(); ++i)
    {
      s << indent << "  horizon_version[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.horizon_version[i]);
    }
    s << indent << "firmware_version[]" << std::endl;
    for (size_t i = 0; i < v.firmware_version.size(); ++i)
    {
      s << indent << "  firmware_version[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.firmware_version[i]);
    }
    s << indent << "firmware_revision: ";
    Printer<int32_t>::stream(s, indent + "  ", v.firmware_revision);
    s << indent << "write_date: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.write_date);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CLEARPATH_BASE_MESSAGE_CLEARPATHROBOT_H
