// Generated by gencpp from file clearpath_base/JoySwitch.msg
// DO NOT EDIT!


#ifndef CLEARPATH_BASE_MESSAGE_JOYSWITCH_H
#define CLEARPATH_BASE_MESSAGE_JOYSWITCH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace clearpath_base
{
template <class ContainerAllocator>
struct JoySwitch_
{
  typedef JoySwitch_<ContainerAllocator> Type;

  JoySwitch_()
    : robot_id()
    , attach(0)
    , joystick()  {
    }
  JoySwitch_(const ContainerAllocator& _alloc)
    : robot_id(_alloc)
    , attach(0)
    , joystick(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _robot_id_type;
  _robot_id_type robot_id;

   typedef uint8_t _attach_type;
  _attach_type attach;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _joystick_type;
  _joystick_type joystick;





  typedef boost::shared_ptr< ::clearpath_base::JoySwitch_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::clearpath_base::JoySwitch_<ContainerAllocator> const> ConstPtr;

}; // struct JoySwitch_

typedef ::clearpath_base::JoySwitch_<std::allocator<void> > JoySwitch;

typedef boost::shared_ptr< ::clearpath_base::JoySwitch > JoySwitchPtr;
typedef boost::shared_ptr< ::clearpath_base::JoySwitch const> JoySwitchConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::clearpath_base::JoySwitch_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::clearpath_base::JoySwitch_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::clearpath_base::JoySwitch_<ContainerAllocator1> & lhs, const ::clearpath_base::JoySwitch_<ContainerAllocator2> & rhs)
{
  return lhs.robot_id == rhs.robot_id &&
    lhs.attach == rhs.attach &&
    lhs.joystick == rhs.joystick;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::clearpath_base::JoySwitch_<ContainerAllocator1> & lhs, const ::clearpath_base::JoySwitch_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace clearpath_base

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::clearpath_base::JoySwitch_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::clearpath_base::JoySwitch_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::clearpath_base::JoySwitch_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::clearpath_base::JoySwitch_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::clearpath_base::JoySwitch_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::clearpath_base::JoySwitch_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::clearpath_base::JoySwitch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0b9e4d12a122fa671dc7b4bd8741705d";
  }

  static const char* value(const ::clearpath_base::JoySwitch_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0b9e4d12a122fa67ULL;
  static const uint64_t static_value2 = 0x1dc7b4bd8741705dULL;
};

template<class ContainerAllocator>
struct DataType< ::clearpath_base::JoySwitch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "clearpath_base/JoySwitch";
  }

  static const char* value(const ::clearpath_base::JoySwitch_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::clearpath_base::JoySwitch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string robot_id\n"
"uint8 attach\n"
"string joystick\n"
;
  }

  static const char* value(const ::clearpath_base::JoySwitch_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::clearpath_base::JoySwitch_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_id);
      stream.next(m.attach);
      stream.next(m.joystick);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JoySwitch_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::clearpath_base::JoySwitch_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::clearpath_base::JoySwitch_<ContainerAllocator>& v)
  {
    s << indent << "robot_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.robot_id);
    s << indent << "attach: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.attach);
    s << indent << "joystick: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.joystick);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CLEARPATH_BASE_MESSAGE_JOYSWITCH_H
