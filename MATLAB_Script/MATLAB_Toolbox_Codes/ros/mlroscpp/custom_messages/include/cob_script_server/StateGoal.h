// Generated by gencpp from file cob_script_server/StateGoal.msg
// DO NOT EDIT!


#ifndef COB_SCRIPT_SERVER_MESSAGE_STATEGOAL_H
#define COB_SCRIPT_SERVER_MESSAGE_STATEGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <cob_script_server/ScriptState.h>

namespace cob_script_server
{
template <class ContainerAllocator>
struct StateGoal_
{
  typedef StateGoal_<ContainerAllocator> Type;

  StateGoal_()
    : state()  {
    }
  StateGoal_(const ContainerAllocator& _alloc)
    : state(_alloc)  {
  (void)_alloc;
    }



   typedef  ::cob_script_server::ScriptState_<ContainerAllocator>  _state_type;
  _state_type state;





  typedef boost::shared_ptr< ::cob_script_server::StateGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_script_server::StateGoal_<ContainerAllocator> const> ConstPtr;

}; // struct StateGoal_

typedef ::cob_script_server::StateGoal_<std::allocator<void> > StateGoal;

typedef boost::shared_ptr< ::cob_script_server::StateGoal > StateGoalPtr;
typedef boost::shared_ptr< ::cob_script_server::StateGoal const> StateGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cob_script_server::StateGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cob_script_server::StateGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cob_script_server::StateGoal_<ContainerAllocator1> & lhs, const ::cob_script_server::StateGoal_<ContainerAllocator2> & rhs)
{
  return lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cob_script_server::StateGoal_<ContainerAllocator1> & lhs, const ::cob_script_server::StateGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cob_script_server

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cob_script_server::StateGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cob_script_server::StateGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cob_script_server::StateGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cob_script_server::StateGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_script_server::StateGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_script_server::StateGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cob_script_server::StateGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "de9449157e3145a2ac1c44024d2d7303";
  }

  static const char* value(const ::cob_script_server::StateGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xde9449157e3145a2ULL;
  static const uint64_t static_value2 = 0xac1c44024d2d7303ULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_script_server::StateGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cob_script_server/StateGoal";
  }

  static const char* value(const ::cob_script_server::StateGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cob_script_server::StateGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#goal definition\n"
"cob_script_server/ScriptState state\n"
"\n"
"================================================================================\n"
"MSG: cob_script_server/ScriptState\n"
"Header header\n"
"string function_name\n"
"string component_name\n"
"string parameter_name\n"
"string full_graph_name\n"
"\n"
"# Possible execution states\n"
"byte UNKNOWN=0\n"
"byte ACTIVE=1\n"
"byte SUCCEEDED=2\n"
"byte FAILED=3\n"
"byte PAUSED=4\n"
"\n"
"byte state # state of execution\n"
"int16 error_code # current error_code for state\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::cob_script_server::StateGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cob_script_server::StateGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StateGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cob_script_server::StateGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cob_script_server::StateGoal_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    s << std::endl;
    Printer< ::cob_script_server::ScriptState_<ContainerAllocator> >::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COB_SCRIPT_SERVER_MESSAGE_STATEGOAL_H
