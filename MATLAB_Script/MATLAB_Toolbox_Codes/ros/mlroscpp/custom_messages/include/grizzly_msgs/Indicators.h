// Generated by gencpp from file grizzly_msgs/Indicators.msg
// DO NOT EDIT!


#ifndef GRIZZLY_MSGS_MESSAGE_INDICATORS_H
#define GRIZZLY_MSGS_MESSAGE_INDICATORS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace grizzly_msgs
{
template <class ContainerAllocator>
struct Indicators_
{
  typedef Indicators_<ContainerAllocator> Type;

  Indicators_()
    : position_light(0)
    , autopilot_light(0)
    , battery_light(0)  {
    }
  Indicators_(const ContainerAllocator& _alloc)
    : position_light(0)
    , autopilot_light(0)
    , battery_light(0)  {
  (void)_alloc;
    }



   typedef uint8_t _position_light_type;
  _position_light_type position_light;

   typedef uint8_t _autopilot_light_type;
  _autopilot_light_type autopilot_light;

   typedef uint8_t _battery_light_type;
  _battery_light_type battery_light;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(INDICATOR_ON)
  #undef INDICATOR_ON
#endif
#if defined(_WIN32) && defined(INDICATOR_FLASH)
  #undef INDICATOR_FLASH
#endif
#if defined(_WIN32) && defined(INDICATOR_OFF)
  #undef INDICATOR_OFF
#endif

  enum {
    INDICATOR_ON = 255u,
    INDICATOR_FLASH = 15u,
    INDICATOR_OFF = 0u,
  };


  typedef boost::shared_ptr< ::grizzly_msgs::Indicators_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::grizzly_msgs::Indicators_<ContainerAllocator> const> ConstPtr;

}; // struct Indicators_

typedef ::grizzly_msgs::Indicators_<std::allocator<void> > Indicators;

typedef boost::shared_ptr< ::grizzly_msgs::Indicators > IndicatorsPtr;
typedef boost::shared_ptr< ::grizzly_msgs::Indicators const> IndicatorsConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::grizzly_msgs::Indicators_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::grizzly_msgs::Indicators_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::grizzly_msgs::Indicators_<ContainerAllocator1> & lhs, const ::grizzly_msgs::Indicators_<ContainerAllocator2> & rhs)
{
  return lhs.position_light == rhs.position_light &&
    lhs.autopilot_light == rhs.autopilot_light &&
    lhs.battery_light == rhs.battery_light;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::grizzly_msgs::Indicators_<ContainerAllocator1> & lhs, const ::grizzly_msgs::Indicators_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace grizzly_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::grizzly_msgs::Indicators_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::grizzly_msgs::Indicators_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::grizzly_msgs::Indicators_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::grizzly_msgs::Indicators_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::grizzly_msgs::Indicators_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::grizzly_msgs::Indicators_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::grizzly_msgs::Indicators_<ContainerAllocator> >
{
  static const char* value()
  {
    return "96722a571f0c36ed6a0c5468800be83f";
  }

  static const char* value(const ::grizzly_msgs::Indicators_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x96722a571f0c36edULL;
  static const uint64_t static_value2 = 0x6a0c5468800be83fULL;
};

template<class ContainerAllocator>
struct DataType< ::grizzly_msgs::Indicators_<ContainerAllocator> >
{
  static const char* value()
  {
    return "grizzly_msgs/Indicators";
  }

  static const char* value(const ::grizzly_msgs::Indicators_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::grizzly_msgs::Indicators_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Represents a command for the indicators on the rear panel.\n"
"\n"
"uint8 INDICATOR_ON      = 255\n"
"uint8 INDICATOR_FLASH   = 15\n"
"uint8 INDICATOR_OFF     = 0\n"
"\n"
"uint8 position_light    # Signal the status of the GPS system\n"
"uint8 autopilot_light   # Signal if the system is under automatic or manual control\n"
"uint8 battery_light     # Signal the level of the battery, 0 is empty and 255 is full.\n"
"\n"
;
  }

  static const char* value(const ::grizzly_msgs::Indicators_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::grizzly_msgs::Indicators_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position_light);
      stream.next(m.autopilot_light);
      stream.next(m.battery_light);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Indicators_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::grizzly_msgs::Indicators_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::grizzly_msgs::Indicators_<ContainerAllocator>& v)
  {
    s << indent << "position_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.position_light);
    s << indent << "autopilot_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.autopilot_light);
    s << indent << "battery_light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.battery_light);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRIZZLY_MSGS_MESSAGE_INDICATORS_H
