// Generated by gencpp from file grizzly_msgs/Status.msg
// DO NOT EDIT!


#ifndef GRIZZLY_MSGS_MESSAGE_STATUS_H
#define GRIZZLY_MSGS_MESSAGE_STATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace grizzly_msgs
{
template <class ContainerAllocator>
struct Status_
{
  typedef Status_<ContainerAllocator> Type;

  Status_()
    : header()
    , hardware_id()
    , mcu_uptime()
    , connection_uptime()
    , mcu_temperature(0.0)
    , stop_engaged(false)
    , external_stop_engaged(false)
    , measured_battery(0.0)
    , measured_48v(0.0)
    , measured_24v(0.0)
    , measured_12v(0.0)
    , current_battery(0.0)
    , current_48v(0.0)
    , current_24v(0.0)
    , current_12v(0.0)
    , current_computer(0.0)
    , current_battery_peak(0.0)
    , total_power_consumed(0.0)  {
    }
  Status_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , hardware_id(_alloc)
    , mcu_uptime()
    , connection_uptime()
    , mcu_temperature(0.0)
    , stop_engaged(false)
    , external_stop_engaged(false)
    , measured_battery(0.0)
    , measured_48v(0.0)
    , measured_24v(0.0)
    , measured_12v(0.0)
    , current_battery(0.0)
    , current_48v(0.0)
    , current_24v(0.0)
    , current_12v(0.0)
    , current_computer(0.0)
    , current_battery_peak(0.0)
    , total_power_consumed(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _hardware_id_type;
  _hardware_id_type hardware_id;

   typedef ros::Duration _mcu_uptime_type;
  _mcu_uptime_type mcu_uptime;

   typedef ros::Duration _connection_uptime_type;
  _connection_uptime_type connection_uptime;

   typedef float _mcu_temperature_type;
  _mcu_temperature_type mcu_temperature;

   typedef uint8_t _stop_engaged_type;
  _stop_engaged_type stop_engaged;

   typedef uint8_t _external_stop_engaged_type;
  _external_stop_engaged_type external_stop_engaged;

   typedef float _measured_battery_type;
  _measured_battery_type measured_battery;

   typedef float _measured_48v_type;
  _measured_48v_type measured_48v;

   typedef float _measured_24v_type;
  _measured_24v_type measured_24v;

   typedef float _measured_12v_type;
  _measured_12v_type measured_12v;

   typedef float _current_battery_type;
  _current_battery_type current_battery;

   typedef float _current_48v_type;
  _current_48v_type current_48v;

   typedef float _current_24v_type;
  _current_24v_type current_24v;

   typedef float _current_12v_type;
  _current_12v_type current_12v;

   typedef float _current_computer_type;
  _current_computer_type current_computer;

   typedef float _current_battery_peak_type;
  _current_battery_peak_type current_battery_peak;

   typedef double _total_power_consumed_type;
  _total_power_consumed_type total_power_consumed;





  typedef boost::shared_ptr< ::grizzly_msgs::Status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::grizzly_msgs::Status_<ContainerAllocator> const> ConstPtr;

}; // struct Status_

typedef ::grizzly_msgs::Status_<std::allocator<void> > Status;

typedef boost::shared_ptr< ::grizzly_msgs::Status > StatusPtr;
typedef boost::shared_ptr< ::grizzly_msgs::Status const> StatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::grizzly_msgs::Status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::grizzly_msgs::Status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::grizzly_msgs::Status_<ContainerAllocator1> & lhs, const ::grizzly_msgs::Status_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.hardware_id == rhs.hardware_id &&
    lhs.mcu_uptime == rhs.mcu_uptime &&
    lhs.connection_uptime == rhs.connection_uptime &&
    lhs.mcu_temperature == rhs.mcu_temperature &&
    lhs.stop_engaged == rhs.stop_engaged &&
    lhs.external_stop_engaged == rhs.external_stop_engaged &&
    lhs.measured_battery == rhs.measured_battery &&
    lhs.measured_48v == rhs.measured_48v &&
    lhs.measured_24v == rhs.measured_24v &&
    lhs.measured_12v == rhs.measured_12v &&
    lhs.current_battery == rhs.current_battery &&
    lhs.current_48v == rhs.current_48v &&
    lhs.current_24v == rhs.current_24v &&
    lhs.current_12v == rhs.current_12v &&
    lhs.current_computer == rhs.current_computer &&
    lhs.current_battery_peak == rhs.current_battery_peak &&
    lhs.total_power_consumed == rhs.total_power_consumed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::grizzly_msgs::Status_<ContainerAllocator1> & lhs, const ::grizzly_msgs::Status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace grizzly_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::grizzly_msgs::Status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::grizzly_msgs::Status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::grizzly_msgs::Status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::grizzly_msgs::Status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::grizzly_msgs::Status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::grizzly_msgs::Status_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::grizzly_msgs::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b7c26be1e34a0256ce732022c187908d";
  }

  static const char* value(const ::grizzly_msgs::Status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb7c26be1e34a0256ULL;
  static const uint64_t static_value2 = 0xce732022c187908dULL;
};

template<class ContainerAllocator>
struct DataType< ::grizzly_msgs::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "grizzly_msgs/Status";
  }

  static const char* value(const ::grizzly_msgs::Status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::grizzly_msgs::Status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message represents Grizzly's lower-frequency status updates from the MCU\n"
"# Default publish frequency is 1Hz.\n"
"\n"
"Header header\n"
"\n"
"# Commit of firmware source.\n"
"string hardware_id\n"
"\n"
"# Times since MCU power-on and MCU rosserial connection, respectively.\n"
"duration mcu_uptime\n"
"duration connection_uptime\n"
"\n"
"# Temperature of MCU in Celsius.\n"
"float32 mcu_temperature\n"
"\n"
"# Monitoring the run/stop loop. Changes in these values trigger an immediate\n"
"# publish, outside the ordinarily-scheduled 1Hz updates.\n"
"bool stop_engaged  # True when a stop has been pressed on the robot.\n"
"bool external_stop_engaged # True when an external stop has been asserted.\n"
"\n"
"# Voltage rails, in volts\n"
"# Averaged over the message period\n"
"float32 measured_battery\n"
"float32 measured_48v\n"
"float32 measured_24v\n"
"float32 measured_12v\n"
"\n"
"# Current senses available on platform, in amps.\n"
"# Averaged over the message period.\n"
"float32 current_battery # This is total current being used from the battery which includes the items below and motors.\n"
"float32 current_48v\n"
"float32 current_24v\n"
"float32 current_12v\n"
"float32 current_computer\n"
"\n"
"# Highest total system current peak as measured in a 1ms window.\n"
"float32 current_battery_peak\n"
"\n"
"# Integration of all power consumption since MCU power-on, in watt-hours.\n"
"float64 total_power_consumed\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::grizzly_msgs::Status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::grizzly_msgs::Status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.hardware_id);
      stream.next(m.mcu_uptime);
      stream.next(m.connection_uptime);
      stream.next(m.mcu_temperature);
      stream.next(m.stop_engaged);
      stream.next(m.external_stop_engaged);
      stream.next(m.measured_battery);
      stream.next(m.measured_48v);
      stream.next(m.measured_24v);
      stream.next(m.measured_12v);
      stream.next(m.current_battery);
      stream.next(m.current_48v);
      stream.next(m.current_24v);
      stream.next(m.current_12v);
      stream.next(m.current_computer);
      stream.next(m.current_battery_peak);
      stream.next(m.total_power_consumed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::grizzly_msgs::Status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::grizzly_msgs::Status_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "hardware_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.hardware_id);
    s << indent << "mcu_uptime: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.mcu_uptime);
    s << indent << "connection_uptime: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.connection_uptime);
    s << indent << "mcu_temperature: ";
    Printer<float>::stream(s, indent + "  ", v.mcu_temperature);
    s << indent << "stop_engaged: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stop_engaged);
    s << indent << "external_stop_engaged: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.external_stop_engaged);
    s << indent << "measured_battery: ";
    Printer<float>::stream(s, indent + "  ", v.measured_battery);
    s << indent << "measured_48v: ";
    Printer<float>::stream(s, indent + "  ", v.measured_48v);
    s << indent << "measured_24v: ";
    Printer<float>::stream(s, indent + "  ", v.measured_24v);
    s << indent << "measured_12v: ";
    Printer<float>::stream(s, indent + "  ", v.measured_12v);
    s << indent << "current_battery: ";
    Printer<float>::stream(s, indent + "  ", v.current_battery);
    s << indent << "current_48v: ";
    Printer<float>::stream(s, indent + "  ", v.current_48v);
    s << indent << "current_24v: ";
    Printer<float>::stream(s, indent + "  ", v.current_24v);
    s << indent << "current_12v: ";
    Printer<float>::stream(s, indent + "  ", v.current_12v);
    s << indent << "current_computer: ";
    Printer<float>::stream(s, indent + "  ", v.current_computer);
    s << indent << "current_battery_peak: ";
    Printer<float>::stream(s, indent + "  ", v.current_battery_peak);
    s << indent << "total_power_consumed: ";
    Printer<double>::stream(s, indent + "  ", v.total_power_consumed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRIZZLY_MSGS_MESSAGE_STATUS_H
