// Generated by gencpp from file pr2_gripper_sensor_msgs/PR2GripperForceServoResult.msg
// DO NOT EDIT!


#ifndef PR2_GRIPPER_SENSOR_MSGS_MESSAGE_PR2GRIPPERFORCESERVORESULT_H
#define PR2_GRIPPER_SENSOR_MSGS_MESSAGE_PR2GRIPPERFORCESERVORESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <pr2_gripper_sensor_msgs/PR2GripperForceServoData.h>

namespace pr2_gripper_sensor_msgs
{
template <class ContainerAllocator>
struct PR2GripperForceServoResult_
{
  typedef PR2GripperForceServoResult_<ContainerAllocator> Type;

  PR2GripperForceServoResult_()
    : data()  {
    }
  PR2GripperForceServoResult_(const ContainerAllocator& _alloc)
    : data(_alloc)  {
  (void)_alloc;
    }



   typedef  ::pr2_gripper_sensor_msgs::PR2GripperForceServoData_<ContainerAllocator>  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::pr2_gripper_sensor_msgs::PR2GripperForceServoResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr2_gripper_sensor_msgs::PR2GripperForceServoResult_<ContainerAllocator> const> ConstPtr;

}; // struct PR2GripperForceServoResult_

typedef ::pr2_gripper_sensor_msgs::PR2GripperForceServoResult_<std::allocator<void> > PR2GripperForceServoResult;

typedef boost::shared_ptr< ::pr2_gripper_sensor_msgs::PR2GripperForceServoResult > PR2GripperForceServoResultPtr;
typedef boost::shared_ptr< ::pr2_gripper_sensor_msgs::PR2GripperForceServoResult const> PR2GripperForceServoResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pr2_gripper_sensor_msgs::PR2GripperForceServoResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pr2_gripper_sensor_msgs::PR2GripperForceServoResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pr2_gripper_sensor_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'pr2_gripper_sensor_msgs': ['/local-ssd1/All_Custom_Msgs/PendingActionPackagesPart2/matlab_msg_gen_ros1/glnxa64/src/pr2_gripper_sensor_msgs/msg', '/local-ssd1/All_Custom_Msgs/PendingActionPackagesPart2/matlab_msg_gen_ros1/glnxa64/devel/share/pr2_gripper_sensor_msgs/msg'], 'actionlib': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/actionlib/cmake/../msg'], 'std_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pr2_gripper_sensor_msgs::PR2GripperForceServoResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pr2_gripper_sensor_msgs::PR2GripperForceServoResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pr2_gripper_sensor_msgs::PR2GripperForceServoResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pr2_gripper_sensor_msgs::PR2GripperForceServoResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr2_gripper_sensor_msgs::PR2GripperForceServoResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr2_gripper_sensor_msgs::PR2GripperForceServoResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pr2_gripper_sensor_msgs::PR2GripperForceServoResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a85c0d43537b45945527f5de565ab7c2";
  }

  static const char* value(const ::pr2_gripper_sensor_msgs::PR2GripperForceServoResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa85c0d43537b4594ULL;
  static const uint64_t static_value2 = 0x5527f5de565ab7c2ULL;
};

template<class ContainerAllocator>
struct DataType< ::pr2_gripper_sensor_msgs::PR2GripperForceServoResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pr2_gripper_sensor_msgs/PR2GripperForceServoResult";
  }

  static const char* value(const ::pr2_gripper_sensor_msgs::PR2GripperForceServoResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pr2_gripper_sensor_msgs::PR2GripperForceServoResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"\n"
"#result\n"
"PR2GripperForceServoData data\n"
"\n"
"\n"
"================================================================================\n"
"MSG: pr2_gripper_sensor_msgs/PR2GripperForceServoData\n"
"# Time the data was recorded at\n"
"time stamp\n"
"\n"
"# the force experienced by the finger Pads  (N)\n"
"# NOTE:this ignores data from the edges of the finger pressure\n"
"float64 left_fingertip_pad_force\n"
"float64 right_fingertip_pad_force\n"
"\n"
"# the current gripper virtual parallel joint effort (in N)\n"
"float64 joint_effort\n"
"\n"
"# true when the gripper is no longer moving\n"
"# and we have reached the desired force level\n"
"bool force_achieved\n"
"\n"
"\n"
"# the control state of our realtime controller\n"
"PR2GripperSensorRTState rtstate\n"
"\n"
"================================================================================\n"
"MSG: pr2_gripper_sensor_msgs/PR2GripperSensorRTState\n"
"# the control state of our realtime controller\n"
"int8 realtime_controller_state\n"
"\n"
"# predefined values to indicate our realtime_controller_state\n"
"int8 DISABLED = 0\n"
"int8 POSITION_SERVO = 3\n"
"int8 FORCE_SERVO = 4\n"
"int8 FIND_CONTACT = 5\n"
"int8 SLIP_SERVO = 6\n"
;
  }

  static const char* value(const ::pr2_gripper_sensor_msgs::PR2GripperForceServoResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pr2_gripper_sensor_msgs::PR2GripperForceServoResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PR2GripperForceServoResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr2_gripper_sensor_msgs::PR2GripperForceServoResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pr2_gripper_sensor_msgs::PR2GripperForceServoResult_<ContainerAllocator>& v)
  {
    s << indent << "data: ";
    s << std::endl;
    Printer< ::pr2_gripper_sensor_msgs::PR2GripperForceServoData_<ContainerAllocator> >::stream(s, indent + "  ", v.data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PR2_GRIPPER_SENSOR_MSGS_MESSAGE_PR2GRIPPERFORCESERVORESULT_H
