// Generated by gencpp from file pr2_gripper_sensor_msgs/PR2GripperSlipServoData.msg
// DO NOT EDIT!


#ifndef PR2_GRIPPER_SENSOR_MSGS_MESSAGE_PR2GRIPPERSLIPSERVODATA_H
#define PR2_GRIPPER_SENSOR_MSGS_MESSAGE_PR2GRIPPERSLIPSERVODATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <pr2_gripper_sensor_msgs/PR2GripperSensorRTState.h>

namespace pr2_gripper_sensor_msgs
{
template <class ContainerAllocator>
struct PR2GripperSlipServoData_
{
  typedef PR2GripperSlipServoData_<ContainerAllocator> Type;

  PR2GripperSlipServoData_()
    : stamp()
    , deformation(0.0)
    , left_fingertip_pad_force(0.0)
    , right_fingertip_pad_force(0.0)
    , joint_effort(0.0)
    , slip_detected(false)
    , deformation_limit_reached(false)
    , fingertip_force_limit_reached(false)
    , gripper_empty(false)
    , rtstate()  {
    }
  PR2GripperSlipServoData_(const ContainerAllocator& _alloc)
    : stamp()
    , deformation(0.0)
    , left_fingertip_pad_force(0.0)
    , right_fingertip_pad_force(0.0)
    , joint_effort(0.0)
    , slip_detected(false)
    , deformation_limit_reached(false)
    , fingertip_force_limit_reached(false)
    , gripper_empty(false)
    , rtstate(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef double _deformation_type;
  _deformation_type deformation;

   typedef double _left_fingertip_pad_force_type;
  _left_fingertip_pad_force_type left_fingertip_pad_force;

   typedef double _right_fingertip_pad_force_type;
  _right_fingertip_pad_force_type right_fingertip_pad_force;

   typedef double _joint_effort_type;
  _joint_effort_type joint_effort;

   typedef uint8_t _slip_detected_type;
  _slip_detected_type slip_detected;

   typedef uint8_t _deformation_limit_reached_type;
  _deformation_limit_reached_type deformation_limit_reached;

   typedef uint8_t _fingertip_force_limit_reached_type;
  _fingertip_force_limit_reached_type fingertip_force_limit_reached;

   typedef uint8_t _gripper_empty_type;
  _gripper_empty_type gripper_empty;

   typedef  ::pr2_gripper_sensor_msgs::PR2GripperSensorRTState_<ContainerAllocator>  _rtstate_type;
  _rtstate_type rtstate;





  typedef boost::shared_ptr< ::pr2_gripper_sensor_msgs::PR2GripperSlipServoData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr2_gripper_sensor_msgs::PR2GripperSlipServoData_<ContainerAllocator> const> ConstPtr;

}; // struct PR2GripperSlipServoData_

typedef ::pr2_gripper_sensor_msgs::PR2GripperSlipServoData_<std::allocator<void> > PR2GripperSlipServoData;

typedef boost::shared_ptr< ::pr2_gripper_sensor_msgs::PR2GripperSlipServoData > PR2GripperSlipServoDataPtr;
typedef boost::shared_ptr< ::pr2_gripper_sensor_msgs::PR2GripperSlipServoData const> PR2GripperSlipServoDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pr2_gripper_sensor_msgs::PR2GripperSlipServoData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pr2_gripper_sensor_msgs::PR2GripperSlipServoData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pr2_gripper_sensor_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'pr2_gripper_sensor_msgs': ['/local-ssd1/All_Custom_Msgs/PendingActionPackagesPart2/matlab_msg_gen_ros1/glnxa64/src/pr2_gripper_sensor_msgs/msg', '/local-ssd1/All_Custom_Msgs/PendingActionPackagesPart2/matlab_msg_gen_ros1/glnxa64/devel/share/pr2_gripper_sensor_msgs/msg'], 'actionlib': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/actionlib/cmake/../msg'], 'std_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pr2_gripper_sensor_msgs::PR2GripperSlipServoData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pr2_gripper_sensor_msgs::PR2GripperSlipServoData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pr2_gripper_sensor_msgs::PR2GripperSlipServoData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pr2_gripper_sensor_msgs::PR2GripperSlipServoData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr2_gripper_sensor_msgs::PR2GripperSlipServoData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr2_gripper_sensor_msgs::PR2GripperSlipServoData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pr2_gripper_sensor_msgs::PR2GripperSlipServoData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a49728a2e0c40706b3c9b74046f006aa";
  }

  static const char* value(const ::pr2_gripper_sensor_msgs::PR2GripperSlipServoData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa49728a2e0c40706ULL;
  static const uint64_t static_value2 = 0xb3c9b74046f006aaULL;
};

template<class ContainerAllocator>
struct DataType< ::pr2_gripper_sensor_msgs::PR2GripperSlipServoData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pr2_gripper_sensor_msgs/PR2GripperSlipServoData";
  }

  static const char* value(const ::pr2_gripper_sensor_msgs::PR2GripperSlipServoData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pr2_gripper_sensor_msgs::PR2GripperSlipServoData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# time the data was recorded at\n"
"time stamp\n"
"\n"
"# the amount of deformation from action start (in meters)\n"
"float64 deformation\n"
"\n"
"# the force experinced by the finger Pads  (N)\n"
"# NOTE:this ignores data from the edges of the finger pressure\n"
"float64 left_fingertip_pad_force\n"
"float64 right_fingertip_pad_force\n"
"\n"
"# the current virtual parallel joint effort of the gripper (in N)\n"
"float64 joint_effort\n"
"\n"
"# true if the object recently slipped\n"
"bool slip_detected\n"
"\n"
"# true if we are at or exceeding the deformation limit\n"
"# (see wiki page and param server for more info)\n"
"bool deformation_limit_reached\n"
"\n"
"# true if we are at or exceeding our force \n"
"# (see wiki page and param server for more info)\n"
"bool fingertip_force_limit_reached\n"
"\n"
"# true if the controller thinks the gripper is empty\n"
"# (see wiki page for more info)\n"
"bool gripper_empty\n"
"\n"
"# the control state of our realtime controller\n"
"PR2GripperSensorRTState rtstate\n"
"================================================================================\n"
"MSG: pr2_gripper_sensor_msgs/PR2GripperSensorRTState\n"
"# the control state of our realtime controller\n"
"int8 realtime_controller_state\n"
"\n"
"# predefined values to indicate our realtime_controller_state\n"
"int8 DISABLED = 0\n"
"int8 POSITION_SERVO = 3\n"
"int8 FORCE_SERVO = 4\n"
"int8 FIND_CONTACT = 5\n"
"int8 SLIP_SERVO = 6\n"
;
  }

  static const char* value(const ::pr2_gripper_sensor_msgs::PR2GripperSlipServoData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pr2_gripper_sensor_msgs::PR2GripperSlipServoData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.deformation);
      stream.next(m.left_fingertip_pad_force);
      stream.next(m.right_fingertip_pad_force);
      stream.next(m.joint_effort);
      stream.next(m.slip_detected);
      stream.next(m.deformation_limit_reached);
      stream.next(m.fingertip_force_limit_reached);
      stream.next(m.gripper_empty);
      stream.next(m.rtstate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PR2GripperSlipServoData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr2_gripper_sensor_msgs::PR2GripperSlipServoData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pr2_gripper_sensor_msgs::PR2GripperSlipServoData_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "deformation: ";
    Printer<double>::stream(s, indent + "  ", v.deformation);
    s << indent << "left_fingertip_pad_force: ";
    Printer<double>::stream(s, indent + "  ", v.left_fingertip_pad_force);
    s << indent << "right_fingertip_pad_force: ";
    Printer<double>::stream(s, indent + "  ", v.right_fingertip_pad_force);
    s << indent << "joint_effort: ";
    Printer<double>::stream(s, indent + "  ", v.joint_effort);
    s << indent << "slip_detected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.slip_detected);
    s << indent << "deformation_limit_reached: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.deformation_limit_reached);
    s << indent << "fingertip_force_limit_reached: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fingertip_force_limit_reached);
    s << indent << "gripper_empty: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gripper_empty);
    s << indent << "rtstate: ";
    s << std::endl;
    Printer< ::pr2_gripper_sensor_msgs::PR2GripperSensorRTState_<ContainerAllocator> >::stream(s, indent + "  ", v.rtstate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PR2_GRIPPER_SENSOR_MSGS_MESSAGE_PR2GRIPPERSLIPSERVODATA_H
