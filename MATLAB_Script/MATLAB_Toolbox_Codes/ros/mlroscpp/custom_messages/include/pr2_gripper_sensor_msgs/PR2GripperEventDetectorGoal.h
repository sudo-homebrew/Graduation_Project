// Generated by gencpp from file pr2_gripper_sensor_msgs/PR2GripperEventDetectorGoal.msg
// DO NOT EDIT!


#ifndef PR2_GRIPPER_SENSOR_MSGS_MESSAGE_PR2GRIPPEREVENTDETECTORGOAL_H
#define PR2_GRIPPER_SENSOR_MSGS_MESSAGE_PR2GRIPPEREVENTDETECTORGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <pr2_gripper_sensor_msgs/PR2GripperEventDetectorCommand.h>

namespace pr2_gripper_sensor_msgs
{
template <class ContainerAllocator>
struct PR2GripperEventDetectorGoal_
{
  typedef PR2GripperEventDetectorGoal_<ContainerAllocator> Type;

  PR2GripperEventDetectorGoal_()
    : command()  {
    }
  PR2GripperEventDetectorGoal_(const ContainerAllocator& _alloc)
    : command(_alloc)  {
  (void)_alloc;
    }



   typedef  ::pr2_gripper_sensor_msgs::PR2GripperEventDetectorCommand_<ContainerAllocator>  _command_type;
  _command_type command;





  typedef boost::shared_ptr< ::pr2_gripper_sensor_msgs::PR2GripperEventDetectorGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr2_gripper_sensor_msgs::PR2GripperEventDetectorGoal_<ContainerAllocator> const> ConstPtr;

}; // struct PR2GripperEventDetectorGoal_

typedef ::pr2_gripper_sensor_msgs::PR2GripperEventDetectorGoal_<std::allocator<void> > PR2GripperEventDetectorGoal;

typedef boost::shared_ptr< ::pr2_gripper_sensor_msgs::PR2GripperEventDetectorGoal > PR2GripperEventDetectorGoalPtr;
typedef boost::shared_ptr< ::pr2_gripper_sensor_msgs::PR2GripperEventDetectorGoal const> PR2GripperEventDetectorGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pr2_gripper_sensor_msgs::PR2GripperEventDetectorGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pr2_gripper_sensor_msgs::PR2GripperEventDetectorGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pr2_gripper_sensor_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'pr2_gripper_sensor_msgs': ['/local-ssd1/All_Custom_Msgs/PendingActionPackagesPart2/matlab_msg_gen_ros1/glnxa64/src/pr2_gripper_sensor_msgs/msg', '/local-ssd1/All_Custom_Msgs/PendingActionPackagesPart2/matlab_msg_gen_ros1/glnxa64/devel/share/pr2_gripper_sensor_msgs/msg'], 'actionlib': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/actionlib/cmake/../msg'], 'std_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pr2_gripper_sensor_msgs::PR2GripperEventDetectorGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pr2_gripper_sensor_msgs::PR2GripperEventDetectorGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pr2_gripper_sensor_msgs::PR2GripperEventDetectorGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pr2_gripper_sensor_msgs::PR2GripperEventDetectorGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr2_gripper_sensor_msgs::PR2GripperEventDetectorGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr2_gripper_sensor_msgs::PR2GripperEventDetectorGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pr2_gripper_sensor_msgs::PR2GripperEventDetectorGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "88b98e578eece7bef53cd48d37d3253b";
  }

  static const char* value(const ::pr2_gripper_sensor_msgs::PR2GripperEventDetectorGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x88b98e578eece7beULL;
  static const uint64_t static_value2 = 0xf53cd48d37d3253bULL;
};

template<class ContainerAllocator>
struct DataType< ::pr2_gripper_sensor_msgs::PR2GripperEventDetectorGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pr2_gripper_sensor_msgs/PR2GripperEventDetectorGoal";
  }

  static const char* value(const ::pr2_gripper_sensor_msgs::PR2GripperEventDetectorGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pr2_gripper_sensor_msgs::PR2GripperEventDetectorGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Event Detector action used to tell detect events happening on the \n"
"# palm mounted accelerometer and finger pressure sensors\n"
"\n"
"#goal\n"
"PR2GripperEventDetectorCommand command\n"
"\n"
"================================================================================\n"
"MSG: pr2_gripper_sensor_msgs/PR2GripperEventDetectorCommand\n"
"# state variable that defines what events we would like to trigger on\n"
"# Leaving this field blank will result in the robot triggering when \n"
"# anything touches the sides of the finger or an impact is detected\n"
"# with the hand/arm.\n"
"int8 trigger_conditions\n"
"# definitions for our various trigger_conditions values\n"
"# trigger on either acceleration contact or finger sensor side impact\n"
"int8 FINGER_SIDE_IMPACT_OR_ACC = 0\n"
"# tigger once  both slip and acceleration signals occur\n"
"int8 SLIP_AND_ACC = 1 \n"
"#  trigger on either slip, acceleration, or finger sensor side impact\n"
"int8 FINGER_SIDE_IMPACT_OR_SLIP_OR_ACC = 2\n"
"# trigger only on slip information\n"
"int8 SLIP = 3\n"
"# trigger only on acceleration contact information\n"
"int8 ACC = 4 \n"
"\n"
"\n"
"# the amount of acceleration to trigger on (acceleration vector magnitude)\n"
"# Units = m/s^2\n"
"# The user needs to be concerned here about not setting the trigger too\n"
"# low so that is set off by the robot's own motions.\n"
"#\n"
"# For large rapid motions, say by a motion planner, 5 m/s^2 is a good level\n"
"# For small delicate controlled motions this can be set MUCH lower (try 2.0)\n"
"#\n"
"# NOTE: When moving the gripper joint (opening/closing the grippr)\n"
"# the high gearing of the PR2 gripper causes large acceleration vibrations\n"
"# which will cause triggering to occur. This is a known drawback of the PR2.\n"
"#\n"
"# NOTE: Leaving this value blank will result in a 0 m/s^2 trigger. If you\n"
"# are using a trigger_conditions value that returns on acceleration contact\n"
"# events then it will immediately exceed your trigger and return\n"
"float64 acceleration_trigger_magnitude\n"
"\n"
"\n"
"# the slip detector gain to trigger on (either finger) : try 0.01\n"
"# higher values decrease slip sensitivty (to a point)\n"
"# lower values increase sensitivity (to a point)\n"
"#\n"
"# NOTE: Leaving this value blank will result in the most sensitive slip level.\n"
"float64 slip_trigger_magnitude\n"
;
  }

  static const char* value(const ::pr2_gripper_sensor_msgs::PR2GripperEventDetectorGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pr2_gripper_sensor_msgs::PR2GripperEventDetectorGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.command);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PR2GripperEventDetectorGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr2_gripper_sensor_msgs::PR2GripperEventDetectorGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pr2_gripper_sensor_msgs::PR2GripperEventDetectorGoal_<ContainerAllocator>& v)
  {
    s << indent << "command: ";
    s << std::endl;
    Printer< ::pr2_gripper_sensor_msgs::PR2GripperEventDetectorCommand_<ContainerAllocator> >::stream(s, indent + "  ", v.command);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PR2_GRIPPER_SENSOR_MSGS_MESSAGE_PR2GRIPPEREVENTDETECTORGOAL_H
