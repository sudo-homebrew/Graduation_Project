// Generated by gencpp from file pr2_gripper_sensor_msgs/PR2GripperPressureData.msg
// DO NOT EDIT!


#ifndef PR2_GRIPPER_SENSOR_MSGS_MESSAGE_PR2GRIPPERPRESSUREDATA_H
#define PR2_GRIPPER_SENSOR_MSGS_MESSAGE_PR2GRIPPERPRESSUREDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pr2_gripper_sensor_msgs
{
template <class ContainerAllocator>
struct PR2GripperPressureData_
{
  typedef PR2GripperPressureData_<ContainerAllocator> Type;

  PR2GripperPressureData_()
    : pressure_left()
    , pressure_right()
    , rostime(0.0)  {
      pressure_left.assign(0.0);

      pressure_right.assign(0.0);
  }
  PR2GripperPressureData_(const ContainerAllocator& _alloc)
    : pressure_left()
    , pressure_right()
    , rostime(0.0)  {
  (void)_alloc;
      pressure_left.assign(0.0);

      pressure_right.assign(0.0);
  }



   typedef boost::array<double, 22>  _pressure_left_type;
  _pressure_left_type pressure_left;

   typedef boost::array<double, 22>  _pressure_right_type;
  _pressure_right_type pressure_right;

   typedef double _rostime_type;
  _rostime_type rostime;





  typedef boost::shared_ptr< ::pr2_gripper_sensor_msgs::PR2GripperPressureData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr2_gripper_sensor_msgs::PR2GripperPressureData_<ContainerAllocator> const> ConstPtr;

}; // struct PR2GripperPressureData_

typedef ::pr2_gripper_sensor_msgs::PR2GripperPressureData_<std::allocator<void> > PR2GripperPressureData;

typedef boost::shared_ptr< ::pr2_gripper_sensor_msgs::PR2GripperPressureData > PR2GripperPressureDataPtr;
typedef boost::shared_ptr< ::pr2_gripper_sensor_msgs::PR2GripperPressureData const> PR2GripperPressureDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pr2_gripper_sensor_msgs::PR2GripperPressureData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pr2_gripper_sensor_msgs::PR2GripperPressureData_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pr2_gripper_sensor_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'pr2_gripper_sensor_msgs': ['/local-ssd1/All_Custom_Msgs/PendingActionPackagesPart2/matlab_msg_gen_ros1/glnxa64/src/pr2_gripper_sensor_msgs/msg', '/local-ssd1/All_Custom_Msgs/PendingActionPackagesPart2/matlab_msg_gen_ros1/glnxa64/devel/share/pr2_gripper_sensor_msgs/msg'], 'actionlib': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/actionlib/cmake/../msg'], 'std_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pr2_gripper_sensor_msgs::PR2GripperPressureData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pr2_gripper_sensor_msgs::PR2GripperPressureData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pr2_gripper_sensor_msgs::PR2GripperPressureData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pr2_gripper_sensor_msgs::PR2GripperPressureData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr2_gripper_sensor_msgs::PR2GripperPressureData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr2_gripper_sensor_msgs::PR2GripperPressureData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pr2_gripper_sensor_msgs::PR2GripperPressureData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b69255f5117bf05fdcd1e83d4e6ab779";
  }

  static const char* value(const ::pr2_gripper_sensor_msgs::PR2GripperPressureData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb69255f5117bf05fULL;
  static const uint64_t static_value2 = 0xdcd1e83d4e6ab779ULL;
};

template<class ContainerAllocator>
struct DataType< ::pr2_gripper_sensor_msgs::PR2GripperPressureData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pr2_gripper_sensor_msgs/PR2GripperPressureData";
  }

  static const char* value(const ::pr2_gripper_sensor_msgs::PR2GripperPressureData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pr2_gripper_sensor_msgs::PR2GripperPressureData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Note: This message is intended for internal package use only and is NOT a part of the public API. This data is not publicaly published in ROS.\n"
"\n"
"# the pressure array for the left and right fingers\n"
"float64[22] pressure_left\n"
"float64[22] pressure_right\n"
"\n"
"float64 rostime\n"
;
  }

  static const char* value(const ::pr2_gripper_sensor_msgs::PR2GripperPressureData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pr2_gripper_sensor_msgs::PR2GripperPressureData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pressure_left);
      stream.next(m.pressure_right);
      stream.next(m.rostime);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PR2GripperPressureData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr2_gripper_sensor_msgs::PR2GripperPressureData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pr2_gripper_sensor_msgs::PR2GripperPressureData_<ContainerAllocator>& v)
  {
    s << indent << "pressure_left[]" << std::endl;
    for (size_t i = 0; i < v.pressure_left.size(); ++i)
    {
      s << indent << "  pressure_left[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.pressure_left[i]);
    }
    s << indent << "pressure_right[]" << std::endl;
    for (size_t i = 0; i < v.pressure_right.size(); ++i)
    {
      s << indent << "  pressure_right[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.pressure_right[i]);
    }
    s << indent << "rostime: ";
    Printer<double>::stream(s, indent + "  ", v.rostime);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PR2_GRIPPER_SENSOR_MSGS_MESSAGE_PR2GRIPPERPRESSUREDATA_H
