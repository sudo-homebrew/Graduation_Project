// Generated by gencpp from file pr2_gripper_sensor_msgs/PR2GripperForceServoCommand.msg
// DO NOT EDIT!


#ifndef PR2_GRIPPER_SENSOR_MSGS_MESSAGE_PR2GRIPPERFORCESERVOCOMMAND_H
#define PR2_GRIPPER_SENSOR_MSGS_MESSAGE_PR2GRIPPERFORCESERVOCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pr2_gripper_sensor_msgs
{
template <class ContainerAllocator>
struct PR2GripperForceServoCommand_
{
  typedef PR2GripperForceServoCommand_<ContainerAllocator> Type;

  PR2GripperForceServoCommand_()
    : fingertip_force(0.0)  {
    }
  PR2GripperForceServoCommand_(const ContainerAllocator& _alloc)
    : fingertip_force(0.0)  {
  (void)_alloc;
    }



   typedef double _fingertip_force_type;
  _fingertip_force_type fingertip_force;





  typedef boost::shared_ptr< ::pr2_gripper_sensor_msgs::PR2GripperForceServoCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr2_gripper_sensor_msgs::PR2GripperForceServoCommand_<ContainerAllocator> const> ConstPtr;

}; // struct PR2GripperForceServoCommand_

typedef ::pr2_gripper_sensor_msgs::PR2GripperForceServoCommand_<std::allocator<void> > PR2GripperForceServoCommand;

typedef boost::shared_ptr< ::pr2_gripper_sensor_msgs::PR2GripperForceServoCommand > PR2GripperForceServoCommandPtr;
typedef boost::shared_ptr< ::pr2_gripper_sensor_msgs::PR2GripperForceServoCommand const> PR2GripperForceServoCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pr2_gripper_sensor_msgs::PR2GripperForceServoCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pr2_gripper_sensor_msgs::PR2GripperForceServoCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace pr2_gripper_sensor_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'pr2_gripper_sensor_msgs': ['/local-ssd1/All_Custom_Msgs/PendingActionPackagesPart2/matlab_msg_gen_ros1/glnxa64/src/pr2_gripper_sensor_msgs/msg', '/local-ssd1/All_Custom_Msgs/PendingActionPackagesPart2/matlab_msg_gen_ros1/glnxa64/devel/share/pr2_gripper_sensor_msgs/msg'], 'actionlib': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/actionlib/cmake/../msg'], 'std_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/mathworks/devel/sbs/31/hakakarl.Brobot.j1347395/matlab/sys/ros1/glnxa64/ros1/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::pr2_gripper_sensor_msgs::PR2GripperForceServoCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pr2_gripper_sensor_msgs::PR2GripperForceServoCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pr2_gripper_sensor_msgs::PR2GripperForceServoCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pr2_gripper_sensor_msgs::PR2GripperForceServoCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr2_gripper_sensor_msgs::PR2GripperForceServoCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr2_gripper_sensor_msgs::PR2GripperForceServoCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pr2_gripper_sensor_msgs::PR2GripperForceServoCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dd4b2a0dfafa27b67d2002841f544379";
  }

  static const char* value(const ::pr2_gripper_sensor_msgs::PR2GripperForceServoCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdd4b2a0dfafa27b6ULL;
  static const uint64_t static_value2 = 0x7d2002841f544379ULL;
};

template<class ContainerAllocator>
struct DataType< ::pr2_gripper_sensor_msgs::PR2GripperForceServoCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pr2_gripper_sensor_msgs/PR2GripperForceServoCommand";
  }

  static const char* value(const ::pr2_gripper_sensor_msgs::PR2GripperForceServoCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pr2_gripper_sensor_msgs::PR2GripperForceServoCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# the amount of fingertip force (in Newtons) to apply.\n"
"# NOTE: the joint will squeeze until each finger reaches this level\n"
"# values < 0 (opening force) are ignored\n"
"#\n"
"# 10 N can crack an egg or crush a soda can.\n"
"# 15 N can firmly pick up a can of soup.\n"
"# Experiment on your own.\n"
"#\n"
"float64 fingertip_force\n"
;
  }

  static const char* value(const ::pr2_gripper_sensor_msgs::PR2GripperForceServoCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pr2_gripper_sensor_msgs::PR2GripperForceServoCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.fingertip_force);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PR2GripperForceServoCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr2_gripper_sensor_msgs::PR2GripperForceServoCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pr2_gripper_sensor_msgs::PR2GripperForceServoCommand_<ContainerAllocator>& v)
  {
    s << indent << "fingertip_force: ";
    Printer<double>::stream(s, indent + "  ", v.fingertip_force);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PR2_GRIPPER_SENSOR_MSGS_MESSAGE_PR2GRIPPERFORCESERVOCOMMAND_H
