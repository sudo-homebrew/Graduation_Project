// Generated by gencpp from file nao_interaction_msgs/FaceDetected.msg
// DO NOT EDIT!


#ifndef NAO_INTERACTION_MSGS_MESSAGE_FACEDETECTED_H
#define NAO_INTERACTION_MSGS_MESSAGE_FACEDETECTED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/String.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>
#include <std_msgs/Int32.h>

namespace nao_interaction_msgs
{
template <class ContainerAllocator>
struct FaceDetected_
{
  typedef FaceDetected_<ContainerAllocator> Type;

  FaceDetected_()
    : header()
    , face_id()
    , score_reco()
    , face_label()
    , shape_alpha()
    , shape_beta()
    , shape_sizeX()
    , shape_sizeY()
    , right_eye_eyeCenter_x()
    , right_eye_eyeCenter_y()
    , right_eye_noseSideLimit_x()
    , right_eye_noseSideLimit_y()
    , right_eye_earSideLimit_x()
    , right_eye_earSideLimit_y()
    , right_eye_topLimit_x()
    , right_eye_topLimit_y()
    , right_eye_bottomLimit_x()
    , right_eye_bottomLimit_y()
    , right_eye_midTopEarLimit_x()
    , right_eye_midTopEarLimit_y()
    , right_eye_midTopNoseLimit_x()
    , right_eye_midTopNoseLimit_y()
    , left_eye_eyeCenter_x()
    , left_eye_eyeCenter_y()
    , left_eye_noseSideLimit_x()
    , left_eye_noseSideLimit_y()
    , left_eye_earSideLimit_x()
    , left_eye_earSideLimit_y()
    , left_eye_topLimit_x()
    , left_eye_topLimit_y()
    , left_eye_bottomLimit_x()
    , left_eye_bottomLimit_y()
    , left_eye_midTopEarLimit_x()
    , left_eye_midTopEarLimit_y()
    , left_eye_midTopNoseLimit_x()
    , left_eye_midTopNoseLimit_y()
    , right_eyebrow_noseSideLimit_x()
    , right_eyebrow_noseSideLimit_y()
    , right_eyebrow_center_x()
    , right_eyebrow_center_y()
    , right_eyebrow_earSideLimit_x()
    , right_eyebrow_earSideLimit_y()
    , left_eyebrow_noseSideLimit_x()
    , left_eyebrow_noseSideLimit_y()
    , left_eyebrow_center_x()
    , left_eyebrow_center_y()
    , left_eyebrow_earSideLimit_x()
    , left_eyebrow_earSideLimit_y()
    , nose_bottomCenterLimit_x()
    , nose_bottomCenterLimit_y()
    , nose_bottomLeftLimit_x()
    , nose_bottomLeftLimit_y()
    , nose_bottomRightLimit_x()
    , nose_bottomRightLimit_y()
    , mouth_leftLimit_x()
    , mouth_leftLimit_y()
    , mouth_rightLimit_x()
    , mouth_rightLimit_y()
    , mouth_topLimit_x()
    , mouth_topLimit_y()
    , mouth_bottomLimit_x()
    , mouth_bottomLimit_y()
    , mouth_midTopLeftLimit_x()
    , mouth_midTopLeftLimit_y()
    , mouth_midTopRightLimit_x()
    , mouth_midTopRightLimit_y()
    , mouth_midBottomRightLimit_x()
    , mouth_midBottomRightLimit_y()
    , mouth_midBottomLeftLimit_x()
    , mouth_midBottomLeftLimit_y()
    , camera_0_pose()
    , camera_1_pose()
    , camera_id()  {
    }
  FaceDetected_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , face_id(_alloc)
    , score_reco(_alloc)
    , face_label(_alloc)
    , shape_alpha(_alloc)
    , shape_beta(_alloc)
    , shape_sizeX(_alloc)
    , shape_sizeY(_alloc)
    , right_eye_eyeCenter_x(_alloc)
    , right_eye_eyeCenter_y(_alloc)
    , right_eye_noseSideLimit_x(_alloc)
    , right_eye_noseSideLimit_y(_alloc)
    , right_eye_earSideLimit_x(_alloc)
    , right_eye_earSideLimit_y(_alloc)
    , right_eye_topLimit_x(_alloc)
    , right_eye_topLimit_y(_alloc)
    , right_eye_bottomLimit_x(_alloc)
    , right_eye_bottomLimit_y(_alloc)
    , right_eye_midTopEarLimit_x(_alloc)
    , right_eye_midTopEarLimit_y(_alloc)
    , right_eye_midTopNoseLimit_x(_alloc)
    , right_eye_midTopNoseLimit_y(_alloc)
    , left_eye_eyeCenter_x(_alloc)
    , left_eye_eyeCenter_y(_alloc)
    , left_eye_noseSideLimit_x(_alloc)
    , left_eye_noseSideLimit_y(_alloc)
    , left_eye_earSideLimit_x(_alloc)
    , left_eye_earSideLimit_y(_alloc)
    , left_eye_topLimit_x(_alloc)
    , left_eye_topLimit_y(_alloc)
    , left_eye_bottomLimit_x(_alloc)
    , left_eye_bottomLimit_y(_alloc)
    , left_eye_midTopEarLimit_x(_alloc)
    , left_eye_midTopEarLimit_y(_alloc)
    , left_eye_midTopNoseLimit_x(_alloc)
    , left_eye_midTopNoseLimit_y(_alloc)
    , right_eyebrow_noseSideLimit_x(_alloc)
    , right_eyebrow_noseSideLimit_y(_alloc)
    , right_eyebrow_center_x(_alloc)
    , right_eyebrow_center_y(_alloc)
    , right_eyebrow_earSideLimit_x(_alloc)
    , right_eyebrow_earSideLimit_y(_alloc)
    , left_eyebrow_noseSideLimit_x(_alloc)
    , left_eyebrow_noseSideLimit_y(_alloc)
    , left_eyebrow_center_x(_alloc)
    , left_eyebrow_center_y(_alloc)
    , left_eyebrow_earSideLimit_x(_alloc)
    , left_eyebrow_earSideLimit_y(_alloc)
    , nose_bottomCenterLimit_x(_alloc)
    , nose_bottomCenterLimit_y(_alloc)
    , nose_bottomLeftLimit_x(_alloc)
    , nose_bottomLeftLimit_y(_alloc)
    , nose_bottomRightLimit_x(_alloc)
    , nose_bottomRightLimit_y(_alloc)
    , mouth_leftLimit_x(_alloc)
    , mouth_leftLimit_y(_alloc)
    , mouth_rightLimit_x(_alloc)
    , mouth_rightLimit_y(_alloc)
    , mouth_topLimit_x(_alloc)
    , mouth_topLimit_y(_alloc)
    , mouth_bottomLimit_x(_alloc)
    , mouth_bottomLimit_y(_alloc)
    , mouth_midTopLeftLimit_x(_alloc)
    , mouth_midTopLeftLimit_y(_alloc)
    , mouth_midTopRightLimit_x(_alloc)
    , mouth_midTopRightLimit_y(_alloc)
    , mouth_midBottomRightLimit_x(_alloc)
    , mouth_midBottomRightLimit_y(_alloc)
    , mouth_midBottomLeftLimit_x(_alloc)
    , mouth_midBottomLeftLimit_y(_alloc)
    , camera_0_pose(_alloc)
    , camera_1_pose(_alloc)
    , camera_id(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _face_id_type;
  _face_id_type face_id;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _score_reco_type;
  _score_reco_type score_reco;

   typedef  ::std_msgs::String_<ContainerAllocator>  _face_label_type;
  _face_label_type face_label;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _shape_alpha_type;
  _shape_alpha_type shape_alpha;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _shape_beta_type;
  _shape_beta_type shape_beta;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _shape_sizeX_type;
  _shape_sizeX_type shape_sizeX;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _shape_sizeY_type;
  _shape_sizeY_type shape_sizeY;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _right_eye_eyeCenter_x_type;
  _right_eye_eyeCenter_x_type right_eye_eyeCenter_x;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _right_eye_eyeCenter_y_type;
  _right_eye_eyeCenter_y_type right_eye_eyeCenter_y;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _right_eye_noseSideLimit_x_type;
  _right_eye_noseSideLimit_x_type right_eye_noseSideLimit_x;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _right_eye_noseSideLimit_y_type;
  _right_eye_noseSideLimit_y_type right_eye_noseSideLimit_y;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _right_eye_earSideLimit_x_type;
  _right_eye_earSideLimit_x_type right_eye_earSideLimit_x;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _right_eye_earSideLimit_y_type;
  _right_eye_earSideLimit_y_type right_eye_earSideLimit_y;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _right_eye_topLimit_x_type;
  _right_eye_topLimit_x_type right_eye_topLimit_x;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _right_eye_topLimit_y_type;
  _right_eye_topLimit_y_type right_eye_topLimit_y;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _right_eye_bottomLimit_x_type;
  _right_eye_bottomLimit_x_type right_eye_bottomLimit_x;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _right_eye_bottomLimit_y_type;
  _right_eye_bottomLimit_y_type right_eye_bottomLimit_y;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _right_eye_midTopEarLimit_x_type;
  _right_eye_midTopEarLimit_x_type right_eye_midTopEarLimit_x;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _right_eye_midTopEarLimit_y_type;
  _right_eye_midTopEarLimit_y_type right_eye_midTopEarLimit_y;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _right_eye_midTopNoseLimit_x_type;
  _right_eye_midTopNoseLimit_x_type right_eye_midTopNoseLimit_x;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _right_eye_midTopNoseLimit_y_type;
  _right_eye_midTopNoseLimit_y_type right_eye_midTopNoseLimit_y;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _left_eye_eyeCenter_x_type;
  _left_eye_eyeCenter_x_type left_eye_eyeCenter_x;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _left_eye_eyeCenter_y_type;
  _left_eye_eyeCenter_y_type left_eye_eyeCenter_y;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _left_eye_noseSideLimit_x_type;
  _left_eye_noseSideLimit_x_type left_eye_noseSideLimit_x;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _left_eye_noseSideLimit_y_type;
  _left_eye_noseSideLimit_y_type left_eye_noseSideLimit_y;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _left_eye_earSideLimit_x_type;
  _left_eye_earSideLimit_x_type left_eye_earSideLimit_x;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _left_eye_earSideLimit_y_type;
  _left_eye_earSideLimit_y_type left_eye_earSideLimit_y;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _left_eye_topLimit_x_type;
  _left_eye_topLimit_x_type left_eye_topLimit_x;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _left_eye_topLimit_y_type;
  _left_eye_topLimit_y_type left_eye_topLimit_y;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _left_eye_bottomLimit_x_type;
  _left_eye_bottomLimit_x_type left_eye_bottomLimit_x;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _left_eye_bottomLimit_y_type;
  _left_eye_bottomLimit_y_type left_eye_bottomLimit_y;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _left_eye_midTopEarLimit_x_type;
  _left_eye_midTopEarLimit_x_type left_eye_midTopEarLimit_x;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _left_eye_midTopEarLimit_y_type;
  _left_eye_midTopEarLimit_y_type left_eye_midTopEarLimit_y;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _left_eye_midTopNoseLimit_x_type;
  _left_eye_midTopNoseLimit_x_type left_eye_midTopNoseLimit_x;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _left_eye_midTopNoseLimit_y_type;
  _left_eye_midTopNoseLimit_y_type left_eye_midTopNoseLimit_y;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _right_eyebrow_noseSideLimit_x_type;
  _right_eyebrow_noseSideLimit_x_type right_eyebrow_noseSideLimit_x;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _right_eyebrow_noseSideLimit_y_type;
  _right_eyebrow_noseSideLimit_y_type right_eyebrow_noseSideLimit_y;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _right_eyebrow_center_x_type;
  _right_eyebrow_center_x_type right_eyebrow_center_x;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _right_eyebrow_center_y_type;
  _right_eyebrow_center_y_type right_eyebrow_center_y;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _right_eyebrow_earSideLimit_x_type;
  _right_eyebrow_earSideLimit_x_type right_eyebrow_earSideLimit_x;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _right_eyebrow_earSideLimit_y_type;
  _right_eyebrow_earSideLimit_y_type right_eyebrow_earSideLimit_y;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _left_eyebrow_noseSideLimit_x_type;
  _left_eyebrow_noseSideLimit_x_type left_eyebrow_noseSideLimit_x;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _left_eyebrow_noseSideLimit_y_type;
  _left_eyebrow_noseSideLimit_y_type left_eyebrow_noseSideLimit_y;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _left_eyebrow_center_x_type;
  _left_eyebrow_center_x_type left_eyebrow_center_x;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _left_eyebrow_center_y_type;
  _left_eyebrow_center_y_type left_eyebrow_center_y;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _left_eyebrow_earSideLimit_x_type;
  _left_eyebrow_earSideLimit_x_type left_eyebrow_earSideLimit_x;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _left_eyebrow_earSideLimit_y_type;
  _left_eyebrow_earSideLimit_y_type left_eyebrow_earSideLimit_y;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _nose_bottomCenterLimit_x_type;
  _nose_bottomCenterLimit_x_type nose_bottomCenterLimit_x;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _nose_bottomCenterLimit_y_type;
  _nose_bottomCenterLimit_y_type nose_bottomCenterLimit_y;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _nose_bottomLeftLimit_x_type;
  _nose_bottomLeftLimit_x_type nose_bottomLeftLimit_x;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _nose_bottomLeftLimit_y_type;
  _nose_bottomLeftLimit_y_type nose_bottomLeftLimit_y;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _nose_bottomRightLimit_x_type;
  _nose_bottomRightLimit_x_type nose_bottomRightLimit_x;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _nose_bottomRightLimit_y_type;
  _nose_bottomRightLimit_y_type nose_bottomRightLimit_y;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _mouth_leftLimit_x_type;
  _mouth_leftLimit_x_type mouth_leftLimit_x;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _mouth_leftLimit_y_type;
  _mouth_leftLimit_y_type mouth_leftLimit_y;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _mouth_rightLimit_x_type;
  _mouth_rightLimit_x_type mouth_rightLimit_x;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _mouth_rightLimit_y_type;
  _mouth_rightLimit_y_type mouth_rightLimit_y;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _mouth_topLimit_x_type;
  _mouth_topLimit_x_type mouth_topLimit_x;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _mouth_topLimit_y_type;
  _mouth_topLimit_y_type mouth_topLimit_y;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _mouth_bottomLimit_x_type;
  _mouth_bottomLimit_x_type mouth_bottomLimit_x;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _mouth_bottomLimit_y_type;
  _mouth_bottomLimit_y_type mouth_bottomLimit_y;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _mouth_midTopLeftLimit_x_type;
  _mouth_midTopLeftLimit_x_type mouth_midTopLeftLimit_x;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _mouth_midTopLeftLimit_y_type;
  _mouth_midTopLeftLimit_y_type mouth_midTopLeftLimit_y;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _mouth_midTopRightLimit_x_type;
  _mouth_midTopRightLimit_x_type mouth_midTopRightLimit_x;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _mouth_midTopRightLimit_y_type;
  _mouth_midTopRightLimit_y_type mouth_midTopRightLimit_y;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _mouth_midBottomRightLimit_x_type;
  _mouth_midBottomRightLimit_x_type mouth_midBottomRightLimit_x;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _mouth_midBottomRightLimit_y_type;
  _mouth_midBottomRightLimit_y_type mouth_midBottomRightLimit_y;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _mouth_midBottomLeftLimit_x_type;
  _mouth_midBottomLeftLimit_x_type mouth_midBottomLeftLimit_x;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _mouth_midBottomLeftLimit_y_type;
  _mouth_midBottomLeftLimit_y_type mouth_midBottomLeftLimit_y;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _camera_0_pose_type;
  _camera_0_pose_type camera_0_pose;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _camera_1_pose_type;
  _camera_1_pose_type camera_1_pose;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _camera_id_type;
  _camera_id_type camera_id;





  typedef boost::shared_ptr< ::nao_interaction_msgs::FaceDetected_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nao_interaction_msgs::FaceDetected_<ContainerAllocator> const> ConstPtr;

}; // struct FaceDetected_

typedef ::nao_interaction_msgs::FaceDetected_<std::allocator<void> > FaceDetected;

typedef boost::shared_ptr< ::nao_interaction_msgs::FaceDetected > FaceDetectedPtr;
typedef boost::shared_ptr< ::nao_interaction_msgs::FaceDetected const> FaceDetectedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nao_interaction_msgs::FaceDetected_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nao_interaction_msgs::FaceDetected_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace nao_interaction_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'nao_interaction_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/nao_interaction_msgs/msg'], 'geometry_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/geometry_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::nao_interaction_msgs::FaceDetected_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nao_interaction_msgs::FaceDetected_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nao_interaction_msgs::FaceDetected_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nao_interaction_msgs::FaceDetected_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nao_interaction_msgs::FaceDetected_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nao_interaction_msgs::FaceDetected_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nao_interaction_msgs::FaceDetected_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3b3868bc92bb74386686642b1cf73f53";
  }

  static const char* value(const ::nao_interaction_msgs::FaceDetected_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3b3868bc92bb7438ULL;
  static const uint64_t static_value2 = 0x6686642b1cf73f53ULL;
};

template<class ContainerAllocator>
struct DataType< ::nao_interaction_msgs::FaceDetected_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nao_interaction_msgs/FaceDetected";
  }

  static const char* value(const ::nao_interaction_msgs::FaceDetected_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nao_interaction_msgs::FaceDetected_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message emitted by Nao face detection module.\n"
"# It contains the list of faces detected and the cameras poses\n"
"\n"
"Header header\n"
"\n"
"# Face-specific related information\n"
"\n"
"std_msgs/Int32 face_id\n"
"std_msgs/Float32 score_reco\n"
"std_msgs/String face_label\n"
"\n"
"# Shape related information\n"
"\n"
"std_msgs/Float32 shape_alpha\n"
"std_msgs/Float32 shape_beta\n"
"std_msgs/Float32 shape_sizeX\n"
"std_msgs/Float32 shape_sizeY\n"
"\n"
"# Eyes related information\n"
"\n"
"std_msgs/Float32 right_eye_eyeCenter_x\n"
"std_msgs/Float32 right_eye_eyeCenter_y\n"
"std_msgs/Float32 right_eye_noseSideLimit_x\n"
"std_msgs/Float32 right_eye_noseSideLimit_y\n"
"std_msgs/Float32 right_eye_earSideLimit_x\n"
"std_msgs/Float32 right_eye_earSideLimit_y\n"
"std_msgs/Float32 right_eye_topLimit_x\n"
"std_msgs/Float32 right_eye_topLimit_y\n"
"std_msgs/Float32 right_eye_bottomLimit_x\n"
"std_msgs/Float32 right_eye_bottomLimit_y\n"
"std_msgs/Float32 right_eye_midTopEarLimit_x\n"
"std_msgs/Float32 right_eye_midTopEarLimit_y\n"
"std_msgs/Float32 right_eye_midTopNoseLimit_x\n"
"std_msgs/Float32 right_eye_midTopNoseLimit_y\n"
"\n"
"std_msgs/Float32 left_eye_eyeCenter_x\n"
"std_msgs/Float32 left_eye_eyeCenter_y\n"
"std_msgs/Float32 left_eye_noseSideLimit_x\n"
"std_msgs/Float32 left_eye_noseSideLimit_y\n"
"std_msgs/Float32 left_eye_earSideLimit_x\n"
"std_msgs/Float32 left_eye_earSideLimit_y\n"
"std_msgs/Float32 left_eye_topLimit_x\n"
"std_msgs/Float32 left_eye_topLimit_y\n"
"std_msgs/Float32 left_eye_bottomLimit_x\n"
"std_msgs/Float32 left_eye_bottomLimit_y\n"
"std_msgs/Float32 left_eye_midTopEarLimit_x\n"
"std_msgs/Float32 left_eye_midTopEarLimit_y\n"
"std_msgs/Float32 left_eye_midTopNoseLimit_x\n"
"std_msgs/Float32 left_eye_midTopNoseLimit_y\n"
"\n"
"# Eyebrows related information\n"
"\n"
"std_msgs/Float32 right_eyebrow_noseSideLimit_x\n"
"std_msgs/Float32 right_eyebrow_noseSideLimit_y\n"
"std_msgs/Float32 right_eyebrow_center_x\n"
"std_msgs/Float32 right_eyebrow_center_y\n"
"std_msgs/Float32 right_eyebrow_earSideLimit_x\n"
"std_msgs/Float32 right_eyebrow_earSideLimit_y\n"
"\n"
"std_msgs/Float32 left_eyebrow_noseSideLimit_x\n"
"std_msgs/Float32 left_eyebrow_noseSideLimit_y\n"
"std_msgs/Float32 left_eyebrow_center_x\n"
"std_msgs/Float32 left_eyebrow_center_y\n"
"std_msgs/Float32 left_eyebrow_earSideLimit_x\n"
"std_msgs/Float32 left_eyebrow_earSideLimit_y\n"
"\n"
"# Nose related information\n"
"\n"
"std_msgs/Float32 nose_bottomCenterLimit_x\n"
"std_msgs/Float32 nose_bottomCenterLimit_y\n"
"std_msgs/Float32 nose_bottomLeftLimit_x\n"
"std_msgs/Float32 nose_bottomLeftLimit_y\n"
"std_msgs/Float32 nose_bottomRightLimit_x\n"
"std_msgs/Float32 nose_bottomRightLimit_y\n"
"\n"
"# Mouth related information\n"
"\n"
"std_msgs/Float32 mouth_leftLimit_x\n"
"std_msgs/Float32 mouth_leftLimit_y\n"
"std_msgs/Float32 mouth_rightLimit_x\n"
"std_msgs/Float32 mouth_rightLimit_y\n"
"std_msgs/Float32 mouth_topLimit_x\n"
"std_msgs/Float32 mouth_topLimit_y\n"
"std_msgs/Float32 mouth_bottomLimit_x\n"
"std_msgs/Float32 mouth_bottomLimit_y\n"
"std_msgs/Float32 mouth_midTopLeftLimit_x\n"
"std_msgs/Float32 mouth_midTopLeftLimit_y\n"
"std_msgs/Float32 mouth_midTopRightLimit_x\n"
"std_msgs/Float32 mouth_midTopRightLimit_y\n"
"std_msgs/Float32 mouth_midBottomRightLimit_x\n"
"std_msgs/Float32 mouth_midBottomRightLimit_y\n"
"std_msgs/Float32 mouth_midBottomLeftLimit_x\n"
"std_msgs/Float32 mouth_midBottomLeftLimit_y\n"
"\n"
"# Camera related information\n"
"\n"
"geometry_msgs/Pose camera_0_pose\n"
"geometry_msgs/Pose camera_1_pose\n"
"std_msgs/Int32 camera_id\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Int32\n"
"int32 data\n"
"================================================================================\n"
"MSG: std_msgs/Float32\n"
"float32 data\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of postion and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::nao_interaction_msgs::FaceDetected_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nao_interaction_msgs::FaceDetected_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.face_id);
      stream.next(m.score_reco);
      stream.next(m.face_label);
      stream.next(m.shape_alpha);
      stream.next(m.shape_beta);
      stream.next(m.shape_sizeX);
      stream.next(m.shape_sizeY);
      stream.next(m.right_eye_eyeCenter_x);
      stream.next(m.right_eye_eyeCenter_y);
      stream.next(m.right_eye_noseSideLimit_x);
      stream.next(m.right_eye_noseSideLimit_y);
      stream.next(m.right_eye_earSideLimit_x);
      stream.next(m.right_eye_earSideLimit_y);
      stream.next(m.right_eye_topLimit_x);
      stream.next(m.right_eye_topLimit_y);
      stream.next(m.right_eye_bottomLimit_x);
      stream.next(m.right_eye_bottomLimit_y);
      stream.next(m.right_eye_midTopEarLimit_x);
      stream.next(m.right_eye_midTopEarLimit_y);
      stream.next(m.right_eye_midTopNoseLimit_x);
      stream.next(m.right_eye_midTopNoseLimit_y);
      stream.next(m.left_eye_eyeCenter_x);
      stream.next(m.left_eye_eyeCenter_y);
      stream.next(m.left_eye_noseSideLimit_x);
      stream.next(m.left_eye_noseSideLimit_y);
      stream.next(m.left_eye_earSideLimit_x);
      stream.next(m.left_eye_earSideLimit_y);
      stream.next(m.left_eye_topLimit_x);
      stream.next(m.left_eye_topLimit_y);
      stream.next(m.left_eye_bottomLimit_x);
      stream.next(m.left_eye_bottomLimit_y);
      stream.next(m.left_eye_midTopEarLimit_x);
      stream.next(m.left_eye_midTopEarLimit_y);
      stream.next(m.left_eye_midTopNoseLimit_x);
      stream.next(m.left_eye_midTopNoseLimit_y);
      stream.next(m.right_eyebrow_noseSideLimit_x);
      stream.next(m.right_eyebrow_noseSideLimit_y);
      stream.next(m.right_eyebrow_center_x);
      stream.next(m.right_eyebrow_center_y);
      stream.next(m.right_eyebrow_earSideLimit_x);
      stream.next(m.right_eyebrow_earSideLimit_y);
      stream.next(m.left_eyebrow_noseSideLimit_x);
      stream.next(m.left_eyebrow_noseSideLimit_y);
      stream.next(m.left_eyebrow_center_x);
      stream.next(m.left_eyebrow_center_y);
      stream.next(m.left_eyebrow_earSideLimit_x);
      stream.next(m.left_eyebrow_earSideLimit_y);
      stream.next(m.nose_bottomCenterLimit_x);
      stream.next(m.nose_bottomCenterLimit_y);
      stream.next(m.nose_bottomLeftLimit_x);
      stream.next(m.nose_bottomLeftLimit_y);
      stream.next(m.nose_bottomRightLimit_x);
      stream.next(m.nose_bottomRightLimit_y);
      stream.next(m.mouth_leftLimit_x);
      stream.next(m.mouth_leftLimit_y);
      stream.next(m.mouth_rightLimit_x);
      stream.next(m.mouth_rightLimit_y);
      stream.next(m.mouth_topLimit_x);
      stream.next(m.mouth_topLimit_y);
      stream.next(m.mouth_bottomLimit_x);
      stream.next(m.mouth_bottomLimit_y);
      stream.next(m.mouth_midTopLeftLimit_x);
      stream.next(m.mouth_midTopLeftLimit_y);
      stream.next(m.mouth_midTopRightLimit_x);
      stream.next(m.mouth_midTopRightLimit_y);
      stream.next(m.mouth_midBottomRightLimit_x);
      stream.next(m.mouth_midBottomRightLimit_y);
      stream.next(m.mouth_midBottomLeftLimit_x);
      stream.next(m.mouth_midBottomLeftLimit_y);
      stream.next(m.camera_0_pose);
      stream.next(m.camera_1_pose);
      stream.next(m.camera_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FaceDetected_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nao_interaction_msgs::FaceDetected_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nao_interaction_msgs::FaceDetected_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "face_id: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.face_id);
    s << indent << "score_reco: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.score_reco);
    s << indent << "face_label: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.face_label);
    s << indent << "shape_alpha: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.shape_alpha);
    s << indent << "shape_beta: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.shape_beta);
    s << indent << "shape_sizeX: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.shape_sizeX);
    s << indent << "shape_sizeY: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.shape_sizeY);
    s << indent << "right_eye_eyeCenter_x: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.right_eye_eyeCenter_x);
    s << indent << "right_eye_eyeCenter_y: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.right_eye_eyeCenter_y);
    s << indent << "right_eye_noseSideLimit_x: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.right_eye_noseSideLimit_x);
    s << indent << "right_eye_noseSideLimit_y: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.right_eye_noseSideLimit_y);
    s << indent << "right_eye_earSideLimit_x: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.right_eye_earSideLimit_x);
    s << indent << "right_eye_earSideLimit_y: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.right_eye_earSideLimit_y);
    s << indent << "right_eye_topLimit_x: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.right_eye_topLimit_x);
    s << indent << "right_eye_topLimit_y: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.right_eye_topLimit_y);
    s << indent << "right_eye_bottomLimit_x: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.right_eye_bottomLimit_x);
    s << indent << "right_eye_bottomLimit_y: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.right_eye_bottomLimit_y);
    s << indent << "right_eye_midTopEarLimit_x: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.right_eye_midTopEarLimit_x);
    s << indent << "right_eye_midTopEarLimit_y: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.right_eye_midTopEarLimit_y);
    s << indent << "right_eye_midTopNoseLimit_x: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.right_eye_midTopNoseLimit_x);
    s << indent << "right_eye_midTopNoseLimit_y: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.right_eye_midTopNoseLimit_y);
    s << indent << "left_eye_eyeCenter_x: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.left_eye_eyeCenter_x);
    s << indent << "left_eye_eyeCenter_y: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.left_eye_eyeCenter_y);
    s << indent << "left_eye_noseSideLimit_x: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.left_eye_noseSideLimit_x);
    s << indent << "left_eye_noseSideLimit_y: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.left_eye_noseSideLimit_y);
    s << indent << "left_eye_earSideLimit_x: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.left_eye_earSideLimit_x);
    s << indent << "left_eye_earSideLimit_y: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.left_eye_earSideLimit_y);
    s << indent << "left_eye_topLimit_x: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.left_eye_topLimit_x);
    s << indent << "left_eye_topLimit_y: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.left_eye_topLimit_y);
    s << indent << "left_eye_bottomLimit_x: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.left_eye_bottomLimit_x);
    s << indent << "left_eye_bottomLimit_y: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.left_eye_bottomLimit_y);
    s << indent << "left_eye_midTopEarLimit_x: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.left_eye_midTopEarLimit_x);
    s << indent << "left_eye_midTopEarLimit_y: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.left_eye_midTopEarLimit_y);
    s << indent << "left_eye_midTopNoseLimit_x: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.left_eye_midTopNoseLimit_x);
    s << indent << "left_eye_midTopNoseLimit_y: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.left_eye_midTopNoseLimit_y);
    s << indent << "right_eyebrow_noseSideLimit_x: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.right_eyebrow_noseSideLimit_x);
    s << indent << "right_eyebrow_noseSideLimit_y: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.right_eyebrow_noseSideLimit_y);
    s << indent << "right_eyebrow_center_x: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.right_eyebrow_center_x);
    s << indent << "right_eyebrow_center_y: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.right_eyebrow_center_y);
    s << indent << "right_eyebrow_earSideLimit_x: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.right_eyebrow_earSideLimit_x);
    s << indent << "right_eyebrow_earSideLimit_y: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.right_eyebrow_earSideLimit_y);
    s << indent << "left_eyebrow_noseSideLimit_x: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.left_eyebrow_noseSideLimit_x);
    s << indent << "left_eyebrow_noseSideLimit_y: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.left_eyebrow_noseSideLimit_y);
    s << indent << "left_eyebrow_center_x: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.left_eyebrow_center_x);
    s << indent << "left_eyebrow_center_y: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.left_eyebrow_center_y);
    s << indent << "left_eyebrow_earSideLimit_x: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.left_eyebrow_earSideLimit_x);
    s << indent << "left_eyebrow_earSideLimit_y: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.left_eyebrow_earSideLimit_y);
    s << indent << "nose_bottomCenterLimit_x: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.nose_bottomCenterLimit_x);
    s << indent << "nose_bottomCenterLimit_y: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.nose_bottomCenterLimit_y);
    s << indent << "nose_bottomLeftLimit_x: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.nose_bottomLeftLimit_x);
    s << indent << "nose_bottomLeftLimit_y: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.nose_bottomLeftLimit_y);
    s << indent << "nose_bottomRightLimit_x: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.nose_bottomRightLimit_x);
    s << indent << "nose_bottomRightLimit_y: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.nose_bottomRightLimit_y);
    s << indent << "mouth_leftLimit_x: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.mouth_leftLimit_x);
    s << indent << "mouth_leftLimit_y: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.mouth_leftLimit_y);
    s << indent << "mouth_rightLimit_x: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.mouth_rightLimit_x);
    s << indent << "mouth_rightLimit_y: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.mouth_rightLimit_y);
    s << indent << "mouth_topLimit_x: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.mouth_topLimit_x);
    s << indent << "mouth_topLimit_y: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.mouth_topLimit_y);
    s << indent << "mouth_bottomLimit_x: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.mouth_bottomLimit_x);
    s << indent << "mouth_bottomLimit_y: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.mouth_bottomLimit_y);
    s << indent << "mouth_midTopLeftLimit_x: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.mouth_midTopLeftLimit_x);
    s << indent << "mouth_midTopLeftLimit_y: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.mouth_midTopLeftLimit_y);
    s << indent << "mouth_midTopRightLimit_x: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.mouth_midTopRightLimit_x);
    s << indent << "mouth_midTopRightLimit_y: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.mouth_midTopRightLimit_y);
    s << indent << "mouth_midBottomRightLimit_x: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.mouth_midBottomRightLimit_x);
    s << indent << "mouth_midBottomRightLimit_y: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.mouth_midBottomRightLimit_y);
    s << indent << "mouth_midBottomLeftLimit_x: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.mouth_midBottomLeftLimit_x);
    s << indent << "mouth_midBottomLeftLimit_y: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.mouth_midBottomLeftLimit_y);
    s << indent << "camera_0_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.camera_0_pose);
    s << indent << "camera_1_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.camera_1_pose);
    s << indent << "camera_id: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.camera_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAO_INTERACTION_MSGS_MESSAGE_FACEDETECTED_H
