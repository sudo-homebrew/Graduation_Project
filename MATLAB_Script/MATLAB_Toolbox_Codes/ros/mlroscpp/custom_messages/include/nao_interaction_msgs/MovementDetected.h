// Generated by gencpp from file nao_interaction_msgs/MovementDetected.msg
// DO NOT EDIT!


#ifndef NAO_INTERACTION_MSGS_MESSAGE_MOVEMENTDETECTED_H
#define NAO_INTERACTION_MSGS_MESSAGE_MOVEMENTDETECTED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace nao_interaction_msgs
{
template <class ContainerAllocator>
struct MovementDetected_
{
  typedef MovementDetected_<ContainerAllocator> Type;

  MovementDetected_()
    : header()
    , gravity_center()
    , mean_velocity()
    , points_poses()
    , points_speeds()  {
    }
  MovementDetected_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , gravity_center(_alloc)
    , mean_velocity(_alloc)
    , points_poses(_alloc)
    , points_speeds(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _gravity_center_type;
  _gravity_center_type gravity_center;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _mean_velocity_type;
  _mean_velocity_type mean_velocity;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _points_poses_type;
  _points_poses_type points_poses;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _points_speeds_type;
  _points_speeds_type points_speeds;





  typedef boost::shared_ptr< ::nao_interaction_msgs::MovementDetected_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nao_interaction_msgs::MovementDetected_<ContainerAllocator> const> ConstPtr;

}; // struct MovementDetected_

typedef ::nao_interaction_msgs::MovementDetected_<std::allocator<void> > MovementDetected;

typedef boost::shared_ptr< ::nao_interaction_msgs::MovementDetected > MovementDetectedPtr;
typedef boost::shared_ptr< ::nao_interaction_msgs::MovementDetected const> MovementDetectedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nao_interaction_msgs::MovementDetected_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nao_interaction_msgs::MovementDetected_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace nao_interaction_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'nao_interaction_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/nao_interaction_msgs/msg'], 'geometry_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/geometry_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::nao_interaction_msgs::MovementDetected_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nao_interaction_msgs::MovementDetected_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nao_interaction_msgs::MovementDetected_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nao_interaction_msgs::MovementDetected_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nao_interaction_msgs::MovementDetected_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nao_interaction_msgs::MovementDetected_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nao_interaction_msgs::MovementDetected_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ae24dbf38f441d6f1cae72eb224ecd17";
  }

  static const char* value(const ::nao_interaction_msgs::MovementDetected_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xae24dbf38f441d6fULL;
  static const uint64_t static_value2 = 0x1cae72eb224ecd17ULL;
};

template<class ContainerAllocator>
struct DataType< ::nao_interaction_msgs::MovementDetected_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nao_interaction_msgs/MovementDetected";
  }

  static const char* value(const ::nao_interaction_msgs::MovementDetected_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nao_interaction_msgs::MovementDetected_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message emitted by Nao movement detection module.\n"
"# Contains information about the motion detection module\n"
"\n"
"Header header\n"
"\n"
"# [x,y] contains the angular coordinates (in radians) of the center of gravity of the cluster\n"
"geometry_msgs/Point gravity_center\n"
"\n"
"# [vx,vy] corresponds to the mean velocity of the cluster, computed from the velocity of all the moving points. It is an angular velocity, expressed in radians/s\n"
"geometry_msgs/Point mean_velocity\n"
"\n"
"# Coordinates of the moving points\n"
"geometry_msgs/Point[] points_poses\n"
"\n"
"# Velocities of the moving points\n"
"geometry_msgs/Point[] points_speeds\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::nao_interaction_msgs::MovementDetected_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nao_interaction_msgs::MovementDetected_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.gravity_center);
      stream.next(m.mean_velocity);
      stream.next(m.points_poses);
      stream.next(m.points_speeds);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MovementDetected_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nao_interaction_msgs::MovementDetected_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nao_interaction_msgs::MovementDetected_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "gravity_center: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.gravity_center);
    s << indent << "mean_velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.mean_velocity);
    s << indent << "points_poses[]" << std::endl;
    for (size_t i = 0; i < v.points_poses.size(); ++i)
    {
      s << indent << "  points_poses[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.points_poses[i]);
    }
    s << indent << "points_speeds[]" << std::endl;
    for (size_t i = 0; i < v.points_speeds.size(); ++i)
    {
      s << indent << "  points_speeds[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.points_speeds[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAO_INTERACTION_MSGS_MESSAGE_MOVEMENTDETECTED_H
