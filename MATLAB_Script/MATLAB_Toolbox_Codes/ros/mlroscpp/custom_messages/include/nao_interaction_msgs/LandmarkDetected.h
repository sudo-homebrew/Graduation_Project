// Generated by gencpp from file nao_interaction_msgs/LandmarkDetected.msg
// DO NOT EDIT!


#ifndef NAO_INTERACTION_MSGS_MESSAGE_LANDMARKDETECTED_H
#define NAO_INTERACTION_MSGS_MESSAGE_LANDMARKDETECTED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <std_msgs/Float32.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>
#include <std_msgs/String.h>

namespace nao_interaction_msgs
{
template <class ContainerAllocator>
struct LandmarkDetected_
{
  typedef LandmarkDetected_<ContainerAllocator> Type;

  LandmarkDetected_()
    : header()
    , mark_ids()
    , shape_alpha()
    , shape_beta()
    , shape_sizex()
    , shape_sizey()
    , camera_local_pose()
    , camera_world_pose()
    , camera_name()  {
    }
  LandmarkDetected_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , mark_ids(_alloc)
    , shape_alpha(_alloc)
    , shape_beta(_alloc)
    , shape_sizex(_alloc)
    , shape_sizey(_alloc)
    , camera_local_pose(_alloc)
    , camera_world_pose(_alloc)
    , camera_name(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::std_msgs::Int32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::Int32_<ContainerAllocator> >::other >  _mark_ids_type;
  _mark_ids_type mark_ids;

   typedef std::vector< ::std_msgs::Float32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::Float32_<ContainerAllocator> >::other >  _shape_alpha_type;
  _shape_alpha_type shape_alpha;

   typedef std::vector< ::std_msgs::Float32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::Float32_<ContainerAllocator> >::other >  _shape_beta_type;
  _shape_beta_type shape_beta;

   typedef std::vector< ::std_msgs::Float32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::Float32_<ContainerAllocator> >::other >  _shape_sizex_type;
  _shape_sizex_type shape_sizex;

   typedef std::vector< ::std_msgs::Float32_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::Float32_<ContainerAllocator> >::other >  _shape_sizey_type;
  _shape_sizey_type shape_sizey;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _camera_local_pose_type;
  _camera_local_pose_type camera_local_pose;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _camera_world_pose_type;
  _camera_world_pose_type camera_world_pose;

   typedef  ::std_msgs::String_<ContainerAllocator>  _camera_name_type;
  _camera_name_type camera_name;





  typedef boost::shared_ptr< ::nao_interaction_msgs::LandmarkDetected_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nao_interaction_msgs::LandmarkDetected_<ContainerAllocator> const> ConstPtr;

}; // struct LandmarkDetected_

typedef ::nao_interaction_msgs::LandmarkDetected_<std::allocator<void> > LandmarkDetected;

typedef boost::shared_ptr< ::nao_interaction_msgs::LandmarkDetected > LandmarkDetectedPtr;
typedef boost::shared_ptr< ::nao_interaction_msgs::LandmarkDetected const> LandmarkDetectedConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nao_interaction_msgs::LandmarkDetected_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nao_interaction_msgs::LandmarkDetected_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace nao_interaction_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg', '/mathworks/devel/sbs/31/pmurali.Brobot.j1329247.2/matlab/sys/ros1/glnxa64/ros1/share/std_msgs/cmake/../msg'], 'nao_interaction_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/nao_interaction_msgs/msg'], 'geometry_msgs': ['/mathworks/home/pmurali/Documents/Working/matlab_msg_gen_ros1/glnxa64/src/geometry_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::nao_interaction_msgs::LandmarkDetected_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nao_interaction_msgs::LandmarkDetected_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nao_interaction_msgs::LandmarkDetected_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nao_interaction_msgs::LandmarkDetected_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nao_interaction_msgs::LandmarkDetected_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nao_interaction_msgs::LandmarkDetected_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nao_interaction_msgs::LandmarkDetected_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4d97e85c0a306501da5d22b795cdac76";
  }

  static const char* value(const ::nao_interaction_msgs::LandmarkDetected_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4d97e85c0a306501ULL;
  static const uint64_t static_value2 = 0xda5d22b795cdac76ULL;
};

template<class ContainerAllocator>
struct DataType< ::nao_interaction_msgs::LandmarkDetected_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nao_interaction_msgs/LandmarkDetected";
  }

  static const char* value(const ::nao_interaction_msgs::LandmarkDetected_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nao_interaction_msgs::LandmarkDetected_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message emitted by Nao landmark detection module.\n"
"# Contains information about the landmarks detected\n"
"\n"
"Header header\n"
"\n"
"# Vectors holding the landmark information\n"
"std_msgs/Int32[] mark_ids\n"
"std_msgs/Float32[] shape_alpha\n"
"std_msgs/Float32[] shape_beta\n"
"std_msgs/Float32[] shape_sizex\n"
"std_msgs/Float32[] shape_sizey\n"
"\n"
"geometry_msgs/Pose camera_local_pose\n"
"\n"
"geometry_msgs/Pose camera_world_pose\n"
"\n"
"std_msgs/String camera_name\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Int32\n"
"int32 data\n"
"================================================================================\n"
"MSG: std_msgs/Float32\n"
"float32 data\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of postion and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
;
  }

  static const char* value(const ::nao_interaction_msgs::LandmarkDetected_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nao_interaction_msgs::LandmarkDetected_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.mark_ids);
      stream.next(m.shape_alpha);
      stream.next(m.shape_beta);
      stream.next(m.shape_sizex);
      stream.next(m.shape_sizey);
      stream.next(m.camera_local_pose);
      stream.next(m.camera_world_pose);
      stream.next(m.camera_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LandmarkDetected_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nao_interaction_msgs::LandmarkDetected_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nao_interaction_msgs::LandmarkDetected_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "mark_ids[]" << std::endl;
    for (size_t i = 0; i < v.mark_ids.size(); ++i)
    {
      s << indent << "  mark_ids[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "    ", v.mark_ids[i]);
    }
    s << indent << "shape_alpha[]" << std::endl;
    for (size_t i = 0; i < v.shape_alpha.size(); ++i)
    {
      s << indent << "  shape_alpha[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "    ", v.shape_alpha[i]);
    }
    s << indent << "shape_beta[]" << std::endl;
    for (size_t i = 0; i < v.shape_beta.size(); ++i)
    {
      s << indent << "  shape_beta[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "    ", v.shape_beta[i]);
    }
    s << indent << "shape_sizex[]" << std::endl;
    for (size_t i = 0; i < v.shape_sizex.size(); ++i)
    {
      s << indent << "  shape_sizex[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "    ", v.shape_sizex[i]);
    }
    s << indent << "shape_sizey[]" << std::endl;
    for (size_t i = 0; i < v.shape_sizey.size(); ++i)
    {
      s << indent << "  shape_sizey[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "    ", v.shape_sizey[i]);
    }
    s << indent << "camera_local_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.camera_local_pose);
    s << indent << "camera_world_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.camera_world_pose);
    s << indent << "camera_name: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.camera_name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAO_INTERACTION_MSGS_MESSAGE_LANDMARKDETECTED_H
