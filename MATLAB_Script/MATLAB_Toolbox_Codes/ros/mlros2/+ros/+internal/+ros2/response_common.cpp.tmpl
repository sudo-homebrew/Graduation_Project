
class {%upper(msgInfo.pkgName)%}_EXPORT {%msgInfo.pkgName%}_msg_{%msgInfo.msgName%}Response_common : public MATLABROS2MsgInterface<{%msgInfo.msgCppClassName%}> {
  public:
    virtual ~{%msgInfo.pkgName%}_msg_{%msgInfo.msgName%}Response_common(){}
    virtual void copy_from_struct({%msgInfo.msgCppClassName%}* msg, const matlab::data::Struct& arr, MultiLibLoader loader); 
    virtual MDArray_T get_arr(MDFactory_T& factory, const {%msgInfo.msgCppClassName%}* msg, MultiLibLoader loader, size_t size = 1);
};
  void {%msgInfo.pkgName%}_msg_{%msgInfo.msgName%}Response_common::copy_from_struct({%msgInfo.msgCppClassName%}* msg, const matlab::data::Struct& arr,
               MultiLibLoader loader) {
    {% for i = numel(fieldNames) %}
    {% var field = eval(['msgFields.', fieldNames{i}]) %}
    {% if isfield(field,'MLdataType') && ~field.inCopy && ((isnumeric(field.constantValue) && isnan(field.constantValue)) || (~isnumeric(field.constantValue) && isempty(field.constantValue))) %}
    try {
        //{%fieldNames{i}%}
        {% var pubLine = field.pubLine %}
        {% for ii = numel(pubLine) %}
        {% pubLine{ii} %}
        {% endfor %}
    } catch (matlab::data::InvalidFieldNameException&) {
        throw std::invalid_argument("Field '{%fieldNames{i}%}' is missing.");
    } catch (matlab::Exception&) {
        throw std::invalid_argument("Field '{%fieldNames{i}%}' is wrong type; expected a {%field.MLdataType%}.");
    }
    {% endif %}
    {% endfor %}
  }

  //----------------------------------------------------------------------------
  MDArray_T {%msgInfo.pkgName%}_msg_{%msgInfo.msgName%}Response_common::get_arr(MDFactory_T& factory, const {%msgInfo.msgCppClassName%}* msg,
       MultiLibLoader loader, size_t size) {
    {% subConstructor %}
    for(size_t ctr = 0; ctr < size; ctr++){
    outArray[ctr]["MessageType"] = factory.createCharArray("{%MessageType%}");
    {% for i = numel(fieldNames) %}
    {% var field = eval(['msgFields.', fieldNames{i}]) %}
    {% if ~isfield(field,'copyData') && isfield(field,'subConstructor') && ~isempty(field.fieldNames)%}
    {% field.subConstructor %}
    {% endif %}
    {% if (~isfield(field,'inCopy') || ~field.inCopy) && isfield(field,'subLine') && ~isempty(field.subLine) %}
    // {% fieldNames{i} %}
    {% var subLine = field.subLine %}
    {% for ii = numel(subLine) %}
    {% subLine{ii} %}
    {% endfor %}
    {% endif %}
    {% endfor %}
    {% for i = numel(fieldNames) %}
    {% var field = eval(['msgFields.', fieldNames{end-i+1}]) %}
    {% if (~isfield(field,'inCopy') || ~field.inCopy) && isfield(field,'endSubLine') && ~isempty(field.endSubLine) %}
    {% var subLine = field.endSubLine %}
    {% for ii = numel(subLine) %}
    {% subLine{ii} %}
    {% endfor %}
    {% endif %}
    {% endfor %}
    }
    return std::move(outArray);
  } 

class {%upper(msgInfo.pkgName)%}_EXPORT {%msgInfo.pkgName%}_{%msgInfo.msgName%}_service : public ROS2MsgElementInterfaceFactory {
  public:
    virtual ~{%msgInfo.pkgName%}_{%msgInfo.msgName%}_service(){}
    virtual std::shared_ptr<MATLABPublisherInterface> generatePublisherInterface(ElementType type);
    virtual std::shared_ptr<MATLABSubscriberInterface> generateSubscriberInterface(ElementType type);
    virtual std::shared_ptr<MATLABSvcServerInterface> generateSvcServerInterface();
    virtual std::shared_ptr<MATLABSvcClientInterface> generateSvcClientInterface();
};  
  std::shared_ptr<MATLABPublisherInterface> 
          {%msgInfo.pkgName%}_{%msgInfo.msgName%}_service::generatePublisherInterface(ElementType type){
    std::shared_ptr<MATLABPublisherInterface> ptr;
    if(type == eRequest){
        ptr = std::make_shared<ROS2PublisherImpl<{%msgInfo.pkgName%}::srv::{%msgInfo.msgName%}::Request,{%msgInfo.pkgName%}_msg_{%msgInfo.msgName%}Request_common>>();
    }else if(type == eResponse){
        ptr = std::make_shared<ROS2PublisherImpl<{%msgInfo.pkgName%}::srv::{%msgInfo.msgName%}::Response,{%msgInfo.pkgName%}_msg_{%msgInfo.msgName%}Response_common>>();
    }else{
        throw std::invalid_argument("Wrong input, Expected 'Request' or 'Response'");
    }
    return ptr;
  }
  std::shared_ptr<MATLABSubscriberInterface> 
          {%msgInfo.pkgName%}_{%msgInfo.msgName%}_service::generateSubscriberInterface(ElementType type){
    std::shared_ptr<MATLABSubscriberInterface> ptr;
    if(type == eRequest){
        ptr = std::make_shared<ROS2SubscriberImpl<{%msgInfo.pkgName%}::srv::{%msgInfo.msgName%}::Request,{%msgInfo.pkgName%}_msg_{%msgInfo.msgName%}Request_common>>();
    }else if(type == eResponse){
        ptr = std::make_shared<ROS2SubscriberImpl<{%msgInfo.pkgName%}::srv::{%msgInfo.msgName%}::Response,{%msgInfo.pkgName%}_msg_{%msgInfo.msgName%}Response_common>>();
    }else{
        throw std::invalid_argument("Wrong input, Expected 'Request' or 'Response'");
    }
    return ptr;
  }
  std::shared_ptr<MATLABSvcServerInterface> 
          {%msgInfo.pkgName%}_{%msgInfo.msgName%}_service::generateSvcServerInterface(){
    return std::make_shared<ROS2SvcServerImpl<{%msgInfo.pkgName%}::srv::{%msgInfo.msgName%},{%msgInfo.pkgName%}::srv::{%msgInfo.msgName%}::Request,{%msgInfo.pkgName%}::srv::{%msgInfo.msgName%}::Response,{%msgInfo.pkgName%}_msg_{%msgInfo.msgName%}Request_common,{%msgInfo.pkgName%}_msg_{%msgInfo.msgName%}Response_common>>();
  }
  std::shared_ptr<MATLABSvcClientInterface> 
          {%msgInfo.pkgName%}_{%msgInfo.msgName%}_service::generateSvcClientInterface(){
    return std::make_shared<ROS2SvcClientImpl<{%msgInfo.pkgName%}::srv::{%msgInfo.msgName%},{%msgInfo.pkgName%}::srv::{%msgInfo.msgName%}::Request,{%msgInfo.pkgName%}::srv::{%msgInfo.msgName%}::Response,{%msgInfo.pkgName%}_msg_{%msgInfo.msgName%}Request_common,{%msgInfo.pkgName%}_msg_{%msgInfo.msgName%}Response_common,rclcpp::Client<{%msgInfo.pkgName%}::srv::{%msgInfo.msgName%}>::SharedFuture>>();
  }
  
#include "class_loader/register_macro.hpp"
// Register the component with class_loader.
// This acts as a sort of entry point, allowing the component to be discoverable when its library
// is being loaded into a running process.
CLASS_LOADER_REGISTER_CLASS({%msgInfo.pkgName%}_msg_{%msgInfo.msgName%}Request_common, MATLABROS2MsgInterface<{%msgInfo.pkgName%}::srv::{%msgInfo.msgName%}::Request>)
CLASS_LOADER_REGISTER_CLASS({%msgInfo.pkgName%}_msg_{%msgInfo.msgName%}Response_common, MATLABROS2MsgInterface<{%msgInfo.pkgName%}::srv::{%msgInfo.msgName%}::Response>)
CLASS_LOADER_REGISTER_CLASS({%msgInfo.pkgName%}_{%msgInfo.msgName%}_service, ROS2MsgElementInterfaceFactory)
#ifdef _MSC_VER
#pragma warning(pop)
#else
#pragma GCC diagnostic pop
#endif //_MSC_VER
//gen-1
