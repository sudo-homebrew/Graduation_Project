{% if (false) %}
// Copyright 2019-2022 The MathWorks, Inc.
{% endif %}

{% var slCoderVer = ver('simulinkcoder') %}
//
// File rosnodeinterface.h
//
// Code generated for Simulink model '{%ModelName%}'.
//
// Model version                  : {% get_param(ModelName,'ModelVersion') %}
// Simulink Coder version         : {% [slCoderVer.Version, ' ', slCoderVer.Release, ' ', slCoderVer.Date] %}
// C/C++ source code generated on : {% datestr(now,'ddd mmm dd HH:MM:SS YYYY') %}
//

#ifndef _ROS_MATLAB_NODEINTERFACE_
#define _ROS_MATLAB_NODEINTERFACE_
#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable : 4265)
#pragma warning(disable : 4458)
#pragma warning(disable : 4100)
#else
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"
#pragma GCC diagnostic ignored "-Wredundant-decls"
#pragma GCC diagnostic ignored "-Wnon-virtual-dtor"
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wshadow"
#endif //_MSC_VER

#include "{%ModelName%}.h"
#include "{%ModelName%}_types.h"
#include <thread>
#include <atomic>
#include <chrono>
#include <utility>
#include <mutex>
#include <condition_variable>
#include <ros/ros.h>
{% if (ROS.ROSTimeStepping) %}
#include "std_msgs/Bool.h"
#include "std_msgs/String.h"
#include "rosgraph_msgs/Clock.h"
{% endif %}

namespace ros {
namespace matlab {
  //Semaphore using std::CV and std::mutex
  class Semaphore {
  public:
    std::mutex mMutex;
    std::condition_variable mCV;
    std::atomic_uint mCount;
    //
    Semaphore(int count = 0)
      : mCount(count) {
      }
    //
    inline void notify() {
      std::unique_lock<std::mutex> lock(mMutex);
      mCount++;
      mCV.notify_all();
    }
    //
    inline void wait() {
      std::unique_lock<std::mutex> lock(mMutex);
      while (mCount == 0) {
        mCV.wait(lock);
      }
      if (mCount)
        mCount--;
    }
  };
  //NodeInterface
  class NodeInterface {
    NodeInterface(const NodeInterface& );
    NodeInterface& operator=(const NodeInterface& );
    //
    std::shared_ptr<ros::NodeHandle> mNode;
    std::shared_ptr<{%ModelClassName%}> mModel;
    Semaphore mBaseRateSem;
    std::shared_ptr<std::thread> mBaseRateThread;
    std::shared_ptr<std::thread> mSchedulerThread;
    //
    {% if ~isSingleTasking %}
    // MultiTasking: Rates: {%num2str(numel(SampleTimes))%}
    {% for i = numel(SampleTimes) %}
    {% if SampleTimes(i).TID ~= 0 %}
    Semaphore mSubRate{%num2str(SampleTimes(i).TID)%}Sem;
    std::shared_ptr<std::thread> mSubRate{%num2str(SampleTimes(i).TID)%}Thread;
    {% endif %}
    {% endfor %}
    {% endif %}
    //
    Semaphore mStopSem;
    volatile boolean_T mRunModel;
	{% if ExtmodeInfo.ExtmodeSim && ExtmodeInfo.RunInBackground % we need background thread %}
	// External mode background thread
	std::shared_ptr<std::thread> mExtModeThread;
	{% endif %}
  public:
    NodeInterface();
    ~NodeInterface();
    //
    void initialize(int argc, char ** argv);
    int run();
    void stop(void);
    void terminate(void);
    //
    boolean_T getStopRequestedFlag(void);
    void schedulerThread(void);
    {% if (ROS.ROSTimeStepping) %}
    void rosClockSubscriberCallback(const rosgraph_msgs::Clock&);
    {% endif %}

    void baseRateTask(void);
    {% if ~isSingleTasking %}
    {% for i = numel(SampleTimes) %}
    {% if (SampleTimes(i).TID ~= 0) %}
    void subRate{%num2str(SampleTimes(i).TID)%}Task(void);
    {% endif %}
    {% endfor %}
    {% endif %}
	{% if ExtmodeInfo.ExtmodeSim && ExtmodeInfo.RunInBackground % we need background thread %}
	void extmodeBackgroundTask(void);
	{% endif %}
    std::shared_ptr<ros::NodeHandle> getNode() {
      return mNode;
    }
    //
    std::shared_ptr<{%ModelClassName%}> getModel() {
      return mModel;
    }
  }; //class NodeInterface
  std::shared_ptr<ros::matlab::NodeInterface> getNodeInterface();
}//namespace matlab
}//namespace ros

#ifdef _MSC_VER
#pragma warning(pop)
#else
#pragma GCC diagnostic pop
#endif //_MSC_VER
#endif //_ROS_MATLAB_ROS2CGEN_MULTIRATE_
