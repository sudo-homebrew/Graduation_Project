function [out,NVout] = gridureal(sys,varargin)
%GRIDUREAL  Grids UREAL parameters over their range.
%
%   B = GRIDUREAL(A,N) evaluates A for N samples of the uncertain real 
%   parameters in A and returns the values as an array B of size [SIZE(A) N].  
%   The N samples are generated by uniformly gridding each UREAL in A 
%   with N points (N=1 uses the nominal of each UREAL) and then evaluating 
%   A at the N "diagonal" points in the parameter space. For example, if 
%   there are 3 UREALs a,b,c in A, then A is evaluated at:
%      (a(1),b(1),c(1)) ; ...; (a(N),b(N),c(N))
%   If A includes other uncertain elements than UREALs, then B is itself
%   an uncertain model. GRIDUREAL(A) is the same as GRIDUREAL(A,1). 
%
%   [B,SAMPLES] = GRIDUREAL(A,N) additionally returns the sampled values 
%   of the uncertain reals. SAMPLES is an N-by-1 struct array with one field 
%   per uncertain real parameter.
%
%   [B,SAMPLES] = GRIDUREAL(A,NAMES,N) samples only the uncertain reals 
%   listed in the NAMES variable (CELL or CHAR array). Any entries of NAMES 
%   that are not elements of A are ignored.
%
%   [B,SAMPLES] = GRIDUREAL(A,NAMES1,N1,NAMES2,N2,...) takes N1 samples of 
%   the uncertain elements listed in NAMES1, and N2 samples of the uncertain 
%   elements listed in NAMES2 and so on. The resulting model B has size
%   [SIZE(A) N1 N2 ...].
% 
%   EXAMPLE 1: 
%      % Create two UREALS
%      gamma = ureal('gamma',4);
%      tau = ureal('tau',.5,'Percentage',30);
%      % Create Uncertain Plant
%      P = tf(gamma,[tau 1]);
%      % Create Integral Controller based on nominal plant parameters
%      KI = 1/(2*tau.Nominal*gamma.Nominal);
%      C = tf(KI,[1 0]);
%      % Create Uncertain Closed-Loop System
%      CLP = feedback(P*C,1);
%      % Plot (many) Uncertain Plant step responses 
%      subplot(2,1,1); step(gridureal(P,20))
%      % Plot (many) Uncertain Closed-Loop step responses
%      subplot(2,1,2); step(gridureal(CLP,20))
% 
%   EXAMPLE 2:
%      % Make 4 UREALs, and a simple uncertain matrix
%      a=ureal('a',1); b=ureal('b',2); c=ureal('c',3); d=ureal('d',4);
%      m = [a b;c d];
%      % Sample the (a,b) space in 5 places, and the (c,d) space in 3
%      % places, and evaluate m at the 15 "grid"-points 
%      m1 = gridureal(m,{'a';'b'},5,{'c';'d'},3);
%      % Sample the (a,b,c,d) space at 15 places, and evaluate m at
%      % these 15 points 
%      m2 = gridureal(m,{'a';'b';'c';'d'},15);
%      % The 2,1 entry of m1 (which is c) only takes on 3 distinct values,...
%      subplot(2,1,1)
%      histogram(m1(2,1,:),'BinWidth',0.1)
%      % while the 2,1 entry of m2 (which is also c) takes
%      % on 15 distinct values uniformly through its range
%      subplot(2,1,2)
%      histogram(m2(2,1,:),'BinWidth',0.1)
%
%   See also USAMPLE, USUBS.

%   Copyright 2009-2011 The MathWorks, Inc.
[varargin{:}] = convertStringsToChars(varargin{:});
if ~isUncertain(sys)
   error('SYS must be an uncertain object');
elseif isa(sys,'UncertainBlock')
   if isa(sys,'StaticModel')
      sys = umat(sys);
   else
      sys = uss(sys);
   end
end

nin = nargin;
okpas = 1;
if nargin>=2 && isequal(varargin{end},-1)
   okpas = 0;
   nin = nin - 1;
end
if nin==1
   names = fieldnames(sys.Uncertainty);
   %names = pvget(sys,'UNames');
   Ln = max([1 length(names)]);
   N = num2cell(ones(Ln,1));
   grouping = ones(Ln,1);
elseif nin==2
   if isa(varargin{1},'double') && ndims(varargin{1})==2 && ...
         imag(varargin{1})==0 && floor(varargin{1})==ceil(varargin{1}) && ...
         varargin{1}>0
      names = fieldnames(sys.Uncertainty);
      %names = pvget(sys,'UNames');
      Ln = max([1 length(names)]);
      N = num2cell(repmat(varargin{1},[Ln 1]));
      grouping = ones(Ln,1);
   else
      error('In 2-argument call, the 2nd argument should be a positive integer.');
   end
elseif ceil((nin+1)/2)==floor((nin+1)/2)
   [names,N,grouping] = nvlist(varargin{1:nin-1});   
else
   error('Invalid Inputs');
end
[~,uslots] = unique(grouping);
Nslots = [N{uslots}];
Nslots = Nslots(:)';
Fslots = ones(size(Nslots));

% Suppose A is 6x7, then B=gridureal(A,'a',9) gives B=6x7x9(x1), 
% then C = gridureal(B,'fred',4) might give C=6x7x9x1x4, or should
% it give 6x7x9x4.  Well, it should certainly give the same as
% Ctilde = gridureal(A,'a',9,'fred',4), which would have to be 6x7x9x4.
% This implies that ALL trailing one array dimensions are ignored!
% This creates one problem though.  gridureal(A,'p1',N,'p2',3) will
% be different dimension than gridureal(gridureal(A,'p1',N),'p2',3)
% if N==1, but will be the same dimension if N>1.
sz = size(sys);
nad = length(sz) - 2;
ad = sz(3:end);
if nad==2 && ad(2)==1
   nad = 1;
   %ad = ad(1);
end
adpad = ones(1,nad);


L = length(names);
values = cell(L,1);
cvalues = cell(L,1);
sysU = sys.Uncertainty;
for i=1:L
   pflag = isfield(sysU,names{i});   
   if pflag
      Fslots(grouping(i)) = Nslots(grouping(i));
   end
end
Nslots = Fslots;

keepnames = [];
for i=1:L
   pflag = isfield(sysU,names{i});   
   if pflag
      ac = sysU.(names{i});
      
      Nslotstmp = Nslots;
      Nslotstmp(grouping(i)) = 1;
      keepnames = [keepnames;i]; %#ok<*AGROW>
      nexd = length(sz) - 2 + (grouping(i)-1);
      pad = ones(1,nexd);
      if isa(ac,'ureal')
         tmp=ac.Range;
         if N{i}==1
             % Return the nominal for gridding of one point
             vv = reshape( sum(tmp)/2  ,[1 1 pad N{i}]);
         else   
             vv = reshape( linspace(tmp(1),tmp(2),N{i}) ,[1 1 pad N{i}]);
         end    
         if okpas==1
            vvg = repmat(vv,[1 1 adpad Nslotstmp]);
            cvv = reshape(num2cell(vvg,[1 2]),[adpad Nslots 1]);
         end
      else
          error('Can only grid uncertain real parameters');
      end   
      values{i} = vv;
      if okpas==1
         cvalues{i} = cvv;
      end
   end
end
%out = usubs(sys,names(keepnames),values(keepnames));
if okpas==1
   PNVcell = [names(keepnames) cvalues(keepnames)]';
else
   PNVcell = [names(keepnames) values(keepnames)]';
end
NVout = struct(PNVcell{:});
out = usubs(sys,NVout);
